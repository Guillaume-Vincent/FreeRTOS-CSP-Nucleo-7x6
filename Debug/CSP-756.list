
CSP-756.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f80  08013878  08013878  00023878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157f8  080157f8  000303d4  2**0
                  CONTENTS
  4 .ARM          00000008  080157f8  080157f8  000257f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015800  08015800  000303d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015800  08015800  00025800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015804  08015804  00025804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  08015808  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a5d8  200003d4  08015bdc  000303d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a9ac  08015bdc  0003a9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d04  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007dff  00000000  00000000  00062108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  00069f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002260  00000000  00000000  0006c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c6d3  00000000  00000000  0006e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033421  00000000  00000000  0007ad4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107e5e  00000000  00000000  000ae16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b5fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab14  00000000  00000000  001b601c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c0b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c0bfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003d4 	.word	0x200003d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801385c 	.word	0x0801385c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003d8 	.word	0x200003d8
 800020c:	0801385c 	.word	0x0801385c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <csp_conf_get_defaults+0x60>)
 8000efe:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <csp_conf_get_defaults+0x64>)
 8000f04:	609a      	str	r2, [r3, #8]
	conf->revision = "revision";
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <csp_conf_get_defaults+0x68>)
 8000f0a:	60da      	str	r2, [r3, #12]
	conf->conn_max = 6;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2206      	movs	r2, #6
 8000f10:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 6;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2206      	movs	r2, #6
 8000f16:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2219      	movs	r2, #25
 8000f1c:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2218      	movs	r2, #24
 8000f22:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2214      	movs	r2, #20
 8000f28:	751a      	strb	r2, [r3, #20]
	conf->buffers = 6;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2206      	movs	r2, #6
 8000f2e:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f36:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	08013878 	.word	0x08013878
 8000f50:	08013884 	.word	0x08013884
 8000f54:	0801388c 	.word	0x0801388c

08000f58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f5e:	f000 fcf4 	bl	800194a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f62:	f000 f8c3 	bl	80010ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f66:	f000 f98f 	bl	8001288 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000f6a:	f000 f95d 	bl	8001228 <MX_USART3_UART_Init>
	MX_CAN1_Init();
 8000f6e:	f000 f925 	bl	80011bc <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8000f72:	f00a fdd3 	bl	800bb1c <MX_USB_DEVICE_Init>
	HAL_CAN_Start(&hcan1);
 8000f76:	4849      	ldr	r0, [pc, #292]	; (800109c <main+0x144>)
 8000f78:	f000 fe33 	bl	8001be2 <HAL_CAN_Start>

	uint8_t address = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	csp_debug_level_t debug_level = CSP_INFO;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f8e:	e013      	b.n	8000fb8 <main+0x60>
		csp_debug_set_level(i, (i <= debug_level) ? true : false);
 8000f90:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	bf94      	ite	ls
 8000f9c:	2301      	movls	r3, #1
 8000f9e:	2300      	movhi	r3, #0
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f00c fb61 	bl	800d670 <csp_debug_set_level>
	for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 8000fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d9e7      	bls.n	8000f90 <main+0x38>
	}
	csp_log_info("Initialising CSP");
 8000fc0:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <main+0x148>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <main+0x78>
 8000fc8:	4936      	ldr	r1, [pc, #216]	; (80010a4 <main+0x14c>)
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f00c fae6 	bl	800d59c <do_csp_debug>
	csp_conf_t csp_conf;
	csp_conf_get_defaults(&csp_conf);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff89 	bl	8000eec <csp_conf_get_defaults>
	csp_conf.address = address;
 8000fda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fde:	723b      	strb	r3, [r7, #8]
	int error = csp_init(&csp_conf);
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00c fbf1 	bl	800d7cc <csp_init>
 8000fea:	62b8      	str	r0, [r7, #40]	; 0x28
	if (error != CSP_ERR_NONE) {
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <main+0xb2>
		csp_log_error("csp_init() failed, error: %d", error);
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <main+0x148>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <main+0xac>
 8000ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ffc:	492a      	ldr	r1, [pc, #168]	; (80010a8 <main+0x150>)
 8000ffe:	2000      	movs	r0, #0
 8001000:	f00c facc 	bl	800d59c <do_csp_debug>
		exit(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f00f fae7 	bl	80105d8 <exit>
	}
	/* Start router task with 1000 bytes of stack (priority is only supported on FreeRTOS) */
	csp_route_start_task(1000, 0);
 800100a:	2100      	movs	r1, #0
 800100c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001010:	f00d f8e4 	bl	800e1dc <csp_route_start_task>

	/* Add interface(s) */
	csp_iface_t *default_iface = NULL;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
	error = csp_can_stm32_open_and_add_interface(CSP_IF_CAN_DEFAULT_NAME, &default_iface);
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4823      	ldr	r0, [pc, #140]	; (80010ac <main+0x154>)
 800101e:	f00d f99d 	bl	800e35c <csp_can_stm32_open_and_add_interface>
 8001022:	62b8      	str	r0, [r7, #40]	; 0x28

	if (default_iface) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <main+0xe0>
		csp_rtable_set(CSP_DEFAULT_ROUTE, 0, default_iface, CSP_NO_VIA_ADDRESS);
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	23ff      	movs	r3, #255	; 0xff
 800102e:	2100      	movs	r1, #0
 8001030:	2020      	movs	r0, #32
 8001032:	f00d fb13 	bl	800e65c <csp_rtable_set>
 8001036:	e003      	b.n	8001040 <main+0xe8>
	} else {
		server_address = address;
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <main+0x158>)
 800103a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800103e:	7013      	strb	r3, [r2, #0]
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001040:	f007 faa4 	bl	800858c <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of USB_Message_Queue */
	USB_Message_QueueHandle = osMessageQueueNew (6, sizeof(char*), &USB_Message_Queue_attributes);
 8001044:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <main+0x15c>)
 8001046:	2104      	movs	r1, #4
 8001048:	2006      	movs	r0, #6
 800104a:	f007 fbdd 	bl	8008808 <osMessageQueueNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <main+0x160>)
 8001052:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of USB_Send */
	USB_SendHandle = osThreadNew(Start_USB_Send, NULL, &USB_Send_attributes);
 8001054:	4a19      	ldr	r2, [pc, #100]	; (80010bc <main+0x164>)
 8001056:	2100      	movs	r1, #0
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <main+0x168>)
 800105a:	f007 fb01 	bl	8008660 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <main+0x16c>)
 8001062:	6013      	str	r3, [r2, #0]

	/* creation of CAN_Send_Ping */
	CAN_Send_PingHandle = osThreadNew(Start_CAN_Send_Ping, NULL, &CAN_Send_Ping_attributes);
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <main+0x170>)
 8001066:	2100      	movs	r1, #0
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <main+0x174>)
 800106a:	f007 faf9 	bl	8008660 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <main+0x178>)
 8001072:	6013      	str	r3, [r2, #0]

	/* creation of Blink */
	BlinkHandle = osThreadNew(Start_Blink, NULL, &Blink_attributes);
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <main+0x17c>)
 8001076:	2100      	movs	r1, #0
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <main+0x180>)
 800107a:	f007 faf1 	bl	8008660 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <main+0x184>)
 8001082:	6013      	str	r3, [r2, #0]

	/* creation of USB_Receive */
	USB_ReceiveHandle = osThreadNew(Start_USB_Receive, NULL, &USB_Receive_attributes);
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <main+0x188>)
 8001086:	2100      	movs	r1, #0
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <main+0x18c>)
 800108a:	f007 fae9 	bl	8008660 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <main+0x190>)
 8001092:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001094:	f007 faae 	bl	80085f4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001098:	e7fe      	b.n	8001098 <main+0x140>
 800109a:	bf00      	nop
 800109c:	200003f0 	.word	0x200003f0
 80010a0:	200001a0 	.word	0x200001a0
 80010a4:	080138dc 	.word	0x080138dc
 80010a8:	080138f0 	.word	0x080138f0
 80010ac:	08013910 	.word	0x08013910
 80010b0:	20000000 	.word	0x20000000
 80010b4:	08015384 	.word	0x08015384
 80010b8:	200004ac 	.word	0x200004ac
 80010bc:	080152f4 	.word	0x080152f4
 80010c0:	08001455 	.word	0x08001455
 80010c4:	2000049c 	.word	0x2000049c
 80010c8:	08015318 	.word	0x08015318
 80010cc:	080014d1 	.word	0x080014d1
 80010d0:	200004a0 	.word	0x200004a0
 80010d4:	0801533c 	.word	0x0801533c
 80010d8:	0800151d 	.word	0x0800151d
 80010dc:	200004a4 	.word	0x200004a4
 80010e0:	08015360 	.word	0x08015360
 80010e4:	08001595 	.word	0x08001595
 80010e8:	200004a8 	.word	0x200004a8

080010ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00f fbcc 	bl	8010898 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001110:	f002 fa34 	bl	800357c <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <SystemClock_Config+0xc8>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <SystemClock_Config+0xc8>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <SystemClock_Config+0xcc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <SystemClock_Config+0xcc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800114c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001160:	2348      	movs	r3, #72	; 0x48
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001168:	2303      	movs	r3, #3
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fa13 	bl	800359c <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800117c:	f000 fa56 	bl	800162c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2102      	movs	r1, #2
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fca1 	bl	8003ae4 <HAL_RCC_ClockConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80011a8:	f000 fa40 	bl	800162c <Error_Handler>
	}
}
 80011ac:	bf00      	nop
 80011ae:	3750      	adds	r7, #80	; 0x50
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_CAN1_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_CAN1_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 4;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_CAN1_Init+0x64>)
 80011c8:	2204      	movs	r2, #4
 80011ca:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_CAN1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_CAN1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_CAN1_Init+0x64>)
 80011da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011de:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_CAN1_Init+0x64>)
 80011e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011e6:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MX_CAN1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_CAN1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_CAN1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_CAN1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_CAN1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_CAN1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_CAN1_Init+0x64>)
 800120e:	f000 fbed 	bl	80019ec <HAL_CAN_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001218:	f000 fa08 	bl	800162c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200003f0 	.word	0x200003f0
 8001224:	40006400 	.word	0x40006400

08001228 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MX_USART3_UART_Init+0x5c>)
 8001230:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART3_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART3_UART_Init+0x58>)
 800126c:	f003 fd62 	bl	8004d34 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8001276:	f000 f9d9 	bl	800162c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000418 	.word	0x20000418
 8001284:	40004800 	.word	0x40004800

08001288 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b68      	ldr	r3, [pc, #416]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a67      	ldr	r2, [pc, #412]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a61      	ldr	r2, [pc, #388]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b59      	ldr	r3, [pc, #356]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b56      	ldr	r3, [pc, #344]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a55      	ldr	r2, [pc, #340]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <MX_GPIO_Init+0x1b8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b50      	ldr	r3, [pc, #320]	; (8001440 <MX_GPIO_Init+0x1b8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a4f      	ldr	r2, [pc, #316]	; (8001440 <MX_GPIO_Init+0x1b8>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <MX_GPIO_Init+0x1b8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <MX_GPIO_Init+0x1b8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a49      	ldr	r2, [pc, #292]	; (8001440 <MX_GPIO_Init+0x1b8>)
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <MX_GPIO_Init+0x1b8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f244 0181 	movw	r1, #16513	; 0x4081
 8001334:	4843      	ldr	r0, [pc, #268]	; (8001444 <MX_GPIO_Init+0x1bc>)
 8001336:	f000 ff3f 	bl	80021b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	4842      	ldr	r0, [pc, #264]	; (8001448 <MX_GPIO_Init+0x1c0>)
 8001340:	f000 ff3a 	bl	80021b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800134e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	483c      	ldr	r0, [pc, #240]	; (800144c <MX_GPIO_Init+0x1c4>)
 800135c:	f000 fd68 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001360:	2332      	movs	r3, #50	; 0x32
 8001362:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001370:	230b      	movs	r3, #11
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4834      	ldr	r0, [pc, #208]	; (800144c <MX_GPIO_Init+0x1c4>)
 800137c:	f000 fd58 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001380:	2386      	movs	r3, #134	; 0x86
 8001382:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001390:	230b      	movs	r3, #11
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	482d      	ldr	r0, [pc, #180]	; (8001450 <MX_GPIO_Init+0x1c8>)
 800139c:	f000 fd48 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80013a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_GPIO_Init+0x1bc>)
 80013ba:	f000 fd39 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d0:	230b      	movs	r3, #11
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	481a      	ldr	r0, [pc, #104]	; (8001444 <MX_GPIO_Init+0x1bc>)
 80013dc:	f000 fd28 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_GPIO_Init+0x1c0>)
 80013f8:	f000 fd1a 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <MX_GPIO_Init+0x1c0>)
 8001410:	f000 fd0e 	bl	8001e30 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001414:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001418:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001426:	230b      	movs	r3, #11
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_GPIO_Init+0x1c0>)
 8001432:	f000 fcfd 	bl	8001e30 <HAL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3730      	adds	r7, #48	; 0x30
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40020400 	.word	0x40020400
 8001448:	40021800 	.word	0x40021800
 800144c:	40020800 	.word	0x40020800
 8001450:	40020000 	.word	0x40020000

08001454 <Start_USB_Send>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_USB_Send */
void Start_USB_Send(void *argument)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0c4      	sub	sp, #272	; 0x110
 8001458:	af00      	add	r7, sp, #0
 800145a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800145e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001462:	6018      	str	r0, [r3, #0]
	// IMPORTANT: Make sure that the usb_cdc_if.c includes the CDC_SET_LINE_CODING/CDC_GET_LINE_CODING
	// 						else COM port communication won't work
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8001464:	f00a fb5a 	bl	800bb1c <MX_USB_DEVICE_Init>
	uint8_t USB_OutputBuffer[255];
	int USB_OutBufLen;
	char *message;
	/* Infinite loop */
	while (1) {
		if (osMessageQueueGet(USB_Message_QueueHandle, &message, NULL, 1000) == osOK) {
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <Start_USB_Send+0x74>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f107 0108 	add.w	r1, r7, #8
 8001470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001474:	2200      	movs	r2, #0
 8001476:	f007 fac1 	bl	80089fc <osMessageQueueGet>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11f      	bne.n	80014c0 <Start_USB_Send+0x6c>
			USB_OutBufLen = sprintf((char*) &USB_OutputBuffer, "[%lu] %s\r\n", HAL_GetTick(), message);
 8001480:	f000 fa84 	bl	800198c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800148a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f107 000c 	add.w	r0, r7, #12
 8001494:	490d      	ldr	r1, [pc, #52]	; (80014cc <Start_USB_Send+0x78>)
 8001496:	f010 f8db 	bl	8011650 <siprintf>
 800149a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
			CDC_Transmit_FS(USB_OutputBuffer, USB_OutBufLen);
 800149e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00a fc1e 	bl	800bcec <CDC_Transmit_FS>
			free(message);
 80014b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00f f9c6 	bl	801084c <free>
		}
		osDelay(1);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f007 f973 	bl	80087ac <osDelay>
		if (osMessageQueueGet(USB_Message_QueueHandle, &message, NULL, 1000) == osOK) {
 80014c6:	e7cf      	b.n	8001468 <Start_USB_Send+0x14>
 80014c8:	200004ac 	.word	0x200004ac
 80014cc:	08013914 	.word	0x08013914

080014d0 <Start_CAN_Send_Ping>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CAN_Send_Ping */
void Start_CAN_Send_Ping(void *argument)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_CAN_Send_Ping */
	/* Infinite loop */
	while (1) {
		if (csp_ping(server_address, 1000, 50, CSP_SO_NONE) == -1) {
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <Start_CAN_Send_Ping+0x44>)
 80014da:	7818      	ldrb	r0, [r3, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014e4:	f00c fea6 	bl	800e234 <csp_ping>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d106      	bne.n	80014fe <Start_CAN_Send_Ping+0x2e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f6:	4808      	ldr	r0, [pc, #32]	; (8001518 <Start_CAN_Send_Ping+0x48>)
 80014f8:	f000 fe5e 	bl	80021b8 <HAL_GPIO_WritePin>
 80014fc:	e005      	b.n	800150a <Start_CAN_Send_Ping+0x3a>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <Start_CAN_Send_Ping+0x48>)
 8001506:	f000 fe57 	bl	80021b8 <HAL_GPIO_WritePin>
		}

		osDelay(200);
 800150a:	20c8      	movs	r0, #200	; 0xc8
 800150c:	f007 f94e 	bl	80087ac <osDelay>
		if (csp_ping(server_address, 1000, 50, CSP_SO_NONE) == -1) {
 8001510:	e7e2      	b.n	80014d8 <Start_CAN_Send_Ping+0x8>
 8001512:	bf00      	nop
 8001514:	20000000 	.word	0x20000000
 8001518:	40020400 	.word	0x40020400

0800151c <Start_Blink>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Blink */
void Start_Blink(void *argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Blink */
	char* message;
	/* Infinite loop */
	while (1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	4817      	ldr	r0, [pc, #92]	; (8001584 <Start_Blink+0x68>)
 8001528:	f000 fe5f 	bl	80021ea <HAL_GPIO_TogglePin>
		message = (char*) malloc(16 * sizeof(char));
 800152c:	2010      	movs	r0, #16
 800152e:	f00f f985 	bl	801083c <malloc>
 8001532:	4603      	mov	r3, r0
 8001534:	60fb      	str	r3, [r7, #12]
		if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)) {
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	4812      	ldr	r0, [pc, #72]	; (8001584 <Start_Blink+0x68>)
 800153a:	f000 fe25 	bl	8002188 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <Start_Blink+0x34>
			sprintf(message, "LED ON");
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4910      	ldr	r1, [pc, #64]	; (8001588 <Start_Blink+0x6c>)
 8001548:	4618      	mov	r0, r3
 800154a:	f010 f881 	bl	8011650 <siprintf>
 800154e:	e004      	b.n	800155a <Start_Blink+0x3e>
		}
		else {
			sprintf(message, "LED OFF");
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	490e      	ldr	r1, [pc, #56]	; (800158c <Start_Blink+0x70>)
 8001554:	4618      	mov	r0, r3
 8001556:	f010 f87b 	bl	8011650 <siprintf>
		}

		if (osMessageQueuePut(USB_Message_QueueHandle, (const void*) &message, 0, 0) != osOK) {
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <Start_Blink+0x74>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	f107 010c 	add.w	r1, r7, #12
 8001562:	2300      	movs	r3, #0
 8001564:	2200      	movs	r2, #0
 8001566:	f007 f9d5 	bl	8008914 <osMessageQueuePut>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <Start_Blink+0x5c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001570:	2101      	movs	r1, #1
 8001572:	4804      	ldr	r0, [pc, #16]	; (8001584 <Start_Blink+0x68>)
 8001574:	f000 fe39 	bl	80021ea <HAL_GPIO_TogglePin>
		}

		osDelay(1000);
 8001578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157c:	f007 f916 	bl	80087ac <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001580:	e7d0      	b.n	8001524 <Start_Blink+0x8>
 8001582:	bf00      	nop
 8001584:	40020400 	.word	0x40020400
 8001588:	08013920 	.word	0x08013920
 800158c:	08013928 	.word	0x08013928
 8001590:	200004ac 	.word	0x200004ac

08001594 <Start_USB_Receive>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_USB_Receive */
void Start_USB_Receive(void *argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_USB_Receive */
	char* message;
	/* Infinite loop */
	while (1)
	{
		if (!memcmp((char*)USB_InputBuffer, "CMD_", strlen("CMD_"))) {
 800159c:	2204      	movs	r2, #4
 800159e:	4915      	ldr	r1, [pc, #84]	; (80015f4 <Start_USB_Receive+0x60>)
 80015a0:	4815      	ldr	r0, [pc, #84]	; (80015f8 <Start_USB_Receive+0x64>)
 80015a2:	f00f f95b 	bl	801085c <memcmp>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d11e      	bne.n	80015ea <Start_USB_Receive+0x56>
			message = (char*) malloc(128 * sizeof(char));
 80015ac:	2080      	movs	r0, #128	; 0x80
 80015ae:	f00f f945 	bl	801083c <malloc>
 80015b2:	4603      	mov	r3, r0
 80015b4:	60fb      	str	r3, [r7, #12]
			sprintf(message, "Command Received : %s", USB_InputBuffer);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <Start_USB_Receive+0x64>)
 80015ba:	4910      	ldr	r1, [pc, #64]	; (80015fc <Start_USB_Receive+0x68>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f010 f847 	bl	8011650 <siprintf>

			if (osMessageQueuePut(USB_Message_QueueHandle, (const void*) &message, 0, 0) != osOK) {
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <Start_USB_Receive+0x6c>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	f107 010c 	add.w	r1, r7, #12
 80015ca:	2300      	movs	r3, #0
 80015cc:	2200      	movs	r2, #0
 80015ce:	f007 f9a1 	bl	8008914 <osMessageQueuePut>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <Start_USB_Receive+0x4c>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80015d8:	2101      	movs	r1, #1
 80015da:	480a      	ldr	r0, [pc, #40]	; (8001604 <Start_USB_Receive+0x70>)
 80015dc:	f000 fe05 	bl	80021ea <HAL_GPIO_TogglePin>
			}

			memset(USB_InputBuffer, '\0', 100);
 80015e0:	2264      	movs	r2, #100	; 0x64
 80015e2:	2100      	movs	r1, #0
 80015e4:	4804      	ldr	r0, [pc, #16]	; (80015f8 <Start_USB_Receive+0x64>)
 80015e6:	f00f f957 	bl	8010898 <memset>
		}

		osDelay(1);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f007 f8de 	bl	80087ac <osDelay>
		if (!memcmp((char*)USB_InputBuffer, "CMD_", strlen("CMD_"))) {
 80015f0:	e7d4      	b.n	800159c <Start_USB_Receive+0x8>
 80015f2:	bf00      	nop
 80015f4:	08013930 	.word	0x08013930
 80015f8:	200004b0 	.word	0x200004b0
 80015fc:	08013938 	.word	0x08013938
 8001600:	200004ac 	.word	0x200004ac
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800161a:	f000 f9a3 	bl	8001964 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40001000 	.word	0x40001000

0800162c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	210f      	movs	r1, #15
 8001672:	f06f 0001 	mvn.w	r0, #1
 8001676:	f000 fbb1 	bl	8001ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_CAN_MspInit+0x7c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d127      	bne.n	80016fa <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_CAN_MspInit+0x80>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_CAN_MspInit+0x80>)
 80016b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_CAN_MspInit+0x80>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_CAN_MspInit+0x80>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_CAN_MspInit+0x80>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_CAN_MspInit+0x80>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016da:	2303      	movs	r3, #3
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016ea:	2309      	movs	r3, #9
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_CAN_MspInit+0x84>)
 80016f6:	f000 fb9b 	bl	8001e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40006400 	.word	0x40006400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020c00 	.word	0x40020c00

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0aa      	sub	sp, #168	; 0xa8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2284      	movs	r2, #132	; 0x84
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f00f f8b1 	bl	8010898 <memset>
  if(huart->Instance==USART3)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_UART_MspInit+0xb4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d13c      	bne.n	80017ba <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001744:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001746:	2300      	movs	r3, #0
 8001748:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fc20 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800175a:	f7ff ff67 	bl	800162c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0xb8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800178e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017a8:	2307      	movs	r3, #7
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_MspInit+0xbc>)
 80017b6:	f000 fb3b 	bl	8001e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	37a8      	adds	r7, #168	; 0xa8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40004800 	.word	0x40004800
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020c00 	.word	0x40020c00

080017d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	2036      	movs	r0, #54	; 0x36
 80017e6:	f000 faf9 	bl	8001ddc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ea:	2036      	movs	r0, #54	; 0x36
 80017ec:	f000 fb12 	bl	8001e14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_InitTick+0xa0>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_InitTick+0xa0>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_InitTick+0xa0>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001808:	f107 0210 	add.w	r2, r7, #16
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fb8c 	bl	8003f30 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001818:	f002 fb62 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 800181c:	4603      	mov	r3, r0
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <HAL_InitTick+0xa4>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	3b01      	subs	r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_InitTick+0xa8>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_InitTick+0xac>)
 8001834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_InitTick+0xa8>)
 8001838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_InitTick+0xa8>)
 8001840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001842:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_InitTick+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_InitTick+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <HAL_InitTick+0xa8>)
 8001852:	f002 ff8f 	bl	8004774 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800185c:	4806      	ldr	r0, [pc, #24]	; (8001878 <HAL_InitTick+0xa8>)
 800185e:	f002 ffeb 	bl	8004838 <HAL_TIM_Base_Start_IT>
 8001862:	4603      	mov	r3, r0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	431bde83 	.word	0x431bde83
 8001878:	20000514 	.word	0x20000514
 800187c:	40001000 	.word	0x40001000

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TIM6_DAC_IRQHandler+0x10>)
 80018b2:	f003 f839 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000514 	.word	0x20000514

080018c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <OTG_FS_IRQHandler+0x10>)
 80018c6:	f000 fdf0 	bl	80024aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000a540 	.word	0x2000a540

080018d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018fe:	490e      	ldr	r1, [pc, #56]	; (8001938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001914:	4c0b      	ldr	r4, [pc, #44]	; (8001944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001922:	f7ff ffd7 	bl	80018d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001926:	f00e ff61 	bl	80107ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192a:	f7ff fb15 	bl	8000f58 <main>
  bx  lr    
 800192e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001930:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	200003d4 	.word	0x200003d4
  ldr r2, =_sidata
 800193c:	08015808 	.word	0x08015808
  ldr r2, =_sbss
 8001940:	200003d4 	.word	0x200003d4
  ldr r4, =_ebss
 8001944:	2000a9ac 	.word	0x2000a9ac

08001948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>

0800194a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194e:	2003      	movs	r0, #3
 8001950:	f000 fa39 	bl	8001dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001954:	200f      	movs	r0, #15
 8001956:	f7ff ff3b 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195a:	f7ff fe6d 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000000c 	.word	0x2000000c
 8001988:	20000560 	.word	0x20000560

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000560 	.word	0x20000560

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c

080019ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0ed      	b.n	8001bda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fe3c 	bl	8001688 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a20:	f7ff ffb4 	bl	800198c <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a26:	e012      	b.n	8001a4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a28:	f7ff ffb0 	bl	800198c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d90b      	bls.n	8001a4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2205      	movs	r2, #5
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0c5      	b.n	8001bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0e5      	beq.n	8001a28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0202 	bic.w	r2, r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6c:	f7ff ff8e 	bl	800198c <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a72:	e012      	b.n	8001a9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a74:	f7ff ff8a 	bl	800198c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	d90b      	bls.n	8001a9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2205      	movs	r2, #5
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e09f      	b.n	8001bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e5      	bne.n	8001a74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7e5b      	ldrb	r3, [r3, #25]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e007      	b.n	8001afc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e9b      	ldrb	r3, [r3, #26]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0220 	orr.w	r2, r2, #32
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0220 	bic.w	r2, r2, #32
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7edb      	ldrb	r3, [r3, #27]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0210 	bic.w	r2, r2, #16
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0210 	orr.w	r2, r2, #16
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7f1b      	ldrb	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7f5b      	ldrb	r3, [r3, #29]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0204 	bic.w	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	ea42 0103 	orr.w	r1, r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d12e      	bne.n	8001c54 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c0e:	f7ff febd 	bl	800198c <HAL_GetTick>
 8001c12:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c14:	e012      	b.n	8001c3c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c16:	f7ff feb9 	bl	800198c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b0a      	cmp	r3, #10
 8001c22:	d90b      	bls.n	8001c3c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2205      	movs	r2, #5
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e012      	b.n	8001c62 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e5      	bne.n	8001c16 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e006      	b.n	8001c62 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
  }
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <__NVIC_SetPriorityGrouping+0x40>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x40>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	05fa0000 	.word	0x05fa0000

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff4c 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dee:	f7ff ff61 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001df2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	6978      	ldr	r0, [r7, #20]
 8001dfa:	f7ff ffb1 	bl	8001d60 <NVIC_EncodePriority>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff80 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ff54 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e175      	b.n	800213c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8164 	bne.w	8002136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d005      	beq.n	8001e86 <HAL_GPIO_Init+0x56>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d017      	beq.n	8001f24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80be 	beq.w	8002136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_GPIO_Init+0x324>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a65      	ldr	r2, [pc, #404]	; (8002154 <HAL_GPIO_Init+0x324>)
 8001fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_GPIO_Init+0x324>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fd2:	4a61      	ldr	r2, [pc, #388]	; (8002158 <HAL_GPIO_Init+0x328>)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_GPIO_Init+0x32c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d037      	beq.n	800206e <HAL_GPIO_Init+0x23e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_GPIO_Init+0x330>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_GPIO_Init+0x23a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a56      	ldr	r2, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x334>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02b      	beq.n	8002066 <HAL_GPIO_Init+0x236>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a55      	ldr	r2, [pc, #340]	; (8002168 <HAL_GPIO_Init+0x338>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d025      	beq.n	8002062 <HAL_GPIO_Init+0x232>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_GPIO_Init+0x33c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <HAL_GPIO_Init+0x22e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a53      	ldr	r2, [pc, #332]	; (8002170 <HAL_GPIO_Init+0x340>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x22a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_GPIO_Init+0x344>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x226>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a51      	ldr	r2, [pc, #324]	; (8002178 <HAL_GPIO_Init+0x348>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x222>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a50      	ldr	r2, [pc, #320]	; (800217c <HAL_GPIO_Init+0x34c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x21e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4f      	ldr	r2, [pc, #316]	; (8002180 <HAL_GPIO_Init+0x350>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x21a>
 8002046:	2309      	movs	r3, #9
 8002048:	e012      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800204a:	230a      	movs	r3, #10
 800204c:	e010      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800204e:	2308      	movs	r3, #8
 8002050:	e00e      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002052:	2307      	movs	r3, #7
 8002054:	e00c      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002056:	2306      	movs	r3, #6
 8002058:	e00a      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800205a:	2305      	movs	r3, #5
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800205e:	2304      	movs	r3, #4
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x240>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x240>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_GPIO_Init+0x328>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_GPIO_Init+0x354>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a34      	ldr	r2, [pc, #208]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b32      	ldr	r3, [pc, #200]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_GPIO_Init+0x354>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_GPIO_Init+0x354>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_GPIO_Init+0x354>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_GPIO_Init+0x354>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f ae86 	bls.w	8001e50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40021400 	.word	0x40021400
 8002174:	40021800 	.word	0x40021800
 8002178:	40021c00 	.word	0x40021c00
 800217c:	40022000 	.word	0x40022000
 8002180:	40022400 	.word	0x40022400
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021fc:	887a      	ldrh	r2, [r7, #2]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	041a      	lsls	r2, r3, #16
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43d9      	mvns	r1, r3
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	400b      	ands	r3, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	619a      	str	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800221e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002220:	b08f      	sub	sp, #60	; 0x3c
 8002222:	af0a      	add	r7, sp, #40	; 0x28
 8002224:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e116      	b.n	800245e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f009 fea8 	bl	800bfa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f003 fab7 	bl	80057e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	687e      	ldr	r6, [r7, #4]
 800227c:	466d      	mov	r5, sp
 800227e:	f106 0410 	add.w	r4, r6, #16
 8002282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800228a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800228e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002292:	1d33      	adds	r3, r6, #4
 8002294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	f003 f998 	bl	80055cc <USB_CoreInit>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0d7      	b.n	800245e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 faa5 	bl	8005804 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e04a      	b.n	8002356 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	333d      	adds	r3, #61	; 0x3d
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	333c      	adds	r3, #60	; 0x3c
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	b298      	uxth	r0, r3
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3342      	adds	r3, #66	; 0x42
 80022fc:	4602      	mov	r2, r0
 80022fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	333f      	adds	r3, #63	; 0x3f
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3344      	adds	r3, #68	; 0x44
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3348      	adds	r3, #72	; 0x48
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3350      	adds	r3, #80	; 0x50
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	3301      	adds	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d3af      	bcc.n	80022c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e044      	b.n	80023f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	3301      	adds	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d3b5      	bcc.n	8002366 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	687e      	ldr	r6, [r7, #4]
 8002402:	466d      	mov	r5, sp
 8002404:	f106 0410 	add.w	r4, r6, #16
 8002408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002410:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002414:	e885 0003 	stmia.w	r5, {r0, r1}
 8002418:	1d33      	adds	r3, r6, #4
 800241a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f003 fa3d 	bl	800589c <USB_DevInit>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e014      	b.n	800245e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f001 f871 	bl	8003534 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fad5 	bl	8006a06 <USB_DevDisconnect>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002466 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_PCD_Start+0x16>
 8002478:	2302      	movs	r3, #2
 800247a:	e012      	b.n	80024a2 <HAL_PCD_Start+0x3c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 f999 	bl	80057c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 fa96 	bl	80069c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024aa:	b590      	push	{r4, r7, lr}
 80024ac:	b08d      	sub	sp, #52	; 0x34
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 fb54 	bl	8006b6e <USB_GetMode>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 83ba 	bne.w	8002c42 <HAL_PCD_IRQHandler+0x798>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 fab8 	bl	8006a48 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 83b0 	beq.w	8002c40 <HAL_PCD_IRQHandler+0x796>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 faaf 	bl	8006a48 <USB_ReadInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d107      	bne.n	8002504 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f002 0202 	and.w	r2, r2, #2
 8002502:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f004 fa9d 	bl	8006a48 <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b10      	cmp	r3, #16
 8002516:	d161      	bne.n	80025dc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0210 	bic.w	r2, r2, #16
 8002526:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	2b02      	cmp	r3, #2
 8002552:	d124      	bne.n	800259e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d035      	beq.n	80025cc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800256a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6a38      	ldr	r0, [r7, #32]
 8002574:	f004 f8d4 	bl	8006720 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002584:	441a      	add	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002596:	441a      	add	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	619a      	str	r2, [r3, #24]
 800259c:	e016      	b.n	80025cc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	0c5b      	lsrs	r3, r3, #17
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d110      	bne.n	80025cc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025b0:	2208      	movs	r2, #8
 80025b2:	4619      	mov	r1, r3
 80025b4:	6a38      	ldr	r0, [r7, #32]
 80025b6:	f004 f8b3 	bl	8006720 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c6:	441a      	add	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0210 	orr.w	r2, r2, #16
 80025da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fa31 	bl	8006a48 <USB_ReadInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025f0:	d16e      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f004 fa37 	bl	8006a6e <USB_ReadDevAllOutEpInterrupt>
 8002600:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002602:	e062      	b.n	80026ca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d057      	beq.n	80026be <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f004 fa5c 	bl	8006ad6 <USB_ReadDevOutEPInterrupt>
 800261e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002636:	461a      	mov	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fdce 	bl	80031e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	461a      	mov	r2, r3
 800265c:	2308      	movs	r3, #8
 800265e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fec8 	bl	80033f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267e:	461a      	mov	r2, r3
 8002680:	2310      	movs	r3, #16
 8002682:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	461a      	mov	r2, r3
 800269c:	2320      	movs	r3, #32
 800269e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b6:	461a      	mov	r2, r3
 80026b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	3301      	adds	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d199      	bne.n	8002604 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 f9b7 	bl	8006a48 <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026e4:	f040 80c0 	bne.w	8002868 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 f9d8 	bl	8006aa2 <USB_ReadDevAllInEpInterrupt>
 80026f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026f8:	e0b2      	b.n	8002860 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a7 	beq.w	8002854 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f004 f9fe 	bl	8006b12 <USB_ReadDevInEPInterrupt>
 8002716:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d057      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	2201      	movs	r2, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43db      	mvns	r3, r3
 800273c:	69f9      	ldr	r1, [r7, #28]
 800273e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002742:	4013      	ands	r3, r2
 8002744:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002752:	461a      	mov	r2, r3
 8002754:	2301      	movs	r3, #1
 8002756:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d132      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3348      	adds	r3, #72	; 0x48
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4403      	add	r3, r0
 8002780:	3344      	adds	r3, #68	; 0x44
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4419      	add	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4403      	add	r3, r0
 8002794:	3348      	adds	r3, #72	; 0x48
 8002796:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d113      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x31c>
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3350      	adds	r3, #80	; 0x50
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d108      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027be:	461a      	mov	r2, r3
 80027c0:	2101      	movs	r1, #1
 80027c2:	f004 fa07 	bl	8006bd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f009 fc96 	bl	800c0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e8:	461a      	mov	r2, r3
 80027ea:	2308      	movs	r3, #8
 80027ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002804:	461a      	mov	r2, r3
 8002806:	2310      	movs	r3, #16
 8002808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002820:	461a      	mov	r2, r3
 8002822:	2340      	movs	r3, #64	; 0x40
 8002824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800283c:	461a      	mov	r2, r3
 800283e:	2302      	movs	r3, #2
 8002840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800284c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fc38 	bl	80030c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3301      	adds	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	f47f af49 	bne.w	80026fa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f004 f8eb 	bl	8006a48 <USB_ReadInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800287c:	d122      	bne.n	80028c4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002898:	2b01      	cmp	r3, #1
 800289a:	d108      	bne.n	80028ae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028a4:	2100      	movs	r1, #0
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f009 fe78 	bl	800c59c <HAL_PCDEx_LPM_Callback>
 80028ac:	e002      	b.n	80028b4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f009 fc9c 	bl	800c1ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 f8bd 	bl	8006a48 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d8:	d112      	bne.n	8002900 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f009 fc58 	bl	800c1a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 f89f 	bl	8006a48 <USB_ReadInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002914:	d121      	bne.n	800295a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002924:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d111      	bne.n	8002954 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800294a:	2101      	movs	r1, #1
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f009 fe25 	bl	800c59c <HAL_PCDEx_LPM_Callback>
 8002952:	e002      	b.n	800295a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f009 fc23 	bl	800c1a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f004 f872 	bl	8006a48 <USB_ReadInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296e:	f040 80b7 	bne.w	8002ae0 <HAL_PCD_IRQHandler+0x636>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2110      	movs	r1, #16
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f8e3 	bl	8005b58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002996:	e046      	b.n	8002a26 <HAL_PCD_IRQHandler+0x57c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a4:	461a      	mov	r2, r3
 80029a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029bc:	0151      	lsls	r1, r2, #5
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	440a      	add	r2, r1
 80029c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d8:	461a      	mov	r2, r3
 80029da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	0151      	lsls	r1, r2, #5
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	440a      	add	r2, r1
 80029f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a10:	0151      	lsls	r1, r2, #5
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	440a      	add	r2, r1
 8002a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	3301      	adds	r3, #1
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3b3      	bcc.n	8002998 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a3e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_PCD_IRQHandler+0x5d0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5c:	f043 030b 	orr.w	r3, r3, #11
 8002a60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a72:	f043 030b 	orr.w	r3, r3, #11
 8002a76:	6453      	str	r3, [r2, #68]	; 0x44
 8002a78:	e015      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x5fc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f242 032b 	movw	r3, #8235	; 0x202b
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa0:	f043 030b 	orr.w	r3, r3, #11
 8002aa4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ab8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aca:	461a      	mov	r2, r3
 8002acc:	f004 f882 	bl	8006bd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 ffaf 	bl	8006a48 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af4:	d124      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x696>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 f846 	bl	8006b8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 f8a0 	bl	8005c4a <USB_GetDevSpeed>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681c      	ldr	r4, [r3, #0]
 8002b16:	f001 f9d7 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8002b1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	4620      	mov	r0, r4
 8002b26:	f002 fda9 	bl	800567c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f009 fb0f 	bl	800c14e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 ff7f 	bl	8006a48 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d10a      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x6c0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f009 faec 	bl	800c132 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 0208 	and.w	r2, r2, #8
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 ff6a 	bl	8006a48 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x6f6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f009 fb4e 	bl	800c22c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 ff4f 	bl	8006a48 <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x72c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f009 fb21 	bl	800c208 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 ff34 	bl	8006a48 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d10a      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x758>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f009 fb2f 	bl	800c250 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 ff1e 	bl	8006a48 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d115      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x798>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x784>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f009 fb1f 	bl	800c26c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e000      	b.n	8002c42 <HAL_PCD_IRQHandler+0x798>
      return;
 8002c40:	bf00      	nop
    }
  }
}
 8002c42:	3734      	adds	r7, #52	; 0x34
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}

08002c48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_PCD_SetAddress+0x1a>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e013      	b.n	8002c8a <HAL_PCD_SetAddress+0x42>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fe7c 	bl	8006978 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	4608      	mov	r0, r1
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	70fb      	strb	r3, [r7, #3]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	803b      	strh	r3, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	da0f      	bge.n	8002cd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	3338      	adds	r3, #56	; 0x38
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	3304      	adds	r3, #4
 8002cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	705a      	strb	r2, [r3, #1]
 8002cd6:	e00f      	b.n	8002cf8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 020f 	and.w	r2, r3, #15
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d04:	883a      	ldrh	r2, [r7, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	78ba      	ldrb	r2, [r7, #2]
 8002d0e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	785b      	ldrb	r3, [r3, #1]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d22:	78bb      	ldrb	r3, [r7, #2]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d102      	bne.n	8002d2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_PCD_EP_Open+0xaa>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e00e      	b.n	8002d5a <HAL_PCD_EP_Open+0xc8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68f9      	ldr	r1, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 ffa2 	bl	8005c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d58:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da0f      	bge.n	8002d96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	705a      	strb	r2, [r3, #1]
 8002d94:	e00f      	b.n	8002db6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_EP_Close+0x6e>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e00e      	b.n	8002dee <HAL_PCD_EP_Close+0x8c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 ffe0 	bl	8005da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	460b      	mov	r3, r1
 8002e04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	f003 020f 	and.w	r2, r3, #15
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e38:	7afb      	ldrb	r3, [r7, #11]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d102      	bne.n	8002e52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	f003 fac3 	bl	80063f4 <USB_EP0StartXfer>
 8002e6e:	e008      	b.n	8002e82 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	f003 f86d 	bl	8005f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	3338      	adds	r3, #56	; 0x38
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	f003 fa61 	bl	80063f4 <USB_EP0StartXfer>
 8002f32:	e008      	b.n	8002f46 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6979      	ldr	r1, [r7, #20]
 8002f42:	f003 f80b 	bl	8005f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d901      	bls.n	8002f6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e050      	b.n	8003010 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da0f      	bge.n	8002f96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3338      	adds	r3, #56	; 0x38
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	705a      	strb	r2, [r3, #1]
 8002f94:	e00d      	b.n	8002fb2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_EP_SetStall+0x82>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e01e      	b.n	8003010 <HAL_PCD_EP_SetStall+0xc0>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 fbf5 	bl	80067d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	b2d9      	uxtb	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003000:	461a      	mov	r2, r3
 8003002:	f003 fde7 	bl	8006bd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 020f 	and.w	r2, r3, #15
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	429a      	cmp	r2, r3
 8003030:	d901      	bls.n	8003036 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e042      	b.n	80030bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303a:	2b00      	cmp	r3, #0
 800303c:	da0f      	bge.n	800305e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	3338      	adds	r3, #56	; 0x38
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	3304      	adds	r3, #4
 8003054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	705a      	strb	r2, [r3, #1]
 800305c:	e00f      	b.n	800307e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	3304      	adds	r3, #4
 8003076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_PCD_EP_ClrStall+0x86>
 800309a:	2302      	movs	r3, #2
 800309c:	e00e      	b.n	80030bc <HAL_PCD_EP_ClrStall+0xa4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fbfd 	bl	80068ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3338      	adds	r3, #56	; 0x38
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d901      	bls.n	80030fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e06c      	b.n	80031d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	429a      	cmp	r2, r3
 8003110:	d902      	bls.n	8003118 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3303      	adds	r3, #3
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003120:	e02b      	b.n	800317a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d902      	bls.n	800313e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3303      	adds	r3, #3
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003156:	b2db      	uxtb	r3, r3
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	6978      	ldr	r0, [r7, #20]
 800315e:	f003 faa1 	bl	80066a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	b29b      	uxth	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	429a      	cmp	r2, r3
 800318e:	d809      	bhi.n	80031a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003198:	429a      	cmp	r2, r3
 800319a:	d203      	bcs.n	80031a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1be      	bne.n	8003122 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d811      	bhi.n	80031d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	2201      	movs	r2, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	6939      	ldr	r1, [r7, #16]
 80031cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031d0:	4013      	ands	r3, r2
 80031d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	333c      	adds	r3, #60	; 0x3c
 80031f8:	3304      	adds	r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b01      	cmp	r3, #1
 8003214:	f040 80a0 	bne.w	8003358 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d015      	beq.n	800324e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a72      	ldr	r2, [pc, #456]	; (80033f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003226:	4293      	cmp	r3, r2
 8003228:	f240 80dd 	bls.w	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80d7 	beq.w	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	461a      	mov	r2, r3
 8003246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800324a:	6093      	str	r3, [r2, #8]
 800324c:	e0cb      	b.n	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003264:	461a      	mov	r2, r3
 8003266:	2320      	movs	r3, #32
 8003268:	6093      	str	r3, [r2, #8]
 800326a:	e0bc      	b.n	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 80b7 	bne.w	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d90f      	bls.n	80032a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003296:	461a      	mov	r2, r3
 8003298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329c:	6093      	str	r3, [r2, #8]
 800329e:	e0a2      	b.n	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	440b      	add	r3, r1
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4403      	add	r3, r0
 80032d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4403      	add	r3, r0
 80032fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4419      	add	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4403      	add	r3, r0
 8003314:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003318:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d114      	bne.n	800334a <PCD_EP_OutXfrComplete_int+0x16a>
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003342:	461a      	mov	r2, r3
 8003344:	2101      	movs	r1, #1
 8003346:	f003 fc45 	bl	8006bd4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f008 feb9 	bl	800c0c8 <HAL_PCD_DataOutStageCallback>
 8003356:	e046      	b.n	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d124      	bne.n	80033aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337c:	6093      	str	r3, [r2, #8]
 800337e:	e032      	b.n	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003396:	461a      	mov	r2, r3
 8003398:	2320      	movs	r3, #32
 800339a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f008 fe90 	bl	800c0c8 <HAL_PCD_DataOutStageCallback>
 80033a8:	e01d      	b.n	80033e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d114      	bne.n	80033da <PCD_EP_OutXfrComplete_int+0x1fa>
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d2:	461a      	mov	r2, r3
 80033d4:	2100      	movs	r1, #0
 80033d6:	f003 fbfd 	bl	8006bd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f008 fe71 	bl	800c0c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	4f54300a 	.word	0x4f54300a
 80033f4:	4f54310a 	.word	0x4f54310a

080033f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	333c      	adds	r3, #60	; 0x3c
 8003410:	3304      	adds	r3, #4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a15      	ldr	r2, [pc, #84]	; (8003480 <PCD_EP_OutSetupPacket_int+0x88>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d90e      	bls.n	800344c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003444:	461a      	mov	r2, r3
 8003446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f008 fe29 	bl	800c0a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <PCD_EP_OutSetupPacket_int+0x88>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d90c      	bls.n	8003474 <PCD_EP_OutSetupPacket_int+0x7c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d108      	bne.n	8003474 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800346c:	461a      	mov	r2, r3
 800346e:	2101      	movs	r1, #1
 8003470:	f003 fbb0 	bl	8006bd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	4f54300a 	.word	0x4f54300a

08003484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
 8003490:	4613      	mov	r3, r2
 8003492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034a2:	883b      	ldrh	r3, [r7, #0]
 80034a4:	0419      	lsls	r1, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
 80034b0:	e028      	b.n	8003504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4413      	add	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e00d      	b.n	80034e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	3340      	adds	r3, #64	; 0x40
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4413      	add	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	3301      	adds	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d3ec      	bcc.n	80034c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034ec:	883b      	ldrh	r3, [r7, #0]
 80034ee:	0418      	lsls	r0, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	4302      	orrs	r2, r0
 80034fc:	3340      	adds	r3, #64	; 0x40
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_PCDEx_ActivateLPM+0x44>)
 8003564:	4313      	orrs	r3, r2
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	10000003 	.word	0x10000003

0800357c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a04      	ldr	r2, [pc, #16]	; (8003598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40007000 	.word	0x40007000

0800359c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035a4:	2300      	movs	r3, #0
 80035a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e291      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8087 	beq.w	80036ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c0:	4b96      	ldr	r3, [pc, #600]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d00c      	beq.n	80035e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035cc:	4b93      	ldr	r3, [pc, #588]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d112      	bne.n	80035fe <HAL_RCC_OscConfig+0x62>
 80035d8:	4b90      	ldr	r3, [pc, #576]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e4:	d10b      	bne.n	80035fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e6:	4b8d      	ldr	r3, [pc, #564]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d06c      	beq.n	80036cc <HAL_RCC_OscConfig+0x130>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d168      	bne.n	80036cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e26b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x7a>
 8003608:	4b84      	ldr	r3, [pc, #528]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a83      	ldr	r2, [pc, #524]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e02e      	b.n	8003674 <HAL_RCC_OscConfig+0xd8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x9c>
 800361e:	4b7f      	ldr	r3, [pc, #508]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7e      	ldr	r2, [pc, #504]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b7c      	ldr	r3, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7b      	ldr	r2, [pc, #492]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e01d      	b.n	8003674 <HAL_RCC_OscConfig+0xd8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0xc0>
 8003642:	4b76      	ldr	r3, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a75      	ldr	r2, [pc, #468]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b73      	ldr	r3, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a72      	ldr	r2, [pc, #456]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0xd8>
 800365c:	4b6f      	ldr	r3, [pc, #444]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a6e      	ldr	r2, [pc, #440]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b6c      	ldr	r3, [pc, #432]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6b      	ldr	r2, [pc, #428]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800366e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d013      	beq.n	80036a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe f986 	bl	800198c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe f982 	bl	800198c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e21f      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0xe8>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe f972 	bl	800198c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe f96e 	bl	800198c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e20b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x110>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d069      	beq.n	80037ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036da:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11c      	bne.n	800372c <HAL_RCC_OscConfig+0x190>
 80036f2:	4b4a      	ldr	r3, [pc, #296]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x17a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1df      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	493d      	ldr	r1, [pc, #244]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	e040      	b.n	80037ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d023      	beq.n	800377c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe f924 	bl	800198c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003748:	f7fe f920 	bl	800198c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1bd      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4929      	ldr	r1, [pc, #164]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
 800377a:	e018      	b.n	80037ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe f900 	bl	800198c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe f8fc 	bl	800198c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e199      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d038      	beq.n	800382c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d019      	beq.n	80037f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ce:	f7fe f8dd 	bl	800198c <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d6:	f7fe f8d9 	bl	800198c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e176      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x23a>
 80037f4:	e01a      	b.n	800382c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fe f8c3 	bl	800198c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	f7fe f8bf 	bl	800198c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d903      	bls.n	8003820 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e15c      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
 800381c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b91      	ldr	r3, [pc, #580]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ee      	bne.n	800380a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a4 	beq.w	8003982 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b8b      	ldr	r3, [pc, #556]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a87      	ldr	r2, [pc, #540]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003862:	4b82      	ldr	r3, [pc, #520]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800386e:	4b7f      	ldr	r3, [pc, #508]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7e      	ldr	r2, [pc, #504]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fe f887 	bl	800198c <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe f883 	bl	800198c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e120      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003894:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x31a>
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	e02d      	b.n	8003912 <HAL_RCC_OscConfig+0x376>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x33c>
 80038be:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038d0:	f023 0304 	bic.w	r3, r3, #4
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
 80038d6:	e01c      	b.n	8003912 <HAL_RCC_OscConfig+0x376>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d10c      	bne.n	80038fa <HAL_RCC_OscConfig+0x35e>
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a60      	ldr	r2, [pc, #384]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
 80038ec:	4b5e      	ldr	r3, [pc, #376]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a5d      	ldr	r2, [pc, #372]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	e00b      	b.n	8003912 <HAL_RCC_OscConfig+0x376>
 80038fa:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6713      	str	r3, [r2, #112]	; 0x70
 8003906:	4b58      	ldr	r3, [pc, #352]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d015      	beq.n	8003946 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fe f837 	bl	800198c <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe f833 	bl	800198c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0ce      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ee      	beq.n	8003922 <HAL_RCC_OscConfig+0x386>
 8003944:	e014      	b.n	8003970 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fe f821 	bl	800198c <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe f81d 	bl	800198c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003964:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a3b      	ldr	r2, [pc, #236]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a4 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b08      	cmp	r3, #8
 8003996:	d06b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d149      	bne.n	8003a34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a30      	ldr	r2, [pc, #192]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80039a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd ffee 	bl	800198c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd ffea 	bl	800198c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e087      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	3b01      	subs	r3, #1
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	4313      	orrs	r3, r2
 80039f8:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fd ffbe 	bl	800198c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd ffba 	bl	800198c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e057      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x478>
 8003a32:	e04f      	b.n	8003ad4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd ffa4 	bl	800198c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fd ffa0 	bl	800198c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e03d      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5a:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_OscConfig+0x4cc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x4ac>
 8003a66:	e035      	b.n	8003ad4 <HAL_RCC_OscConfig+0x538>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_RCC_OscConfig+0x544>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d028      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d121      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d11a      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d111      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800

08003ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0d0      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d910      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 020f 	bic.w	r2, r3, #15
 8003b12:	4965      	ldr	r1, [pc, #404]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b8      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a52      	ldr	r2, [pc, #328]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b50      	ldr	r3, [pc, #320]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	494d      	ldr	r1, [pc, #308]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d040      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d115      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba6:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e073      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e06b      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc6:	4b39      	ldr	r3, [pc, #228]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f023 0203 	bic.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4936      	ldr	r1, [pc, #216]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fed8 	bl	800198c <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fd fed4 	bl	800198c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e053      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 020c 	and.w	r2, r3, #12
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1eb      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d210      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 020f 	bic.w	r2, r3, #15
 8003c1e:	4922      	ldr	r1, [pc, #136]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e032      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4916      	ldr	r1, [pc, #88]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	490e      	ldr	r1, [pc, #56]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c76:	f000 f821 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490a      	ldr	r1, [pc, #40]	; (8003cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8e:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8003c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1d4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fd9a 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023c00 	.word	0x40023c00
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0801539c 	.word	0x0801539c
 8003cb4:	20000004 	.word	0x20000004
 8003cb8:	20000008 	.word	0x20000008

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc0:	b094      	sub	sp, #80	; 0x50
 8003cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc8:	2300      	movs	r3, #0
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	2300      	movs	r3, #0
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd4:	4b79      	ldr	r3, [pc, #484]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d00d      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x40>
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	f200 80e1 	bhi.w	8003ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cee:	e0db      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf0:	4b73      	ldr	r3, [pc, #460]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf4:	e0db      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cf6:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cfa:	e0d8      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d06:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d063      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d12:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	099b      	lsrs	r3, r3, #6
 8003d18:	2200      	movs	r2, #0
 8003d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d2e:	4622      	mov	r2, r4
 8003d30:	462b      	mov	r3, r5
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	0159      	lsls	r1, r3, #5
 8003d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d40:	0150      	lsls	r0, r2, #5
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4621      	mov	r1, r4
 8003d48:	1a51      	subs	r1, r2, r1
 8003d4a:	6139      	str	r1, [r7, #16]
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d60:	4659      	mov	r1, fp
 8003d62:	018b      	lsls	r3, r1, #6
 8003d64:	4651      	mov	r1, sl
 8003d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6a:	4651      	mov	r1, sl
 8003d6c:	018a      	lsls	r2, r1, #6
 8003d6e:	4651      	mov	r1, sl
 8003d70:	ebb2 0801 	subs.w	r8, r2, r1
 8003d74:	4659      	mov	r1, fp
 8003d76:	eb63 0901 	sbc.w	r9, r3, r1
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8e:	4690      	mov	r8, r2
 8003d90:	4699      	mov	r9, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	eb18 0303 	adds.w	r3, r8, r3
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	eb49 0303 	adc.w	r3, r9, r3
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dae:	4629      	mov	r1, r5
 8003db0:	024b      	lsls	r3, r1, #9
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003db8:	4621      	mov	r1, r4
 8003dba:	024a      	lsls	r2, r1, #9
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dcc:	f7fc ff0c 	bl	8000be8 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	e058      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	2200      	movs	r2, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	4611      	mov	r1, r2
 8003de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
 8003df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	f04f 0000 	mov.w	r0, #0
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	0159      	lsls	r1, r3, #5
 8003e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e06:	0150      	lsls	r0, r2, #5
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e12:	4649      	mov	r1, r9
 8003e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e30:	eb63 050b 	sbc.w	r5, r3, fp
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	00eb      	lsls	r3, r5, #3
 8003e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e42:	00e2      	lsls	r2, r4, #3
 8003e44:	4614      	mov	r4, r2
 8003e46:	461d      	mov	r5, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	18e3      	adds	r3, r4, r3
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	464b      	mov	r3, r9
 8003e50:	eb45 0303 	adc.w	r3, r5, r3
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e62:	4629      	mov	r1, r5
 8003e64:	028b      	lsls	r3, r1, #10
 8003e66:	4621      	mov	r1, r4
 8003e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	028a      	lsls	r2, r1, #10
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e76:	2200      	movs	r2, #0
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	61fa      	str	r2, [r7, #28]
 8003e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e80:	f7fc feb2 	bl	8000be8 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3750      	adds	r7, #80	; 0x50
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	00f42400 	.word	0x00f42400
 8003ec4:	007a1200 	.word	0x007a1200

08003ec8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ee4:	f7ff fff0 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0a9b      	lsrs	r3, r3, #10
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	080153ac 	.word	0x080153ac

08003f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f0c:	f7ff ffdc 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0b5b      	lsrs	r3, r3, #13
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4903      	ldr	r1, [pc, #12]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	080153ac 	.word	0x080153ac

08003f30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	08db      	lsrs	r3, r3, #3
 8003f6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <HAL_RCC_GetClockConfig+0x60>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40023c00 	.word	0x40023c00

08003f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fbc:	4b69      	ldr	r3, [pc, #420]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a68      	ldr	r2, [pc, #416]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fc6:	6093      	str	r3, [r2, #8]
 8003fc8:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	4964      	ldr	r1, [pc, #400]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d017      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fee:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	4959      	ldr	r1, [pc, #356]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400c:	d101      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d017      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800402a:	4b4e      	ldr	r3, [pc, #312]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	494a      	ldr	r1, [pc, #296]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 808b 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4a39      	ldr	r2, [pc, #228]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	6413      	str	r3, [r2, #64]	; 0x40
 8004084:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a34      	ldr	r2, [pc, #208]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409c:	f7fd fc76 	bl	800198c <HAL_GetTick>
 80040a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a4:	f7fd fc72 	bl	800198c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e357      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d035      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d02e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e0:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f6:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004100:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004102:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d114      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fd fc3a 	bl	800198c <HAL_GetTick>
 8004118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd fc36 	bl	800198c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e319      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414a:	d111      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004158:	4b04      	ldr	r3, [pc, #16]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800415a:	400b      	ands	r3, r1
 800415c:	4901      	ldr	r1, [pc, #4]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
 8004162:	e00b      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000
 800416c:	0ffffcff 	.word	0x0ffffcff
 8004170:	4baa      	ldr	r3, [pc, #680]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4aa9      	ldr	r2, [pc, #676]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800417a:	6093      	str	r3, [r2, #8]
 800417c:	4ba7      	ldr	r3, [pc, #668]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	49a4      	ldr	r1, [pc, #656]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	4313      	orrs	r3, r2
 800418c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d010      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800419a:	4ba0      	ldr	r3, [pc, #640]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a0:	4a9e      	ldr	r2, [pc, #632]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041aa:	4b9c      	ldr	r3, [pc, #624]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	4999      	ldr	r1, [pc, #612]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c8:	4b94      	ldr	r3, [pc, #592]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d6:	4991      	ldr	r1, [pc, #580]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ea:	4b8c      	ldr	r3, [pc, #560]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f8:	4988      	ldr	r1, [pc, #544]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800420c:	4b83      	ldr	r3, [pc, #524]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	4980      	ldr	r1, [pc, #512]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800422e:	4b7b      	ldr	r3, [pc, #492]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4977      	ldr	r1, [pc, #476]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004250:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	496f      	ldr	r1, [pc, #444]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004272:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f023 020c 	bic.w	r2, r3, #12
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	4966      	ldr	r1, [pc, #408]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004294:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	495e      	ldr	r1, [pc, #376]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042b6:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c4:	4955      	ldr	r1, [pc, #340]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042d8:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	494d      	ldr	r1, [pc, #308]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042fa:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	4944      	ldr	r1, [pc, #272]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800431c:	4b3f      	ldr	r3, [pc, #252]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	493c      	ldr	r1, [pc, #240]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800433e:	4b37      	ldr	r3, [pc, #220]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434c:	4933      	ldr	r1, [pc, #204]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436e:	492b      	ldr	r1, [pc, #172]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d011      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004390:	4922      	ldr	r1, [pc, #136]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a0:	d101      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d0:	4912      	ldr	r1, [pc, #72]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f4:	4909      	ldr	r1, [pc, #36]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d006      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80d9 	beq.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a01      	ldr	r2, [pc, #4]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800441c:	40023800 	.word	0x40023800
 8004420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004422:	f7fd fab3 	bl	800198c <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004428:	e008      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800442a:	f7fd faaf 	bl	800198c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	; 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e194      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d021      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	2b00      	cmp	r3, #0
 800445a:	d11d      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800445c:	4b64      	ldr	r3, [pc, #400]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004470:	0e1b      	lsrs	r3, r3, #24
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	019a      	lsls	r2, r3, #6
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	071b      	lsls	r3, r3, #28
 8004490:	4957      	ldr	r1, [pc, #348]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02e      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c2:	d129      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044c4:	4b4a      	ldr	r3, [pc, #296]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d8:	0f1b      	lsrs	r3, r3, #28
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	019a      	lsls	r2, r3, #6
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	493d      	ldr	r1, [pc, #244]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004500:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f023 021f 	bic.w	r2, r3, #31
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	3b01      	subs	r3, #1
 8004510:	4937      	ldr	r1, [pc, #220]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452a:	0e1b      	lsrs	r3, r3, #24
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004532:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004538:	0f1b      	lsrs	r3, r3, #28
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	019a      	lsls	r2, r3, #6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	431a      	orrs	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	071b      	lsls	r3, r3, #28
 8004558:	4925      	ldr	r1, [pc, #148]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d011      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	019a      	lsls	r2, r3, #6
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	071b      	lsls	r3, r3, #28
 8004588:	4919      	ldr	r1, [pc, #100]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004590:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fd f9f6 	bl	800198c <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045a4:	f7fd f9f2 	bl	800198c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0d7      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	f040 80cd 	bne.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d6:	f7fd f9d9 	bl	800198c <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045de:	f7fd f9d5 	bl	800198c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d903      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e0ba      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045f4:	4b5e      	ldr	r3, [pc, #376]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004600:	d0ed      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02e      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d12a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800462a:	4b51      	ldr	r3, [pc, #324]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004638:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	0f1b      	lsrs	r3, r3, #28
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	019a      	lsls	r2, r3, #6
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	431a      	orrs	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	071b      	lsls	r3, r3, #28
 800465e:	4944      	ldr	r1, [pc, #272]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004666:	4b42      	ldr	r3, [pc, #264]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800466c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	493d      	ldr	r1, [pc, #244]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d022      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004694:	d11d      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	0f1b      	lsrs	r3, r3, #28
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	019a      	lsls	r2, r3, #6
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	431a      	orrs	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	061b      	lsls	r3, r3, #24
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	4929      	ldr	r1, [pc, #164]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d028      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	0e1b      	lsrs	r3, r3, #24
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	019a      	lsls	r2, r3, #6
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	431a      	orrs	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	4917      	ldr	r1, [pc, #92]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	4911      	ldr	r1, [pc, #68]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fd f926 	bl	800198c <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004744:	f7fd f922 	bl	800198c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e007      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800475e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004762:	d1ef      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e049      	b.n	800481a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f841 	bl	8004822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f000 fa00 	bl	8004bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e054      	b.n	80048fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a26      	ldr	r2, [pc, #152]	; (8004908 <HAL_TIM_Base_Start_IT+0xd0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487a:	d01d      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a22      	ldr	r2, [pc, #136]	; (800490c <HAL_TIM_Base_Start_IT+0xd4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <HAL_TIM_Base_Start_IT+0xd8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_TIM_Base_Start_IT+0xdc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_TIM_Base_Start_IT+0xe0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_TIM_Base_Start_IT+0xe4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <HAL_TIM_Base_Start_IT+0xe8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d115      	bne.n	80048e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_TIM_Base_Start_IT+0xec>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d015      	beq.n	80048f6 <HAL_TIM_Base_Start_IT+0xbe>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d011      	beq.n	80048f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e2:	e008      	b.n	80048f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e000      	b.n	80048f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40010000 	.word	0x40010000
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40010400 	.word	0x40010400
 800491c:	40014000 	.word	0x40014000
 8004920:	40001800 	.word	0x40001800
 8004924:	00010007 	.word	0x00010007

08004928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0202 	mvn.w	r2, #2
 8004954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f905 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8f7 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f908 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0204 	mvn.w	r2, #4
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8db 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8cd 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8de 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0208 	mvn.w	r2, #8
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8b1 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8a3 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f8b4 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0210 	mvn.w	r2, #16
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2208      	movs	r2, #8
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f887 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f879 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f88a 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0201 	mvn.w	r2, #1
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc fdae 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	2b80      	cmp	r3, #128	; 0x80
 8004ac6:	d107      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f91a 	bl	8004d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae6:	d10e      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b80      	cmp	r3, #128	; 0x80
 8004af4:	d107      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f90d 	bl	8004d20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d10e      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d107      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f838 	bl	8004ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d10e      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d107      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f06f 0220 	mvn.w	r2, #32
 8004b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8cd 	bl	8004cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a40      	ldr	r2, [pc, #256]	; (8004ccc <TIM_Base_SetConfig+0x114>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d013      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd6:	d00f      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3d      	ldr	r2, [pc, #244]	; (8004cd0 <TIM_Base_SetConfig+0x118>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3c      	ldr	r2, [pc, #240]	; (8004cd4 <TIM_Base_SetConfig+0x11c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3b      	ldr	r2, [pc, #236]	; (8004cd8 <TIM_Base_SetConfig+0x120>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a3a      	ldr	r2, [pc, #232]	; (8004cdc <TIM_Base_SetConfig+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2f      	ldr	r2, [pc, #188]	; (8004ccc <TIM_Base_SetConfig+0x114>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d02b      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d027      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <TIM_Base_SetConfig+0x118>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d023      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2b      	ldr	r2, [pc, #172]	; (8004cd4 <TIM_Base_SetConfig+0x11c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d01f      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <TIM_Base_SetConfig+0x120>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01b      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a29      	ldr	r2, [pc, #164]	; (8004cdc <TIM_Base_SetConfig+0x124>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d017      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a28      	ldr	r2, [pc, #160]	; (8004ce0 <TIM_Base_SetConfig+0x128>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a27      	ldr	r2, [pc, #156]	; (8004ce4 <TIM_Base_SetConfig+0x12c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a26      	ldr	r2, [pc, #152]	; (8004ce8 <TIM_Base_SetConfig+0x130>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a25      	ldr	r2, [pc, #148]	; (8004cec <TIM_Base_SetConfig+0x134>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <TIM_Base_SetConfig+0x138>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a23      	ldr	r2, [pc, #140]	; (8004cf4 <TIM_Base_SetConfig+0x13c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d108      	bne.n	8004c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <TIM_Base_SetConfig+0x114>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0xf8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <TIM_Base_SetConfig+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40010400 	.word	0x40010400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40014800 	.word	0x40014800
 8004cec:	40001800 	.word	0x40001800
 8004cf0:	40001c00 	.word	0x40001c00
 8004cf4:	40002000 	.word	0x40002000

08004cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e040      	b.n	8004dc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fcda 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2224      	movs	r2, #36	; 0x24
 8004d60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f82c 	bl	8004dd0 <UART_SetConfig>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e022      	b.n	8004dc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa84 	bl	8005298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb0b 	bl	80053dc <UART_CheckIdleState>
 8004dc6:	4603      	mov	r3, r0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4ba6      	ldr	r3, [pc, #664]	; (8005094 <UART_SetConfig+0x2c4>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a94      	ldr	r2, [pc, #592]	; (8005098 <UART_SetConfig+0x2c8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d120      	bne.n	8004e8e <UART_SetConfig+0xbe>
 8004e4c:	4b93      	ldr	r3, [pc, #588]	; (800509c <UART_SetConfig+0x2cc>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d816      	bhi.n	8004e88 <UART_SetConfig+0xb8>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x90>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e7d 	.word	0x08004e7d
 8004e68:	08004e77 	.word	0x08004e77
 8004e6c:	08004e83 	.word	0x08004e83
 8004e70:	2301      	movs	r3, #1
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e150      	b.n	8005118 <UART_SetConfig+0x348>
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e14d      	b.n	8005118 <UART_SetConfig+0x348>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e14a      	b.n	8005118 <UART_SetConfig+0x348>
 8004e82:	2308      	movs	r3, #8
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e147      	b.n	8005118 <UART_SetConfig+0x348>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e144      	b.n	8005118 <UART_SetConfig+0x348>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a83      	ldr	r2, [pc, #524]	; (80050a0 <UART_SetConfig+0x2d0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d132      	bne.n	8004efe <UART_SetConfig+0x12e>
 8004e98:	4b80      	ldr	r3, [pc, #512]	; (800509c <UART_SetConfig+0x2cc>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	d828      	bhi.n	8004ef8 <UART_SetConfig+0x128>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <UART_SetConfig+0xdc>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004ef9 	.word	0x08004ef9
 8004eb4:	08004ef9 	.word	0x08004ef9
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004eed 	.word	0x08004eed
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004ee7 	.word	0x08004ee7
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004ef9 	.word	0x08004ef9
 8004edc:	08004ef3 	.word	0x08004ef3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e118      	b.n	8005118 <UART_SetConfig+0x348>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e115      	b.n	8005118 <UART_SetConfig+0x348>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e112      	b.n	8005118 <UART_SetConfig+0x348>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e10f      	b.n	8005118 <UART_SetConfig+0x348>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e10c      	b.n	8005118 <UART_SetConfig+0x348>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a68      	ldr	r2, [pc, #416]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d120      	bne.n	8004f4a <UART_SetConfig+0x17a>
 8004f08:	4b64      	ldr	r3, [pc, #400]	; (800509c <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f12:	2b30      	cmp	r3, #48	; 0x30
 8004f14:	d013      	beq.n	8004f3e <UART_SetConfig+0x16e>
 8004f16:	2b30      	cmp	r3, #48	; 0x30
 8004f18:	d814      	bhi.n	8004f44 <UART_SetConfig+0x174>
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d009      	beq.n	8004f32 <UART_SetConfig+0x162>
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d810      	bhi.n	8004f44 <UART_SetConfig+0x174>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <UART_SetConfig+0x15c>
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d006      	beq.n	8004f38 <UART_SetConfig+0x168>
 8004f2a:	e00b      	b.n	8004f44 <UART_SetConfig+0x174>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e0f2      	b.n	8005118 <UART_SetConfig+0x348>
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e0ef      	b.n	8005118 <UART_SetConfig+0x348>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e0ec      	b.n	8005118 <UART_SetConfig+0x348>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e0e9      	b.n	8005118 <UART_SetConfig+0x348>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e0e6      	b.n	8005118 <UART_SetConfig+0x348>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a56      	ldr	r2, [pc, #344]	; (80050a8 <UART_SetConfig+0x2d8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d120      	bne.n	8004f96 <UART_SetConfig+0x1c6>
 8004f54:	4b51      	ldr	r3, [pc, #324]	; (800509c <UART_SetConfig+0x2cc>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f60:	d013      	beq.n	8004f8a <UART_SetConfig+0x1ba>
 8004f62:	2bc0      	cmp	r3, #192	; 0xc0
 8004f64:	d814      	bhi.n	8004f90 <UART_SetConfig+0x1c0>
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d009      	beq.n	8004f7e <UART_SetConfig+0x1ae>
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d810      	bhi.n	8004f90 <UART_SetConfig+0x1c0>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <UART_SetConfig+0x1a8>
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d006      	beq.n	8004f84 <UART_SetConfig+0x1b4>
 8004f76:	e00b      	b.n	8004f90 <UART_SetConfig+0x1c0>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e0cc      	b.n	8005118 <UART_SetConfig+0x348>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e0c9      	b.n	8005118 <UART_SetConfig+0x348>
 8004f84:	2304      	movs	r3, #4
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e0c6      	b.n	8005118 <UART_SetConfig+0x348>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e0c3      	b.n	8005118 <UART_SetConfig+0x348>
 8004f90:	2310      	movs	r3, #16
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e0c0      	b.n	8005118 <UART_SetConfig+0x348>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a44      	ldr	r2, [pc, #272]	; (80050ac <UART_SetConfig+0x2dc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d125      	bne.n	8004fec <UART_SetConfig+0x21c>
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <UART_SetConfig+0x2cc>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fae:	d017      	beq.n	8004fe0 <UART_SetConfig+0x210>
 8004fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb4:	d817      	bhi.n	8004fe6 <UART_SetConfig+0x216>
 8004fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fba:	d00b      	beq.n	8004fd4 <UART_SetConfig+0x204>
 8004fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc0:	d811      	bhi.n	8004fe6 <UART_SetConfig+0x216>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <UART_SetConfig+0x1fe>
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fca:	d006      	beq.n	8004fda <UART_SetConfig+0x20a>
 8004fcc:	e00b      	b.n	8004fe6 <UART_SetConfig+0x216>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e0a1      	b.n	8005118 <UART_SetConfig+0x348>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e09e      	b.n	8005118 <UART_SetConfig+0x348>
 8004fda:	2304      	movs	r3, #4
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e09b      	b.n	8005118 <UART_SetConfig+0x348>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e098      	b.n	8005118 <UART_SetConfig+0x348>
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e095      	b.n	8005118 <UART_SetConfig+0x348>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2f      	ldr	r2, [pc, #188]	; (80050b0 <UART_SetConfig+0x2e0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d125      	bne.n	8005042 <UART_SetConfig+0x272>
 8004ff6:	4b29      	ldr	r3, [pc, #164]	; (800509c <UART_SetConfig+0x2cc>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005004:	d017      	beq.n	8005036 <UART_SetConfig+0x266>
 8005006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800500a:	d817      	bhi.n	800503c <UART_SetConfig+0x26c>
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005010:	d00b      	beq.n	800502a <UART_SetConfig+0x25a>
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d811      	bhi.n	800503c <UART_SetConfig+0x26c>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <UART_SetConfig+0x254>
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d006      	beq.n	8005030 <UART_SetConfig+0x260>
 8005022:	e00b      	b.n	800503c <UART_SetConfig+0x26c>
 8005024:	2301      	movs	r3, #1
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e076      	b.n	8005118 <UART_SetConfig+0x348>
 800502a:	2302      	movs	r3, #2
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e073      	b.n	8005118 <UART_SetConfig+0x348>
 8005030:	2304      	movs	r3, #4
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e070      	b.n	8005118 <UART_SetConfig+0x348>
 8005036:	2308      	movs	r3, #8
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e06d      	b.n	8005118 <UART_SetConfig+0x348>
 800503c:	2310      	movs	r3, #16
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e06a      	b.n	8005118 <UART_SetConfig+0x348>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <UART_SetConfig+0x2e4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d138      	bne.n	80050be <UART_SetConfig+0x2ee>
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <UART_SetConfig+0x2cc>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005056:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800505a:	d017      	beq.n	800508c <UART_SetConfig+0x2bc>
 800505c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005060:	d82a      	bhi.n	80050b8 <UART_SetConfig+0x2e8>
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005066:	d00b      	beq.n	8005080 <UART_SetConfig+0x2b0>
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506c:	d824      	bhi.n	80050b8 <UART_SetConfig+0x2e8>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <UART_SetConfig+0x2aa>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d006      	beq.n	8005086 <UART_SetConfig+0x2b6>
 8005078:	e01e      	b.n	80050b8 <UART_SetConfig+0x2e8>
 800507a:	2300      	movs	r3, #0
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e04b      	b.n	8005118 <UART_SetConfig+0x348>
 8005080:	2302      	movs	r3, #2
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e048      	b.n	8005118 <UART_SetConfig+0x348>
 8005086:	2304      	movs	r3, #4
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e045      	b.n	8005118 <UART_SetConfig+0x348>
 800508c:	2308      	movs	r3, #8
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e042      	b.n	8005118 <UART_SetConfig+0x348>
 8005092:	bf00      	nop
 8005094:	efff69f3 	.word	0xefff69f3
 8005098:	40011000 	.word	0x40011000
 800509c:	40023800 	.word	0x40023800
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40004800 	.word	0x40004800
 80050a8:	40004c00 	.word	0x40004c00
 80050ac:	40005000 	.word	0x40005000
 80050b0:	40011400 	.word	0x40011400
 80050b4:	40007800 	.word	0x40007800
 80050b8:	2310      	movs	r3, #16
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e02c      	b.n	8005118 <UART_SetConfig+0x348>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a72      	ldr	r2, [pc, #456]	; (800528c <UART_SetConfig+0x4bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d125      	bne.n	8005114 <UART_SetConfig+0x344>
 80050c8:	4b71      	ldr	r3, [pc, #452]	; (8005290 <UART_SetConfig+0x4c0>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050d6:	d017      	beq.n	8005108 <UART_SetConfig+0x338>
 80050d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050dc:	d817      	bhi.n	800510e <UART_SetConfig+0x33e>
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e2:	d00b      	beq.n	80050fc <UART_SetConfig+0x32c>
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	d811      	bhi.n	800510e <UART_SetConfig+0x33e>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <UART_SetConfig+0x326>
 80050ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f2:	d006      	beq.n	8005102 <UART_SetConfig+0x332>
 80050f4:	e00b      	b.n	800510e <UART_SetConfig+0x33e>
 80050f6:	2300      	movs	r3, #0
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e00d      	b.n	8005118 <UART_SetConfig+0x348>
 80050fc:	2302      	movs	r3, #2
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e00a      	b.n	8005118 <UART_SetConfig+0x348>
 8005102:	2304      	movs	r3, #4
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e007      	b.n	8005118 <UART_SetConfig+0x348>
 8005108:	2308      	movs	r3, #8
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e004      	b.n	8005118 <UART_SetConfig+0x348>
 800510e:	2310      	movs	r3, #16
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e001      	b.n	8005118 <UART_SetConfig+0x348>
 8005114:	2310      	movs	r3, #16
 8005116:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	d15b      	bne.n	80051da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005122:	7ffb      	ldrb	r3, [r7, #31]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d828      	bhi.n	800517a <UART_SetConfig+0x3aa>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <UART_SetConfig+0x360>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	0800517b 	.word	0x0800517b
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800517b 	.word	0x0800517b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7fe fec4 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8005158:	61b8      	str	r0, [r7, #24]
        break;
 800515a:	e013      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800515c:	f7fe fed4 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 8005160:	61b8      	str	r0, [r7, #24]
        break;
 8005162:	e00f      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b4b      	ldr	r3, [pc, #300]	; (8005294 <UART_SetConfig+0x4c4>)
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e00c      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fe fda7 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 800516e:	61b8      	str	r0, [r7, #24]
        break;
 8005170:	e008      	b.n	8005184 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005176:	61bb      	str	r3, [r7, #24]
        break;
 8005178:	e004      	b.n	8005184 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	77bb      	strb	r3, [r7, #30]
        break;
 8005182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d074      	beq.n	8005274 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	005a      	lsls	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d916      	bls.n	80051d4 <UART_SetConfig+0x404>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d212      	bcs.n	80051d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f023 030f 	bic.w	r3, r3, #15
 80051b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	89fb      	ldrh	r3, [r7, #14]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	89fa      	ldrh	r2, [r7, #14]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e04f      	b.n	8005274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	77bb      	strb	r3, [r7, #30]
 80051d8:	e04c      	b.n	8005274 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051da:	7ffb      	ldrb	r3, [r7, #31]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d828      	bhi.n	8005232 <UART_SetConfig+0x462>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0x418>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	0800520d 	.word	0x0800520d
 80051ec:	08005215 	.word	0x08005215
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	08005233 	.word	0x08005233
 80051f8:	08005223 	.word	0x08005223
 80051fc:	08005233 	.word	0x08005233
 8005200:	08005233 	.word	0x08005233
 8005204:	08005233 	.word	0x08005233
 8005208:	0800522b 	.word	0x0800522b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fe fe68 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8005210:	61b8      	str	r0, [r7, #24]
        break;
 8005212:	e013      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005214:	f7fe fe78 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 8005218:	61b8      	str	r0, [r7, #24]
        break;
 800521a:	e00f      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <UART_SetConfig+0x4c4>)
 800521e:	61bb      	str	r3, [r7, #24]
        break;
 8005220:	e00c      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005222:	f7fe fd4b 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8005226:	61b8      	str	r0, [r7, #24]
        break;
 8005228:	e008      	b.n	800523c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	61bb      	str	r3, [r7, #24]
        break;
 8005230:	e004      	b.n	800523c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	77bb      	strb	r3, [r7, #30]
        break;
 800523a:	bf00      	nop
    }

    if (pclk != 0U)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	085a      	lsrs	r2, r3, #1
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	441a      	add	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d909      	bls.n	8005270 <UART_SetConfig+0x4a0>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005262:	d205      	bcs.n	8005270 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e001      	b.n	8005274 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005280:	7fbb      	ldrb	r3, [r7, #30]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40007c00 	.word	0x40007c00
 8005290:	40023800 	.word	0x40023800
 8005294:	00f42400 	.word	0x00f42400

08005298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005396:	d10a      	bne.n	80053ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ec:	f7fc face 	bl	800198c <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d10e      	bne.n	800541e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f817 	bl	8005442 <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e00d      	b.n	800543a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b09c      	sub	sp, #112	; 0x70
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	603b      	str	r3, [r7, #0]
 800544e:	4613      	mov	r3, r2
 8005450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005452:	e0a5      	b.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	f000 80a1 	beq.w	80055a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545e:	f7fc fa95 	bl	800198c <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800546a:	429a      	cmp	r2, r3
 800546c:	d302      	bcc.n	8005474 <UART_WaitOnFlagUntilTimeout+0x32>
 800546e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005470:	2b00      	cmp	r3, #0
 8005472:	d13e      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005488:	667b      	str	r3, [r7, #100]	; 0x64
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005494:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	663b      	str	r3, [r7, #96]	; 0x60
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80054c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e067      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d04f      	beq.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550e:	d147      	bne.n	80055a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005518:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800552e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
 800553a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800553e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e6      	bne.n	800551a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	613b      	str	r3, [r7, #16]
   return(result);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	66bb      	str	r3, [r7, #104]	; 0x68
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3308      	adds	r3, #8
 800556a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800556c:	623a      	str	r2, [r7, #32]
 800556e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	69f9      	ldr	r1, [r7, #28]
 8005572:	6a3a      	ldr	r2, [r7, #32]
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	61bb      	str	r3, [r7, #24]
   return(result);
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e5      	bne.n	800554c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e010      	b.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f43f af4a 	beq.w	8005454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3770      	adds	r7, #112	; 0x70
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055cc:	b084      	sub	sp, #16
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	f107 001c 	add.w	r0, r7, #28
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d120      	bne.n	8005626 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	4b20      	ldr	r3, [pc, #128]	; (8005678 <USB_CoreInit+0xac>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d105      	bne.n	800561a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fb38 	bl	8006c90 <USB_CoreReset>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	e010      	b.n	8005648 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 fb2c 	bl	8006c90 <USB_CoreReset>
 8005638:	4603      	mov	r3, r0
 800563a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10b      	bne.n	8005666 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f043 0206 	orr.w	r2, r3, #6
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005672:	b004      	add	sp, #16
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	ffbdffbf 	.word	0xffbdffbf

0800567c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d165      	bne.n	800575c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4a41      	ldr	r2, [pc, #260]	; (8005798 <USB_SetTurnaroundTime+0x11c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d906      	bls.n	80056a6 <USB_SetTurnaroundTime+0x2a>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a40      	ldr	r2, [pc, #256]	; (800579c <USB_SetTurnaroundTime+0x120>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d202      	bcs.n	80056a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056a0:	230f      	movs	r3, #15
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e062      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a3c      	ldr	r2, [pc, #240]	; (800579c <USB_SetTurnaroundTime+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d306      	bcc.n	80056bc <USB_SetTurnaroundTime+0x40>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d202      	bcs.n	80056bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056b6:	230e      	movs	r3, #14
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	e057      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <USB_SetTurnaroundTime+0x124>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d306      	bcc.n	80056d2 <USB_SetTurnaroundTime+0x56>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d202      	bcs.n	80056d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056cc:	230d      	movs	r3, #13
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	e04c      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4a33      	ldr	r2, [pc, #204]	; (80057a4 <USB_SetTurnaroundTime+0x128>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d306      	bcc.n	80056e8 <USB_SetTurnaroundTime+0x6c>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a32      	ldr	r2, [pc, #200]	; (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d802      	bhi.n	80056e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056e2:	230c      	movs	r3, #12
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e041      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4a2f      	ldr	r2, [pc, #188]	; (80057a8 <USB_SetTurnaroundTime+0x12c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d906      	bls.n	80056fe <USB_SetTurnaroundTime+0x82>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a2e      	ldr	r2, [pc, #184]	; (80057ac <USB_SetTurnaroundTime+0x130>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d802      	bhi.n	80056fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056f8:	230b      	movs	r3, #11
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e036      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <USB_SetTurnaroundTime+0x130>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d906      	bls.n	8005714 <USB_SetTurnaroundTime+0x98>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <USB_SetTurnaroundTime+0x134>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d802      	bhi.n	8005714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800570e:	230a      	movs	r3, #10
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e02b      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <USB_SetTurnaroundTime+0x134>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d906      	bls.n	800572a <USB_SetTurnaroundTime+0xae>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <USB_SetTurnaroundTime+0x138>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d202      	bcs.n	800572a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005724:	2309      	movs	r3, #9
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e020      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <USB_SetTurnaroundTime+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d306      	bcc.n	8005740 <USB_SetTurnaroundTime+0xc4>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d802      	bhi.n	8005740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800573a:	2308      	movs	r3, #8
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e015      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <USB_SetTurnaroundTime+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d906      	bls.n	8005756 <USB_SetTurnaroundTime+0xda>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <USB_SetTurnaroundTime+0x140>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d202      	bcs.n	8005756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005750:	2307      	movs	r3, #7
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e00a      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005756:	2306      	movs	r3, #6
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e007      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005762:	2309      	movs	r3, #9
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e001      	b.n	800576c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005768:	2309      	movs	r3, #9
 800576a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	00d8acbf 	.word	0x00d8acbf
 800579c:	00e4e1c0 	.word	0x00e4e1c0
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	01067380 	.word	0x01067380
 80057a8:	011a499f 	.word	0x011a499f
 80057ac:	01312cff 	.word	0x01312cff
 80057b0:	014ca43f 	.word	0x014ca43f
 80057b4:	016e3600 	.word	0x016e3600
 80057b8:	01a6ab1f 	.word	0x01a6ab1f
 80057bc:	01e84800 	.word	0x01e84800

080057c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f043 0201 	orr.w	r2, r3, #1
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d115      	bne.n	8005852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005832:	2001      	movs	r0, #1
 8005834:	f7fc f8b6 	bl	80019a4 <HAL_Delay>
      ms++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 f995 	bl	8006b6e <USB_GetMode>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d01e      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b31      	cmp	r3, #49	; 0x31
 800584e:	d9f0      	bls.n	8005832 <USB_SetCurrentMode+0x2e>
 8005850:	e01a      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005864:	2001      	movs	r0, #1
 8005866:	f7fc f89d 	bl	80019a4 <HAL_Delay>
      ms++;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3301      	adds	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f97c 	bl	8006b6e <USB_GetMode>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <USB_SetCurrentMode+0x84>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b31      	cmp	r3, #49	; 0x31
 8005880:	d9f0      	bls.n	8005864 <USB_SetCurrentMode+0x60>
 8005882:	e001      	b.n	8005888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e005      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b32      	cmp	r3, #50	; 0x32
 800588c:	d101      	bne.n	8005892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800589c:	b084      	sub	sp, #16
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e009      	b.n	80058d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3340      	adds	r3, #64	; 0x40
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3301      	adds	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0e      	cmp	r3, #14
 80058d4:	d9f2      	bls.n	80058bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11c      	bne.n	8005916 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e005      	b.n	8005922 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005928:	461a      	mov	r2, r3
 800592a:	2300      	movs	r3, #0
 800592c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	4619      	mov	r1, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	461a      	mov	r2, r3
 800593e:	680b      	ldr	r3, [r1, #0]
 8005940:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10c      	bne.n	8005962 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800594e:	2100      	movs	r1, #0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f961 	bl	8005c18 <USB_SetDevSpeed>
 8005956:	e008      	b.n	800596a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005958:	2101      	movs	r1, #1
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f95c 	bl	8005c18 <USB_SetDevSpeed>
 8005960:	e003      	b.n	800596a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005962:	2103      	movs	r1, #3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f957 	bl	8005c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800596a:	2110      	movs	r1, #16
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f8f3 	bl	8005b58 <USB_FlushTxFifo>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f91d 	bl	8005bbc <USB_FlushRxFifo>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	461a      	mov	r2, r3
 8005994:	2300      	movs	r3, #0
 8005996:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	461a      	mov	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	461a      	mov	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	e043      	b.n	8005a3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059cc:	d118      	bne.n	8005a00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	461a      	mov	r2, r3
 80059e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e013      	b.n	8005a12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	461a      	mov	r2, r3
 80059f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e008      	b.n	8005a12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	461a      	mov	r2, r3
 8005a32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d3b7      	bcc.n	80059b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e043      	b.n	8005ad4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a62:	d118      	bne.n	8005a96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	461a      	mov	r2, r3
 8005a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e013      	b.n	8005aa8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	e008      	b.n	8005aa8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005acc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3b7      	bcc.n	8005a4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005afc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f043 0210 	orr.w	r2, r3, #16
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <USB_DevInit+0x2b4>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f043 0208 	orr.w	r2, r3, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d105      	bne.n	8005b40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <USB_DevInit+0x2b8>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b4c:	b004      	add	sp, #16
 8005b4e:	4770      	bx	lr
 8005b50:	803c3800 	.word	0x803c3800
 8005b54:	40000004 	.word	0x40000004

08005b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	4a12      	ldr	r2, [pc, #72]	; (8005bb8 <USB_FlushTxFifo+0x60>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e01a      	b.n	8005bac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	daf3      	bge.n	8005b66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <USB_FlushTxFifo+0x60>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e006      	b.n	8005bac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d0f1      	beq.n	8005b8e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	00030d40 	.word	0x00030d40

08005bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <USB_FlushRxFifo+0x58>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e017      	b.n	8005c08 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	daf3      	bge.n	8005bc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2210      	movs	r2, #16
 8005be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <USB_FlushRxFifo+0x58>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e006      	b.n	8005c08 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d0f1      	beq.n	8005bea <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	00030d40 	.word	0x00030d40

08005c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0306 	and.w	r3, r3, #6
 8005c62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
 8005c6e:	e00a      	b.n	8005c86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d002      	beq.n	8005c7c <USB_GetDevSpeed+0x32>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d102      	bne.n	8005c82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	75fb      	strb	r3, [r7, #23]
 8005c80:	e001      	b.n	8005c86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c82:	230f      	movs	r3, #15
 8005c84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	785b      	ldrb	r3, [r3, #1]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d139      	bne.n	8005d24 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	68f9      	ldr	r1, [r7, #12]
 8005cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d153      	bne.n	8005d90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	78db      	ldrb	r3, [r3, #3]
 8005d02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	059b      	lsls	r3, r3, #22
 8005d0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	0159      	lsls	r1, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	440b      	add	r3, r1
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <USB_ActivateEndpoint+0x10c>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]
 8005d22:	e035      	b.n	8005d90 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d119      	bne.n	8005d90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	78db      	ldrb	r3, [r3, #3]
 8005d76:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	0159      	lsls	r1, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	440b      	add	r3, r1
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <USB_ActivateEndpoint+0x10c>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	10008000 	.word	0x10008000

08005da4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d161      	bne.n	8005e84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd6:	d11f      	bne.n	8005e18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005df6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	2101      	movs	r1, #1
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e38:	4013      	ands	r3, r2
 8005e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	0159      	lsls	r1, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	440b      	add	r3, r1
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4b35      	ldr	r3, [pc, #212]	; (8005f54 <USB_DeactivateEndpoint+0x1b0>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]
 8005e82:	e060      	b.n	8005f46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e9a:	d11f      	bne.n	8005edc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005efc:	4013      	ands	r3, r2
 8005efe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	2101      	movs	r1, #1
 8005f12:	fa01 f303 	lsl.w	r3, r1, r3
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	68f9      	ldr	r1, [r7, #12]
 8005f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f20:	4013      	ands	r3, r2
 8005f22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	0159      	lsls	r1, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	440b      	add	r3, r1
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <USB_DeactivateEndpoint+0x1b4>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	ec337800 	.word	0xec337800
 8005f58:	eff37800 	.word	0xeff37800

08005f5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f040 8163 	bne.w	8006244 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d132      	bne.n	8005fec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	0159      	lsls	r1, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4ba5      	ldr	r3, [pc, #660]	; (8006238 <USB_EPStartXfer+0x2dc>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	0159      	lsls	r1, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	440b      	add	r3, r1
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4b95      	ldr	r3, [pc, #596]	; (800623c <USB_EPStartXfer+0x2e0>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	610b      	str	r3, [r1, #16]
 8005fea:	e074      	b.n	80060d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	0159      	lsls	r1, r3, #5
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	440b      	add	r3, r1
 8006002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006006:	4619      	mov	r1, r3
 8006008:	4b8c      	ldr	r3, [pc, #560]	; (800623c <USB_EPStartXfer+0x2e0>)
 800600a:	4013      	ands	r3, r2
 800600c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	0159      	lsls	r1, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	440b      	add	r3, r1
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	4619      	mov	r1, r3
 800602a:	4b83      	ldr	r3, [pc, #524]	; (8006238 <USB_EPStartXfer+0x2dc>)
 800602c:	4013      	ands	r3, r2
 800602e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6959      	ldr	r1, [r3, #20]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	440b      	add	r3, r1
 8006048:	1e59      	subs	r1, r3, #1
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006052:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006054:	4b7a      	ldr	r3, [pc, #488]	; (8006240 <USB_EPStartXfer+0x2e4>)
 8006056:	400b      	ands	r3, r1
 8006058:	69b9      	ldr	r1, [r7, #24]
 800605a:	0148      	lsls	r0, r1, #5
 800605c:	69f9      	ldr	r1, [r7, #28]
 800605e:	4401      	add	r1, r0
 8006060:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006064:	4313      	orrs	r3, r2
 8006066:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607e:	69b9      	ldr	r1, [r7, #24]
 8006080:	0148      	lsls	r0, r1, #5
 8006082:	69f9      	ldr	r1, [r7, #28]
 8006084:	4401      	add	r1, r0
 8006086:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	78db      	ldrb	r3, [r3, #3]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d11f      	bne.n	80060d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d14b      	bne.n	8006174 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d128      	bne.n	8006152 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d110      	bne.n	8006132 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	440a      	add	r2, r1
 8006126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	e00f      	b.n	8006152 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006150:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	e133      	b.n	80063dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006192:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	78db      	ldrb	r3, [r3, #3]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d015      	beq.n	80061c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 811b 	beq.w	80063dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	2101      	movs	r1, #1
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	69f9      	ldr	r1, [r7, #28]
 80061be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061c2:	4313      	orrs	r3, r2
 80061c4:	634b      	str	r3, [r1, #52]	; 0x34
 80061c6:	e109      	b.n	80063dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d110      	bne.n	80061fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e00f      	b.n	800621a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006218:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	68d9      	ldr	r1, [r3, #12]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	b298      	uxth	r0, r3
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4603      	mov	r3, r0
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa38 	bl	80066a4 <USB_WritePacket>
 8006234:	e0d2      	b.n	80063dc <USB_EPStartXfer+0x480>
 8006236:	bf00      	nop
 8006238:	e007ffff 	.word	0xe007ffff
 800623c:	fff80000 	.word	0xfff80000
 8006240:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	0159      	lsls	r1, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	440b      	add	r3, r1
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	4619      	mov	r1, r3
 8006260:	4b61      	ldr	r3, [pc, #388]	; (80063e8 <USB_EPStartXfer+0x48c>)
 8006262:	4013      	ands	r3, r2
 8006264:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	0159      	lsls	r1, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	440b      	add	r3, r1
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	4619      	mov	r1, r3
 8006282:	4b5a      	ldr	r3, [pc, #360]	; (80063ec <USB_EPStartXfer+0x490>)
 8006284:	4013      	ands	r3, r2
 8006286:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d123      	bne.n	80062d8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a6:	69b9      	ldr	r1, [r7, #24]
 80062a8:	0148      	lsls	r0, r1, #5
 80062aa:	69f9      	ldr	r1, [r7, #28]
 80062ac:	4401      	add	r1, r0
 80062ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062b2:	4313      	orrs	r3, r2
 80062b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d4:	6113      	str	r3, [r2, #16]
 80062d6:	e033      	b.n	8006340 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	8afb      	ldrh	r3, [r7, #22]
 80062fe:	04d9      	lsls	r1, r3, #19
 8006300:	4b3b      	ldr	r3, [pc, #236]	; (80063f0 <USB_EPStartXfer+0x494>)
 8006302:	400b      	ands	r3, r1
 8006304:	69b9      	ldr	r1, [r7, #24]
 8006306:	0148      	lsls	r0, r1, #5
 8006308:	69f9      	ldr	r1, [r7, #28]
 800630a:	4401      	add	r1, r0
 800630c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006310:	4313      	orrs	r3, r2
 8006312:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	8af9      	ldrh	r1, [r7, #22]
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	0148      	lsls	r0, r1, #5
 8006334:	69f9      	ldr	r1, [r7, #28]
 8006336:	4401      	add	r1, r0
 8006338:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800633c:	4313      	orrs	r3, r2
 800633e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d10d      	bne.n	8006362 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	460a      	mov	r2, r1
 8006360:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	78db      	ldrb	r3, [r3, #3]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d128      	bne.n	80063bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e00f      	b.n	80063bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	fff80000 	.word	0xfff80000
 80063ec:	e007ffff 	.word	0xe007ffff
 80063f0:	1ff80000 	.word	0x1ff80000

080063f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b01      	cmp	r3, #1
 8006412:	f040 80cd 	bne.w	80065b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d132      	bne.n	8006484 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	0159      	lsls	r1, r3, #5
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	440b      	add	r3, r1
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	4619      	mov	r1, r3
 800643a:	4b98      	ldr	r3, [pc, #608]	; (800669c <USB_EP0StartXfer+0x2a8>)
 800643c:	4013      	ands	r3, r2
 800643e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800645e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	0159      	lsls	r1, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	440b      	add	r3, r1
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	4619      	mov	r1, r3
 800647c:	4b88      	ldr	r3, [pc, #544]	; (80066a0 <USB_EP0StartXfer+0x2ac>)
 800647e:	4013      	ands	r3, r2
 8006480:	610b      	str	r3, [r1, #16]
 8006482:	e04e      	b.n	8006522 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006490:	691a      	ldr	r2, [r3, #16]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	0159      	lsls	r1, r3, #5
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	440b      	add	r3, r1
 800649a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649e:	4619      	mov	r1, r3
 80064a0:	4b7f      	ldr	r3, [pc, #508]	; (80066a0 <USB_EP0StartXfer+0x2ac>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	0159      	lsls	r1, r3, #5
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	440b      	add	r3, r1
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	4619      	mov	r1, r3
 80064c2:	4b76      	ldr	r3, [pc, #472]	; (800669c <USB_EP0StartXfer+0x2a8>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	695a      	ldr	r2, [r3, #20]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d903      	bls.n	80064dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006512:	6939      	ldr	r1, [r7, #16]
 8006514:	0148      	lsls	r0, r1, #5
 8006516:	6979      	ldr	r1, [r7, #20]
 8006518:	4401      	add	r1, r0
 800651a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800651e:	4313      	orrs	r3, r2
 8006520:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d11e      	bne.n	8006566 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	e092      	b.n	800668c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006584:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d07e      	beq.n	800668c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	2101      	movs	r1, #1
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065aa:	4313      	orrs	r3, r2
 80065ac:	634b      	str	r3, [r1, #52]	; 0x34
 80065ae:	e06d      	b.n	800668c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	0159      	lsls	r1, r3, #5
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	440b      	add	r3, r1
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	4619      	mov	r1, r3
 80065cc:	4b34      	ldr	r3, [pc, #208]	; (80066a0 <USB_EP0StartXfer+0x2ac>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	0159      	lsls	r1, r3, #5
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	440b      	add	r3, r1
 80065e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ec:	4619      	mov	r1, r3
 80065ee:	4b2b      	ldr	r3, [pc, #172]	; (800669c <USB_EP0StartXfer+0x2a8>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006622:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663a:	6939      	ldr	r1, [r7, #16]
 800663c:	0148      	lsls	r0, r1, #5
 800663e:	6979      	ldr	r1, [r7, #20]
 8006640:	4401      	add	r1, r0
 8006642:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006646:	4313      	orrs	r3, r2
 8006648:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10d      	bne.n	800666c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	68d9      	ldr	r1, [r3, #12]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006668:	460a      	mov	r2, r1
 800666a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800668a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	e007ffff 	.word	0xe007ffff
 80066a0:	fff80000 	.word	0xfff80000

080066a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b089      	sub	sp, #36	; 0x24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4611      	mov	r1, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	460b      	mov	r3, r1
 80066b4:	71fb      	strb	r3, [r7, #7]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d123      	bne.n	8006712 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066ca:	88bb      	ldrh	r3, [r7, #4]
 80066cc:	3303      	adds	r3, #3
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	e018      	b.n	800670a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	031a      	lsls	r2, r3, #12
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e4:	461a      	mov	r2, r3
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	3301      	adds	r3, #1
 80066f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3301      	adds	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	3301      	adds	r3, #1
 8006702:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	3301      	adds	r3, #1
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	429a      	cmp	r2, r3
 8006710:	d3e2      	bcc.n	80066d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3724      	adds	r7, #36	; 0x24
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006720:	b480      	push	{r7}
 8006722:	b08b      	sub	sp, #44	; 0x2c
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	4613      	mov	r3, r2
 800672c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	089b      	lsrs	r3, r3, #2
 800673a:	b29b      	uxth	r3, r3
 800673c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006746:	2300      	movs	r3, #0
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	e014      	b.n	8006776 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	601a      	str	r2, [r3, #0]
    pDest++;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	3301      	adds	r3, #1
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	3301      	adds	r3, #1
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	3301      	adds	r3, #1
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	3301      	adds	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	3301      	adds	r3, #1
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	6a3a      	ldr	r2, [r7, #32]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	429a      	cmp	r2, r3
 800677c:	d3e6      	bcc.n	800674c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800677e:	8bfb      	ldrh	r3, [r7, #30]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01e      	beq.n	80067c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678e:	461a      	mov	r2, r3
 8006790:	f107 0310 	add.w	r3, r7, #16
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	fa22 f303 	lsr.w	r3, r2, r3
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	701a      	strb	r2, [r3, #0]
      i++;
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	3301      	adds	r3, #1
 80067ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	3301      	adds	r3, #1
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067b6:	8bfb      	ldrh	r3, [r7, #30]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067bc:	8bfb      	ldrh	r3, [r7, #30]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1ea      	bne.n	8006798 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	372c      	adds	r7, #44	; 0x2c
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d12c      	bne.n	8006846 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	db12      	blt.n	8006824 <USB_EPSetStall+0x54>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00f      	beq.n	8006824 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006822:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	440a      	add	r2, r1
 800683a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	e02b      	b.n	800689e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	db12      	blt.n	800687e <USB_EPSetStall+0xae>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00f      	beq.n	800687e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	0151      	lsls	r1, r2, #5
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	440a      	add	r2, r1
 8006874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006878:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800687c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	440a      	add	r2, r1
 8006894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800689c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	785b      	ldrb	r3, [r3, #1]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d128      	bne.n	800691a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	78db      	ldrb	r3, [r3, #3]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d003      	beq.n	80068f8 <USB_EPClearStall+0x4c>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	78db      	ldrb	r3, [r3, #3]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d138      	bne.n	800696a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	440a      	add	r2, r1
 800690e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	e027      	b.n	800696a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	440a      	add	r2, r1
 8006930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006938:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	78db      	ldrb	r3, [r3, #3]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d003      	beq.n	800694a <USB_EPClearStall+0x9e>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	78db      	ldrb	r3, [r3, #3]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d10f      	bne.n	800696a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006968:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006996:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800699a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069ac:	68f9      	ldr	r1, [r7, #12]
 80069ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b2:	4313      	orrs	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f2:	f023 0302 	bic.w	r3, r3, #2
 80069f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a20:	f023 0303 	bic.w	r3, r3, #3
 8006a24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a60:	68fb      	ldr	r3, [r7, #12]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	0c1b      	lsrs	r3, r3, #16
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	b29b      	uxth	r3, r3
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4013      	ands	r3, r2
 8006b02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b04:	68bb      	ldr	r3, [r7, #8]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b087      	sub	sp, #28
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b36:	78fb      	ldrb	r3, [r7, #3]
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b60:	68bb      	ldr	r3, [r7, #8]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <USB_ActivateSetup+0x44>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	fffff800 	.word	0xfffff800

08006bd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	333c      	adds	r3, #60	; 0x3c
 8006bea:	3304      	adds	r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <USB_EP0_OutStart+0xb8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d90a      	bls.n	8006c0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c08:	d101      	bne.n	8006c0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e037      	b.n	8006c7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	461a      	mov	r2, r3
 8006c16:	2300      	movs	r3, #0
 8006c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3c:	f043 0318 	orr.w	r3, r3, #24
 8006c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d10f      	bne.n	8006c7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	4f54300a 	.word	0x4f54300a

08006c90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <USB_CoreReset+0x60>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e01a      	b.n	8006ce2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	daf3      	bge.n	8006c9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <USB_CoreReset+0x60>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e006      	b.n	8006ce2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d0f1      	beq.n	8006cc4 <USB_CoreReset+0x34>

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	00030d40 	.word	0x00030d40

08006cf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d04:	f009 fd9a 	bl	801083c <malloc>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e066      	b.n	8006dec <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7c1b      	ldrb	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d119      	bne.n	8006d62 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d32:	2202      	movs	r2, #2
 8006d34:	2181      	movs	r1, #129	; 0x81
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f005 fb0d 	bl	800c356 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d46:	2202      	movs	r2, #2
 8006d48:	2101      	movs	r1, #1
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f005 fb03 	bl	800c356 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006d60:	e016      	b.n	8006d90 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	2202      	movs	r2, #2
 8006d66:	2181      	movs	r1, #129	; 0x81
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f005 faf4 	bl	800c356 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	2202      	movs	r2, #2
 8006d78:	2101      	movs	r1, #1
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f005 faeb 	bl	800c356 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d90:	2308      	movs	r3, #8
 8006d92:	2203      	movs	r2, #3
 8006d94:	2182      	movs	r1, #130	; 0x82
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f005 fadd 	bl	800c356 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7c1b      	ldrb	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f005 fbae 	bl	800c534 <USBD_LL_PrepareReceive>
 8006dd8:	e007      	b.n	8006dea <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	2101      	movs	r1, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f005 fba5 	bl	800c534 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e04:	2181      	movs	r1, #129	; 0x81
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f005 facb 	bl	800c3a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e12:	2101      	movs	r1, #1
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f005 fac4 	bl	800c3a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e22:	2182      	movs	r1, #130	; 0x82
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f005 fabc 	bl	800c3a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e54:	4618      	mov	r0, r3
 8006e56:	f009 fcf9 	bl	801084c <free>
    pdev->pClassData = NULL;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d03a      	beq.n	8006f0c <USBD_CDC_Setup+0xa0>
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	f040 8097 	bne.w	8006fca <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	88db      	ldrh	r3, [r3, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d029      	beq.n	8006ef8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b25b      	sxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da11      	bge.n	8006ed2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006eba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	88d2      	ldrh	r2, [r2, #6]
 8006ec0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ec2:	6939      	ldr	r1, [r7, #16]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	88db      	ldrh	r3, [r3, #6]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fad6 	bl	800847c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006ed0:	e082      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	785a      	ldrb	r2, [r3, #1]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	88db      	ldrh	r3, [r3, #6]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ee8:	6939      	ldr	r1, [r7, #16]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 faef 	bl	80084d4 <USBD_CtlPrepareRx>
    break;
 8006ef6:	e06f      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	7850      	ldrb	r0, [r2, #1]
 8006f04:	2200      	movs	r2, #0
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	4798      	blx	r3
    break;
 8006f0a:	e065      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b0b      	cmp	r3, #11
 8006f12:	d84f      	bhi.n	8006fb4 <USBD_CDC_Setup+0x148>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <USBD_CDC_Setup+0xb0>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006fc3 	.word	0x08006fc3
 8006f24:	08006fb5 	.word	0x08006fb5
 8006f28:	08006fb5 	.word	0x08006fb5
 8006f2c:	08006fb5 	.word	0x08006fb5
 8006f30:	08006fb5 	.word	0x08006fb5
 8006f34:	08006fb5 	.word	0x08006fb5
 8006f38:	08006fb5 	.word	0x08006fb5
 8006f3c:	08006fb5 	.word	0x08006fb5
 8006f40:	08006fb5 	.word	0x08006fb5
 8006f44:	08006f75 	.word	0x08006f75
 8006f48:	08006f9d 	.word	0x08006f9d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d107      	bne.n	8006f66 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f56:	f107 030c 	add.w	r3, r7, #12
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fa8c 	bl	800847c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f64:	e030      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fa16 	bl	800839a <USBD_CtlError>
        ret = USBD_FAIL;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	75fb      	strb	r3, [r7, #23]
      break;
 8006f72:	e029      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d107      	bne.n	8006f8e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f7e:	f107 030f 	add.w	r3, r7, #15
 8006f82:	2201      	movs	r2, #1
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fa78 	bl	800847c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f8c:	e01c      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 fa02 	bl	800839a <USBD_CtlError>
        ret = USBD_FAIL;
 8006f96:	2303      	movs	r3, #3
 8006f98:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9a:	e015      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d00f      	beq.n	8006fc6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 f9f6 	bl	800839a <USBD_CtlError>
        ret = USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006fb2:	e008      	b.n	8006fc6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f9ef 	bl	800839a <USBD_CtlError>
      ret = USBD_FAIL;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc0:	e002      	b.n	8006fc8 <USBD_CDC_Setup+0x15c>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e008      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>
      break;
 8006fc6:	bf00      	nop
    }
    break;
 8006fc8:	e006      	b.n	8006fd8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 f9e4 	bl	800839a <USBD_CtlError>
    ret = USBD_FAIL;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	75fb      	strb	r3, [r7, #23]
    break;
 8006fd6:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop

08006fe4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ff6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007002:	2303      	movs	r3, #3
 8007004:	e049      	b.n	800709a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800700c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3318      	adds	r3, #24
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d029      	beq.n	8007078 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	3318      	adds	r3, #24
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	78f9      	ldrb	r1, [r7, #3]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	460b      	mov	r3, r1
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4403      	add	r3, r0
 8007044:	3344      	adds	r3, #68	; 0x44
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	fbb2 f1f3 	udiv	r1, r2, r3
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007052:	2b00      	cmp	r3, #0
 8007054:	d110      	bne.n	8007078 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	3318      	adds	r3, #24
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800706a:	78f9      	ldrb	r1, [r7, #3]
 800706c:	2300      	movs	r3, #0
 800706e:	2200      	movs	r2, #0
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f005 fa3e 	bl	800c4f2 <USBD_LL_Transmit>
 8007076:	e00f      	b.n	8007098 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e015      	b.n	80070f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f005 fa54 	bl	800c576 <USBD_LL_GetRxDataSize>
 80070ce:	4602      	mov	r2, r0
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070ea:	4611      	mov	r1, r2
 80070ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007106:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d015      	beq.n	800713e <USBD_CDC_EP0_RxReady+0x46>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007118:	2bff      	cmp	r3, #255	; 0xff
 800711a:	d010      	beq.n	800713e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800712a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007132:	b292      	uxth	r2, r2
 8007134:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2243      	movs	r2, #67	; 0x43
 8007154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	20000098 	.word	0x20000098

08007168 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2243      	movs	r2, #67	; 0x43
 8007174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007176:	4b03      	ldr	r3, [pc, #12]	; (8007184 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000054 	.word	0x20000054

08007188 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2243      	movs	r2, #67	; 0x43
 8007194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007196:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	200000dc 	.word	0x200000dc

080071a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	220a      	movs	r2, #10
 80071b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80071b6:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000010 	.word	0x20000010

080071c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	e004      	b.n	80071e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007204:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007234:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800725a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	e01a      	b.n	80072a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007274:	2b00      	cmp	r3, #0
 8007276:	d114      	bne.n	80072a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2201      	movs	r2, #1
 800727c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007296:	2181      	movs	r1, #129	; 0x81
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f005 f92a 	bl	800c4f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e016      	b.n	80072f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7c1b      	ldrb	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072dc:	2101      	movs	r1, #1
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f005 f928 	bl	800c534 <USBD_LL_PrepareReceive>
 80072e4:	e007      	b.n	80072f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ec:	2340      	movs	r3, #64	; 0x40
 80072ee:	2101      	movs	r1, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f005 f91f 	bl	800c534 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	e025      	b.n	8007364 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	79fa      	ldrb	r2, [r7, #7]
 8007356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f004 ff95 	bl	800c288 <USBD_LL_Init>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e010      	b.n	80073a6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	f107 020e 	add.w	r2, r7, #14
 8007398:	4610      	mov	r0, r2
 800739a:	4798      	blx	r3
 800739c:	4602      	mov	r2, r0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f004 ffb2 	bl	800c320 <USBD_LL_Start>
 80073bc:	4603      	mov	r3, r0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073e8:	2303      	movs	r3, #3
 80073ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	4611      	mov	r1, r2
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	4611      	mov	r1, r2
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	4798      	blx	r3
  }

  return USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 ff65 	bl	8008326 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	2b02      	cmp	r3, #2
 800747e:	d01a      	beq.n	80074b6 <USBD_LL_SetupStage+0x72>
 8007480:	2b02      	cmp	r3, #2
 8007482:	d822      	bhi.n	80074ca <USBD_LL_SetupStage+0x86>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <USBD_LL_SetupStage+0x4a>
 8007488:	2b01      	cmp	r3, #1
 800748a:	d00a      	beq.n	80074a2 <USBD_LL_SetupStage+0x5e>
 800748c:	e01d      	b.n	80074ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa18 	bl	80078cc <USBD_StdDevReq>
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]
      break;
 80074a0:	e020      	b.n	80074e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa7c 	bl	80079a8 <USBD_StdItfReq>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
      break;
 80074b4:	e016      	b.n	80074e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 faba 	bl	8007a38 <USBD_StdEPReq>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	e00c      	b.n	80074e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f004 ff81 	bl	800c3e0 <USBD_LL_StallEP>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
      break;
 80074e2:	bf00      	nop
  }

  return ret;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	460b      	mov	r3, r1
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074fc:	7afb      	ldrb	r3, [r7, #11]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d137      	bne.n	8007572 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007508:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007510:	2b03      	cmp	r3, #3
 8007512:	d14a      	bne.n	80075aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	429a      	cmp	r2, r3
 800751e:	d913      	bls.n	8007548 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	1ad2      	subs	r2, r2, r3
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	4293      	cmp	r3, r2
 8007538:	bf28      	it	cs
 800753a:	4613      	movcs	r3, r2
 800753c:	461a      	mov	r2, r3
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 ffe4 	bl	800850e <USBD_CtlContinueRx>
 8007546:	e030      	b.n	80075aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800755a:	2b03      	cmp	r3, #3
 800755c:	d105      	bne.n	800756a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 ffe0 	bl	8008530 <USBD_CtlSendStatus>
 8007570:	e01b      	b.n	80075aa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d013      	beq.n	80075a6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007584:	2b03      	cmp	r3, #3
 8007586:	d10e      	bne.n	80075a6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	7afa      	ldrb	r2, [r7, #11]
 8007592:	4611      	mov	r1, r2
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	4798      	blx	r3
 8007598:	4603      	mov	r3, r0
 800759a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	e002      	b.n	80075ac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e000      	b.n	80075ac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	460b      	mov	r3, r1
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d16a      	bne.n	800769e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3314      	adds	r3, #20
 80075cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d155      	bne.n	8007684 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d914      	bls.n	800760e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	1ad2      	subs	r2, r2, r3
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 ff59 	bl	80084b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007600:	2300      	movs	r3, #0
 8007602:	2200      	movs	r2, #0
 8007604:	2100      	movs	r1, #0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f004 ff94 	bl	800c534 <USBD_LL_PrepareReceive>
 800760c:	e03a      	b.n	8007684 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	429a      	cmp	r2, r3
 8007618:	d11c      	bne.n	8007654 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007622:	429a      	cmp	r2, r3
 8007624:	d316      	bcc.n	8007654 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007630:	429a      	cmp	r2, r3
 8007632:	d20f      	bcs.n	8007654 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 ff3a 	bl	80084b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007646:	2300      	movs	r3, #0
 8007648:	2200      	movs	r2, #0
 800764a:	2100      	movs	r1, #0
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f004 ff71 	bl	800c534 <USBD_LL_PrepareReceive>
 8007652:	e017      	b.n	8007684 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007666:	2b03      	cmp	r3, #3
 8007668:	d105      	bne.n	8007676 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007676:	2180      	movs	r1, #128	; 0x80
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f004 feb1 	bl	800c3e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 ff69 	bl	8008556 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800768a:	2b01      	cmp	r3, #1
 800768c:	d123      	bne.n	80076d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fe99 	bl	80073c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800769c:	e01b      	b.n	80076d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d013      	beq.n	80076d2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d10e      	bne.n	80076d2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	7afa      	ldrb	r2, [r7, #11]
 80076be:	4611      	mov	r1, r2
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	4798      	blx	r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	e002      	b.n	80076d8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e000      	b.n	80076d8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6852      	ldr	r2, [r2, #4]
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	4611      	mov	r1, r2
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	2200      	movs	r2, #0
 8007728:	2100      	movs	r1, #0
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f004 fe13 	bl	800c356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2240      	movs	r2, #64	; 0x40
 800773c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	2200      	movs	r2, #0
 8007744:	2180      	movs	r1, #128	; 0x80
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f004 fe05 	bl	800c356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2240      	movs	r2, #64	; 0x40
 8007756:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2204      	movs	r2, #4
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d105      	bne.n	80077ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d10b      	bne.n	8007802 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6852      	ldr	r2, [r2, #4]
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	4611      	mov	r1, r2
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
  }

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800788e:	b480      	push	{r7}
 8007890:	b087      	sub	sp, #28
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	3301      	adds	r3, #1
 80078a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078ac:	8a3b      	ldrh	r3, [r7, #16]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	b21a      	sxth	r2, r3
 80078b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	b21b      	sxth	r3, r3
 80078ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078bc:	89fb      	ldrh	r3, [r7, #14]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078e2:	2b40      	cmp	r3, #64	; 0x40
 80078e4:	d005      	beq.n	80078f2 <USBD_StdDevReq+0x26>
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d853      	bhi.n	8007992 <USBD_StdDevReq+0xc6>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <USBD_StdDevReq+0x3a>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d14f      	bne.n	8007992 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
    break;
 8007904:	e04a      	b.n	800799c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	2b09      	cmp	r3, #9
 800790c:	d83b      	bhi.n	8007986 <USBD_StdDevReq+0xba>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <USBD_StdDevReq+0x48>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	08007969 	.word	0x08007969
 8007918:	0800797d 	.word	0x0800797d
 800791c:	08007987 	.word	0x08007987
 8007920:	08007973 	.word	0x08007973
 8007924:	08007987 	.word	0x08007987
 8007928:	08007947 	.word	0x08007947
 800792c:	0800793d 	.word	0x0800793d
 8007930:	08007987 	.word	0x08007987
 8007934:	0800795f 	.word	0x0800795f
 8007938:	08007951 	.word	0x08007951
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f9d8 	bl	8007cf4 <USBD_GetDescriptor>
      break;
 8007944:	e024      	b.n	8007990 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fb67 	bl	800801c <USBD_SetAddress>
      break;
 800794e:	e01f      	b.n	8007990 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fba6 	bl	80080a4 <USBD_SetConfig>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
      break;
 800795c:	e018      	b.n	8007990 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fc43 	bl	80081ec <USBD_GetConfig>
      break;
 8007966:	e013      	b.n	8007990 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc73 	bl	8008256 <USBD_GetStatus>
      break;
 8007970:	e00e      	b.n	8007990 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fca1 	bl	80082bc <USBD_SetFeature>
      break;
 800797a:	e009      	b.n	8007990 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fcb0 	bl	80082e4 <USBD_ClrFeature>
      break;
 8007984:	e004      	b.n	8007990 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fd06 	bl	800839a <USBD_CtlError>
      break;
 800798e:	bf00      	nop
    }
    break;
 8007990:	e004      	b.n	800799c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fd00 	bl	800839a <USBD_CtlError>
    break;
 800799a:	bf00      	nop
  }

  return ret;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop

080079a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d005      	beq.n	80079ce <USBD_StdItfReq+0x26>
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d82e      	bhi.n	8007a24 <USBD_StdItfReq+0x7c>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <USBD_StdItfReq+0x26>
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d12a      	bne.n	8007a24 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d4:	3b01      	subs	r3, #1
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d81d      	bhi.n	8007a16 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	889b      	ldrh	r3, [r3, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d813      	bhi.n	8007a0c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	88db      	ldrh	r3, [r3, #6]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d110      	bne.n	8007a20 <USBD_StdItfReq+0x78>
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10d      	bne.n	8007a20 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fd93 	bl	8008530 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007a0a:	e009      	b.n	8007a20 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fcc3 	bl	800839a <USBD_CtlError>
      break;
 8007a14:	e004      	b.n	8007a20 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fcbe 	bl	800839a <USBD_CtlError>
      break;
 8007a1e:	e000      	b.n	8007a22 <USBD_StdItfReq+0x7a>
      break;
 8007a20:	bf00      	nop
    }
    break;
 8007a22:	e004      	b.n	8007a2e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fcb7 	bl	800839a <USBD_CtlError>
    break;
 8007a2c:	bf00      	nop
  }

  return ret;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	889b      	ldrh	r3, [r3, #4]
 8007a4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d007      	beq.n	8007a68 <USBD_StdEPReq+0x30>
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	f200 8140 	bhi.w	8007cde <USBD_StdEPReq+0x2a6>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00c      	beq.n	8007a7c <USBD_StdEPReq+0x44>
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	f040 813b 	bne.w	8007cde <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7a:	e135      	b.n	8007ce8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d007      	beq.n	8007a94 <USBD_StdEPReq+0x5c>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	f300 8124 	bgt.w	8007cd2 <USBD_StdEPReq+0x29a>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d07b      	beq.n	8007b86 <USBD_StdEPReq+0x14e>
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d03b      	beq.n	8007b0a <USBD_StdEPReq+0xd2>
 8007a92:	e11e      	b.n	8007cd2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d002      	beq.n	8007aa4 <USBD_StdEPReq+0x6c>
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d016      	beq.n	8007ad0 <USBD_StdEPReq+0x98>
 8007aa2:	e02c      	b.n	8007afe <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00d      	beq.n	8007ac6 <USBD_StdEPReq+0x8e>
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d00a      	beq.n	8007ac6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f004 fc93 	bl	800c3e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aba:	2180      	movs	r1, #128	; 0x80
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f004 fc8f 	bl	800c3e0 <USBD_LL_StallEP>
 8007ac2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ac4:	e020      	b.n	8007b08 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc66 	bl	800839a <USBD_CtlError>
        break;
 8007ace:	e01b      	b.n	8007b08 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	885b      	ldrh	r3, [r3, #2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10e      	bne.n	8007af6 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <USBD_StdEPReq+0xbe>
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d008      	beq.n	8007af6 <USBD_StdEPReq+0xbe>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f004 fc75 	bl	800c3e0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fd1a 	bl	8008530 <USBD_CtlSendStatus>

        break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fc4a 	bl	800839a <USBD_CtlError>
        break;
 8007b06:	bf00      	nop
      }
      break;
 8007b08:	e0e8      	b.n	8007cdc <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d002      	beq.n	8007b1a <USBD_StdEPReq+0xe2>
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d016      	beq.n	8007b46 <USBD_StdEPReq+0x10e>
 8007b18:	e02e      	b.n	8007b78 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00d      	beq.n	8007b3c <USBD_StdEPReq+0x104>
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b80      	cmp	r3, #128	; 0x80
 8007b24:	d00a      	beq.n	8007b3c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f004 fc58 	bl	800c3e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f004 fc54 	bl	800c3e0 <USBD_LL_StallEP>
 8007b38:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b3a:	e023      	b.n	8007b84 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fc2b 	bl	800839a <USBD_CtlError>
        break;
 8007b44:	e01e      	b.n	8007b84 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d119      	bne.n	8007b82 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d004      	beq.n	8007b62 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f004 fc5e 	bl	800c41e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fce4 	bl	8008530 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
        }
        break;
 8007b76:	e004      	b.n	8007b82 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fc0d 	bl	800839a <USBD_CtlError>
        break;
 8007b80:	e000      	b.n	8007b84 <USBD_StdEPReq+0x14c>
        break;
 8007b82:	bf00      	nop
      }
      break;
 8007b84:	e0aa      	b.n	8007cdc <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d002      	beq.n	8007b96 <USBD_StdEPReq+0x15e>
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d032      	beq.n	8007bfa <USBD_StdEPReq+0x1c2>
 8007b94:	e097      	b.n	8007cc6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <USBD_StdEPReq+0x174>
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	d004      	beq.n	8007bac <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fbf8 	bl	800839a <USBD_CtlError>
          break;
 8007baa:	e091      	b.n	8007cd0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da0b      	bge.n	8007bcc <USBD_StdEPReq+0x194>
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3304      	adds	r3, #4
 8007bca:	e00b      	b.n	8007be4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	4413      	add	r3, r2
 8007be2:	3304      	adds	r3, #4
 8007be4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fc42 	bl	800847c <USBD_CtlSendData>
        break;
 8007bf8:	e06a      	b.n	8007cd0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da11      	bge.n	8007c26 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	f003 020f 	and.w	r2, r3, #15
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	3324      	adds	r3, #36	; 0x24
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d117      	bne.n	8007c4c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fbbb 	bl	800839a <USBD_CtlError>
            break;
 8007c24:	e054      	b.n	8007cd0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	f003 020f 	and.w	r2, r3, #15
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d104      	bne.n	8007c4c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fba8 	bl	800839a <USBD_CtlError>
            break;
 8007c4a:	e041      	b.n	8007cd0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	da0b      	bge.n	8007c6c <USBD_StdEPReq+0x234>
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	3310      	adds	r3, #16
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	3304      	adds	r3, #4
 8007c6a:	e00b      	b.n	8007c84 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	4413      	add	r3, r2
 8007c82:	3304      	adds	r3, #4
 8007c84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <USBD_StdEPReq+0x25a>
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b80      	cmp	r3, #128	; 0x80
 8007c90:	d103      	bne.n	8007c9a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2200      	movs	r2, #0
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e00e      	b.n	8007cb8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f004 fbdc 	bl	800c45c <USBD_LL_IsStallEP>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e002      	b.n	8007cb8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fbdc 	bl	800847c <USBD_CtlSendData>
          break;
 8007cc4:	e004      	b.n	8007cd0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb66 	bl	800839a <USBD_CtlError>
        break;
 8007cce:	bf00      	nop
      }
      break;
 8007cd0:	e004      	b.n	8007cdc <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fb60 	bl	800839a <USBD_CtlError>
      break;
 8007cda:	bf00      	nop
    }
    break;
 8007cdc:	e004      	b.n	8007ce8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fb5a 	bl	800839a <USBD_CtlError>
    break;
 8007ce6:	bf00      	nop
  }

  return ret;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	0a1b      	lsrs	r3, r3, #8
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	2b0e      	cmp	r3, #14
 8007d16:	f200 8152 	bhi.w	8007fbe <USBD_GetDescriptor+0x2ca>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBD_GetDescriptor+0x2c>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d91 	.word	0x08007d91
 8007d24:	08007da9 	.word	0x08007da9
 8007d28:	08007de9 	.word	0x08007de9
 8007d2c:	08007fbf 	.word	0x08007fbf
 8007d30:	08007fbf 	.word	0x08007fbf
 8007d34:	08007f5f 	.word	0x08007f5f
 8007d38:	08007f8b 	.word	0x08007f8b
 8007d3c:	08007fbf 	.word	0x08007fbf
 8007d40:	08007fbf 	.word	0x08007fbf
 8007d44:	08007fbf 	.word	0x08007fbf
 8007d48:	08007fbf 	.word	0x08007fbf
 8007d4c:	08007fbf 	.word	0x08007fbf
 8007d50:	08007fbf 	.word	0x08007fbf
 8007d54:	08007fbf 	.word	0x08007fbf
 8007d58:	08007d5d 	.word	0x08007d5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d7e:	e126      	b.n	8007fce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fb09 	bl	800839a <USBD_CtlError>
      err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
    break;
 8007d8e:	e11e      	b.n	8007fce <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
    break;
 8007da6:	e112      	b.n	8007fce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	7c1b      	ldrb	r3, [r3, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10d      	bne.n	8007dcc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	f107 0208 	add.w	r2, r7, #8
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007dca:	e100      	b.n	8007fce <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	f107 0208 	add.w	r2, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	2202      	movs	r2, #2
 8007de4:	701a      	strb	r2, [r3, #0]
    break;
 8007de6:	e0f2      	b.n	8007fce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	885b      	ldrh	r3, [r3, #2]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b05      	cmp	r3, #5
 8007df0:	f200 80ac 	bhi.w	8007f4c <USBD_GetDescriptor+0x258>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <USBD_GetDescriptor+0x108>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e15 	.word	0x08007e15
 8007e00:	08007e49 	.word	0x08007e49
 8007e04:	08007e7d 	.word	0x08007e7d
 8007e08:	08007eb1 	.word	0x08007eb1
 8007e0c:	08007ee5 	.word	0x08007ee5
 8007e10:	08007f19 	.word	0x08007f19
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	7c12      	ldrb	r2, [r2, #16]
 8007e2c:	f107 0108 	add.w	r1, r7, #8
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e36:	e091      	b.n	8007f5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 faad 	bl	800839a <USBD_CtlError>
        err++;
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	3301      	adds	r3, #1
 8007e44:	72fb      	strb	r3, [r7, #11]
      break;
 8007e46:	e089      	b.n	8007f5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	7c12      	ldrb	r2, [r2, #16]
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e6a:	e077      	b.n	8007f5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa93 	bl	800839a <USBD_CtlError>
        err++;
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	3301      	adds	r3, #1
 8007e78:	72fb      	strb	r3, [r7, #11]
      break;
 8007e7a:	e06f      	b.n	8007f5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	7c12      	ldrb	r2, [r2, #16]
 8007e94:	f107 0108 	add.w	r1, r7, #8
 8007e98:	4610      	mov	r0, r2
 8007e9a:	4798      	blx	r3
 8007e9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e9e:	e05d      	b.n	8007f5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa79 	bl	800839a <USBD_CtlError>
        err++;
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	72fb      	strb	r3, [r7, #11]
      break;
 8007eae:	e055      	b.n	8007f5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	7c12      	ldrb	r2, [r2, #16]
 8007ec8:	f107 0108 	add.w	r1, r7, #8
 8007ecc:	4610      	mov	r0, r2
 8007ece:	4798      	blx	r3
 8007ed0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed2:	e043      	b.n	8007f5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa5f 	bl	800839a <USBD_CtlError>
        err++;
 8007edc:	7afb      	ldrb	r3, [r7, #11]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee2:	e03b      	b.n	8007f5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7c12      	ldrb	r2, [r2, #16]
 8007efc:	f107 0108 	add.w	r1, r7, #8
 8007f00:	4610      	mov	r0, r2
 8007f02:	4798      	blx	r3
 8007f04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f06:	e029      	b.n	8007f5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa45 	bl	800839a <USBD_CtlError>
        err++;
 8007f10:	7afb      	ldrb	r3, [r7, #11]
 8007f12:	3301      	adds	r3, #1
 8007f14:	72fb      	strb	r3, [r7, #11]
      break;
 8007f16:	e021      	b.n	8007f5c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00b      	beq.n	8007f3c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	7c12      	ldrb	r2, [r2, #16]
 8007f30:	f107 0108 	add.w	r1, r7, #8
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f3a:	e00f      	b.n	8007f5c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa2b 	bl	800839a <USBD_CtlError>
        err++;
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	3301      	adds	r3, #1
 8007f48:	72fb      	strb	r3, [r7, #11]
      break;
 8007f4a:	e007      	b.n	8007f5c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa23 	bl	800839a <USBD_CtlError>
      err++;
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	3301      	adds	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007f5a:	bf00      	nop
    }
    break;
 8007f5c:	e037      	b.n	8007fce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	7c1b      	ldrb	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6e:	f107 0208 	add.w	r2, r7, #8
 8007f72:	4610      	mov	r0, r2
 8007f74:	4798      	blx	r3
 8007f76:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007f78:	e029      	b.n	8007fce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fa0c 	bl	800839a <USBD_CtlError>
      err++;
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	3301      	adds	r3, #1
 8007f86:	72fb      	strb	r3, [r7, #11]
    break;
 8007f88:	e021      	b.n	8007fce <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7c1b      	ldrb	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10d      	bne.n	8007fae <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	f107 0208 	add.w	r2, r7, #8
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	4798      	blx	r3
 8007fa2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	2207      	movs	r2, #7
 8007faa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007fac:	e00f      	b.n	8007fce <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f9f2 	bl	800839a <USBD_CtlError>
      err++;
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	72fb      	strb	r3, [r7, #11]
    break;
 8007fbc:	e007      	b.n	8007fce <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f9ea 	bl	800839a <USBD_CtlError>
    err++;
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	72fb      	strb	r3, [r7, #11]
    break;
 8007fcc:	bf00      	nop
  }

  if (err != 0U)
 8007fce:	7afb      	ldrb	r3, [r7, #11]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d11e      	bne.n	8008012 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	88db      	ldrh	r3, [r3, #6]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d016      	beq.n	800800a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007fdc:	893b      	ldrh	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88da      	ldrh	r2, [r3, #6]
 8007fe6:	893b      	ldrh	r3, [r7, #8]
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	bf28      	it	cs
 8007fec:	4613      	movcs	r3, r2
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ff2:	893b      	ldrh	r3, [r7, #8]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa3f 	bl	800847c <USBD_CtlSendData>
 8007ffe:	e009      	b.n	8008014 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f9c9 	bl	800839a <USBD_CtlError>
 8008008:	e004      	b.n	8008014 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa90 	bl	8008530 <USBD_CtlSendStatus>
 8008010:	e000      	b.n	8008014 <USBD_GetDescriptor+0x320>
    return;
 8008012:	bf00      	nop
    }
  }
}
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop

0800801c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	889b      	ldrh	r3, [r3, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d130      	bne.n	8008090 <USBD_SetAddress+0x74>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	88db      	ldrh	r3, [r3, #6]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d12c      	bne.n	8008090 <USBD_SetAddress+0x74>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	2b7f      	cmp	r3, #127	; 0x7f
 800803c:	d828      	bhi.n	8008090 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	885b      	ldrh	r3, [r3, #2]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008048:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	2b03      	cmp	r3, #3
 8008052:	d104      	bne.n	800805e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f99f 	bl	800839a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800805c:	e01d      	b.n	800809a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f004 fa22 	bl	800c4b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa5d 	bl	8008530 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008084:	e009      	b.n	800809a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808e:	e004      	b.n	800809a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f981 	bl	800839a <USBD_CtlError>
  }
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	4b4b      	ldr	r3, [pc, #300]	; (80081e8 <USBD_SetConfig+0x144>)
 80080ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080bc:	4b4a      	ldr	r3, [pc, #296]	; (80081e8 <USBD_SetConfig+0x144>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d905      	bls.n	80080d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f967 	bl	800839a <USBD_CtlError>
    return USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e087      	b.n	80081e0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d002      	beq.n	80080e0 <USBD_SetConfig+0x3c>
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d025      	beq.n	800812a <USBD_SetConfig+0x86>
 80080de:	e071      	b.n	80081c4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80080e0:	4b41      	ldr	r3, [pc, #260]	; (80081e8 <USBD_SetConfig+0x144>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01c      	beq.n	8008122 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80080e8:	4b3f      	ldr	r3, [pc, #252]	; (80081e8 <USBD_SetConfig+0x144>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80080f2:	4b3d      	ldr	r3, [pc, #244]	; (80081e8 <USBD_SetConfig+0x144>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff f96f 	bl	80073dc <USBD_SetClassConfig>
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f945 	bl	800839a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008110:	e065      	b.n	80081de <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa0c 	bl	8008530 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2203      	movs	r2, #3
 800811c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008120:	e05d      	b.n	80081de <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa04 	bl	8008530 <USBD_CtlSendStatus>
    break;
 8008128:	e059      	b.n	80081de <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800812a:	4b2f      	ldr	r3, [pc, #188]	; (80081e8 <USBD_SetConfig+0x144>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d112      	bne.n	8008158 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800813a:	4b2b      	ldr	r3, [pc, #172]	; (80081e8 <USBD_SetConfig+0x144>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008144:	4b28      	ldr	r3, [pc, #160]	; (80081e8 <USBD_SetConfig+0x144>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff f962 	bl	8007414 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f9ed 	bl	8008530 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008156:	e042      	b.n	80081de <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008158:	4b23      	ldr	r3, [pc, #140]	; (80081e8 <USBD_SetConfig+0x144>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d02a      	beq.n	80081bc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff f950 	bl	8007414 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008174:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <USBD_SetConfig+0x144>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800817e:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <USBD_SetConfig+0x144>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff f929 	bl	80073dc <USBD_SetClassConfig>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00f      	beq.n	80081b4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f8ff 	bl	800839a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff f935 	bl	8007414 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80081b2:	e014      	b.n	80081de <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f9bb 	bl	8008530 <USBD_CtlSendStatus>
    break;
 80081ba:	e010      	b.n	80081de <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f9b7 	bl	8008530 <USBD_CtlSendStatus>
    break;
 80081c2:	e00c      	b.n	80081de <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f8e7 	bl	800839a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <USBD_SetConfig+0x144>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff f91e 	bl	8007414 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	bf00      	nop
  }

  return ret;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20000564 	.word	0x20000564

080081ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	88db      	ldrh	r3, [r3, #6]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d004      	beq.n	8008208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f8ca 	bl	800839a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008206:	e022      	b.n	800824e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820e:	2b02      	cmp	r3, #2
 8008210:	dc02      	bgt.n	8008218 <USBD_GetConfig+0x2c>
 8008212:	2b00      	cmp	r3, #0
 8008214:	dc03      	bgt.n	800821e <USBD_GetConfig+0x32>
 8008216:	e015      	b.n	8008244 <USBD_GetConfig+0x58>
 8008218:	2b03      	cmp	r3, #3
 800821a:	d00b      	beq.n	8008234 <USBD_GetConfig+0x48>
 800821c:	e012      	b.n	8008244 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3308      	adds	r3, #8
 8008228:	2201      	movs	r2, #1
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f925 	bl	800847c <USBD_CtlSendData>
      break;
 8008232:	e00c      	b.n	800824e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	2201      	movs	r2, #1
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f91d 	bl	800847c <USBD_CtlSendData>
      break;
 8008242:	e004      	b.n	800824e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f8a7 	bl	800839a <USBD_CtlError>
      break;
 800824c:	bf00      	nop
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008266:	3b01      	subs	r3, #1
 8008268:	2b02      	cmp	r3, #2
 800826a:	d81e      	bhi.n	80082aa <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	88db      	ldrh	r3, [r3, #6]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d004      	beq.n	800827e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f88f 	bl	800839a <USBD_CtlError>
      break;
 800827c:	e01a      	b.n	80082b4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f043 0202 	orr.w	r2, r3, #2
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	330c      	adds	r3, #12
 800829e:	2202      	movs	r2, #2
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8ea 	bl	800847c <USBD_CtlSendData>
    break;
 80082a8:	e004      	b.n	80082b4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f874 	bl	800839a <USBD_CtlError>
    break;
 80082b2:	bf00      	nop
  }
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d106      	bne.n	80082dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f92a 	bl	8008530 <USBD_CtlSendStatus>
  }
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f4:	3b01      	subs	r3, #1
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d80b      	bhi.n	8008312 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	885b      	ldrh	r3, [r3, #2]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d10c      	bne.n	800831c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f910 	bl	8008530 <USBD_CtlSendStatus>
      }
      break;
 8008310:	e004      	b.n	800831c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f840 	bl	800839a <USBD_CtlError>
      break;
 800831a:	e000      	b.n	800831e <USBD_ClrFeature+0x3a>
      break;
 800831c:	bf00      	nop
  }
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	781a      	ldrb	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	781a      	ldrb	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff fa9c 	bl	800788e <SWAPBYTE>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3301      	adds	r3, #1
 8008362:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3301      	adds	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff fa8f 	bl	800788e <SWAPBYTE>
 8008370:	4603      	mov	r3, r0
 8008372:	461a      	mov	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3301      	adds	r3, #1
 800837c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fa82 	bl	800788e <SWAPBYTE>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	80da      	strh	r2, [r3, #6]
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a4:	2180      	movs	r1, #128	; 0x80
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f004 f81a 	bl	800c3e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083ac:	2100      	movs	r1, #0
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f004 f816 	bl	800c3e0 <USBD_LL_StallEP>
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d036      	beq.n	8008440 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083d6:	6938      	ldr	r0, [r7, #16]
 80083d8:	f000 f836 	bl	8008448 <USBD_GetLen>
 80083dc:	4603      	mov	r3, r0
 80083de:	3301      	adds	r3, #1
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	4413      	add	r3, r2
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	3301      	adds	r3, #1
 80083fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	4413      	add	r3, r2
 8008402:	2203      	movs	r2, #3
 8008404:	701a      	strb	r2, [r3, #0]
  idx++;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	3301      	adds	r3, #1
 800840a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800840c:	e013      	b.n	8008436 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	4413      	add	r3, r2
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	7812      	ldrb	r2, [r2, #0]
 8008418:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	3301      	adds	r3, #1
 800841e:	613b      	str	r3, [r7, #16]
    idx++;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	3301      	adds	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	4413      	add	r3, r2
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	3301      	adds	r3, #1
 8008434:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e7      	bne.n	800840e <USBD_GetString+0x52>
 800843e:	e000      	b.n	8008442 <USBD_GetString+0x86>
    return;
 8008440:	bf00      	nop
  }
}
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008458:	e005      	b.n	8008466 <USBD_GetLen+0x1e>
  {
    len++;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	3301      	adds	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3301      	adds	r3, #1
 8008464:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f5      	bne.n	800845a <USBD_GetLen+0x12>
  }

  return len;
 800846e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2202      	movs	r2, #2
 800848c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f004 f825 	bl	800c4f2 <USBD_LL_Transmit>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	2100      	movs	r1, #0
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f004 f814 	bl	800c4f2 <USBD_LL_Transmit>

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2203      	movs	r2, #3
 80084e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f004 f818 	bl	800c534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	2100      	movs	r1, #0
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f004 f807 	bl	800c534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2204      	movs	r2, #4
 800853c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008540:	2300      	movs	r3, #0
 8008542:	2200      	movs	r2, #0
 8008544:	2100      	movs	r1, #0
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f003 ffd3 	bl	800c4f2 <USBD_LL_Transmit>

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2205      	movs	r2, #5
 8008562:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	2100      	movs	r1, #0
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f003 ffe1 	bl	800c534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008580:	bf00      	nop
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008592:	f3ef 8305 	mrs	r3, IPSR
 8008596:	60bb      	str	r3, [r7, #8]
  return(result);
 8008598:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10f      	bne.n	80085be <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859e:	f3ef 8310 	mrs	r3, PRIMASK
 80085a2:	607b      	str	r3, [r7, #4]
  return(result);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d105      	bne.n	80085b6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085aa:	f3ef 8311 	mrs	r3, BASEPRI
 80085ae:	603b      	str	r3, [r7, #0]
  return(result);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d007      	beq.n	80085c6 <osKernelInitialize+0x3a>
 80085b6:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <osKernelInitialize+0x64>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d103      	bne.n	80085c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80085be:	f06f 0305 	mvn.w	r3, #5
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e00c      	b.n	80085e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <osKernelInitialize+0x64>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d105      	bne.n	80085da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085ce:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <osKernelInitialize+0x64>)
 80085d0:	2201      	movs	r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e002      	b.n	80085e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80085da:	f04f 33ff 	mov.w	r3, #4294967295
 80085de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80085e0:	68fb      	ldr	r3, [r7, #12]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20000568 	.word	0x20000568

080085f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085fa:	f3ef 8305 	mrs	r3, IPSR
 80085fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008600:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10f      	bne.n	8008626 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008606:	f3ef 8310 	mrs	r3, PRIMASK
 800860a:	607b      	str	r3, [r7, #4]
  return(result);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d105      	bne.n	800861e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008612:	f3ef 8311 	mrs	r3, BASEPRI
 8008616:	603b      	str	r3, [r7, #0]
  return(result);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <osKernelStart+0x3a>
 800861e:	4b0f      	ldr	r3, [pc, #60]	; (800865c <osKernelStart+0x68>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d103      	bne.n	800862e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008626:	f06f 0305 	mvn.w	r3, #5
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	e010      	b.n	8008650 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800862e:	4b0b      	ldr	r3, [pc, #44]	; (800865c <osKernelStart+0x68>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d109      	bne.n	800864a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008636:	f7ff ffa1 	bl	800857c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <osKernelStart+0x68>)
 800863c:	2202      	movs	r2, #2
 800863e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008640:	f001 fc9a 	bl	8009f78 <vTaskStartScheduler>
      stat = osOK;
 8008644:	2300      	movs	r3, #0
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	e002      	b.n	8008650 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800864a:	f04f 33ff 	mov.w	r3, #4294967295
 800864e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008650:	68fb      	ldr	r3, [r7, #12]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000568 	.word	0x20000568

08008660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008660:	b580      	push	{r7, lr}
 8008662:	b090      	sub	sp, #64	; 0x40
 8008664:	af04      	add	r7, sp, #16
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008670:	f3ef 8305 	mrs	r3, IPSR
 8008674:	61fb      	str	r3, [r7, #28]
  return(result);
 8008676:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008678:	2b00      	cmp	r3, #0
 800867a:	f040 808f 	bne.w	800879c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800867e:	f3ef 8310 	mrs	r3, PRIMASK
 8008682:	61bb      	str	r3, [r7, #24]
  return(result);
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800868a:	f3ef 8311 	mrs	r3, BASEPRI
 800868e:	617b      	str	r3, [r7, #20]
  return(result);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <osThreadNew+0x3e>
 8008696:	4b44      	ldr	r3, [pc, #272]	; (80087a8 <osThreadNew+0x148>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d07e      	beq.n	800879c <osThreadNew+0x13c>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d07b      	beq.n	800879c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80086a4:	2380      	movs	r3, #128	; 0x80
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80086a8:	2318      	movs	r3, #24
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295
 80086b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d045      	beq.n	8008748 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <osThreadNew+0x6a>
        name = attr->name;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d008      	beq.n	80086f0 <osThreadNew+0x90>
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	2b38      	cmp	r3, #56	; 0x38
 80086e2:	d805      	bhi.n	80086f0 <osThreadNew+0x90>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <osThreadNew+0x94>
        return (NULL);
 80086f0:	2300      	movs	r3, #0
 80086f2:	e054      	b.n	800879e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	089b      	lsrs	r3, r3, #2
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00e      	beq.n	800872a <osThreadNew+0xca>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2bbb      	cmp	r3, #187	; 0xbb
 8008712:	d90a      	bls.n	800872a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <osThreadNew+0xca>
        mem = 1;
 8008724:	2301      	movs	r3, #1
 8008726:	623b      	str	r3, [r7, #32]
 8008728:	e010      	b.n	800874c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10c      	bne.n	800874c <osThreadNew+0xec>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d108      	bne.n	800874c <osThreadNew+0xec>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d104      	bne.n	800874c <osThreadNew+0xec>
          mem = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	623b      	str	r3, [r7, #32]
 8008746:	e001      	b.n	800874c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d110      	bne.n	8008774 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800875a:	9202      	str	r2, [sp, #8]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 fa0f 	bl	8009b8c <xTaskCreateStatic>
 800876e:	4603      	mov	r3, r0
 8008770:	613b      	str	r3, [r7, #16]
 8008772:	e013      	b.n	800879c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d110      	bne.n	800879c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	b29a      	uxth	r2, r3
 800877e:	f107 0310 	add.w	r3, r7, #16
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f001 fa60 	bl	8009c52 <xTaskCreate>
 8008792:	4603      	mov	r3, r0
 8008794:	2b01      	cmp	r3, #1
 8008796:	d001      	beq.n	800879c <osThreadNew+0x13c>
          hTask = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800879c:	693b      	ldr	r3, [r7, #16]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3730      	adds	r7, #48	; 0x30
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000568 	.word	0x20000568

080087ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087b4:	f3ef 8305 	mrs	r3, IPSR
 80087b8:	613b      	str	r3, [r7, #16]
  return(result);
 80087ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10f      	bne.n	80087e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c0:	f3ef 8310 	mrs	r3, PRIMASK
 80087c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d105      	bne.n	80087d8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087cc:	f3ef 8311 	mrs	r3, BASEPRI
 80087d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d007      	beq.n	80087e8 <osDelay+0x3c>
 80087d8:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <osDelay+0x58>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d103      	bne.n	80087e8 <osDelay+0x3c>
    stat = osErrorISR;
 80087e0:	f06f 0305 	mvn.w	r3, #5
 80087e4:	617b      	str	r3, [r7, #20]
 80087e6:	e007      	b.n	80087f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 fb8a 	bl	8009f0c <vTaskDelay>
    }
  }

  return (stat);
 80087f8:	697b      	ldr	r3, [r7, #20]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000568 	.word	0x20000568

08008808 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b08c      	sub	sp, #48	; 0x30
 800880c:	af02      	add	r7, sp, #8
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008814:	2300      	movs	r3, #0
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008818:	f3ef 8305 	mrs	r3, IPSR
 800881c:	61bb      	str	r3, [r7, #24]
  return(result);
 800881e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008820:	2b00      	cmp	r3, #0
 8008822:	d16f      	bne.n	8008904 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008824:	f3ef 8310 	mrs	r3, PRIMASK
 8008828:	617b      	str	r3, [r7, #20]
  return(result);
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008830:	f3ef 8311 	mrs	r3, BASEPRI
 8008834:	613b      	str	r3, [r7, #16]
  return(result);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <osMessageQueueNew+0x3c>
 800883c:	4b34      	ldr	r3, [pc, #208]	; (8008910 <osMessageQueueNew+0x108>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d05f      	beq.n	8008904 <osMessageQueueNew+0xfc>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d05c      	beq.n	8008904 <osMessageQueueNew+0xfc>
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d059      	beq.n	8008904 <osMessageQueueNew+0xfc>
    mem = -1;
 8008850:	f04f 33ff 	mov.w	r3, #4294967295
 8008854:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d029      	beq.n	80088b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d012      	beq.n	800888a <osMessageQueueNew+0x82>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b4f      	cmp	r3, #79	; 0x4f
 800886a:	d90e      	bls.n	800888a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	695a      	ldr	r2, [r3, #20]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	fb01 f303 	mul.w	r3, r1, r3
 8008880:	429a      	cmp	r2, r3
 8008882:	d302      	bcc.n	800888a <osMessageQueueNew+0x82>
        mem = 1;
 8008884:	2301      	movs	r3, #1
 8008886:	623b      	str	r3, [r7, #32]
 8008888:	e014      	b.n	80088b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d110      	bne.n	80088b4 <osMessageQueueNew+0xac>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10c      	bne.n	80088b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d108      	bne.n	80088b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d104      	bne.n	80088b4 <osMessageQueueNew+0xac>
          mem = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	623b      	str	r3, [r7, #32]
 80088ae:	e001      	b.n	80088b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d10b      	bne.n	80088d2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691a      	ldr	r2, [r3, #16]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2100      	movs	r1, #0
 80088c4:	9100      	str	r1, [sp, #0]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fa5b 	bl	8008d84 <xQueueGenericCreateStatic>
 80088ce:	6278      	str	r0, [r7, #36]	; 0x24
 80088d0:	e008      	b.n	80088e4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d105      	bne.n	80088e4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80088d8:	2200      	movs	r2, #0
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fad3 	bl	8008e88 <xQueueGenericCreate>
 80088e2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	61fb      	str	r3, [r7, #28]
 80088f6:	e001      	b.n	80088fc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80088fc:	69f9      	ldr	r1, [r7, #28]
 80088fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008900:	f001 f8bc 	bl	8009a7c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008906:	4618      	mov	r0, r3
 8008908:	3728      	adds	r7, #40	; 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000568 	.word	0x20000568

08008914 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	; 0x28
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	4613      	mov	r3, r2
 8008922:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008928:	2300      	movs	r3, #0
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800892c:	f3ef 8305 	mrs	r3, IPSR
 8008930:	61fb      	str	r3, [r7, #28]
  return(result);
 8008932:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10f      	bne.n	8008958 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008938:	f3ef 8310 	mrs	r3, PRIMASK
 800893c:	61bb      	str	r3, [r7, #24]
  return(result);
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d105      	bne.n	8008950 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008944:	f3ef 8311 	mrs	r3, BASEPRI
 8008948:	617b      	str	r3, [r7, #20]
  return(result);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d02c      	beq.n	80089aa <osMessageQueuePut+0x96>
 8008950:	4b28      	ldr	r3, [pc, #160]	; (80089f4 <osMessageQueuePut+0xe0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d128      	bne.n	80089aa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d005      	beq.n	800896a <osMessageQueuePut+0x56>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <osMessageQueuePut+0x56>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800896a:	f06f 0303 	mvn.w	r3, #3
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008970:	e039      	b.n	80089e6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008972:	2300      	movs	r3, #0
 8008974:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008976:	f107 0210 	add.w	r2, r7, #16
 800897a:	2300      	movs	r3, #0
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	6a38      	ldr	r0, [r7, #32]
 8008980:	f000 fbee 	bl	8009160 <xQueueGenericSendFromISR>
 8008984:	4603      	mov	r3, r0
 8008986:	2b01      	cmp	r3, #1
 8008988:	d003      	beq.n	8008992 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800898a:	f06f 0302 	mvn.w	r3, #2
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008990:	e029      	b.n	80089e6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d026      	beq.n	80089e6 <osMessageQueuePut+0xd2>
 8008998:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <osMessageQueuePut+0xe4>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80089a8:	e01d      	b.n	80089e6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <osMessageQueuePut+0xa2>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80089b6:	f06f 0303 	mvn.w	r3, #3
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	e014      	b.n	80089e8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80089be:	2300      	movs	r3, #0
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	6a38      	ldr	r0, [r7, #32]
 80089c6:	f000 fac5 	bl	8008f54 <xQueueGenericSend>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d00b      	beq.n	80089e8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80089d6:	f06f 0301 	mvn.w	r3, #1
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
 80089dc:	e004      	b.n	80089e8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80089de:	f06f 0302 	mvn.w	r3, #2
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
 80089e4:	e000      	b.n	80089e8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80089e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3728      	adds	r7, #40	; 0x28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000568 	.word	0x20000568
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	; 0x28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a12:	f3ef 8305 	mrs	r3, IPSR
 8008a16:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a18:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10f      	bne.n	8008a3e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a22:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d105      	bne.n	8008a36 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8008a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d02c      	beq.n	8008a90 <osMessageQueueGet+0x94>
 8008a36:	4b28      	ldr	r3, [pc, #160]	; (8008ad8 <osMessageQueueGet+0xdc>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d128      	bne.n	8008a90 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <osMessageQueueGet+0x54>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <osMessageQueueGet+0x54>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008a50:	f06f 0303 	mvn.w	r3, #3
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a56:	e038      	b.n	8008aca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008a5c:	f107 0310 	add.w	r3, r7, #16
 8008a60:	461a      	mov	r2, r3
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	6a38      	ldr	r0, [r7, #32]
 8008a66:	f000 fe15 	bl	8009694 <xQueueReceiveFromISR>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d003      	beq.n	8008a78 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008a70:	f06f 0302 	mvn.w	r3, #2
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a76:	e028      	b.n	8008aca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d025      	beq.n	8008aca <osMessageQueueGet+0xce>
 8008a7e:	4b17      	ldr	r3, [pc, #92]	; (8008adc <osMessageQueueGet+0xe0>)
 8008a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a8e:	e01c      	b.n	8008aca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <osMessageQueueGet+0xa0>
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008a9c:	f06f 0303 	mvn.w	r3, #3
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa2:	e013      	b.n	8008acc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	68b9      	ldr	r1, [r7, #8]
 8008aa8:	6a38      	ldr	r0, [r7, #32]
 8008aaa:	f000 fbf9 	bl	80092a0 <xQueueReceive>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d00b      	beq.n	8008acc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008aba:	f06f 0301 	mvn.w	r3, #1
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac0:	e004      	b.n	8008acc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008ac2:	f06f 0302 	mvn.w	r3, #2
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac8:	e000      	b.n	8008acc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008aca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3728      	adds	r7, #40	; 0x28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000568 	.word	0x20000568
 8008adc:	e000ed04 	.word	0xe000ed04

08008ae0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4a07      	ldr	r2, [pc, #28]	; (8008b0c <vApplicationGetIdleTaskMemory+0x2c>)
 8008af0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	4a06      	ldr	r2, [pc, #24]	; (8008b10 <vApplicationGetIdleTaskMemory+0x30>)
 8008af6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2280      	movs	r2, #128	; 0x80
 8008afc:	601a      	str	r2, [r3, #0]
}
 8008afe:	bf00      	nop
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	2000056c 	.word	0x2000056c
 8008b10:	20000628 	.word	0x20000628

08008b14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4a07      	ldr	r2, [pc, #28]	; (8008b40 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4a06      	ldr	r2, [pc, #24]	; (8008b44 <vApplicationGetTimerTaskMemory+0x30>)
 8008b2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b32:	601a      	str	r2, [r3, #0]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	20000828 	.word	0x20000828
 8008b44:	200008e4 	.word	0x200008e4

08008b48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f103 0208 	add.w	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f103 0208 	add.w	r2, r3, #8
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f103 0208 	add.w	r2, r3, #8
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c00:	d103      	bne.n	8008c0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e00c      	b.n	8008c24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e002      	b.n	8008c18 <vListInsert+0x2e>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d2f6      	bcs.n	8008c12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]
}
 8008c50:	bf00      	nop
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	6892      	ldr	r2, [r2, #8]
 8008c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6852      	ldr	r2, [r2, #4]
 8008c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d103      	bne.n	8008c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1e5a      	subs	r2, r3, #1
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10c      	bne.n	8008cde <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	b672      	cpsid	i
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	b662      	cpsie	i
 8008cd8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008cde:	f002 fc0d 	bl	800b4fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cea:	68f9      	ldr	r1, [r7, #12]
 8008cec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	441a      	add	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	68f9      	ldr	r1, [r7, #12]
 8008d12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	441a      	add	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	22ff      	movs	r2, #255	; 0xff
 8008d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	22ff      	movs	r2, #255	; 0xff
 8008d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d114      	bne.n	8008d5e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01a      	beq.n	8008d72 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3310      	adds	r3, #16
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fbc1 	bl	800a4c8 <xTaskRemoveFromEventList>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d012      	beq.n	8008d72 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d4c:	4b0c      	ldr	r3, [pc, #48]	; (8008d80 <xQueueGenericReset+0xd0>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	e009      	b.n	8008d72 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3310      	adds	r3, #16
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff fef0 	bl	8008b48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3324      	adds	r3, #36	; 0x24
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff feeb 	bl	8008b48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d72:	f002 fbf7 	bl	800b564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d76:	2301      	movs	r3, #1
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08e      	sub	sp, #56	; 0x38
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10c      	bne.n	8008db2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	b672      	cpsid	i
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	b662      	cpsie	i
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10c      	bne.n	8008dd2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	b672      	cpsid	i
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	b662      	cpsie	i
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <xQueueGenericCreateStatic+0x5a>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <xQueueGenericCreateStatic+0x5e>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e000      	b.n	8008de4 <xQueueGenericCreateStatic+0x60>
 8008de2:	2300      	movs	r3, #0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10c      	bne.n	8008e02 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	b672      	cpsid	i
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	b662      	cpsie	i
 8008dfc:	623b      	str	r3, [r7, #32]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d102      	bne.n	8008e0e <xQueueGenericCreateStatic+0x8a>
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <xQueueGenericCreateStatic+0x8e>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e000      	b.n	8008e14 <xQueueGenericCreateStatic+0x90>
 8008e12:	2300      	movs	r3, #0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10c      	bne.n	8008e32 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	b672      	cpsid	i
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	b662      	cpsie	i
 8008e2c:	61fb      	str	r3, [r7, #28]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e32:	2350      	movs	r3, #80	; 0x50
 8008e34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b50      	cmp	r3, #80	; 0x50
 8008e3a:	d00c      	beq.n	8008e56 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	b672      	cpsid	i
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	b662      	cpsie	i
 8008e50:	61bb      	str	r3, [r7, #24]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00d      	beq.n	8008e7e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	4613      	mov	r3, r2
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	68b9      	ldr	r1, [r7, #8]
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f847 	bl	8008f0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3730      	adds	r7, #48	; 0x30
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08a      	sub	sp, #40	; 0x28
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	4613      	mov	r3, r2
 8008e94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10c      	bne.n	8008eb6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	b672      	cpsid	i
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	b662      	cpsie	i
 8008eb0:	613b      	str	r3, [r7, #16]
}
 8008eb2:	bf00      	nop
 8008eb4:	e7fe      	b.n	8008eb4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d102      	bne.n	8008ec2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	e004      	b.n	8008ecc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	fb02 f303 	mul.w	r3, r2, r3
 8008eca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	3350      	adds	r3, #80	; 0x50
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 fc3f 	bl	800b754 <pvPortMalloc>
 8008ed6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d011      	beq.n	8008f02 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	3350      	adds	r3, #80	; 0x50
 8008ee6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ef0:	79fa      	ldrb	r2, [r7, #7]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 f805 	bl	8008f0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f02:	69bb      	ldr	r3, [r7, #24]
	}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3720      	adds	r7, #32
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	e002      	b.n	8008f2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	69b8      	ldr	r0, [r7, #24]
 8008f3e:	f7ff feb7 	bl	8008cb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	78fa      	ldrb	r2, [r7, #3]
 8008f46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08e      	sub	sp, #56	; 0x38
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f62:	2300      	movs	r3, #0
 8008f64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10c      	bne.n	8008f8a <xQueueGenericSend+0x36>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	b672      	cpsid	i
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	b662      	cpsie	i
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <xQueueGenericSend+0x44>
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <xQueueGenericSend+0x48>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <xQueueGenericSend+0x4a>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10c      	bne.n	8008fbc <xQueueGenericSend+0x68>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d103      	bne.n	8008fca <xQueueGenericSend+0x76>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <xQueueGenericSend+0x7a>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e000      	b.n	8008fd0 <xQueueGenericSend+0x7c>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10c      	bne.n	8008fee <xQueueGenericSend+0x9a>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	b672      	cpsid	i
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	b662      	cpsie	i
 8008fe8:	623b      	str	r3, [r7, #32]
}
 8008fea:	bf00      	nop
 8008fec:	e7fe      	b.n	8008fec <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fee:	f001 fc35 	bl	800a85c <xTaskGetSchedulerState>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d102      	bne.n	8008ffe <xQueueGenericSend+0xaa>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <xQueueGenericSend+0xae>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <xQueueGenericSend+0xb0>
 8009002:	2300      	movs	r3, #0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10c      	bne.n	8009022 <xQueueGenericSend+0xce>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	b672      	cpsid	i
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	b662      	cpsie	i
 800901c:	61fb      	str	r3, [r7, #28]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009022:	f002 fa6b 	bl	800b4fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902e:	429a      	cmp	r2, r3
 8009030:	d302      	bcc.n	8009038 <xQueueGenericSend+0xe4>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d129      	bne.n	800908c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800903e:	f000 fc0c 	bl	800985a <prvCopyDataToQueue>
 8009042:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d010      	beq.n	800906e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	3324      	adds	r3, #36	; 0x24
 8009050:	4618      	mov	r0, r3
 8009052:	f001 fa39 	bl	800a4c8 <xTaskRemoveFromEventList>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d013      	beq.n	8009084 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800905c:	4b3f      	ldr	r3, [pc, #252]	; (800915c <xQueueGenericSend+0x208>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	e00a      	b.n	8009084 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009074:	4b39      	ldr	r3, [pc, #228]	; (800915c <xQueueGenericSend+0x208>)
 8009076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009084:	f002 fa6e 	bl	800b564 <vPortExitCritical>
				return pdPASS;
 8009088:	2301      	movs	r3, #1
 800908a:	e063      	b.n	8009154 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d103      	bne.n	800909a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009092:	f002 fa67 	bl	800b564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009096:	2300      	movs	r3, #0
 8009098:	e05c      	b.n	8009154 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 fa75 	bl	800a594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090aa:	2301      	movs	r3, #1
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090ae:	f002 fa59 	bl	800b564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090b2:	f000 ffd5 	bl	800a060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090b6:	f002 fa21 	bl	800b4fc <vPortEnterCritical>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090c0:	b25b      	sxtb	r3, r3
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c6:	d103      	bne.n	80090d0 <xQueueGenericSend+0x17c>
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090dc:	d103      	bne.n	80090e6 <xQueueGenericSend+0x192>
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090e6:	f002 fa3d 	bl	800b564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090ea:	1d3a      	adds	r2, r7, #4
 80090ec:	f107 0314 	add.w	r3, r7, #20
 80090f0:	4611      	mov	r1, r2
 80090f2:	4618      	mov	r0, r3
 80090f4:	f001 fa64 	bl	800a5c0 <xTaskCheckForTimeOut>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d124      	bne.n	8009148 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009100:	f000 fca3 	bl	8009a4a <prvIsQueueFull>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d018      	beq.n	800913c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	3310      	adds	r3, #16
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	4611      	mov	r1, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f001 f984 	bl	800a420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800911a:	f000 fc2e 	bl	800997a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800911e:	f000 ffad 	bl	800a07c <xTaskResumeAll>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	f47f af7c 	bne.w	8009022 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <xQueueGenericSend+0x208>)
 800912c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	e772      	b.n	8009022 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800913c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800913e:	f000 fc1c 	bl	800997a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009142:	f000 ff9b 	bl	800a07c <xTaskResumeAll>
 8009146:	e76c      	b.n	8009022 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800914a:	f000 fc16 	bl	800997a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800914e:	f000 ff95 	bl	800a07c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009152:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009154:	4618      	mov	r0, r3
 8009156:	3738      	adds	r7, #56	; 0x38
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08e      	sub	sp, #56	; 0x38
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10c      	bne.n	8009192 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	b672      	cpsid	i
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	b662      	cpsie	i
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d103      	bne.n	80091a0 <xQueueGenericSendFromISR+0x40>
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <xQueueGenericSendFromISR+0x44>
 80091a0:	2301      	movs	r3, #1
 80091a2:	e000      	b.n	80091a6 <xQueueGenericSendFromISR+0x46>
 80091a4:	2300      	movs	r3, #0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10c      	bne.n	80091c4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	b672      	cpsid	i
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	b662      	cpsie	i
 80091be:	623b      	str	r3, [r7, #32]
}
 80091c0:	bf00      	nop
 80091c2:	e7fe      	b.n	80091c2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d103      	bne.n	80091d2 <xQueueGenericSendFromISR+0x72>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <xQueueGenericSendFromISR+0x76>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e000      	b.n	80091d8 <xQueueGenericSendFromISR+0x78>
 80091d6:	2300      	movs	r3, #0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10c      	bne.n	80091f6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	b672      	cpsid	i
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	b662      	cpsie	i
 80091f0:	61fb      	str	r3, [r7, #28]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091f6:	f002 fa69 	bl	800b6cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091fa:	f3ef 8211 	mrs	r2, BASEPRI
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	b672      	cpsid	i
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	b662      	cpsie	i
 8009212:	61ba      	str	r2, [r7, #24]
 8009214:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009216:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	429a      	cmp	r2, r3
 8009224:	d302      	bcc.n	800922c <xQueueGenericSendFromISR+0xcc>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d12c      	bne.n	8009286 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800923c:	f000 fb0d 	bl	800985a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009240:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009248:	d112      	bne.n	8009270 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	2b00      	cmp	r3, #0
 8009250:	d016      	beq.n	8009280 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	3324      	adds	r3, #36	; 0x24
 8009256:	4618      	mov	r0, r3
 8009258:	f001 f936 	bl	800a4c8 <xTaskRemoveFromEventList>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00e      	beq.n	8009280 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00b      	beq.n	8009280 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e007      	b.n	8009280 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009270:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009274:	3301      	adds	r3, #1
 8009276:	b2db      	uxtb	r3, r3
 8009278:	b25a      	sxtb	r2, r3
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009280:	2301      	movs	r3, #1
 8009282:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009284:	e001      	b.n	800928a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009286:	2300      	movs	r3, #0
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009294:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009298:	4618      	mov	r0, r3
 800929a:	3738      	adds	r7, #56	; 0x38
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08c      	sub	sp, #48	; 0x30
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10c      	bne.n	80092d4 <xQueueReceive+0x34>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	b672      	cpsid	i
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	b662      	cpsie	i
 80092ce:	623b      	str	r3, [r7, #32]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <xQueueReceive+0x42>
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <xQueueReceive+0x46>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <xQueueReceive+0x48>
 80092e6:	2300      	movs	r3, #0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10c      	bne.n	8009306 <xQueueReceive+0x66>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	b672      	cpsid	i
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	b662      	cpsie	i
 8009300:	61fb      	str	r3, [r7, #28]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009306:	f001 faa9 	bl	800a85c <xTaskGetSchedulerState>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d102      	bne.n	8009316 <xQueueReceive+0x76>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <xQueueReceive+0x7a>
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <xQueueReceive+0x7c>
 800931a:	2300      	movs	r3, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <xQueueReceive+0x9a>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	61bb      	str	r3, [r7, #24]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800933a:	f002 f8df 	bl	800b4fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01f      	beq.n	800938a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934e:	f000 faee 	bl	800992e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	1e5a      	subs	r2, r3, #1
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00f      	beq.n	8009382 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	3310      	adds	r3, #16
 8009366:	4618      	mov	r0, r3
 8009368:	f001 f8ae 	bl	800a4c8 <xTaskRemoveFromEventList>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009372:	4b3d      	ldr	r3, [pc, #244]	; (8009468 <xQueueReceive+0x1c8>)
 8009374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009382:	f002 f8ef 	bl	800b564 <vPortExitCritical>
				return pdPASS;
 8009386:	2301      	movs	r3, #1
 8009388:	e069      	b.n	800945e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d103      	bne.n	8009398 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009390:	f002 f8e8 	bl	800b564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009394:	2300      	movs	r3, #0
 8009396:	e062      	b.n	800945e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800939e:	f107 0310 	add.w	r3, r7, #16
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 f8f6 	bl	800a594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093ac:	f002 f8da 	bl	800b564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093b0:	f000 fe56 	bl	800a060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093b4:	f002 f8a2 	bl	800b4fc <vPortEnterCritical>
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093be:	b25b      	sxtb	r3, r3
 80093c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c4:	d103      	bne.n	80093ce <xQueueReceive+0x12e>
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d103      	bne.n	80093e4 <xQueueReceive+0x144>
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093e4:	f002 f8be 	bl	800b564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093e8:	1d3a      	adds	r2, r7, #4
 80093ea:	f107 0310 	add.w	r3, r7, #16
 80093ee:	4611      	mov	r1, r2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 f8e5 	bl	800a5c0 <xTaskCheckForTimeOut>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d123      	bne.n	8009444 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093fe:	f000 fb0e 	bl	8009a1e <prvIsQueueEmpty>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d017      	beq.n	8009438 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	3324      	adds	r3, #36	; 0x24
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4611      	mov	r1, r2
 8009410:	4618      	mov	r0, r3
 8009412:	f001 f805 	bl	800a420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009418:	f000 faaf 	bl	800997a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800941c:	f000 fe2e 	bl	800a07c <xTaskResumeAll>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d189      	bne.n	800933a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009426:	4b10      	ldr	r3, [pc, #64]	; (8009468 <xQueueReceive+0x1c8>)
 8009428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	e780      	b.n	800933a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800943a:	f000 fa9e 	bl	800997a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800943e:	f000 fe1d 	bl	800a07c <xTaskResumeAll>
 8009442:	e77a      	b.n	800933a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009446:	f000 fa98 	bl	800997a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800944a:	f000 fe17 	bl	800a07c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800944e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009450:	f000 fae5 	bl	8009a1e <prvIsQueueEmpty>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	f43f af6f 	beq.w	800933a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800945c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800945e:	4618      	mov	r0, r3
 8009460:	3730      	adds	r7, #48	; 0x30
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08e      	sub	sp, #56	; 0x38
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009476:	2300      	movs	r3, #0
 8009478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800947e:	2300      	movs	r3, #0
 8009480:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10c      	bne.n	80094a2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	b672      	cpsid	i
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	b662      	cpsie	i
 800949c:	623b      	str	r3, [r7, #32]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00c      	beq.n	80094c4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	b672      	cpsid	i
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	b662      	cpsie	i
 80094be:	61fb      	str	r3, [r7, #28]
}
 80094c0:	bf00      	nop
 80094c2:	e7fe      	b.n	80094c2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094c4:	f001 f9ca 	bl	800a85c <xTaskGetSchedulerState>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d102      	bne.n	80094d4 <xQueueSemaphoreTake+0x68>
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <xQueueSemaphoreTake+0x6c>
 80094d4:	2301      	movs	r3, #1
 80094d6:	e000      	b.n	80094da <xQueueSemaphoreTake+0x6e>
 80094d8:	2300      	movs	r3, #0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10c      	bne.n	80094f8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	b672      	cpsid	i
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	b662      	cpsie	i
 80094f2:	61bb      	str	r3, [r7, #24]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094f8:	f002 f800 	bl	800b4fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b00      	cmp	r3, #0
 8009506:	d024      	beq.n	8009552 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	1e5a      	subs	r2, r3, #1
 800950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d104      	bne.n	8009522 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009518:	f001 fb1e 	bl	800ab58 <pvTaskIncrementMutexHeldCount>
 800951c:	4602      	mov	r2, r0
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00f      	beq.n	800954a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952c:	3310      	adds	r3, #16
 800952e:	4618      	mov	r0, r3
 8009530:	f000 ffca 	bl	800a4c8 <xTaskRemoveFromEventList>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d007      	beq.n	800954a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800953a:	4b55      	ldr	r3, [pc, #340]	; (8009690 <xQueueSemaphoreTake+0x224>)
 800953c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800954a:	f002 f80b 	bl	800b564 <vPortExitCritical>
				return pdPASS;
 800954e:	2301      	movs	r3, #1
 8009550:	e099      	b.n	8009686 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d113      	bne.n	8009580 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00c      	beq.n	8009578 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	b672      	cpsid	i
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	b662      	cpsie	i
 8009572:	617b      	str	r3, [r7, #20]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009578:	f001 fff4 	bl	800b564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800957c:	2300      	movs	r3, #0
 800957e:	e082      	b.n	8009686 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009586:	f107 030c 	add.w	r3, r7, #12
 800958a:	4618      	mov	r0, r3
 800958c:	f001 f802 	bl	800a594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009590:	2301      	movs	r3, #1
 8009592:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009594:	f001 ffe6 	bl	800b564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009598:	f000 fd62 	bl	800a060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800959c:	f001 ffae 	bl	800b4fc <vPortEnterCritical>
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d103      	bne.n	80095b6 <xQueueSemaphoreTake+0x14a>
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095bc:	b25b      	sxtb	r3, r3
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c2:	d103      	bne.n	80095cc <xQueueSemaphoreTake+0x160>
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095cc:	f001 ffca 	bl	800b564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d0:	463a      	mov	r2, r7
 80095d2:	f107 030c 	add.w	r3, r7, #12
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fff1 	bl	800a5c0 <xTaskCheckForTimeOut>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d132      	bne.n	800964a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095e6:	f000 fa1a 	bl	8009a1e <prvIsQueueEmpty>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d026      	beq.n	800963e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80095f8:	f001 ff80 	bl	800b4fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	4618      	mov	r0, r3
 8009602:	f001 f949 	bl	800a898 <xTaskPriorityInherit>
 8009606:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009608:	f001 ffac 	bl	800b564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	3324      	adds	r3, #36	; 0x24
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f000 ff03 	bl	800a420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800961a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800961c:	f000 f9ad 	bl	800997a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009620:	f000 fd2c 	bl	800a07c <xTaskResumeAll>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	f47f af66 	bne.w	80094f8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800962c:	4b18      	ldr	r3, [pc, #96]	; (8009690 <xQueueSemaphoreTake+0x224>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	e75c      	b.n	80094f8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800963e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009640:	f000 f99b 	bl	800997a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009644:	f000 fd1a 	bl	800a07c <xTaskResumeAll>
 8009648:	e756      	b.n	80094f8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800964a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800964c:	f000 f995 	bl	800997a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009650:	f000 fd14 	bl	800a07c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009656:	f000 f9e2 	bl	8009a1e <prvIsQueueEmpty>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	f43f af4b 	beq.w	80094f8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00d      	beq.n	8009684 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009668:	f001 ff48 	bl	800b4fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800966c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800966e:	f000 f8dc 	bl	800982a <prvGetDisinheritPriorityAfterTimeout>
 8009672:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800967a:	4618      	mov	r0, r3
 800967c:	f001 f9e6 	bl	800aa4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009680:	f001 ff70 	bl	800b564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009684:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009686:	4618      	mov	r0, r3
 8009688:	3738      	adds	r7, #56	; 0x38
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08e      	sub	sp, #56	; 0x38
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10c      	bne.n	80096c4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	b672      	cpsid	i
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	b662      	cpsie	i
 80096be:	623b      	str	r3, [r7, #32]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <xQueueReceiveFromISR+0x3e>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <xQueueReceiveFromISR+0x42>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueReceiveFromISR+0x44>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10c      	bne.n	80096f6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	b672      	cpsid	i
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	b662      	cpsie	i
 80096f0:	61fb      	str	r3, [r7, #28]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096f6:	f001 ffe9 	bl	800b6cc <vPortValidateInterruptPriority>
	__asm volatile
 80096fa:	f3ef 8211 	mrs	r2, BASEPRI
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	b672      	cpsid	i
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	b662      	cpsie	i
 8009712:	61ba      	str	r2, [r7, #24]
 8009714:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009716:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	d02f      	beq.n	8009786 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800972c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009734:	f000 f8fb 	bl	800992e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	1e5a      	subs	r2, r3, #1
 800973c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009748:	d112      	bne.n	8009770 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d016      	beq.n	8009780 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	3310      	adds	r3, #16
 8009756:	4618      	mov	r0, r3
 8009758:	f000 feb6 	bl	800a4c8 <xTaskRemoveFromEventList>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00e      	beq.n	8009780 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e007      	b.n	8009780 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009774:	3301      	adds	r3, #1
 8009776:	b2db      	uxtb	r3, r3
 8009778:	b25a      	sxtb	r2, r3
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009780:	2301      	movs	r3, #1
 8009782:	637b      	str	r3, [r7, #52]	; 0x34
 8009784:	e001      	b.n	800978a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009786:	2300      	movs	r3, #0
 8009788:	637b      	str	r3, [r7, #52]	; 0x34
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f383 8811 	msr	BASEPRI, r3
}
 8009794:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009798:	4618      	mov	r0, r3
 800979a:	3738      	adds	r7, #56	; 0x38
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10c      	bne.n	80097c8 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	b672      	cpsid	i
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	b662      	cpsie	i
 80097c2:	60bb      	str	r3, [r7, #8]
}
 80097c4:	bf00      	nop
 80097c6:	e7fe      	b.n	80097c6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80097c8:	f001 fe98 	bl	800b4fc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80097d2:	f001 fec7 	bl	800b564 <vPortExitCritical>

	return uxReturn;
 80097d6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10c      	bne.n	800980c <vQueueDelete+0x2c>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	b672      	cpsid	i
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	b662      	cpsie	i
 8009806:	60bb      	str	r3, [r7, #8]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f95f 	bl	8009ad0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f002 f863 	bl	800b8e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800982a:	b480      	push	{r7}
 800982c:	b085      	sub	sp, #20
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	d006      	beq.n	8009848 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	e001      	b.n	800984c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800984c:	68fb      	ldr	r3, [r7, #12]
	}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10d      	bne.n	8009894 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d14d      	bne.n	800991c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	4618      	mov	r0, r3
 8009886:	f001 f86f 	bl	800a968 <xTaskPriorityDisinherit>
 800988a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	609a      	str	r2, [r3, #8]
 8009892:	e043      	b.n	800991c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d119      	bne.n	80098ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6858      	ldr	r0, [r3, #4]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	461a      	mov	r2, r3
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	f006 ffe9 	bl	801087c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	441a      	add	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d32b      	bcc.n	800991c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	605a      	str	r2, [r3, #4]
 80098cc:	e026      	b.n	800991c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68d8      	ldr	r0, [r3, #12]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	461a      	mov	r2, r3
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	f006 ffcf 	bl	801087c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	425b      	negs	r3, r3
 80098e8:	441a      	add	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	68da      	ldr	r2, [r3, #12]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d207      	bcs.n	800990a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	425b      	negs	r3, r3
 8009904:	441a      	add	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b02      	cmp	r3, #2
 800990e:	d105      	bne.n	800991c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3b01      	subs	r3, #1
 800991a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	1c5a      	adds	r2, r3, #1
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009924:	697b      	ldr	r3, [r7, #20]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d018      	beq.n	8009972 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68da      	ldr	r2, [r3, #12]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009948:	441a      	add	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	429a      	cmp	r2, r3
 8009958:	d303      	bcc.n	8009962 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68d9      	ldr	r1, [r3, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996a:	461a      	mov	r2, r3
 800996c:	6838      	ldr	r0, [r7, #0]
 800996e:	f006 ff85 	bl	801087c <memcpy>
	}
}
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009982:	f001 fdbb 	bl	800b4fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800998c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800998e:	e011      	b.n	80099b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	d012      	beq.n	80099be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3324      	adds	r3, #36	; 0x24
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fd93 	bl	800a4c8 <xTaskRemoveFromEventList>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099a8:	f000 fe70 	bl	800a68c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dce9      	bgt.n	8009990 <prvUnlockQueue+0x16>
 80099bc:	e000      	b.n	80099c0 <prvUnlockQueue+0x46>
					break;
 80099be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	22ff      	movs	r2, #255	; 0xff
 80099c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099c8:	f001 fdcc 	bl	800b564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099cc:	f001 fd96 	bl	800b4fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099d8:	e011      	b.n	80099fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d012      	beq.n	8009a08 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3310      	adds	r3, #16
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fd6e 	bl	800a4c8 <xTaskRemoveFromEventList>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099f2:	f000 fe4b 	bl	800a68c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dce9      	bgt.n	80099da <prvUnlockQueue+0x60>
 8009a06:	e000      	b.n	8009a0a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a08:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	22ff      	movs	r2, #255	; 0xff
 8009a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a12:	f001 fda7 	bl	800b564 <vPortExitCritical>
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a26:	f001 fd69 	bl	800b4fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a32:	2301      	movs	r3, #1
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	e001      	b.n	8009a3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a3c:	f001 fd92 	bl	800b564 <vPortExitCritical>

	return xReturn;
 8009a40:	68fb      	ldr	r3, [r7, #12]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a52:	f001 fd53 	bl	800b4fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d102      	bne.n	8009a68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a62:	2301      	movs	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	e001      	b.n	8009a6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a6c:	f001 fd7a 	bl	800b564 <vPortExitCritical>

	return xReturn;
 8009a70:	68fb      	ldr	r3, [r7, #12]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a86:	2300      	movs	r3, #0
 8009a88:	60fb      	str	r3, [r7, #12]
 8009a8a:	e014      	b.n	8009ab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a8c:	4a0f      	ldr	r2, [pc, #60]	; (8009acc <vQueueAddToRegistry+0x50>)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10b      	bne.n	8009ab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a98:	490c      	ldr	r1, [pc, #48]	; (8009acc <vQueueAddToRegistry+0x50>)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009aa2:	4a0a      	ldr	r2, [pc, #40]	; (8009acc <vQueueAddToRegistry+0x50>)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	00db      	lsls	r3, r3, #3
 8009aa8:	4413      	add	r3, r2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009aae:	e006      	b.n	8009abe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b07      	cmp	r3, #7
 8009aba:	d9e7      	bls.n	8009a8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000ce4 	.word	0x20000ce4

08009ad0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	e016      	b.n	8009b0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009ade:	4a10      	ldr	r2, [pc, #64]	; (8009b20 <vQueueUnregisterQueue+0x50>)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d10b      	bne.n	8009b06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009aee:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <vQueueUnregisterQueue+0x50>)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2100      	movs	r1, #0
 8009af4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009af8:	4a09      	ldr	r2, [pc, #36]	; (8009b20 <vQueueUnregisterQueue+0x50>)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	4413      	add	r3, r2
 8009b00:	2200      	movs	r2, #0
 8009b02:	605a      	str	r2, [r3, #4]
				break;
 8009b04:	e006      	b.n	8009b14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b07      	cmp	r3, #7
 8009b10:	d9e5      	bls.n	8009ade <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	20000ce4 	.word	0x20000ce4

08009b24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b34:	f001 fce2 	bl	800b4fc <vPortEnterCritical>
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b3e:	b25b      	sxtb	r3, r3
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b44:	d103      	bne.n	8009b4e <vQueueWaitForMessageRestricted+0x2a>
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b54:	b25b      	sxtb	r3, r3
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d103      	bne.n	8009b64 <vQueueWaitForMessageRestricted+0x40>
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b64:	f001 fcfe 	bl	800b564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	3324      	adds	r3, #36	; 0x24
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fc77 	bl	800a46c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b7e:	6978      	ldr	r0, [r7, #20]
 8009b80:	f7ff fefb 	bl	800997a <prvUnlockQueue>
	}
 8009b84:	bf00      	nop
 8009b86:	3718      	adds	r7, #24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08e      	sub	sp, #56	; 0x38
 8009b90:	af04      	add	r7, sp, #16
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10c      	bne.n	8009bba <xTaskCreateStatic+0x2e>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	b672      	cpsid	i
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	b662      	cpsie	i
 8009bb4:	623b      	str	r3, [r7, #32]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10c      	bne.n	8009bda <xTaskCreateStatic+0x4e>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	b672      	cpsid	i
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	b662      	cpsie	i
 8009bd4:	61fb      	str	r3, [r7, #28]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bda:	23bc      	movs	r3, #188	; 0xbc
 8009bdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2bbc      	cmp	r3, #188	; 0xbc
 8009be2:	d00c      	beq.n	8009bfe <xTaskCreateStatic+0x72>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	b672      	cpsid	i
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	b662      	cpsie	i
 8009bf8:	61bb      	str	r3, [r7, #24]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009bfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d01e      	beq.n	8009c44 <xTaskCreateStatic+0xb8>
 8009c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d01b      	beq.n	8009c44 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	2202      	movs	r2, #2
 8009c1a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	9302      	str	r3, [sp, #8]
 8009c26:	f107 0314 	add.w	r3, r7, #20
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 f850 	bl	8009cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c3e:	f000 f8f5 	bl	8009e2c <prvAddNewTaskToReadyList>
 8009c42:	e001      	b.n	8009c48 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c48:	697b      	ldr	r3, [r7, #20]
	}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3728      	adds	r7, #40	; 0x28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b08c      	sub	sp, #48	; 0x30
 8009c56:	af04      	add	r7, sp, #16
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	603b      	str	r3, [r7, #0]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c62:	88fb      	ldrh	r3, [r7, #6]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fd74 	bl	800b754 <pvPortMalloc>
 8009c6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00e      	beq.n	8009c92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c74:	20bc      	movs	r0, #188	; 0xbc
 8009c76:	f001 fd6d 	bl	800b754 <pvPortMalloc>
 8009c7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	631a      	str	r2, [r3, #48]	; 0x30
 8009c88:	e005      	b.n	8009c96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c8a:	6978      	ldr	r0, [r7, #20]
 8009c8c:	f001 fe2c 	bl	800b8e8 <vPortFree>
 8009c90:	e001      	b.n	8009c96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d017      	beq.n	8009ccc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ca4:	88fa      	ldrh	r2, [r7, #6]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9303      	str	r3, [sp, #12]
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	9302      	str	r3, [sp, #8]
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	68b9      	ldr	r1, [r7, #8]
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 f80e 	bl	8009cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cc0:	69f8      	ldr	r0, [r7, #28]
 8009cc2:	f000 f8b3 	bl	8009e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	61bb      	str	r3, [r7, #24]
 8009cca:	e002      	b.n	8009cd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009cd2:	69bb      	ldr	r3, [r7, #24]
	}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3720      	adds	r7, #32
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	21a5      	movs	r1, #165	; 0xa5
 8009cf6:	f006 fdcf 	bl	8010898 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cfe:	6879      	ldr	r1, [r7, #4]
 8009d00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009d04:	440b      	add	r3, r1
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	f023 0307 	bic.w	r3, r3, #7
 8009d12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	b672      	cpsid	i
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	b662      	cpsie	i
 8009d32:	617b      	str	r3, [r7, #20]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d01f      	beq.n	8009d7e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	e012      	b.n	8009d6a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	4413      	add	r3, r2
 8009d4a:	7819      	ldrb	r1, [r3, #0]
 8009d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	4413      	add	r3, r2
 8009d52:	3334      	adds	r3, #52	; 0x34
 8009d54:	460a      	mov	r2, r1
 8009d56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	3301      	adds	r3, #1
 8009d68:	61fb      	str	r3, [r7, #28]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	2b0f      	cmp	r3, #15
 8009d6e:	d9e9      	bls.n	8009d44 <prvInitialiseNewTask+0x68>
 8009d70:	e000      	b.n	8009d74 <prvInitialiseNewTask+0x98>
			{
				break;
 8009d72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d7c:	e003      	b.n	8009d86 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	2b37      	cmp	r3, #55	; 0x37
 8009d8a:	d901      	bls.n	8009d90 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d8c:	2337      	movs	r3, #55	; 0x37
 8009d8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	2200      	movs	r2, #0
 8009da0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe feee 	bl	8008b88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	3318      	adds	r3, #24
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fee9 	bl	8008b88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	3354      	adds	r3, #84	; 0x54
 8009de0:	2260      	movs	r2, #96	; 0x60
 8009de2:	2100      	movs	r1, #0
 8009de4:	4618      	mov	r0, r3
 8009de6:	f006 fd57 	bl	8010898 <memset>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	4a0c      	ldr	r2, [pc, #48]	; (8009e20 <prvInitialiseNewTask+0x144>)
 8009dee:	659a      	str	r2, [r3, #88]	; 0x58
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	4a0c      	ldr	r2, [pc, #48]	; (8009e24 <prvInitialiseNewTask+0x148>)
 8009df4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	4a0b      	ldr	r2, [pc, #44]	; (8009e28 <prvInitialiseNewTask+0x14c>)
 8009dfa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dfc:	683a      	ldr	r2, [r7, #0]
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	69b8      	ldr	r0, [r7, #24]
 8009e02:	f001 fa6d 	bl	800b2e0 <pxPortInitialiseStack>
 8009e06:	4602      	mov	r2, r0
 8009e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e18:	bf00      	nop
 8009e1a:	3720      	adds	r7, #32
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	080153e4 	.word	0x080153e4
 8009e24:	08015404 	.word	0x08015404
 8009e28:	080153c4 	.word	0x080153c4

08009e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e34:	f001 fb62 	bl	800b4fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e38:	4b2d      	ldr	r3, [pc, #180]	; (8009ef0 <prvAddNewTaskToReadyList+0xc4>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	4a2c      	ldr	r2, [pc, #176]	; (8009ef0 <prvAddNewTaskToReadyList+0xc4>)
 8009e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e42:	4b2c      	ldr	r3, [pc, #176]	; (8009ef4 <prvAddNewTaskToReadyList+0xc8>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d109      	bne.n	8009e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e4a:	4a2a      	ldr	r2, [pc, #168]	; (8009ef4 <prvAddNewTaskToReadyList+0xc8>)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e50:	4b27      	ldr	r3, [pc, #156]	; (8009ef0 <prvAddNewTaskToReadyList+0xc4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d110      	bne.n	8009e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e58:	f000 fc3c 	bl	800a6d4 <prvInitialiseTaskLists>
 8009e5c:	e00d      	b.n	8009e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e5e:	4b26      	ldr	r3, [pc, #152]	; (8009ef8 <prvAddNewTaskToReadyList+0xcc>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d109      	bne.n	8009e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e66:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <prvAddNewTaskToReadyList+0xc8>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d802      	bhi.n	8009e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e74:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <prvAddNewTaskToReadyList+0xc8>)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e7a:	4b20      	ldr	r3, [pc, #128]	; (8009efc <prvAddNewTaskToReadyList+0xd0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	4a1e      	ldr	r2, [pc, #120]	; (8009efc <prvAddNewTaskToReadyList+0xd0>)
 8009e82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e84:	4b1d      	ldr	r3, [pc, #116]	; (8009efc <prvAddNewTaskToReadyList+0xd0>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	4b1b      	ldr	r3, [pc, #108]	; (8009f00 <prvAddNewTaskToReadyList+0xd4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d903      	bls.n	8009ea0 <prvAddNewTaskToReadyList+0x74>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	4a18      	ldr	r2, [pc, #96]	; (8009f00 <prvAddNewTaskToReadyList+0xd4>)
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4a15      	ldr	r2, [pc, #84]	; (8009f04 <prvAddNewTaskToReadyList+0xd8>)
 8009eae:	441a      	add	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fe fe73 	bl	8008ba2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ebc:	f001 fb52 	bl	800b564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ec0:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <prvAddNewTaskToReadyList+0xcc>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00e      	beq.n	8009ee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <prvAddNewTaskToReadyList+0xc8>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d207      	bcs.n	8009ee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <prvAddNewTaskToReadyList+0xdc>)
 8009ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200011f8 	.word	0x200011f8
 8009ef4:	20000d24 	.word	0x20000d24
 8009ef8:	20001204 	.word	0x20001204
 8009efc:	20001214 	.word	0x20001214
 8009f00:	20001200 	.word	0x20001200
 8009f04:	20000d28 	.word	0x20000d28
 8009f08:	e000ed04 	.word	0xe000ed04

08009f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d019      	beq.n	8009f52 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f1e:	4b14      	ldr	r3, [pc, #80]	; (8009f70 <vTaskDelay+0x64>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00c      	beq.n	8009f40 <vTaskDelay+0x34>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	b672      	cpsid	i
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	b662      	cpsie	i
 8009f3a:	60bb      	str	r3, [r7, #8]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009f40:	f000 f88e 	bl	800a060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f44:	2100      	movs	r1, #0
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fe1a 	bl	800ab80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f4c:	f000 f896 	bl	800a07c <xTaskResumeAll>
 8009f50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d107      	bne.n	8009f68 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009f58:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <vTaskDelay+0x68>)
 8009f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20001220 	.word	0x20001220
 8009f74:	e000ed04 	.word	0xe000ed04

08009f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08a      	sub	sp, #40	; 0x28
 8009f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f86:	463a      	mov	r2, r7
 8009f88:	1d39      	adds	r1, r7, #4
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fe fda6 	bl	8008ae0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	9202      	str	r2, [sp, #8]
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	460a      	mov	r2, r1
 8009fa6:	4926      	ldr	r1, [pc, #152]	; (800a040 <vTaskStartScheduler+0xc8>)
 8009fa8:	4826      	ldr	r0, [pc, #152]	; (800a044 <vTaskStartScheduler+0xcc>)
 8009faa:	f7ff fdef 	bl	8009b8c <xTaskCreateStatic>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4a25      	ldr	r2, [pc, #148]	; (800a048 <vTaskStartScheduler+0xd0>)
 8009fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009fb4:	4b24      	ldr	r3, [pc, #144]	; (800a048 <vTaskStartScheduler+0xd0>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	617b      	str	r3, [r7, #20]
 8009fc0:	e001      	b.n	8009fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d102      	bne.n	8009fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009fcc:	f000 fe2c 	bl	800ac28 <xTimerCreateTimerTask>
 8009fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d11d      	bne.n	800a014 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	b672      	cpsid	i
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	b662      	cpsie	i
 8009fec:	613b      	str	r3, [r7, #16]
}
 8009fee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ff0:	4b16      	ldr	r3, [pc, #88]	; (800a04c <vTaskStartScheduler+0xd4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3354      	adds	r3, #84	; 0x54
 8009ff6:	4a16      	ldr	r2, [pc, #88]	; (800a050 <vTaskStartScheduler+0xd8>)
 8009ff8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ffa:	4b16      	ldr	r3, [pc, #88]	; (800a054 <vTaskStartScheduler+0xdc>)
 8009ffc:	f04f 32ff 	mov.w	r2, #4294967295
 800a000:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a002:	4b15      	ldr	r3, [pc, #84]	; (800a058 <vTaskStartScheduler+0xe0>)
 800a004:	2201      	movs	r2, #1
 800a006:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a008:	4b14      	ldr	r3, [pc, #80]	; (800a05c <vTaskStartScheduler+0xe4>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a00e:	f001 f9f7 	bl	800b400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a012:	e010      	b.n	800a036 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d10c      	bne.n	800a036 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	b672      	cpsid	i
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	b662      	cpsie	i
 800a030:	60fb      	str	r3, [r7, #12]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <vTaskStartScheduler+0xbc>
}
 800a036:	bf00      	nop
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	08013950 	.word	0x08013950
 800a044:	0800a6a5 	.word	0x0800a6a5
 800a048:	2000121c 	.word	0x2000121c
 800a04c:	20000d24 	.word	0x20000d24
 800a050:	20000204 	.word	0x20000204
 800a054:	20001218 	.word	0x20001218
 800a058:	20001204 	.word	0x20001204
 800a05c:	200011fc 	.word	0x200011fc

0800a060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a064:	4b04      	ldr	r3, [pc, #16]	; (800a078 <vTaskSuspendAll+0x18>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3301      	adds	r3, #1
 800a06a:	4a03      	ldr	r2, [pc, #12]	; (800a078 <vTaskSuspendAll+0x18>)
 800a06c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a06e:	bf00      	nop
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	20001220 	.word	0x20001220

0800a07c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a08a:	4b43      	ldr	r3, [pc, #268]	; (800a198 <xTaskResumeAll+0x11c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10c      	bne.n	800a0ac <xTaskResumeAll+0x30>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	b672      	cpsid	i
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	b662      	cpsie	i
 800a0a6:	603b      	str	r3, [r7, #0]
}
 800a0a8:	bf00      	nop
 800a0aa:	e7fe      	b.n	800a0aa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0ac:	f001 fa26 	bl	800b4fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0b0:	4b39      	ldr	r3, [pc, #228]	; (800a198 <xTaskResumeAll+0x11c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	4a38      	ldr	r2, [pc, #224]	; (800a198 <xTaskResumeAll+0x11c>)
 800a0b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ba:	4b37      	ldr	r3, [pc, #220]	; (800a198 <xTaskResumeAll+0x11c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d162      	bne.n	800a188 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0c2:	4b36      	ldr	r3, [pc, #216]	; (800a19c <xTaskResumeAll+0x120>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d05e      	beq.n	800a188 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0ca:	e02f      	b.n	800a12c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0cc:	4b34      	ldr	r3, [pc, #208]	; (800a1a0 <xTaskResumeAll+0x124>)
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3318      	adds	r3, #24
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fdbf 	bl	8008c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fdba 	bl	8008c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ec:	4b2d      	ldr	r3, [pc, #180]	; (800a1a4 <xTaskResumeAll+0x128>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d903      	bls.n	800a0fc <xTaskResumeAll+0x80>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	4a2a      	ldr	r2, [pc, #168]	; (800a1a4 <xTaskResumeAll+0x128>)
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4a27      	ldr	r2, [pc, #156]	; (800a1a8 <xTaskResumeAll+0x12c>)
 800a10a:	441a      	add	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3304      	adds	r3, #4
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f7fe fd45 	bl	8008ba2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11c:	4b23      	ldr	r3, [pc, #140]	; (800a1ac <xTaskResumeAll+0x130>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	429a      	cmp	r2, r3
 800a124:	d302      	bcc.n	800a12c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a126:	4b22      	ldr	r3, [pc, #136]	; (800a1b0 <xTaskResumeAll+0x134>)
 800a128:	2201      	movs	r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a12c:	4b1c      	ldr	r3, [pc, #112]	; (800a1a0 <xTaskResumeAll+0x124>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1cb      	bne.n	800a0cc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a13a:	f000 fb6f 	bl	800a81c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a13e:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <xTaskResumeAll+0x138>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d010      	beq.n	800a16c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a14a:	f000 f847 	bl	800a1dc <xTaskIncrementTick>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a154:	4b16      	ldr	r3, [pc, #88]	; (800a1b0 <xTaskResumeAll+0x134>)
 800a156:	2201      	movs	r2, #1
 800a158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1f1      	bne.n	800a14a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <xTaskResumeAll+0x138>)
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a16c:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <xTaskResumeAll+0x134>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d009      	beq.n	800a188 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a174:	2301      	movs	r3, #1
 800a176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a178:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <xTaskResumeAll+0x13c>)
 800a17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a188:	f001 f9ec 	bl	800b564 <vPortExitCritical>

	return xAlreadyYielded;
 800a18c:	68bb      	ldr	r3, [r7, #8]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20001220 	.word	0x20001220
 800a19c:	200011f8 	.word	0x200011f8
 800a1a0:	200011b8 	.word	0x200011b8
 800a1a4:	20001200 	.word	0x20001200
 800a1a8:	20000d28 	.word	0x20000d28
 800a1ac:	20000d24 	.word	0x20000d24
 800a1b0:	2000120c 	.word	0x2000120c
 800a1b4:	20001208 	.word	0x20001208
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1c2:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <xTaskGetTickCount+0x1c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1c8:	687b      	ldr	r3, [r7, #4]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	200011fc 	.word	0x200011fc

0800a1dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1e6:	4b50      	ldr	r3, [pc, #320]	; (800a328 <xTaskIncrementTick+0x14c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f040 808b 	bne.w	800a306 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1f0:	4b4e      	ldr	r3, [pc, #312]	; (800a32c <xTaskIncrementTick+0x150>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1f8:	4a4c      	ldr	r2, [pc, #304]	; (800a32c <xTaskIncrementTick+0x150>)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d122      	bne.n	800a24a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a204:	4b4a      	ldr	r3, [pc, #296]	; (800a330 <xTaskIncrementTick+0x154>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00c      	beq.n	800a228 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	b672      	cpsid	i
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	b662      	cpsie	i
 800a222:	603b      	str	r3, [r7, #0]
}
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <xTaskIncrementTick+0x4a>
 800a228:	4b41      	ldr	r3, [pc, #260]	; (800a330 <xTaskIncrementTick+0x154>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	4b41      	ldr	r3, [pc, #260]	; (800a334 <xTaskIncrementTick+0x158>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a3f      	ldr	r2, [pc, #252]	; (800a330 <xTaskIncrementTick+0x154>)
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	4a3f      	ldr	r2, [pc, #252]	; (800a334 <xTaskIncrementTick+0x158>)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	4b3e      	ldr	r3, [pc, #248]	; (800a338 <xTaskIncrementTick+0x15c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3301      	adds	r3, #1
 800a242:	4a3d      	ldr	r2, [pc, #244]	; (800a338 <xTaskIncrementTick+0x15c>)
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	f000 fae9 	bl	800a81c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a24a:	4b3c      	ldr	r3, [pc, #240]	; (800a33c <xTaskIncrementTick+0x160>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	429a      	cmp	r2, r3
 800a252:	d349      	bcc.n	800a2e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a254:	4b36      	ldr	r3, [pc, #216]	; (800a330 <xTaskIncrementTick+0x154>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d104      	bne.n	800a268 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a25e:	4b37      	ldr	r3, [pc, #220]	; (800a33c <xTaskIncrementTick+0x160>)
 800a260:	f04f 32ff 	mov.w	r2, #4294967295
 800a264:	601a      	str	r2, [r3, #0]
					break;
 800a266:	e03f      	b.n	800a2e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a268:	4b31      	ldr	r3, [pc, #196]	; (800a330 <xTaskIncrementTick+0x154>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d203      	bcs.n	800a288 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a280:	4a2e      	ldr	r2, [pc, #184]	; (800a33c <xTaskIncrementTick+0x160>)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a286:	e02f      	b.n	800a2e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe fce5 	bl	8008c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	3318      	adds	r3, #24
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fcdc 	bl	8008c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	4b25      	ldr	r3, [pc, #148]	; (800a340 <xTaskIncrementTick+0x164>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d903      	bls.n	800a2b8 <xTaskIncrementTick+0xdc>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4a22      	ldr	r2, [pc, #136]	; (800a340 <xTaskIncrementTick+0x164>)
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4a1f      	ldr	r2, [pc, #124]	; (800a344 <xTaskIncrementTick+0x168>)
 800a2c6:	441a      	add	r2, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f7fe fc67 	bl	8008ba2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d8:	4b1b      	ldr	r3, [pc, #108]	; (800a348 <xTaskIncrementTick+0x16c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d3b8      	bcc.n	800a254 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2e6:	e7b5      	b.n	800a254 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <xTaskIncrementTick+0x16c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ee:	4915      	ldr	r1, [pc, #84]	; (800a344 <xTaskIncrementTick+0x168>)
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	440b      	add	r3, r1
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d907      	bls.n	800a310 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a300:	2301      	movs	r3, #1
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	e004      	b.n	800a310 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a306:	4b11      	ldr	r3, [pc, #68]	; (800a34c <xTaskIncrementTick+0x170>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3301      	adds	r3, #1
 800a30c:	4a0f      	ldr	r2, [pc, #60]	; (800a34c <xTaskIncrementTick+0x170>)
 800a30e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a310:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <xTaskIncrementTick+0x174>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a31c:	697b      	ldr	r3, [r7, #20]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20001220 	.word	0x20001220
 800a32c:	200011fc 	.word	0x200011fc
 800a330:	200011b0 	.word	0x200011b0
 800a334:	200011b4 	.word	0x200011b4
 800a338:	20001210 	.word	0x20001210
 800a33c:	20001218 	.word	0x20001218
 800a340:	20001200 	.word	0x20001200
 800a344:	20000d28 	.word	0x20000d28
 800a348:	20000d24 	.word	0x20000d24
 800a34c:	20001208 	.word	0x20001208
 800a350:	2000120c 	.word	0x2000120c

0800a354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a35a:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <vTaskSwitchContext+0xb4>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a362:	4b2a      	ldr	r3, [pc, #168]	; (800a40c <vTaskSwitchContext+0xb8>)
 800a364:	2201      	movs	r2, #1
 800a366:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a368:	e048      	b.n	800a3fc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a36a:	4b28      	ldr	r3, [pc, #160]	; (800a40c <vTaskSwitchContext+0xb8>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a370:	4b27      	ldr	r3, [pc, #156]	; (800a410 <vTaskSwitchContext+0xbc>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e012      	b.n	800a39e <vTaskSwitchContext+0x4a>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10c      	bne.n	800a398 <vTaskSwitchContext+0x44>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	b672      	cpsid	i
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	b662      	cpsie	i
 800a392:	607b      	str	r3, [r7, #4]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <vTaskSwitchContext+0x42>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	491d      	ldr	r1, [pc, #116]	; (800a414 <vTaskSwitchContext+0xc0>)
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0e2      	beq.n	800a378 <vTaskSwitchContext+0x24>
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4a15      	ldr	r2, [pc, #84]	; (800a414 <vTaskSwitchContext+0xc0>)
 800a3be:	4413      	add	r3, r2
 800a3c0:	60bb      	str	r3, [r7, #8]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	605a      	str	r2, [r3, #4]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d104      	bne.n	800a3e2 <vTaskSwitchContext+0x8e>
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	605a      	str	r2, [r3, #4]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	4a0b      	ldr	r2, [pc, #44]	; (800a418 <vTaskSwitchContext+0xc4>)
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	4a08      	ldr	r2, [pc, #32]	; (800a410 <vTaskSwitchContext+0xbc>)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3f2:	4b09      	ldr	r3, [pc, #36]	; (800a418 <vTaskSwitchContext+0xc4>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3354      	adds	r3, #84	; 0x54
 800a3f8:	4a08      	ldr	r2, [pc, #32]	; (800a41c <vTaskSwitchContext+0xc8>)
 800a3fa:	6013      	str	r3, [r2, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	20001220 	.word	0x20001220
 800a40c:	2000120c 	.word	0x2000120c
 800a410:	20001200 	.word	0x20001200
 800a414:	20000d28 	.word	0x20000d28
 800a418:	20000d24 	.word	0x20000d24
 800a41c:	20000204 	.word	0x20000204

0800a420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10c      	bne.n	800a44a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	b672      	cpsid	i
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	b662      	cpsie	i
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a44a:	4b07      	ldr	r3, [pc, #28]	; (800a468 <vTaskPlaceOnEventList+0x48>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3318      	adds	r3, #24
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7fe fbc9 	bl	8008bea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a458:	2101      	movs	r1, #1
 800a45a:	6838      	ldr	r0, [r7, #0]
 800a45c:	f000 fb90 	bl	800ab80 <prvAddCurrentTaskToDelayedList>
}
 800a460:	bf00      	nop
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20000d24 	.word	0x20000d24

0800a46c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10c      	bne.n	800a498 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	b672      	cpsid	i
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	b662      	cpsie	i
 800a492:	617b      	str	r3, [r7, #20]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3318      	adds	r3, #24
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7fe fb7e 	bl	8008ba2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4b2:	6879      	ldr	r1, [r7, #4]
 800a4b4:	68b8      	ldr	r0, [r7, #8]
 800a4b6:	f000 fb63 	bl	800ab80 <prvAddCurrentTaskToDelayedList>
	}
 800a4ba:	bf00      	nop
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000d24 	.word	0x20000d24

0800a4c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10c      	bne.n	800a4f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	b672      	cpsid	i
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	b662      	cpsie	i
 800a4f2:	60fb      	str	r3, [r7, #12]
}
 800a4f4:	bf00      	nop
 800a4f6:	e7fe      	b.n	800a4f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3318      	adds	r3, #24
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe fbad 	bl	8008c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a502:	4b1e      	ldr	r3, [pc, #120]	; (800a57c <xTaskRemoveFromEventList+0xb4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d11d      	bne.n	800a546 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fba4 	bl	8008c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a518:	4b19      	ldr	r3, [pc, #100]	; (800a580 <xTaskRemoveFromEventList+0xb8>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d903      	bls.n	800a528 <xTaskRemoveFromEventList+0x60>
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4a16      	ldr	r2, [pc, #88]	; (800a580 <xTaskRemoveFromEventList+0xb8>)
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4a13      	ldr	r2, [pc, #76]	; (800a584 <xTaskRemoveFromEventList+0xbc>)
 800a536:	441a      	add	r2, r3
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f7fe fb2f 	bl	8008ba2 <vListInsertEnd>
 800a544:	e005      	b.n	800a552 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	3318      	adds	r3, #24
 800a54a:	4619      	mov	r1, r3
 800a54c:	480e      	ldr	r0, [pc, #56]	; (800a588 <xTaskRemoveFromEventList+0xc0>)
 800a54e:	f7fe fb28 	bl	8008ba2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <xTaskRemoveFromEventList+0xc4>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d905      	bls.n	800a56c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <xTaskRemoveFromEventList+0xc8>)
 800a566:	2201      	movs	r2, #1
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	e001      	b.n	800a570 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a570:	697b      	ldr	r3, [r7, #20]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20001220 	.word	0x20001220
 800a580:	20001200 	.word	0x20001200
 800a584:	20000d28 	.word	0x20000d28
 800a588:	200011b8 	.word	0x200011b8
 800a58c:	20000d24 	.word	0x20000d24
 800a590:	2000120c 	.word	0x2000120c

0800a594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a59c:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <vTaskInternalSetTimeOutState+0x24>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <vTaskInternalSetTimeOutState+0x28>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	20001210 	.word	0x20001210
 800a5bc:	200011fc 	.word	0x200011fc

0800a5c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b088      	sub	sp, #32
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10c      	bne.n	800a5ea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	b672      	cpsid	i
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	b662      	cpsie	i
 800a5e4:	613b      	str	r3, [r7, #16]
}
 800a5e6:	bf00      	nop
 800a5e8:	e7fe      	b.n	800a5e8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10c      	bne.n	800a60a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	b672      	cpsid	i
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	b662      	cpsie	i
 800a604:	60fb      	str	r3, [r7, #12]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a60a:	f000 ff77 	bl	800b4fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a60e:	4b1d      	ldr	r3, [pc, #116]	; (800a684 <xTaskCheckForTimeOut+0xc4>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d102      	bne.n	800a62e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a628:	2300      	movs	r3, #0
 800a62a:	61fb      	str	r3, [r7, #28]
 800a62c:	e023      	b.n	800a676 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	4b15      	ldr	r3, [pc, #84]	; (800a688 <xTaskCheckForTimeOut+0xc8>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d007      	beq.n	800a64a <xTaskCheckForTimeOut+0x8a>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	429a      	cmp	r2, r3
 800a642:	d302      	bcc.n	800a64a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a644:	2301      	movs	r3, #1
 800a646:	61fb      	str	r3, [r7, #28]
 800a648:	e015      	b.n	800a676 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	429a      	cmp	r2, r3
 800a652:	d20b      	bcs.n	800a66c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff ff97 	bl	800a594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a666:	2300      	movs	r3, #0
 800a668:	61fb      	str	r3, [r7, #28]
 800a66a:	e004      	b.n	800a676 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a672:	2301      	movs	r3, #1
 800a674:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a676:	f000 ff75 	bl	800b564 <vPortExitCritical>

	return xReturn;
 800a67a:	69fb      	ldr	r3, [r7, #28]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3720      	adds	r7, #32
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	200011fc 	.word	0x200011fc
 800a688:	20001210 	.word	0x20001210

0800a68c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a690:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <vTaskMissedYield+0x14>)
 800a692:	2201      	movs	r2, #1
 800a694:	601a      	str	r2, [r3, #0]
}
 800a696:	bf00      	nop
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	2000120c 	.word	0x2000120c

0800a6a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6ac:	f000 f852 	bl	800a754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6b0:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <prvIdleTask+0x28>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d9f9      	bls.n	800a6ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6b8:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <prvIdleTask+0x2c>)
 800a6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6c8:	e7f0      	b.n	800a6ac <prvIdleTask+0x8>
 800a6ca:	bf00      	nop
 800a6cc:	20000d28 	.word	0x20000d28
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6da:	2300      	movs	r3, #0
 800a6dc:	607b      	str	r3, [r7, #4]
 800a6de:	e00c      	b.n	800a6fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4a12      	ldr	r2, [pc, #72]	; (800a734 <prvInitialiseTaskLists+0x60>)
 800a6ec:	4413      	add	r3, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fa2a 	bl	8008b48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	607b      	str	r3, [r7, #4]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b37      	cmp	r3, #55	; 0x37
 800a6fe:	d9ef      	bls.n	800a6e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a700:	480d      	ldr	r0, [pc, #52]	; (800a738 <prvInitialiseTaskLists+0x64>)
 800a702:	f7fe fa21 	bl	8008b48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a706:	480d      	ldr	r0, [pc, #52]	; (800a73c <prvInitialiseTaskLists+0x68>)
 800a708:	f7fe fa1e 	bl	8008b48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a70c:	480c      	ldr	r0, [pc, #48]	; (800a740 <prvInitialiseTaskLists+0x6c>)
 800a70e:	f7fe fa1b 	bl	8008b48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a712:	480c      	ldr	r0, [pc, #48]	; (800a744 <prvInitialiseTaskLists+0x70>)
 800a714:	f7fe fa18 	bl	8008b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a718:	480b      	ldr	r0, [pc, #44]	; (800a748 <prvInitialiseTaskLists+0x74>)
 800a71a:	f7fe fa15 	bl	8008b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a71e:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <prvInitialiseTaskLists+0x78>)
 800a720:	4a05      	ldr	r2, [pc, #20]	; (800a738 <prvInitialiseTaskLists+0x64>)
 800a722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <prvInitialiseTaskLists+0x7c>)
 800a726:	4a05      	ldr	r2, [pc, #20]	; (800a73c <prvInitialiseTaskLists+0x68>)
 800a728:	601a      	str	r2, [r3, #0]
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20000d28 	.word	0x20000d28
 800a738:	20001188 	.word	0x20001188
 800a73c:	2000119c 	.word	0x2000119c
 800a740:	200011b8 	.word	0x200011b8
 800a744:	200011cc 	.word	0x200011cc
 800a748:	200011e4 	.word	0x200011e4
 800a74c:	200011b0 	.word	0x200011b0
 800a750:	200011b4 	.word	0x200011b4

0800a754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a75a:	e019      	b.n	800a790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a75c:	f000 fece 	bl	800b4fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a760:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <prvCheckTasksWaitingTermination+0x50>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3304      	adds	r3, #4
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fe fa75 	bl	8008c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a772:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <prvCheckTasksWaitingTermination+0x54>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3b01      	subs	r3, #1
 800a778:	4a0b      	ldr	r2, [pc, #44]	; (800a7a8 <prvCheckTasksWaitingTermination+0x54>)
 800a77a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a77c:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <prvCheckTasksWaitingTermination+0x58>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3b01      	subs	r3, #1
 800a782:	4a0a      	ldr	r2, [pc, #40]	; (800a7ac <prvCheckTasksWaitingTermination+0x58>)
 800a784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a786:	f000 feed 	bl	800b564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f810 	bl	800a7b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <prvCheckTasksWaitingTermination+0x58>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e1      	bne.n	800a75c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a798:	bf00      	nop
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200011cc 	.word	0x200011cc
 800a7a8:	200011f8 	.word	0x200011f8
 800a7ac:	200011e0 	.word	0x200011e0

0800a7b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3354      	adds	r3, #84	; 0x54
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f006 fedb 	bl	8011578 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d108      	bne.n	800a7de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 f889 	bl	800b8e8 <vPortFree>
				vPortFree( pxTCB );
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f001 f886 	bl	800b8e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7dc:	e01a      	b.n	800a814 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d103      	bne.n	800a7f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 f87d 	bl	800b8e8 <vPortFree>
	}
 800a7ee:	e011      	b.n	800a814 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d00c      	beq.n	800a814 <prvDeleteTCB+0x64>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	b672      	cpsid	i
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	b662      	cpsie	i
 800a80e:	60fb      	str	r3, [r7, #12]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <prvDeleteTCB+0x62>
	}
 800a814:	bf00      	nop
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a822:	4b0c      	ldr	r3, [pc, #48]	; (800a854 <prvResetNextTaskUnblockTime+0x38>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d104      	bne.n	800a836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a82c:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <prvResetNextTaskUnblockTime+0x3c>)
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295
 800a832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a834:	e008      	b.n	800a848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <prvResetNextTaskUnblockTime+0x38>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	4a04      	ldr	r2, [pc, #16]	; (800a858 <prvResetNextTaskUnblockTime+0x3c>)
 800a846:	6013      	str	r3, [r2, #0]
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	200011b0 	.word	0x200011b0
 800a858:	20001218 	.word	0x20001218

0800a85c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a862:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <xTaskGetSchedulerState+0x34>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a86a:	2301      	movs	r3, #1
 800a86c:	607b      	str	r3, [r7, #4]
 800a86e:	e008      	b.n	800a882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a870:	4b08      	ldr	r3, [pc, #32]	; (800a894 <xTaskGetSchedulerState+0x38>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a878:	2302      	movs	r3, #2
 800a87a:	607b      	str	r3, [r7, #4]
 800a87c:	e001      	b.n	800a882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a87e:	2300      	movs	r3, #0
 800a880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a882:	687b      	ldr	r3, [r7, #4]
	}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20001204 	.word	0x20001204
 800a894:	20001220 	.word	0x20001220

0800a898 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d051      	beq.n	800a952 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b2:	4b2a      	ldr	r3, [pc, #168]	; (800a95c <xTaskPriorityInherit+0xc4>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d241      	bcs.n	800a940 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	db06      	blt.n	800a8d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8c4:	4b25      	ldr	r3, [pc, #148]	; (800a95c <xTaskPriorityInherit+0xc4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	6959      	ldr	r1, [r3, #20]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <xTaskPriorityInherit+0xc8>)
 800a8e4:	4413      	add	r3, r2
 800a8e6:	4299      	cmp	r1, r3
 800a8e8:	d122      	bne.n	800a930 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe f9b4 	bl	8008c5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8f4:	4b19      	ldr	r3, [pc, #100]	; (800a95c <xTaskPriorityInherit+0xc4>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a902:	4b18      	ldr	r3, [pc, #96]	; (800a964 <xTaskPriorityInherit+0xcc>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d903      	bls.n	800a912 <xTaskPriorityInherit+0x7a>
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90e:	4a15      	ldr	r2, [pc, #84]	; (800a964 <xTaskPriorityInherit+0xcc>)
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4a10      	ldr	r2, [pc, #64]	; (800a960 <xTaskPriorityInherit+0xc8>)
 800a920:	441a      	add	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	3304      	adds	r3, #4
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f7fe f93a 	bl	8008ba2 <vListInsertEnd>
 800a92e:	e004      	b.n	800a93a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a930:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <xTaskPriorityInherit+0xc4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a93a:	2301      	movs	r3, #1
 800a93c:	60fb      	str	r3, [r7, #12]
 800a93e:	e008      	b.n	800a952 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a944:	4b05      	ldr	r3, [pc, #20]	; (800a95c <xTaskPriorityInherit+0xc4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d201      	bcs.n	800a952 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a952:	68fb      	ldr	r3, [r7, #12]
	}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20000d24 	.word	0x20000d24
 800a960:	20000d28 	.word	0x20000d28
 800a964:	20001200 	.word	0x20001200

0800a968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a974:	2300      	movs	r3, #0
 800a976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d05a      	beq.n	800aa34 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a97e:	4b30      	ldr	r3, [pc, #192]	; (800aa40 <xTaskPriorityDisinherit+0xd8>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	429a      	cmp	r2, r3
 800a986:	d00c      	beq.n	800a9a2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	b672      	cpsid	i
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	b662      	cpsie	i
 800a99c:	60fb      	str	r3, [r7, #12]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10c      	bne.n	800a9c4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	b672      	cpsid	i
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	b662      	cpsie	i
 800a9be:	60bb      	str	r3, [r7, #8]
}
 800a9c0:	bf00      	nop
 800a9c2:	e7fe      	b.n	800a9c2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c8:	1e5a      	subs	r2, r3, #1
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d02c      	beq.n	800aa34 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d128      	bne.n	800aa34 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe f938 	bl	8008c5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa04:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <xTaskPriorityDisinherit+0xdc>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d903      	bls.n	800aa14 <xTaskPriorityDisinherit+0xac>
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	4a0c      	ldr	r2, [pc, #48]	; (800aa44 <xTaskPriorityDisinherit+0xdc>)
 800aa12:	6013      	str	r3, [r2, #0]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa18:	4613      	mov	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4a09      	ldr	r2, [pc, #36]	; (800aa48 <xTaskPriorityDisinherit+0xe0>)
 800aa22:	441a      	add	r2, r3
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fe f8b9 	bl	8008ba2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa30:	2301      	movs	r3, #1
 800aa32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa34:	697b      	ldr	r3, [r7, #20]
	}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000d24 	.word	0x20000d24
 800aa44:	20001200 	.word	0x20001200
 800aa48:	20000d28 	.word	0x20000d28

0800aa4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b088      	sub	sp, #32
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d06e      	beq.n	800ab42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10c      	bne.n	800aa86 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	b672      	cpsid	i
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	b662      	cpsie	i
 800aa80:	60fb      	str	r3, [r7, #12]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d902      	bls.n	800aa96 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	61fb      	str	r3, [r7, #28]
 800aa94:	e002      	b.n	800aa9c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d04d      	beq.n	800ab42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d148      	bne.n	800ab42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aab0:	4b26      	ldr	r3, [pc, #152]	; (800ab4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d10c      	bne.n	800aad4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	b672      	cpsid	i
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	b662      	cpsie	i
 800aace:	60bb      	str	r3, [r7, #8]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	69fa      	ldr	r2, [r7, #28]
 800aade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	db04      	blt.n	800aaf2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	6959      	ldr	r1, [r3, #20]
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4a13      	ldr	r2, [pc, #76]	; (800ab50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab02:	4413      	add	r3, r2
 800ab04:	4299      	cmp	r1, r3
 800ab06:	d11c      	bne.n	800ab42 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe f8a5 	bl	8008c5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab16:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d903      	bls.n	800ab26 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	4a0c      	ldr	r2, [pc, #48]	; (800ab54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4a07      	ldr	r2, [pc, #28]	; (800ab50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab34:	441a      	add	r2, r3
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	f7fe f830 	bl	8008ba2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab42:	bf00      	nop
 800ab44:	3720      	adds	r7, #32
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000d24 	.word	0x20000d24
 800ab50:	20000d28 	.word	0x20000d28
 800ab54:	20001200 	.word	0x20001200

0800ab58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab58:	b480      	push	{r7}
 800ab5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab5c:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d004      	beq.n	800ab6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab6a:	3201      	adds	r2, #1
 800ab6c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ab6e:	4b03      	ldr	r3, [pc, #12]	; (800ab7c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab70:	681b      	ldr	r3, [r3, #0]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	20000d24 	.word	0x20000d24

0800ab80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab8a:	4b21      	ldr	r3, [pc, #132]	; (800ac10 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab90:	4b20      	ldr	r3, [pc, #128]	; (800ac14 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3304      	adds	r3, #4
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe f860 	bl	8008c5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba2:	d10a      	bne.n	800abba <prvAddCurrentTaskToDelayedList+0x3a>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d007      	beq.n	800abba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abaa:	4b1a      	ldr	r3, [pc, #104]	; (800ac14 <prvAddCurrentTaskToDelayedList+0x94>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3304      	adds	r3, #4
 800abb0:	4619      	mov	r1, r3
 800abb2:	4819      	ldr	r0, [pc, #100]	; (800ac18 <prvAddCurrentTaskToDelayedList+0x98>)
 800abb4:	f7fd fff5 	bl	8008ba2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abb8:	e026      	b.n	800ac08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4413      	add	r3, r2
 800abc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d209      	bcs.n	800abe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abd2:	4b12      	ldr	r3, [pc, #72]	; (800ac1c <prvAddCurrentTaskToDelayedList+0x9c>)
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	4b0f      	ldr	r3, [pc, #60]	; (800ac14 <prvAddCurrentTaskToDelayedList+0x94>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3304      	adds	r3, #4
 800abdc:	4619      	mov	r1, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	f7fe f803 	bl	8008bea <vListInsert>
}
 800abe4:	e010      	b.n	800ac08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abe6:	4b0e      	ldr	r3, [pc, #56]	; (800ac20 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	4b0a      	ldr	r3, [pc, #40]	; (800ac14 <prvAddCurrentTaskToDelayedList+0x94>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3304      	adds	r3, #4
 800abf0:	4619      	mov	r1, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	f7fd fff9 	bl	8008bea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d202      	bcs.n	800ac08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac02:	4a08      	ldr	r2, [pc, #32]	; (800ac24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	6013      	str	r3, [r2, #0]
}
 800ac08:	bf00      	nop
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	200011fc 	.word	0x200011fc
 800ac14:	20000d24 	.word	0x20000d24
 800ac18:	200011e4 	.word	0x200011e4
 800ac1c:	200011b4 	.word	0x200011b4
 800ac20:	200011b0 	.word	0x200011b0
 800ac24:	20001218 	.word	0x20001218

0800ac28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08a      	sub	sp, #40	; 0x28
 800ac2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac32:	f000 fb15 	bl	800b260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac36:	4b1d      	ldr	r3, [pc, #116]	; (800acac <xTimerCreateTimerTask+0x84>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d021      	beq.n	800ac82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac46:	1d3a      	adds	r2, r7, #4
 800ac48:	f107 0108 	add.w	r1, r7, #8
 800ac4c:	f107 030c 	add.w	r3, r7, #12
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fd ff5f 	bl	8008b14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	9202      	str	r2, [sp, #8]
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	2302      	movs	r3, #2
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2300      	movs	r3, #0
 800ac66:	460a      	mov	r2, r1
 800ac68:	4911      	ldr	r1, [pc, #68]	; (800acb0 <xTimerCreateTimerTask+0x88>)
 800ac6a:	4812      	ldr	r0, [pc, #72]	; (800acb4 <xTimerCreateTimerTask+0x8c>)
 800ac6c:	f7fe ff8e 	bl	8009b8c <xTaskCreateStatic>
 800ac70:	4603      	mov	r3, r0
 800ac72:	4a11      	ldr	r2, [pc, #68]	; (800acb8 <xTimerCreateTimerTask+0x90>)
 800ac74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac76:	4b10      	ldr	r3, [pc, #64]	; (800acb8 <xTimerCreateTimerTask+0x90>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10c      	bne.n	800aca2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	b672      	cpsid	i
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	b662      	cpsie	i
 800ac9c:	613b      	str	r3, [r7, #16]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800aca2:	697b      	ldr	r3, [r7, #20]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20001254 	.word	0x20001254
 800acb0:	08013958 	.word	0x08013958
 800acb4:	0800adf9 	.word	0x0800adf9
 800acb8:	20001258 	.word	0x20001258

0800acbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08a      	sub	sp, #40	; 0x28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acca:	2300      	movs	r3, #0
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10c      	bne.n	800acee <xTimerGenericCommand+0x32>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	b672      	cpsid	i
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	b662      	cpsie	i
 800ace8:	623b      	str	r3, [r7, #32]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acee:	4b1a      	ldr	r3, [pc, #104]	; (800ad58 <xTimerGenericCommand+0x9c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d02a      	beq.n	800ad4c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b05      	cmp	r3, #5
 800ad06:	dc18      	bgt.n	800ad3a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad08:	f7ff fda8 	bl	800a85c <xTaskGetSchedulerState>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d109      	bne.n	800ad26 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad12:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <xTimerGenericCommand+0x9c>)
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f107 0110 	add.w	r1, r7, #16
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1e:	f7fe f919 	bl	8008f54 <xQueueGenericSend>
 800ad22:	6278      	str	r0, [r7, #36]	; 0x24
 800ad24:	e012      	b.n	800ad4c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad26:	4b0c      	ldr	r3, [pc, #48]	; (800ad58 <xTimerGenericCommand+0x9c>)
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f107 0110 	add.w	r1, r7, #16
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2200      	movs	r2, #0
 800ad32:	f7fe f90f 	bl	8008f54 <xQueueGenericSend>
 800ad36:	6278      	str	r0, [r7, #36]	; 0x24
 800ad38:	e008      	b.n	800ad4c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad3a:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <xTimerGenericCommand+0x9c>)
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	f107 0110 	add.w	r1, r7, #16
 800ad42:	2300      	movs	r3, #0
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	f7fe fa0b 	bl	8009160 <xQueueGenericSendFromISR>
 800ad4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20001254 	.word	0x20001254

0800ad5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af02      	add	r7, sp, #8
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad66:	4b23      	ldr	r3, [pc, #140]	; (800adf4 <prvProcessExpiredTimer+0x98>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fd ff71 	bl	8008c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d024      	beq.n	800add2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	18d1      	adds	r1, r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	6978      	ldr	r0, [r7, #20]
 800ad96:	f000 f8d3 	bl	800af40 <prvInsertTimerInActiveList>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d021      	beq.n	800ade4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ada0:	2300      	movs	r3, #0
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	2300      	movs	r3, #0
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	2100      	movs	r1, #0
 800adaa:	6978      	ldr	r0, [r7, #20]
 800adac:	f7ff ff86 	bl	800acbc <xTimerGenericCommand>
 800adb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d115      	bne.n	800ade4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	b672      	cpsid	i
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	b662      	cpsie	i
 800adcc:	60fb      	str	r3, [r7, #12]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800add8:	f023 0301 	bic.w	r3, r3, #1
 800addc:	b2da      	uxtb	r2, r3
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	6978      	ldr	r0, [r7, #20]
 800adea:	4798      	blx	r3
}
 800adec:	bf00      	nop
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	2000124c 	.word	0x2000124c

0800adf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae00:	f107 0308 	add.w	r3, r7, #8
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f857 	bl	800aeb8 <prvGetNextExpireTime>
 800ae0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f803 	bl	800ae1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae16:	f000 f8d5 	bl	800afc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae1a:	e7f1      	b.n	800ae00 <prvTimerTask+0x8>

0800ae1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae26:	f7ff f91b 	bl	800a060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 f866 	bl	800af00 <prvSampleTimeNow>
 800ae34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d130      	bne.n	800ae9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10a      	bne.n	800ae58 <prvProcessTimerOrBlockTask+0x3c>
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d806      	bhi.n	800ae58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae4a:	f7ff f917 	bl	800a07c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae4e:	68f9      	ldr	r1, [r7, #12]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff ff83 	bl	800ad5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae56:	e024      	b.n	800aea2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d008      	beq.n	800ae70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae5e:	4b13      	ldr	r3, [pc, #76]	; (800aeac <prvProcessTimerOrBlockTask+0x90>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d101      	bne.n	800ae6c <prvProcessTimerOrBlockTask+0x50>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e000      	b.n	800ae6e <prvProcessTimerOrBlockTask+0x52>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <prvProcessTimerOrBlockTask+0x94>)
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7fe fe51 	bl	8009b24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae82:	f7ff f8fb 	bl	800a07c <xTaskResumeAll>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae8c:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <prvProcessTimerOrBlockTask+0x98>)
 800ae8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	f3bf 8f6f 	isb	sy
}
 800ae9c:	e001      	b.n	800aea2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae9e:	f7ff f8ed 	bl	800a07c <xTaskResumeAll>
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	20001250 	.word	0x20001250
 800aeb0:	20001254 	.word	0x20001254
 800aeb4:	e000ed04 	.word	0xe000ed04

0800aeb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aec0:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <prvGetNextExpireTime+0x44>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <prvGetNextExpireTime+0x16>
 800aeca:	2201      	movs	r2, #1
 800aecc:	e000      	b.n	800aed0 <prvGetNextExpireTime+0x18>
 800aece:	2200      	movs	r2, #0
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d105      	bne.n	800aee8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aedc:	4b07      	ldr	r3, [pc, #28]	; (800aefc <prvGetNextExpireTime+0x44>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	60fb      	str	r3, [r7, #12]
 800aee6:	e001      	b.n	800aeec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aeec:	68fb      	ldr	r3, [r7, #12]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	2000124c 	.word	0x2000124c

0800af00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af08:	f7ff f958 	bl	800a1bc <xTaskGetTickCount>
 800af0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af0e:	4b0b      	ldr	r3, [pc, #44]	; (800af3c <prvSampleTimeNow+0x3c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	429a      	cmp	r2, r3
 800af16:	d205      	bcs.n	800af24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af18:	f000 f93c 	bl	800b194 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	e002      	b.n	800af2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af2a:	4a04      	ldr	r2, [pc, #16]	; (800af3c <prvSampleTimeNow+0x3c>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af30:	68fb      	ldr	r3, [r7, #12]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	2000125c 	.word	0x2000125c

0800af40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af4e:	2300      	movs	r3, #0
 800af50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	429a      	cmp	r2, r3
 800af64:	d812      	bhi.n	800af8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	429a      	cmp	r2, r3
 800af72:	d302      	bcc.n	800af7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af74:	2301      	movs	r3, #1
 800af76:	617b      	str	r3, [r7, #20]
 800af78:	e01b      	b.n	800afb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af7a:	4b10      	ldr	r3, [pc, #64]	; (800afbc <prvInsertTimerInActiveList+0x7c>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3304      	adds	r3, #4
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7fd fe30 	bl	8008bea <vListInsert>
 800af8a:	e012      	b.n	800afb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	429a      	cmp	r2, r3
 800af92:	d206      	bcs.n	800afa2 <prvInsertTimerInActiveList+0x62>
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d302      	bcc.n	800afa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af9c:	2301      	movs	r3, #1
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	e007      	b.n	800afb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afa2:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <prvInsertTimerInActiveList+0x80>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7fd fe1c 	bl	8008bea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afb2:	697b      	ldr	r3, [r7, #20]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	20001250 	.word	0x20001250
 800afc0:	2000124c 	.word	0x2000124c

0800afc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08e      	sub	sp, #56	; 0x38
 800afc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afca:	e0d0      	b.n	800b16e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da1a      	bge.n	800b008 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afd2:	1d3b      	adds	r3, r7, #4
 800afd4:	3304      	adds	r3, #4
 800afd6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10c      	bne.n	800aff8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	b672      	cpsid	i
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	b662      	cpsie	i
 800aff2:	61fb      	str	r3, [r7, #28]
}
 800aff4:	bf00      	nop
 800aff6:	e7fe      	b.n	800aff6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800affe:	6850      	ldr	r0, [r2, #4]
 800b000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b002:	6892      	ldr	r2, [r2, #8]
 800b004:	4611      	mov	r1, r2
 800b006:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f2c0 80ae 	blt.w	800b16c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d004      	beq.n	800b026 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	3304      	adds	r3, #4
 800b020:	4618      	mov	r0, r3
 800b022:	f7fd fe1b 	bl	8008c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b026:	463b      	mov	r3, r7
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff ff69 	bl	800af00 <prvSampleTimeNow>
 800b02e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b09      	cmp	r3, #9
 800b034:	f200 809b 	bhi.w	800b16e <prvProcessReceivedCommands+0x1aa>
 800b038:	a201      	add	r2, pc, #4	; (adr r2, 800b040 <prvProcessReceivedCommands+0x7c>)
 800b03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03e:	bf00      	nop
 800b040:	0800b069 	.word	0x0800b069
 800b044:	0800b069 	.word	0x0800b069
 800b048:	0800b069 	.word	0x0800b069
 800b04c:	0800b0e1 	.word	0x0800b0e1
 800b050:	0800b0f5 	.word	0x0800b0f5
 800b054:	0800b143 	.word	0x0800b143
 800b058:	0800b069 	.word	0x0800b069
 800b05c:	0800b069 	.word	0x0800b069
 800b060:	0800b0e1 	.word	0x0800b0e1
 800b064:	0800b0f5 	.word	0x0800b0f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b06e:	f043 0301 	orr.w	r3, r3, #1
 800b072:	b2da      	uxtb	r2, r3
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	18d1      	adds	r1, r2, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b088:	f7ff ff5a 	bl	800af40 <prvInsertTimerInActiveList>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d06d      	beq.n	800b16e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b098:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d062      	beq.n	800b16e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	441a      	add	r2, r3
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ba:	f7ff fdff 	bl	800acbc <xTimerGenericCommand>
 800b0be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d153      	bne.n	800b16e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ca:	b672      	cpsid	i
 800b0cc:	f383 8811 	msr	BASEPRI, r3
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f3bf 8f4f 	dsb	sy
 800b0d8:	b662      	cpsie	i
 800b0da:	61bb      	str	r3, [r7, #24]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0e6:	f023 0301 	bic.w	r3, r3, #1
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0f2:	e03c      	b.n	800b16e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10c      	bne.n	800b12e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	b672      	cpsid	i
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	b662      	cpsie	i
 800b128:	617b      	str	r3, [r7, #20]
}
 800b12a:	bf00      	nop
 800b12c:	e7fe      	b.n	800b12c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	699a      	ldr	r2, [r3, #24]
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	18d1      	adds	r1, r2, r3
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b13c:	f7ff ff00 	bl	800af40 <prvInsertTimerInActiveList>
					break;
 800b140:	e015      	b.n	800b16e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d103      	bne.n	800b158 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b152:	f000 fbc9 	bl	800b8e8 <vPortFree>
 800b156:	e00a      	b.n	800b16e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b15e:	f023 0301 	bic.w	r3, r3, #1
 800b162:	b2da      	uxtb	r2, r3
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b16a:	e000      	b.n	800b16e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b16c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b16e:	4b08      	ldr	r3, [pc, #32]	; (800b190 <prvProcessReceivedCommands+0x1cc>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	1d39      	adds	r1, r7, #4
 800b174:	2200      	movs	r2, #0
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe f892 	bl	80092a0 <xQueueReceive>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f47f af24 	bne.w	800afcc <prvProcessReceivedCommands+0x8>
	}
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	3730      	adds	r7, #48	; 0x30
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	20001254 	.word	0x20001254

0800b194 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b088      	sub	sp, #32
 800b198:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b19a:	e04a      	b.n	800b232 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b19c:	4b2e      	ldr	r3, [pc, #184]	; (800b258 <prvSwitchTimerLists+0xc4>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a6:	4b2c      	ldr	r3, [pc, #176]	; (800b258 <prvSwitchTimerLists+0xc4>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fd fd51 	bl	8008c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1c8:	f003 0304 	and.w	r3, r3, #4
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d030      	beq.n	800b232 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d90e      	bls.n	800b200 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1ee:	4b1a      	ldr	r3, [pc, #104]	; (800b258 <prvSwitchTimerLists+0xc4>)
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	f7fd fcf6 	bl	8008bea <vListInsert>
 800b1fe:	e018      	b.n	800b232 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b200:	2300      	movs	r3, #0
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	2300      	movs	r3, #0
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	2100      	movs	r1, #0
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff fd56 	bl	800acbc <xTimerGenericCommand>
 800b210:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d10c      	bne.n	800b232 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	b672      	cpsid	i
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	b662      	cpsie	i
 800b22c:	603b      	str	r3, [r7, #0]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <prvSwitchTimerLists+0xc4>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1af      	bne.n	800b19c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b23c:	4b06      	ldr	r3, [pc, #24]	; (800b258 <prvSwitchTimerLists+0xc4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b242:	4b06      	ldr	r3, [pc, #24]	; (800b25c <prvSwitchTimerLists+0xc8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a04      	ldr	r2, [pc, #16]	; (800b258 <prvSwitchTimerLists+0xc4>)
 800b248:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b24a:	4a04      	ldr	r2, [pc, #16]	; (800b25c <prvSwitchTimerLists+0xc8>)
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6013      	str	r3, [r2, #0]
}
 800b250:	bf00      	nop
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	2000124c 	.word	0x2000124c
 800b25c:	20001250 	.word	0x20001250

0800b260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b266:	f000 f949 	bl	800b4fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b26a:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d120      	bne.n	800b2b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b272:	4814      	ldr	r0, [pc, #80]	; (800b2c4 <prvCheckForValidListAndQueue+0x64>)
 800b274:	f7fd fc68 	bl	8008b48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b278:	4813      	ldr	r0, [pc, #76]	; (800b2c8 <prvCheckForValidListAndQueue+0x68>)
 800b27a:	f7fd fc65 	bl	8008b48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <prvCheckForValidListAndQueue+0x6c>)
 800b280:	4a10      	ldr	r2, [pc, #64]	; (800b2c4 <prvCheckForValidListAndQueue+0x64>)
 800b282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b284:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <prvCheckForValidListAndQueue+0x70>)
 800b286:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <prvCheckForValidListAndQueue+0x68>)
 800b288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b28a:	2300      	movs	r3, #0
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <prvCheckForValidListAndQueue+0x74>)
 800b290:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <prvCheckForValidListAndQueue+0x78>)
 800b292:	2110      	movs	r1, #16
 800b294:	200a      	movs	r0, #10
 800b296:	f7fd fd75 	bl	8008d84 <xQueueGenericCreateStatic>
 800b29a:	4603      	mov	r3, r0
 800b29c:	4a08      	ldr	r2, [pc, #32]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b29e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2a8:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	490b      	ldr	r1, [pc, #44]	; (800b2dc <prvCheckForValidListAndQueue+0x7c>)
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fbe4 	bl	8009a7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2b4:	f000 f956 	bl	800b564 <vPortExitCritical>
}
 800b2b8:	bf00      	nop
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20001254 	.word	0x20001254
 800b2c4:	20001224 	.word	0x20001224
 800b2c8:	20001238 	.word	0x20001238
 800b2cc:	2000124c 	.word	0x2000124c
 800b2d0:	20001250 	.word	0x20001250
 800b2d4:	20001300 	.word	0x20001300
 800b2d8:	20001260 	.word	0x20001260
 800b2dc:	08013960 	.word	0x08013960

0800b2e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3b04      	subs	r3, #4
 800b2f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3b04      	subs	r3, #4
 800b2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f023 0201 	bic.w	r2, r3, #1
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3b04      	subs	r3, #4
 800b30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b310:	4a0c      	ldr	r2, [pc, #48]	; (800b344 <pxPortInitialiseStack+0x64>)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3b14      	subs	r3, #20
 800b31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3b04      	subs	r3, #4
 800b326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f06f 0202 	mvn.w	r2, #2
 800b32e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3b20      	subs	r3, #32
 800b334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b336:	68fb      	ldr	r3, [r7, #12]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	0800b349 	.word	0x0800b349

0800b348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b352:	4b14      	ldr	r3, [pc, #80]	; (800b3a4 <prvTaskExitError+0x5c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35a:	d00c      	beq.n	800b376 <prvTaskExitError+0x2e>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	b672      	cpsid	i
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	b662      	cpsie	i
 800b370:	60fb      	str	r3, [r7, #12]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <prvTaskExitError+0x2c>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	b672      	cpsid	i
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	b662      	cpsie	i
 800b38a:	60bb      	str	r3, [r7, #8]
}
 800b38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b38e:	bf00      	nop
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0fc      	beq.n	800b390 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b396:	bf00      	nop
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	20000120 	.word	0x20000120
	...

0800b3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3b0:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <pxCurrentTCBConst2>)
 800b3b2:	6819      	ldr	r1, [r3, #0]
 800b3b4:	6808      	ldr	r0, [r1, #0]
 800b3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ba:	f380 8809 	msr	PSP, r0
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8811 	msr	BASEPRI, r0
 800b3ca:	4770      	bx	lr
 800b3cc:	f3af 8000 	nop.w

0800b3d0 <pxCurrentTCBConst2>:
 800b3d0:	20000d24 	.word	0x20000d24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop

0800b3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3d8:	4808      	ldr	r0, [pc, #32]	; (800b3fc <prvPortStartFirstTask+0x24>)
 800b3da:	6800      	ldr	r0, [r0, #0]
 800b3dc:	6800      	ldr	r0, [r0, #0]
 800b3de:	f380 8808 	msr	MSP, r0
 800b3e2:	f04f 0000 	mov.w	r0, #0
 800b3e6:	f380 8814 	msr	CONTROL, r0
 800b3ea:	b662      	cpsie	i
 800b3ec:	b661      	cpsie	f
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	df00      	svc	0
 800b3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3fa:	bf00      	nop
 800b3fc:	e000ed08 	.word	0xe000ed08

0800b400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b406:	4b37      	ldr	r3, [pc, #220]	; (800b4e4 <xPortStartScheduler+0xe4>)
 800b408:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	22ff      	movs	r2, #255	; 0xff
 800b416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	4b2f      	ldr	r3, [pc, #188]	; (800b4e8 <xPortStartScheduler+0xe8>)
 800b42c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b42e:	4b2f      	ldr	r3, [pc, #188]	; (800b4ec <xPortStartScheduler+0xec>)
 800b430:	2207      	movs	r2, #7
 800b432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b434:	e009      	b.n	800b44a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b436:	4b2d      	ldr	r3, [pc, #180]	; (800b4ec <xPortStartScheduler+0xec>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	4a2b      	ldr	r2, [pc, #172]	; (800b4ec <xPortStartScheduler+0xec>)
 800b43e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	b2db      	uxtb	r3, r3
 800b448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b44a:	78fb      	ldrb	r3, [r7, #3]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b452:	2b80      	cmp	r3, #128	; 0x80
 800b454:	d0ef      	beq.n	800b436 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b456:	4b25      	ldr	r3, [pc, #148]	; (800b4ec <xPortStartScheduler+0xec>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f1c3 0307 	rsb	r3, r3, #7
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d00c      	beq.n	800b47c <xPortStartScheduler+0x7c>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	b672      	cpsid	i
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	b662      	cpsie	i
 800b476:	60bb      	str	r3, [r7, #8]
}
 800b478:	bf00      	nop
 800b47a:	e7fe      	b.n	800b47a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b47c:	4b1b      	ldr	r3, [pc, #108]	; (800b4ec <xPortStartScheduler+0xec>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	021b      	lsls	r3, r3, #8
 800b482:	4a1a      	ldr	r2, [pc, #104]	; (800b4ec <xPortStartScheduler+0xec>)
 800b484:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b486:	4b19      	ldr	r3, [pc, #100]	; (800b4ec <xPortStartScheduler+0xec>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b48e:	4a17      	ldr	r2, [pc, #92]	; (800b4ec <xPortStartScheduler+0xec>)
 800b490:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	b2da      	uxtb	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b49a:	4b15      	ldr	r3, [pc, #84]	; (800b4f0 <xPortStartScheduler+0xf0>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a14      	ldr	r2, [pc, #80]	; (800b4f0 <xPortStartScheduler+0xf0>)
 800b4a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4a6:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <xPortStartScheduler+0xf0>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a11      	ldr	r2, [pc, #68]	; (800b4f0 <xPortStartScheduler+0xf0>)
 800b4ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4b2:	f000 f8dd 	bl	800b670 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4b6:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <xPortStartScheduler+0xf4>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4bc:	f000 f8fc 	bl	800b6b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4c0:	4b0d      	ldr	r3, [pc, #52]	; (800b4f8 <xPortStartScheduler+0xf8>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a0c      	ldr	r2, [pc, #48]	; (800b4f8 <xPortStartScheduler+0xf8>)
 800b4c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4cc:	f7ff ff84 	bl	800b3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4d0:	f7fe ff40 	bl	800a354 <vTaskSwitchContext>
	prvTaskExitError();
 800b4d4:	f7ff ff38 	bl	800b348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	e000e400 	.word	0xe000e400
 800b4e8:	20001350 	.word	0x20001350
 800b4ec:	20001354 	.word	0x20001354
 800b4f0:	e000ed20 	.word	0xe000ed20
 800b4f4:	20000120 	.word	0x20000120
 800b4f8:	e000ef34 	.word	0xe000ef34

0800b4fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	b672      	cpsid	i
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	b662      	cpsie	i
 800b516:	607b      	str	r3, [r7, #4]
}
 800b518:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b51a:	4b10      	ldr	r3, [pc, #64]	; (800b55c <vPortEnterCritical+0x60>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3301      	adds	r3, #1
 800b520:	4a0e      	ldr	r2, [pc, #56]	; (800b55c <vPortEnterCritical+0x60>)
 800b522:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b524:	4b0d      	ldr	r3, [pc, #52]	; (800b55c <vPortEnterCritical+0x60>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d111      	bne.n	800b550 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b52c:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <vPortEnterCritical+0x64>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00c      	beq.n	800b550 <vPortEnterCritical+0x54>
	__asm volatile
 800b536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53a:	b672      	cpsid	i
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	b662      	cpsie	i
 800b54a:	603b      	str	r3, [r7, #0]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <vPortEnterCritical+0x52>
	}
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	20000120 	.word	0x20000120
 800b560:	e000ed04 	.word	0xe000ed04

0800b564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b56a:	4b13      	ldr	r3, [pc, #76]	; (800b5b8 <vPortExitCritical+0x54>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10c      	bne.n	800b58c <vPortExitCritical+0x28>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	b672      	cpsid	i
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	b662      	cpsie	i
 800b586:	607b      	str	r3, [r7, #4]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <vPortExitCritical+0x54>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3b01      	subs	r3, #1
 800b592:	4a09      	ldr	r2, [pc, #36]	; (800b5b8 <vPortExitCritical+0x54>)
 800b594:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b596:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <vPortExitCritical+0x54>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d105      	bne.n	800b5aa <vPortExitCritical+0x46>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	f383 8811 	msr	BASEPRI, r3
}
 800b5a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	20000120 	.word	0x20000120
 800b5bc:	00000000 	.word	0x00000000

0800b5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5c0:	f3ef 8009 	mrs	r0, PSP
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	4b15      	ldr	r3, [pc, #84]	; (800b620 <pxCurrentTCBConst>)
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	f01e 0f10 	tst.w	lr, #16
 800b5d0:	bf08      	it	eq
 800b5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5e4:	b672      	cpsid	i
 800b5e6:	f380 8811 	msr	BASEPRI, r0
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	b662      	cpsie	i
 800b5f4:	f7fe feae 	bl	800a354 <vTaskSwitchContext>
 800b5f8:	f04f 0000 	mov.w	r0, #0
 800b5fc:	f380 8811 	msr	BASEPRI, r0
 800b600:	bc09      	pop	{r0, r3}
 800b602:	6819      	ldr	r1, [r3, #0]
 800b604:	6808      	ldr	r0, [r1, #0]
 800b606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	f01e 0f10 	tst.w	lr, #16
 800b60e:	bf08      	it	eq
 800b610:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b614:	f380 8809 	msr	PSP, r0
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop

0800b620 <pxCurrentTCBConst>:
 800b620:	20000d24 	.word	0x20000d24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop

0800b628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	b672      	cpsid	i
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	b662      	cpsie	i
 800b642:	607b      	str	r3, [r7, #4]
}
 800b644:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b646:	f7fe fdc9 	bl	800a1dc <xTaskIncrementTick>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d003      	beq.n	800b658 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b650:	4b06      	ldr	r3, [pc, #24]	; (800b66c <SysTick_Handler+0x44>)
 800b652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	2300      	movs	r3, #0
 800b65a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	f383 8811 	msr	BASEPRI, r3
}
 800b662:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b664:	bf00      	nop
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	e000ed04 	.word	0xe000ed04

0800b670 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b670:	b480      	push	{r7}
 800b672:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b674:	4b0b      	ldr	r3, [pc, #44]	; (800b6a4 <vPortSetupTimerInterrupt+0x34>)
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b67a:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <vPortSetupTimerInterrupt+0x38>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b680:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <vPortSetupTimerInterrupt+0x3c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a0a      	ldr	r2, [pc, #40]	; (800b6b0 <vPortSetupTimerInterrupt+0x40>)
 800b686:	fba2 2303 	umull	r2, r3, r2, r3
 800b68a:	099b      	lsrs	r3, r3, #6
 800b68c:	4a09      	ldr	r2, [pc, #36]	; (800b6b4 <vPortSetupTimerInterrupt+0x44>)
 800b68e:	3b01      	subs	r3, #1
 800b690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b692:	4b04      	ldr	r3, [pc, #16]	; (800b6a4 <vPortSetupTimerInterrupt+0x34>)
 800b694:	2207      	movs	r2, #7
 800b696:	601a      	str	r2, [r3, #0]
}
 800b698:	bf00      	nop
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	e000e010 	.word	0xe000e010
 800b6a8:	e000e018 	.word	0xe000e018
 800b6ac:	20000004 	.word	0x20000004
 800b6b0:	10624dd3 	.word	0x10624dd3
 800b6b4:	e000e014 	.word	0xe000e014

0800b6b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6c8 <vPortEnableVFP+0x10>
 800b6bc:	6801      	ldr	r1, [r0, #0]
 800b6be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6c2:	6001      	str	r1, [r0, #0]
 800b6c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6c6:	bf00      	nop
 800b6c8:	e000ed88 	.word	0xe000ed88

0800b6cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6d2:	f3ef 8305 	mrs	r3, IPSR
 800b6d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b0f      	cmp	r3, #15
 800b6dc:	d916      	bls.n	800b70c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6de:	4a19      	ldr	r2, [pc, #100]	; (800b744 <vPortValidateInterruptPriority+0x78>)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6e8:	4b17      	ldr	r3, [pc, #92]	; (800b748 <vPortValidateInterruptPriority+0x7c>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	7afa      	ldrb	r2, [r7, #11]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d20c      	bcs.n	800b70c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	b672      	cpsid	i
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	b662      	cpsie	i
 800b706:	607b      	str	r3, [r7, #4]
}
 800b708:	bf00      	nop
 800b70a:	e7fe      	b.n	800b70a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b70c:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <vPortValidateInterruptPriority+0x80>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b714:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <vPortValidateInterruptPriority+0x84>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d90c      	bls.n	800b736 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b720:	b672      	cpsid	i
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	b662      	cpsie	i
 800b730:	603b      	str	r3, [r7, #0]
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <vPortValidateInterruptPriority+0x68>
	}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	e000e3f0 	.word	0xe000e3f0
 800b748:	20001350 	.word	0x20001350
 800b74c:	e000ed0c 	.word	0xe000ed0c
 800b750:	20001354 	.word	0x20001354

0800b754 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08a      	sub	sp, #40	; 0x28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b75c:	2300      	movs	r3, #0
 800b75e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b760:	f7fe fc7e 	bl	800a060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b764:	4b5b      	ldr	r3, [pc, #364]	; (800b8d4 <pvPortMalloc+0x180>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b76c:	f000 f91a 	bl	800b9a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b770:	4b59      	ldr	r3, [pc, #356]	; (800b8d8 <pvPortMalloc+0x184>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4013      	ands	r3, r2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f040 8092 	bne.w	800b8a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d01f      	beq.n	800b7c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b784:	2208      	movs	r2, #8
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4413      	add	r3, r2
 800b78a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	2b00      	cmp	r3, #0
 800b794:	d016      	beq.n	800b7c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f023 0307 	bic.w	r3, r3, #7
 800b79c:	3308      	adds	r3, #8
 800b79e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00c      	beq.n	800b7c4 <pvPortMalloc+0x70>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	b672      	cpsid	i
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	b662      	cpsie	i
 800b7be:	617b      	str	r3, [r7, #20]
}
 800b7c0:	bf00      	nop
 800b7c2:	e7fe      	b.n	800b7c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d06b      	beq.n	800b8a2 <pvPortMalloc+0x14e>
 800b7ca:	4b44      	ldr	r3, [pc, #272]	; (800b8dc <pvPortMalloc+0x188>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d866      	bhi.n	800b8a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7d4:	4b42      	ldr	r3, [pc, #264]	; (800b8e0 <pvPortMalloc+0x18c>)
 800b7d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7d8:	4b41      	ldr	r3, [pc, #260]	; (800b8e0 <pvPortMalloc+0x18c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7de:	e004      	b.n	800b7ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d903      	bls.n	800b7fc <pvPortMalloc+0xa8>
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1f1      	bne.n	800b7e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7fc:	4b35      	ldr	r3, [pc, #212]	; (800b8d4 <pvPortMalloc+0x180>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b802:	429a      	cmp	r2, r3
 800b804:	d04d      	beq.n	800b8a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2208      	movs	r2, #8
 800b80c:	4413      	add	r3, r2
 800b80e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	1ad2      	subs	r2, r2, r3
 800b820:	2308      	movs	r3, #8
 800b822:	005b      	lsls	r3, r3, #1
 800b824:	429a      	cmp	r2, r3
 800b826:	d921      	bls.n	800b86c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4413      	add	r3, r2
 800b82e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00c      	beq.n	800b854 <pvPortMalloc+0x100>
	__asm volatile
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	b672      	cpsid	i
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	b662      	cpsie	i
 800b84e:	613b      	str	r3, [r7, #16]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	685a      	ldr	r2, [r3, #4]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	1ad2      	subs	r2, r2, r3
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b866:	69b8      	ldr	r0, [r7, #24]
 800b868:	f000 f8fe 	bl	800ba68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b86c:	4b1b      	ldr	r3, [pc, #108]	; (800b8dc <pvPortMalloc+0x188>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	4a19      	ldr	r2, [pc, #100]	; (800b8dc <pvPortMalloc+0x188>)
 800b878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b87a:	4b18      	ldr	r3, [pc, #96]	; (800b8dc <pvPortMalloc+0x188>)
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	4b19      	ldr	r3, [pc, #100]	; (800b8e4 <pvPortMalloc+0x190>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	429a      	cmp	r2, r3
 800b884:	d203      	bcs.n	800b88e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b886:	4b15      	ldr	r3, [pc, #84]	; (800b8dc <pvPortMalloc+0x188>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a16      	ldr	r2, [pc, #88]	; (800b8e4 <pvPortMalloc+0x190>)
 800b88c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	4b11      	ldr	r3, [pc, #68]	; (800b8d8 <pvPortMalloc+0x184>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	431a      	orrs	r2, r3
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8a2:	f7fe fbeb 	bl	800a07c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00c      	beq.n	800b8ca <pvPortMalloc+0x176>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	b672      	cpsid	i
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	b662      	cpsie	i
 800b8c4:	60fb      	str	r3, [r7, #12]
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <pvPortMalloc+0x174>
	return pvReturn;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3728      	adds	r7, #40	; 0x28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20009060 	.word	0x20009060
 800b8d8:	2000906c 	.word	0x2000906c
 800b8dc:	20009064 	.word	0x20009064
 800b8e0:	20009058 	.word	0x20009058
 800b8e4:	20009068 	.word	0x20009068

0800b8e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d04c      	beq.n	800b994 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8fa:	2308      	movs	r3, #8
 800b8fc:	425b      	negs	r3, r3
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	4413      	add	r3, r2
 800b902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	4b23      	ldr	r3, [pc, #140]	; (800b99c <vPortFree+0xb4>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4013      	ands	r3, r2
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10c      	bne.n	800b930 <vPortFree+0x48>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91a:	b672      	cpsid	i
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	b662      	cpsie	i
 800b92a:	60fb      	str	r3, [r7, #12]
}
 800b92c:	bf00      	nop
 800b92e:	e7fe      	b.n	800b92e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00c      	beq.n	800b952 <vPortFree+0x6a>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	b672      	cpsid	i
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	b662      	cpsie	i
 800b94c:	60bb      	str	r3, [r7, #8]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <vPortFree+0xb4>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4013      	ands	r3, r2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d019      	beq.n	800b994 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d115      	bne.n	800b994 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	4b0b      	ldr	r3, [pc, #44]	; (800b99c <vPortFree+0xb4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	43db      	mvns	r3, r3
 800b972:	401a      	ands	r2, r3
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b978:	f7fe fb72 	bl	800a060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <vPortFree+0xb8>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4413      	add	r3, r2
 800b986:	4a06      	ldr	r2, [pc, #24]	; (800b9a0 <vPortFree+0xb8>)
 800b988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b98a:	6938      	ldr	r0, [r7, #16]
 800b98c:	f000 f86c 	bl	800ba68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b990:	f7fe fb74 	bl	800a07c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b994:	bf00      	nop
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	2000906c 	.word	0x2000906c
 800b9a0:	20009064 	.word	0x20009064

0800b9a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b9ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9b0:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <prvHeapInit+0xac>)
 800b9b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00c      	beq.n	800b9d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3307      	adds	r3, #7
 800b9c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f023 0307 	bic.w	r3, r3, #7
 800b9ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	4a1f      	ldr	r2, [pc, #124]	; (800ba50 <prvHeapInit+0xac>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ba54 <prvHeapInit+0xb0>)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <prvHeapInit+0xb0>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9f0:	2208      	movs	r2, #8
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0307 	bic.w	r3, r3, #7
 800b9fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4a15      	ldr	r2, [pc, #84]	; (800ba58 <prvHeapInit+0xb4>)
 800ba04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <prvHeapInit+0xb4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <prvHeapInit+0xb4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba24:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <prvHeapInit+0xb4>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	4a0a      	ldr	r2, [pc, #40]	; (800ba5c <prvHeapInit+0xb8>)
 800ba32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <prvHeapInit+0xbc>)
 800ba3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <prvHeapInit+0xc0>)
 800ba3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba42:	601a      	str	r2, [r3, #0]
}
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20001358 	.word	0x20001358
 800ba54:	20009058 	.word	0x20009058
 800ba58:	20009060 	.word	0x20009060
 800ba5c:	20009068 	.word	0x20009068
 800ba60:	20009064 	.word	0x20009064
 800ba64:	2000906c 	.word	0x2000906c

0800ba68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba70:	4b28      	ldr	r3, [pc, #160]	; (800bb14 <prvInsertBlockIntoFreeList+0xac>)
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e002      	b.n	800ba7c <prvInsertBlockIntoFreeList+0x14>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d8f7      	bhi.n	800ba76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	4413      	add	r3, r2
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d108      	bne.n	800baaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	441a      	add	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	441a      	add	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d118      	bne.n	800baf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	4b15      	ldr	r3, [pc, #84]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d00d      	beq.n	800bae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	441a      	add	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	e008      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bae6:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <prvInsertBlockIntoFreeList+0xb0>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e003      	b.n	800baf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d002      	beq.n	800bb06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb06:	bf00      	nop
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20009058 	.word	0x20009058
 800bb18:	20009060 	.word	0x20009060

0800bb1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb20:	2200      	movs	r2, #0
 800bb22:	4912      	ldr	r1, [pc, #72]	; (800bb6c <MX_USB_DEVICE_Init+0x50>)
 800bb24:	4812      	ldr	r0, [pc, #72]	; (800bb70 <MX_USB_DEVICE_Init+0x54>)
 800bb26:	f7fb fbeb 	bl	8007300 <USBD_Init>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb30:	f7f5 fd7c 	bl	800162c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb34:	490f      	ldr	r1, [pc, #60]	; (800bb74 <MX_USB_DEVICE_Init+0x58>)
 800bb36:	480e      	ldr	r0, [pc, #56]	; (800bb70 <MX_USB_DEVICE_Init+0x54>)
 800bb38:	f7fb fc18 	bl	800736c <USBD_RegisterClass>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb42:	f7f5 fd73 	bl	800162c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb46:	490c      	ldr	r1, [pc, #48]	; (800bb78 <MX_USB_DEVICE_Init+0x5c>)
 800bb48:	4809      	ldr	r0, [pc, #36]	; (800bb70 <MX_USB_DEVICE_Init+0x54>)
 800bb4a:	f7fb fb3d 	bl	80071c8 <USBD_CDC_RegisterInterface>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb54:	f7f5 fd6a 	bl	800162c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb58:	4805      	ldr	r0, [pc, #20]	; (800bb70 <MX_USB_DEVICE_Init+0x54>)
 800bb5a:	f7fb fc28 	bl	80073ae <USBD_Start>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb64:	f7f5 fd62 	bl	800162c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb68:	bf00      	nop
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20000140 	.word	0x20000140
 800bb70:	20009070 	.word	0x20009070
 800bb74:	2000001c 	.word	0x2000001c
 800bb78:	2000012c 	.word	0x2000012c

0800bb7c <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb80:	2200      	movs	r2, #0
 800bb82:	4905      	ldr	r1, [pc, #20]	; (800bb98 <CDC_Init_FS+0x1c>)
 800bb84:	4805      	ldr	r0, [pc, #20]	; (800bb9c <CDC_Init_FS+0x20>)
 800bb86:	f7fb fb34 	bl	80071f2 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb8a:	4905      	ldr	r1, [pc, #20]	; (800bba0 <CDC_Init_FS+0x24>)
 800bb8c:	4803      	ldr	r0, [pc, #12]	; (800bb9c <CDC_Init_FS+0x20>)
 800bb8e:	f7fb fb49 	bl	8007224 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800bb92:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20009b40 	.word	0x20009b40
 800bb9c:	20009070 	.word	0x20009070
 800bba0:	20009340 	.word	0x20009340

0800bba4 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 800bba4:	b480      	push	{r7}
 800bba6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800bba8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	6039      	str	r1, [r7, #0]
 800bbbe:	71fb      	strb	r3, [r7, #7]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	2b23      	cmp	r3, #35	; 0x23
 800bbc8:	d85c      	bhi.n	800bc84 <CDC_Control_FS+0xd0>
 800bbca:	a201      	add	r2, pc, #4	; (adr r2, 800bbd0 <CDC_Control_FS+0x1c>)
 800bbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd0:	0800bc85 	.word	0x0800bc85
 800bbd4:	0800bc85 	.word	0x0800bc85
 800bbd8:	0800bc85 	.word	0x0800bc85
 800bbdc:	0800bc85 	.word	0x0800bc85
 800bbe0:	0800bc85 	.word	0x0800bc85
 800bbe4:	0800bc85 	.word	0x0800bc85
 800bbe8:	0800bc85 	.word	0x0800bc85
 800bbec:	0800bc85 	.word	0x0800bc85
 800bbf0:	0800bc85 	.word	0x0800bc85
 800bbf4:	0800bc85 	.word	0x0800bc85
 800bbf8:	0800bc85 	.word	0x0800bc85
 800bbfc:	0800bc85 	.word	0x0800bc85
 800bc00:	0800bc85 	.word	0x0800bc85
 800bc04:	0800bc85 	.word	0x0800bc85
 800bc08:	0800bc85 	.word	0x0800bc85
 800bc0c:	0800bc85 	.word	0x0800bc85
 800bc10:	0800bc85 	.word	0x0800bc85
 800bc14:	0800bc85 	.word	0x0800bc85
 800bc18:	0800bc85 	.word	0x0800bc85
 800bc1c:	0800bc85 	.word	0x0800bc85
 800bc20:	0800bc85 	.word	0x0800bc85
 800bc24:	0800bc85 	.word	0x0800bc85
 800bc28:	0800bc85 	.word	0x0800bc85
 800bc2c:	0800bc85 	.word	0x0800bc85
 800bc30:	0800bc85 	.word	0x0800bc85
 800bc34:	0800bc85 	.word	0x0800bc85
 800bc38:	0800bc85 	.word	0x0800bc85
 800bc3c:	0800bc85 	.word	0x0800bc85
 800bc40:	0800bc85 	.word	0x0800bc85
 800bc44:	0800bc85 	.word	0x0800bc85
 800bc48:	0800bc85 	.word	0x0800bc85
 800bc4c:	0800bc85 	.word	0x0800bc85
 800bc50:	0800bc61 	.word	0x0800bc61
 800bc54:	0800bc73 	.word	0x0800bc73
 800bc58:	0800bc85 	.word	0x0800bc85
 800bc5c:	0800bc85 	.word	0x0800bc85
		/*                                        3 - Mark                             */
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/
	case CDC_SET_LINE_CODING:
		memcpy(lineCoding9600, pbuf, sizeof(lineCoding9600));
 800bc60:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <CDC_Control_FS+0xe0>)
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	6810      	ldr	r0, [r2, #0]
 800bc66:	6018      	str	r0, [r3, #0]
 800bc68:	8891      	ldrh	r1, [r2, #4]
 800bc6a:	7992      	ldrb	r2, [r2, #6]
 800bc6c:	8099      	strh	r1, [r3, #4]
 800bc6e:	719a      	strb	r2, [r3, #6]
		break;
 800bc70:	e009      	b.n	800bc86 <CDC_Control_FS+0xd2>

	case CDC_GET_LINE_CODING:
		memcpy(pbuf, lineCoding9600, sizeof(lineCoding9600));
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	4a07      	ldr	r2, [pc, #28]	; (800bc94 <CDC_Control_FS+0xe0>)
 800bc76:	6810      	ldr	r0, [r2, #0]
 800bc78:	6018      	str	r0, [r3, #0]
 800bc7a:	8891      	ldrh	r1, [r2, #4]
 800bc7c:	7992      	ldrb	r2, [r2, #6]
 800bc7e:	8099      	strh	r1, [r3, #4]
 800bc80:	719a      	strb	r2, [r3, #6]
		break;
 800bc82:	e000      	b.n	800bc86 <CDC_Control_FS+0xd2>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800bc84:	bf00      	nop
	}

	return (USBD_OK);
 800bc86:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	20000124 	.word	0x20000124

0800bc98 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	480f      	ldr	r0, [pc, #60]	; (800bce4 <CDC_Receive_FS+0x4c>)
 800bca6:	f7fb fabd 	bl	8007224 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcaa:	480e      	ldr	r0, [pc, #56]	; (800bce4 <CDC_Receive_FS+0x4c>)
 800bcac:	f7fb fafe 	bl	80072ac <USBD_CDC_ReceivePacket>
	uint8_t len = (uint8_t) *Len;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	73fb      	strb	r3, [r7, #15]
	memset(USB_InputBuffer, '\0', 100);
 800bcb6:	2264      	movs	r2, #100	; 0x64
 800bcb8:	2100      	movs	r1, #0
 800bcba:	480b      	ldr	r0, [pc, #44]	; (800bce8 <CDC_Receive_FS+0x50>)
 800bcbc:	f004 fdec 	bl	8010898 <memset>
	memcpy(USB_InputBuffer, Buf, len);
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	4808      	ldr	r0, [pc, #32]	; (800bce8 <CDC_Receive_FS+0x50>)
 800bcc8:	f004 fdd8 	bl	801087c <memcpy>
	memset(Buf, '\0', len);
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f004 fde0 	bl	8010898 <memset>
	return (USBD_OK);
 800bcd8:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20009070 	.word	0x20009070
 800bce8:	200004b0 	.word	0x200004b0

0800bcec <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800bcfc:	4b0d      	ldr	r3, [pc, #52]	; (800bd34 <CDC_Transmit_FS+0x48>)
 800bcfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd02:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e00b      	b.n	800bd2a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd12:	887b      	ldrh	r3, [r7, #2]
 800bd14:	461a      	mov	r2, r3
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	4806      	ldr	r0, [pc, #24]	; (800bd34 <CDC_Transmit_FS+0x48>)
 800bd1a:	f7fb fa6a 	bl	80071f2 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd1e:	4805      	ldr	r0, [pc, #20]	; (800bd34 <CDC_Transmit_FS+0x48>)
 800bd20:	f7fb fa94 	bl	800724c <USBD_CDC_TransmitPacket>
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	20009070 	.word	0x20009070

0800bd38 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800bd4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	371c      	adds	r7, #28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
	...

0800bd5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	6039      	str	r1, [r7, #0]
 800bd66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2212      	movs	r2, #18
 800bd6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd6e:	4b03      	ldr	r3, [pc, #12]	; (800bd7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	20000160 	.word	0x20000160

0800bd80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2204      	movs	r2, #4
 800bd90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	20000180 	.word	0x20000180

0800bda4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	6039      	str	r1, [r7, #0]
 800bdae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d105      	bne.n	800bdc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	4907      	ldr	r1, [pc, #28]	; (800bdd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdba:	4808      	ldr	r0, [pc, #32]	; (800bddc <USBD_FS_ProductStrDescriptor+0x38>)
 800bdbc:	f7fc fafe 	bl	80083bc <USBD_GetString>
 800bdc0:	e004      	b.n	800bdcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	4904      	ldr	r1, [pc, #16]	; (800bdd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdc6:	4805      	ldr	r0, [pc, #20]	; (800bddc <USBD_FS_ProductStrDescriptor+0x38>)
 800bdc8:	f7fc faf8 	bl	80083bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdcc:	4b02      	ldr	r3, [pc, #8]	; (800bdd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	2000a340 	.word	0x2000a340
 800bddc:	08013968 	.word	0x08013968

0800bde0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	6039      	str	r1, [r7, #0]
 800bdea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	4904      	ldr	r1, [pc, #16]	; (800be00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdf0:	4804      	ldr	r0, [pc, #16]	; (800be04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdf2:	f7fc fae3 	bl	80083bc <USBD_GetString>
  return USBD_StrDesc;
 800bdf6:	4b02      	ldr	r3, [pc, #8]	; (800be00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	2000a340 	.word	0x2000a340
 800be04:	08013980 	.word	0x08013980

0800be08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	4603      	mov	r3, r0
 800be10:	6039      	str	r1, [r7, #0]
 800be12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	221a      	movs	r2, #26
 800be18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be1a:	f000 f855 	bl	800bec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be1e:	4b02      	ldr	r3, [pc, #8]	; (800be28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be20:	4618      	mov	r0, r3
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20000184 	.word	0x20000184

0800be2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	4603      	mov	r3, r0
 800be34:	6039      	str	r1, [r7, #0]
 800be36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d105      	bne.n	800be4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	4907      	ldr	r1, [pc, #28]	; (800be60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be42:	4808      	ldr	r0, [pc, #32]	; (800be64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be44:	f7fc faba 	bl	80083bc <USBD_GetString>
 800be48:	e004      	b.n	800be54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	4904      	ldr	r1, [pc, #16]	; (800be60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be4e:	4805      	ldr	r0, [pc, #20]	; (800be64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be50:	f7fc fab4 	bl	80083bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800be54:	4b02      	ldr	r3, [pc, #8]	; (800be60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	2000a340 	.word	0x2000a340
 800be64:	08013994 	.word	0x08013994

0800be68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	6039      	str	r1, [r7, #0]
 800be72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be74:	79fb      	ldrb	r3, [r7, #7]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d105      	bne.n	800be86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	4907      	ldr	r1, [pc, #28]	; (800be9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be7e:	4808      	ldr	r0, [pc, #32]	; (800bea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be80:	f7fc fa9c 	bl	80083bc <USBD_GetString>
 800be84:	e004      	b.n	800be90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4904      	ldr	r1, [pc, #16]	; (800be9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be8a:	4805      	ldr	r0, [pc, #20]	; (800bea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be8c:	f7fc fa96 	bl	80083bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800be90:	4b02      	ldr	r3, [pc, #8]	; (800be9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	2000a340 	.word	0x2000a340
 800bea0:	080139a0 	.word	0x080139a0

0800bea4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	6039      	str	r1, [r7, #0]
 800beae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	220c      	movs	r2, #12
 800beb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800beb6:	4b03      	ldr	r3, [pc, #12]	; (800bec4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	20000174 	.word	0x20000174

0800bec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bece:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <Get_SerialNum+0x44>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bed4:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <Get_SerialNum+0x48>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800beda:	4b0e      	ldr	r3, [pc, #56]	; (800bf14 <Get_SerialNum+0x4c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4413      	add	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d009      	beq.n	800bf02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800beee:	2208      	movs	r2, #8
 800bef0:	4909      	ldr	r1, [pc, #36]	; (800bf18 <Get_SerialNum+0x50>)
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 f814 	bl	800bf20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bef8:	2204      	movs	r2, #4
 800befa:	4908      	ldr	r1, [pc, #32]	; (800bf1c <Get_SerialNum+0x54>)
 800befc:	68b8      	ldr	r0, [r7, #8]
 800befe:	f000 f80f 	bl	800bf20 <IntToUnicode>
  }
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	1ff0f420 	.word	0x1ff0f420
 800bf10:	1ff0f424 	.word	0x1ff0f424
 800bf14:	1ff0f428 	.word	0x1ff0f428
 800bf18:	20000186 	.word	0x20000186
 800bf1c:	20000196 	.word	0x20000196

0800bf20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf32:	2300      	movs	r3, #0
 800bf34:	75fb      	strb	r3, [r7, #23]
 800bf36:	e027      	b.n	800bf88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	0f1b      	lsrs	r3, r3, #28
 800bf3c:	2b09      	cmp	r3, #9
 800bf3e:	d80b      	bhi.n	800bf58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	0f1b      	lsrs	r3, r3, #28
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	440b      	add	r3, r1
 800bf50:	3230      	adds	r2, #48	; 0x30
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
 800bf56:	e00a      	b.n	800bf6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	0f1b      	lsrs	r3, r3, #28
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	4619      	mov	r1, r3
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	440b      	add	r3, r1
 800bf68:	3237      	adds	r2, #55	; 0x37
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	011b      	lsls	r3, r3, #4
 800bf72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	005b      	lsls	r3, r3, #1
 800bf78:	3301      	adds	r3, #1
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	2200      	movs	r2, #0
 800bf80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	3301      	adds	r3, #1
 800bf86:	75fb      	strb	r3, [r7, #23]
 800bf88:	7dfa      	ldrb	r2, [r7, #23]
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d3d3      	bcc.n	800bf38 <IntToUnicode+0x18>
  }
}
 800bf90:	bf00      	nop
 800bf92:	bf00      	nop
 800bf94:	371c      	adds	r7, #28
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
	...

0800bfa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b0ac      	sub	sp, #176	; 0xb0
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]
 800bfb0:	605a      	str	r2, [r3, #4]
 800bfb2:	609a      	str	r2, [r3, #8]
 800bfb4:	60da      	str	r2, [r3, #12]
 800bfb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bfb8:	f107 0318 	add.w	r3, r7, #24
 800bfbc:	2284      	movs	r2, #132	; 0x84
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f004 fc69 	bl	8010898 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfce:	d161      	bne.n	800c094 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800bfd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bfd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bfdc:	f107 0318 	add.w	r3, r7, #24
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7f7 ffd7 	bl	8003f94 <HAL_RCCEx_PeriphCLKConfig>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bfec:	f7f5 fb1e 	bl	800162c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bff0:	4b2a      	ldr	r3, [pc, #168]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800bff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff4:	4a29      	ldr	r2, [pc, #164]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800bff6:	f043 0301 	orr.w	r3, r3, #1
 800bffa:	6313      	str	r3, [r2, #48]	; 0x30
 800bffc:	4b27      	ldr	r3, [pc, #156]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800bffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c008:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c00c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c010:	2302      	movs	r3, #2
 800c012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c016:	2300      	movs	r3, #0
 800c018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c01c:	2303      	movs	r3, #3
 800c01e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c022:	230a      	movs	r3, #10
 800c024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c028:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c02c:	4619      	mov	r1, r3
 800c02e:	481c      	ldr	r0, [pc, #112]	; (800c0a0 <HAL_PCD_MspInit+0x100>)
 800c030:	f7f5 fefe 	bl	8001e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c034:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c03c:	2300      	movs	r3, #0
 800c03e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c042:	2300      	movs	r3, #0
 800c044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c04c:	4619      	mov	r1, r3
 800c04e:	4814      	ldr	r0, [pc, #80]	; (800c0a0 <HAL_PCD_MspInit+0x100>)
 800c050:	f7f5 feee 	bl	8001e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c054:	4b11      	ldr	r3, [pc, #68]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800c056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c058:	4a10      	ldr	r2, [pc, #64]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800c05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c05e:	6353      	str	r3, [r2, #52]	; 0x34
 800c060:	4b0e      	ldr	r3, [pc, #56]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800c062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c068:	613b      	str	r3, [r7, #16]
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800c06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c070:	4a0a      	ldr	r2, [pc, #40]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800c072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c076:	6453      	str	r3, [r2, #68]	; 0x44
 800c078:	4b08      	ldr	r3, [pc, #32]	; (800c09c <HAL_PCD_MspInit+0xfc>)
 800c07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c07c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c084:	2200      	movs	r2, #0
 800c086:	2105      	movs	r1, #5
 800c088:	2043      	movs	r0, #67	; 0x43
 800c08a:	f7f5 fea7 	bl	8001ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c08e:	2043      	movs	r0, #67	; 0x43
 800c090:	f7f5 fec0 	bl	8001e14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c094:	bf00      	nop
 800c096:	37b0      	adds	r7, #176	; 0xb0
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	40023800 	.word	0x40023800
 800c0a0:	40020000 	.word	0x40020000

0800c0a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	f7fb f9c2 	bl	8007444 <USBD_LL_SetupStage>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800c0da:	78fa      	ldrb	r2, [r7, #3]
 800c0dc:	6879      	ldr	r1, [r7, #4]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	440b      	add	r3, r1
 800c0e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	78fb      	ldrb	r3, [r7, #3]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	f7fb f9fc 	bl	80074ee <USBD_LL_DataOutStage>
}
 800c0f6:	bf00      	nop
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
 800c106:	460b      	mov	r3, r1
 800c108:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800c110:	78fa      	ldrb	r2, [r7, #3]
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	4613      	mov	r3, r2
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	1a9b      	subs	r3, r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	440b      	add	r3, r1
 800c11e:	3348      	adds	r3, #72	; 0x48
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	78fb      	ldrb	r3, [r7, #3]
 800c124:	4619      	mov	r1, r3
 800c126:	f7fb fa45 	bl	80075b4 <USBD_LL_DataInStage>
}
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c140:	4618      	mov	r0, r3
 800c142:	f7fb fb49 	bl	80077d8 <USBD_LL_SOF>
}
 800c146:	bf00      	nop
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c156:	2301      	movs	r3, #1
 800c158:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d102      	bne.n	800c168 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]
 800c166:	e008      	b.n	800c17a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d102      	bne.n	800c176 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c170:	2301      	movs	r3, #1
 800c172:	73fb      	strb	r3, [r7, #15]
 800c174:	e001      	b.n	800c17a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c176:	f7f5 fa59 	bl	800162c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c180:	7bfa      	ldrb	r2, [r7, #15]
 800c182:	4611      	mov	r1, r2
 800c184:	4618      	mov	r0, r3
 800c186:	f7fb faec 	bl	8007762 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c190:	4618      	mov	r0, r3
 800c192:	f7fb faa5 	bl	80076e0 <USBD_LL_Reset>
}
 800c196:	bf00      	nop
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
	...

0800c1a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fb fae7 	bl	8007782 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	6812      	ldr	r2, [r2, #0]
 800c1c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1c6:	f043 0301 	orr.w	r3, r3, #1
 800c1ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a1b      	ldr	r3, [r3, #32]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d005      	beq.n	800c1e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1d4:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <HAL_PCD_SuspendCallback+0x48>)
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	4a03      	ldr	r2, [pc, #12]	; (800c1e8 <HAL_PCD_SuspendCallback+0x48>)
 800c1da:	f043 0306 	orr.w	r3, r3, #6
 800c1de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	e000ed00 	.word	0xe000ed00

0800c1ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fb fad6 	bl	80077ac <USBD_LL_Resume>
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c21a:	78fa      	ldrb	r2, [r7, #3]
 800c21c:	4611      	mov	r1, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fb fb01 	bl	8007826 <USBD_LL_IsoOUTIncomplete>
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c23e:	78fa      	ldrb	r2, [r7, #3]
 800c240:	4611      	mov	r1, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f7fb fae2 	bl	800780c <USBD_LL_IsoINIncomplete>
}
 800c248:	bf00      	nop
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fb faee 	bl	8007840 <USBD_LL_DevConnected>
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fb faeb 	bl	8007856 <USBD_LL_DevDisconnected>
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d13c      	bne.n	800c312 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c298:	4a20      	ldr	r2, [pc, #128]	; (800c31c <USBD_LL_Init+0x94>)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a1e      	ldr	r2, [pc, #120]	; (800c31c <USBD_LL_Init+0x94>)
 800c2a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2a8:	4b1c      	ldr	r3, [pc, #112]	; (800c31c <USBD_LL_Init+0x94>)
 800c2aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c2b0:	4b1a      	ldr	r3, [pc, #104]	; (800c31c <USBD_LL_Init+0x94>)
 800c2b2:	2206      	movs	r2, #6
 800c2b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2b6:	4b19      	ldr	r3, [pc, #100]	; (800c31c <USBD_LL_Init+0x94>)
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2bc:	4b17      	ldr	r3, [pc, #92]	; (800c31c <USBD_LL_Init+0x94>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c2c2:	4b16      	ldr	r3, [pc, #88]	; (800c31c <USBD_LL_Init+0x94>)
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2c8:	4b14      	ldr	r3, [pc, #80]	; (800c31c <USBD_LL_Init+0x94>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2ce:	4b13      	ldr	r3, [pc, #76]	; (800c31c <USBD_LL_Init+0x94>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2d4:	4b11      	ldr	r3, [pc, #68]	; (800c31c <USBD_LL_Init+0x94>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c2da:	4b10      	ldr	r3, [pc, #64]	; (800c31c <USBD_LL_Init+0x94>)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2e0:	4b0e      	ldr	r3, [pc, #56]	; (800c31c <USBD_LL_Init+0x94>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2e6:	480d      	ldr	r0, [pc, #52]	; (800c31c <USBD_LL_Init+0x94>)
 800c2e8:	f7f5 ff99 	bl	800221e <HAL_PCD_Init>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2f2:	f7f5 f99b 	bl	800162c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c2f6:	2180      	movs	r1, #128	; 0x80
 800c2f8:	4808      	ldr	r0, [pc, #32]	; (800c31c <USBD_LL_Init+0x94>)
 800c2fa:	f7f7 f90a 	bl	8003512 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c2fe:	2240      	movs	r2, #64	; 0x40
 800c300:	2100      	movs	r1, #0
 800c302:	4806      	ldr	r0, [pc, #24]	; (800c31c <USBD_LL_Init+0x94>)
 800c304:	f7f7 f8be 	bl	8003484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c308:	2280      	movs	r2, #128	; 0x80
 800c30a:	2101      	movs	r1, #1
 800c30c:	4803      	ldr	r0, [pc, #12]	; (800c31c <USBD_LL_Init+0x94>)
 800c30e:	f7f7 f8b9 	bl	8003484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	2000a540 	.word	0x2000a540

0800c320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c336:	4618      	mov	r0, r3
 800c338:	f7f6 f895 	bl	8002466 <HAL_PCD_Start>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f97e 	bl	800c644 <USBD_Get_USB_Status>
 800c348:	4603      	mov	r3, r0
 800c34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	4608      	mov	r0, r1
 800c360:	4611      	mov	r1, r2
 800c362:	461a      	mov	r2, r3
 800c364:	4603      	mov	r3, r0
 800c366:	70fb      	strb	r3, [r7, #3]
 800c368:	460b      	mov	r3, r1
 800c36a:	70bb      	strb	r3, [r7, #2]
 800c36c:	4613      	mov	r3, r2
 800c36e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c37e:	78bb      	ldrb	r3, [r7, #2]
 800c380:	883a      	ldrh	r2, [r7, #0]
 800c382:	78f9      	ldrb	r1, [r7, #3]
 800c384:	f7f6 fc85 	bl	8002c92 <HAL_PCD_EP_Open>
 800c388:	4603      	mov	r3, r0
 800c38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 f958 	bl	800c644 <USBD_Get_USB_Status>
 800c394:	4603      	mov	r3, r0
 800c396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c398:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b084      	sub	sp, #16
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3bc:	78fa      	ldrb	r2, [r7, #3]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7f6 fcce 	bl	8002d62 <HAL_PCD_EP_Close>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 f939 	bl	800c644 <USBD_Get_USB_Status>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3fa:	78fa      	ldrb	r2, [r7, #3]
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7f6 fda6 	bl	8002f50 <HAL_PCD_EP_SetStall>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c408:	7bfb      	ldrb	r3, [r7, #15]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 f91a 	bl	800c644 <USBD_Get_USB_Status>
 800c410:	4603      	mov	r3, r0
 800c412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c414:	7bbb      	ldrb	r3, [r7, #14]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	460b      	mov	r3, r1
 800c428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c438:	78fa      	ldrb	r2, [r7, #3]
 800c43a:	4611      	mov	r1, r2
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7f6 fdeb 	bl	8003018 <HAL_PCD_EP_ClrStall>
 800c442:	4603      	mov	r3, r0
 800c444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f8fb 	bl	800c644 <USBD_Get_USB_Status>
 800c44e:	4603      	mov	r3, r0
 800c450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c452:	7bbb      	ldrb	r3, [r7, #14]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c46e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c474:	2b00      	cmp	r3, #0
 800c476:	da0b      	bge.n	800c490 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c478:	78fb      	ldrb	r3, [r7, #3]
 800c47a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c47e:	68f9      	ldr	r1, [r7, #12]
 800c480:	4613      	mov	r3, r2
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	1a9b      	subs	r3, r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	440b      	add	r3, r1
 800c48a:	333e      	adds	r3, #62	; 0x3e
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	e00b      	b.n	800c4a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c496:	68f9      	ldr	r1, [r7, #12]
 800c498:	4613      	mov	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	1a9b      	subs	r3, r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	440b      	add	r3, r1
 800c4a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4ce:	78fa      	ldrb	r2, [r7, #3]
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7f6 fbb8 	bl	8002c48 <HAL_PCD_SetAddress>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 f8b0 	bl	800c644 <USBD_Get_USB_Status>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b086      	sub	sp, #24
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	607a      	str	r2, [r7, #4]
 800c4fc:	603b      	str	r3, [r7, #0]
 800c4fe:	460b      	mov	r3, r1
 800c500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c510:	7af9      	ldrb	r1, [r7, #11]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	f7f6 fcd1 	bl	8002ebc <HAL_PCD_EP_Transmit>
 800c51a:	4603      	mov	r3, r0
 800c51c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
 800c520:	4618      	mov	r0, r3
 800c522:	f000 f88f 	bl	800c644 <USBD_Get_USB_Status>
 800c526:	4603      	mov	r3, r0
 800c528:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c52a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	460b      	mov	r3, r1
 800c542:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c552:	7af9      	ldrb	r1, [r7, #11]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	f7f6 fc4d 	bl	8002df6 <HAL_PCD_EP_Receive>
 800c55c:	4603      	mov	r3, r0
 800c55e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c560:	7dfb      	ldrb	r3, [r7, #23]
 800c562:	4618      	mov	r0, r3
 800c564:	f000 f86e 	bl	800c644 <USBD_Get_USB_Status>
 800c568:	4603      	mov	r3, r0
 800c56a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c56c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	460b      	mov	r3, r1
 800c580:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c588:	78fa      	ldrb	r2, [r7, #3]
 800c58a:	4611      	mov	r1, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f6 fc7d 	bl	8002e8c <HAL_PCD_EP_GetRxCount>
 800c592:	4603      	mov	r3, r0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c5a8:	78fb      	ldrb	r3, [r7, #3]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d002      	beq.n	800c5b4 <HAL_PCDEx_LPM_Callback+0x18>
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d01f      	beq.n	800c5f2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c5b2:	e03b      	b.n	800c62c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c5bc:	f000 f83c 	bl	800c638 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5c0:	4b1c      	ldr	r3, [pc, #112]	; (800c634 <HAL_PCDEx_LPM_Callback+0x98>)
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	4a1b      	ldr	r2, [pc, #108]	; (800c634 <HAL_PCDEx_LPM_Callback+0x98>)
 800c5c6:	f023 0306 	bic.w	r3, r3, #6
 800c5ca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	6812      	ldr	r2, [r2, #0]
 800c5da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fb f8de 	bl	80077ac <USBD_LL_Resume>
    break;
 800c5f0:	e01c      	b.n	800c62c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	6812      	ldr	r2, [r2, #0]
 800c600:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c604:	f043 0301 	orr.w	r3, r3, #1
 800c608:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c610:	4618      	mov	r0, r3
 800c612:	f7fb f8b6 	bl	8007782 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d005      	beq.n	800c62a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c61e:	4b05      	ldr	r3, [pc, #20]	; (800c634 <HAL_PCDEx_LPM_Callback+0x98>)
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	4a04      	ldr	r2, [pc, #16]	; (800c634 <HAL_PCDEx_LPM_Callback+0x98>)
 800c624:	f043 0306 	orr.w	r3, r3, #6
 800c628:	6113      	str	r3, [r2, #16]
    break;
 800c62a:	bf00      	nop
}
 800c62c:	bf00      	nop
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	e000ed00 	.word	0xe000ed00

0800c638 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c63c:	f7f4 fd56 	bl	80010ec <SystemClock_Config>
}
 800c640:	bf00      	nop
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	2b03      	cmp	r3, #3
 800c656:	d817      	bhi.n	800c688 <USBD_Get_USB_Status+0x44>
 800c658:	a201      	add	r2, pc, #4	; (adr r2, 800c660 <USBD_Get_USB_Status+0x1c>)
 800c65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65e:	bf00      	nop
 800c660:	0800c671 	.word	0x0800c671
 800c664:	0800c677 	.word	0x0800c677
 800c668:	0800c67d 	.word	0x0800c67d
 800c66c:	0800c683 	.word	0x0800c683
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	73fb      	strb	r3, [r7, #15]
    break;
 800c674:	e00b      	b.n	800c68e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c676:	2303      	movs	r3, #3
 800c678:	73fb      	strb	r3, [r7, #15]
    break;
 800c67a:	e008      	b.n	800c68e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c67c:	2301      	movs	r3, #1
 800c67e:	73fb      	strb	r3, [r7, #15]
    break;
 800c680:	e005      	b.n	800c68e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c682:	2303      	movs	r3, #3
 800c684:	73fb      	strb	r3, [r7, #15]
    break;
 800c686:	e002      	b.n	800c68e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c688:	2303      	movs	r3, #3
 800c68a:	73fb      	strb	r3, [r7, #15]
    break;
 800c68c:	bf00      	nop
  }
  return usb_status;
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 800c6a2:	f000 f9bd 	bl	800ca20 <csp_get_s>
 800c6a6:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 800c6a8:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <csp_get_uptime_s+0x2c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d102      	bne.n	800c6b6 <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 800c6b0:	4a05      	ldr	r2, [pc, #20]	; (800c6c8 <csp_get_uptime_s+0x2c>)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 800c6b6:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <csp_get_uptime_s+0x2c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	1ad3      	subs	r3, r2, r3
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	2000a944 	.word	0x2000a944

0800c6cc <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7ff f83d 	bl	800b754 <pvPortMalloc>
 800c6da:	4603      	mov	r3, r0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	fb02 f303 	mul.w	r3, r2, r3
 800c6f6:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 800c6f8:	6838      	ldr	r0, [r7, #0]
 800c6fa:	f7ff ffe7 	bl	800c6cc <csp_malloc>
 800c6fe:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d004      	beq.n	800c710 <csp_calloc+0x2c>
		memset(ptr, 0, size);
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	2100      	movs	r1, #0
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f004 f8c4 	bl	8010898 <memset>
	}
	return ptr;
 800c710:	68fb      	ldr	r3, [r7, #12]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <csp_free>:

void csp_free(void *ptr) {
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b082      	sub	sp, #8
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff f8e0 	bl	800b8e8 <vPortFree>
}
 800c728:	bf00      	nop
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	4618      	mov	r0, r3
 800c742:	f7fc fba1 	bl	8008e88 <xQueueGenericCreate>
 800c746:	4603      	mov	r3, r0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7fd f841 	bl	80097e0 <vQueueDelete>
}
 800c75e:	bf00      	nop
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	60f8      	str	r0, [r7, #12]
 800c76e:	60b9      	str	r1, [r7, #8]
 800c770:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 800c778:	2300      	movs	r3, #0
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	68b9      	ldr	r1, [r7, #8]
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7fc fbe8 	bl	8008f54 <xQueueGenericSend>
 800c784:	4603      	mov	r3, r0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	60f8      	str	r0, [r7, #12]
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 800c79a:	2300      	movs	r3, #0
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	68b9      	ldr	r1, [r7, #8]
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7fc fcdd 	bl	8009160 <xQueueGenericSendFromISR>
 800c7a6:	4603      	mov	r3, r0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	68b9      	ldr	r1, [r7, #8]
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f7fc fd6a 	bl	80092a0 <xQueueReceive>
 800c7cc:	4603      	mov	r3, r0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b084      	sub	sp, #16
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	60f8      	str	r0, [r7, #12]
 800c7de:	60b9      	str	r1, [r7, #8]
 800c7e0:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	68b9      	ldr	r1, [r7, #8]
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f7fc ff54 	bl	8009694 <xQueueReceiveFromISR>
 800c7ec:	4603      	mov	r3, r0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b082      	sub	sp, #8
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7fc ffce 	bl	80097a0 <uxQueueMessagesWaiting>
 800c804:	4603      	mov	r3, r0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <csp_bin_sem_create>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
	return csp_bin_sem_post(mutex);
}

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 800c80e:	b580      	push	{r7, lr}
 800c810:	b082      	sub	sp, #8
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 800c816:	2203      	movs	r2, #3
 800c818:	2100      	movs	r1, #0
 800c81a:	2001      	movs	r0, #1
 800c81c:	f7fc fb34 	bl	8008e88 <xQueueGenericCreate>
 800c820:	4602      	mov	r2, r0
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d006      	beq.n	800c83c <csp_bin_sem_create+0x2e>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	2300      	movs	r3, #0
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	f7fc fb8c 	bl	8008f54 <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 800c83c:	2301      	movs	r3, #1
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <csp_bin_sem_remove>:

int csp_bin_sem_remove(csp_bin_sem_handle_t * sem) {
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
	if ((sem != NULL) && (*sem != NULL)) {
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d008      	beq.n	800c866 <csp_bin_sem_remove+0x20>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d004      	beq.n	800c866 <csp_bin_sem_remove+0x20>
		vSemaphoreDelete(*sem);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4618      	mov	r0, r3
 800c862:	f7fc ffbd 	bl	80097e0 <vQueueDelete>
	}
	return CSP_SEMAPHORE_OK;
 800c866:	2301      	movs	r3, #1
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <csp_bin_sem_wait>:

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 800c87a:	4b0e      	ldr	r3, [pc, #56]	; (800c8b4 <csp_bin_sem_wait+0x44>)
 800c87c:	799b      	ldrb	r3, [r3, #6]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d004      	beq.n	800c88c <csp_bin_sem_wait+0x1c>
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	490c      	ldr	r1, [pc, #48]	; (800c8b8 <csp_bin_sem_wait+0x48>)
 800c886:	2006      	movs	r0, #6
 800c888:	f000 fe88 	bl	800d59c <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fc fde7 	bl	800946c <xQueueSemaphoreTake>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e000      	b.n	800c8aa <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 800c8a8:	2300      	movs	r3, #0
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	200001a0 	.word	0x200001a0
 800c8b8:	080139b0 	.word	0x080139b0

0800c8bc <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <csp_bin_sem_post+0x3c>)
 800c8c6:	799b      	ldrb	r3, [r3, #6]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d004      	beq.n	800c8d6 <csp_bin_sem_post+0x1a>
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	490b      	ldr	r1, [pc, #44]	; (800c8fc <csp_bin_sem_post+0x40>)
 800c8d0:	2006      	movs	r0, #6
 800c8d2:	f000 fe63 	bl	800d59c <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6818      	ldr	r0, [r3, #0]
 800c8da:	2300      	movs	r3, #0
 800c8dc:	2200      	movs	r2, #0
 800c8de:	2100      	movs	r1, #0
 800c8e0:	f7fc fb38 	bl	8008f54 <xQueueGenericSend>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d101      	bne.n	800c8ee <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	200001a0 	.word	0x200001a0
 800c8fc:	080139bc 	.word	0x080139bc

0800c900 <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 800c90a:	79fb      	ldrb	r3, [r7, #7]
 800c90c:	f003 030f 	and.w	r3, r3, #15
 800c910:	3b01      	subs	r3, #1
 800c912:	2b07      	cmp	r3, #7
 800c914:	d82a      	bhi.n	800c96c <csp_sys_set_color+0x6c>
 800c916:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <csp_sys_set_color+0x1c>)
 800c918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91c:	0800c93d 	.word	0x0800c93d
 800c920:	0800c943 	.word	0x0800c943
 800c924:	0800c949 	.word	0x0800c949
 800c928:	0800c94f 	.word	0x0800c94f
 800c92c:	0800c955 	.word	0x0800c955
 800c930:	0800c95b 	.word	0x0800c95b
 800c934:	0800c961 	.word	0x0800c961
 800c938:	0800c967 	.word	0x0800c967
		case COLOR_BLACK:
			color_code = 30; break;
 800c93c:	231e      	movs	r3, #30
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e017      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 800c942:	231f      	movs	r3, #31
 800c944:	60fb      	str	r3, [r7, #12]
 800c946:	e014      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 800c948:	2320      	movs	r3, #32
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	e011      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 800c94e:	2321      	movs	r3, #33	; 0x21
 800c950:	60fb      	str	r3, [r7, #12]
 800c952:	e00e      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 800c954:	2322      	movs	r3, #34	; 0x22
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	e00b      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 800c95a:	2323      	movs	r3, #35	; 0x23
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	e008      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 800c960:	2324      	movs	r3, #36	; 0x24
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	e005      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 800c966:	2325      	movs	r3, #37	; 0x25
 800c968:	60fb      	str	r3, [r7, #12]
 800c96a:	e002      	b.n	800c972 <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 800c96c:	2300      	movs	r3, #0
 800c96e:	60fb      	str	r3, [r7, #12]
 800c970:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c978:	2b40      	cmp	r3, #64	; 0x40
 800c97a:	d013      	beq.n	800c9a4 <csp_sys_set_color+0xa4>
 800c97c:	2b40      	cmp	r3, #64	; 0x40
 800c97e:	dc14      	bgt.n	800c9aa <csp_sys_set_color+0xaa>
 800c980:	2b30      	cmp	r3, #48	; 0x30
 800c982:	d00c      	beq.n	800c99e <csp_sys_set_color+0x9e>
 800c984:	2b30      	cmp	r3, #48	; 0x30
 800c986:	dc10      	bgt.n	800c9aa <csp_sys_set_color+0xaa>
 800c988:	2b10      	cmp	r3, #16
 800c98a:	d002      	beq.n	800c992 <csp_sys_set_color+0x92>
 800c98c:	2b20      	cmp	r3, #32
 800c98e:	d003      	beq.n	800c998 <csp_sys_set_color+0x98>
 800c990:	e00b      	b.n	800c9aa <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 800c992:	2301      	movs	r3, #1
 800c994:	60bb      	str	r3, [r7, #8]
 800c996:	e00b      	b.n	800c9b0 <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 800c998:	2302      	movs	r3, #2
 800c99a:	60bb      	str	r3, [r7, #8]
 800c99c:	e008      	b.n	800c9b0 <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	60bb      	str	r3, [r7, #8]
 800c9a2:	e005      	b.n	800c9b0 <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 800c9a4:	2304      	movs	r3, #4
 800c9a6:	60bb      	str	r3, [r7, #8]
 800c9a8:	e002      	b.n	800c9b0 <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60bb      	str	r3, [r7, #8]
 800c9ae:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	68b9      	ldr	r1, [r7, #8]
 800c9b4:	4803      	ldr	r0, [pc, #12]	; (800c9c4 <csp_sys_set_color+0xc4>)
 800c9b6:	f004 fcd7 	bl	8011368 <iprintf>
}
 800c9ba:	bf00      	nop
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	080139c8 	.word	0x080139c8

0800c9c8 <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	f107 0310 	add.w	r3, r7, #16
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	68b9      	ldr	r1, [r7, #8]
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f7fd f932 	bl	8009c52 <xTaskCreate>
 800c9ee:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d002      	beq.n	800c9fc <csp_thread_create+0x34>
		return CSP_ERR_NOMEM;
 800c9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9fa:	e006      	b.n	800ca0a <csp_thread_create+0x42>
	}
	if (return_handle) {
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <csp_thread_create+0x40>
		*return_handle = handle;
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3718      	adds	r7, #24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 800ca12:	b580      	push	{r7, lr}
 800ca14:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 800ca16:	f7fd fbd1 	bl	800a1bc <xTaskGetTickCount>
 800ca1a:	4603      	mov	r3, r0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <csp_get_s>:

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
}

uint32_t csp_get_s(void) {
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 800ca24:	f7fd fbca 	bl	800a1bc <xTaskGetTickCount>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	4a03      	ldr	r2, [pc, #12]	; (800ca38 <csp_get_s+0x18>)
 800ca2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca30:	099b      	lsrs	r3, r3, #6
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	10624dd3 	.word	0x10624dd3

0800ca3c <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 800ca42:	f000 f9a5 	bl	800cd90 <csp_buffer_size>
 800ca46:	4603      	mov	r3, r0
 800ca48:	330b      	adds	r3, #11
 800ca4a:	f023 0303 	bic.w	r3, r3, #3
 800ca4e:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 800ca50:	4b23      	ldr	r3, [pc, #140]	; (800cae0 <csp_buffer_init+0xa4>)
 800ca52:	8adb      	ldrh	r3, [r3, #22]
 800ca54:	461a      	mov	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	fb02 f303 	mul.w	r3, r2, r3
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff fe35 	bl	800c6cc <csp_malloc>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4a1f      	ldr	r2, [pc, #124]	; (800cae4 <csp_buffer_init+0xa8>)
 800ca66:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 800ca68:	4b1e      	ldr	r3, [pc, #120]	; (800cae4 <csp_buffer_init+0xa8>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d030      	beq.n	800cad2 <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 800ca70:	4b1b      	ldr	r3, [pc, #108]	; (800cae0 <csp_buffer_init+0xa4>)
 800ca72:	8adb      	ldrh	r3, [r3, #22]
 800ca74:	2104      	movs	r1, #4
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fe5a 	bl	800c730 <csp_queue_create>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	4a1a      	ldr	r2, [pc, #104]	; (800cae8 <csp_buffer_init+0xac>)
 800ca80:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 800ca82:	4b19      	ldr	r3, [pc, #100]	; (800cae8 <csp_buffer_init+0xac>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d01f      	beq.n	800caca <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e014      	b.n	800caba <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 800ca90:	4b14      	ldr	r3, [pc, #80]	; (800cae4 <csp_buffer_init+0xa8>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	68b9      	ldr	r1, [r7, #8]
 800ca98:	fb01 f303 	mul.w	r3, r1, r3
 800ca9c:	4413      	add	r3, r2
 800ca9e:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 800caa6:	4b10      	ldr	r3, [pc, #64]	; (800cae8 <csp_buffer_init+0xac>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	1d39      	adds	r1, r7, #4
 800caac:	2200      	movs	r2, #0
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff fe59 	bl	800c766 <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	3301      	adds	r3, #1
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	4b09      	ldr	r3, [pc, #36]	; (800cae0 <csp_buffer_init+0xa4>)
 800cabc:	8adb      	ldrh	r3, [r3, #22]
 800cabe:	461a      	mov	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d3e4      	bcc.n	800ca90 <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 800cac6:	2300      	movs	r3, #0
 800cac8:	e006      	b.n	800cad8 <csp_buffer_init+0x9c>
		goto fail_queue;
 800caca:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 800cacc:	f000 f80e 	bl	800caec <csp_buffer_free_resources>
 800cad0:	e000      	b.n	800cad4 <csp_buffer_init+0x98>
		goto fail_malloc;
 800cad2:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295

}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	2000a96c 	.word	0x2000a96c
 800cae4:	2000a94c 	.word	0x2000a94c
 800cae8:	2000a948 	.word	0x2000a948

0800caec <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 800caec:	b580      	push	{r7, lr}
 800caee:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 800caf0:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <csp_buffer_free_resources+0x30>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d007      	beq.n	800cb08 <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 800caf8:	4b08      	ldr	r3, [pc, #32]	; (800cb1c <csp_buffer_free_resources+0x30>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff fe27 	bl	800c750 <csp_queue_remove>
		csp_buffers = NULL;
 800cb02:	4b06      	ldr	r3, [pc, #24]	; (800cb1c <csp_buffer_free_resources+0x30>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 800cb08:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <csp_buffer_free_resources+0x34>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7ff fe04 	bl	800c71a <csp_free>
	csp_buffer_pool = NULL;
 800cb12:	4b03      	ldr	r3, [pc, #12]	; (800cb20 <csp_buffer_free_resources+0x34>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	601a      	str	r2, [r3, #0]

}
 800cb18:	bf00      	nop
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	2000a948 	.word	0x2000a948
 800cb20:	2000a94c 	.word	0x2000a94c

0800cb24 <csp_buffer_get>:
	buffer->refcount = 1;
	return buffer->skbf_data;

}

void *csp_buffer_get(size_t _data_size) {
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 800cb2c:	4b27      	ldr	r3, [pc, #156]	; (800cbcc <csp_buffer_get+0xa8>)
 800cb2e:	8b1b      	ldrh	r3, [r3, #24]
 800cb30:	461a      	mov	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d90c      	bls.n	800cb52 <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 800cb38:	4b25      	ldr	r3, [pc, #148]	; (800cbd0 <csp_buffer_get+0xac>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d006      	beq.n	800cb4e <csp_buffer_get+0x2a>
 800cb40:	4b22      	ldr	r3, [pc, #136]	; (800cbcc <csp_buffer_get+0xa8>)
 800cb42:	8b1b      	ldrh	r3, [r3, #24]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	4923      	ldr	r1, [pc, #140]	; (800cbd4 <csp_buffer_get+0xb0>)
 800cb48:	2000      	movs	r0, #0
 800cb4a:	f000 fd27 	bl	800d59c <do_csp_debug>
		return NULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e037      	b.n	800cbc2 <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 800cb56:	4b20      	ldr	r3, [pc, #128]	; (800cbd8 <csp_buffer_get+0xb4>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f107 010c 	add.w	r1, r7, #12
 800cb5e:	2200      	movs	r2, #0
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff fe25 	bl	800c7b0 <csp_queue_dequeue>
	if (buffer == NULL) {
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d109      	bne.n	800cb80 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 800cb6c:	4b18      	ldr	r3, [pc, #96]	; (800cbd0 <csp_buffer_get+0xac>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d003      	beq.n	800cb7c <csp_buffer_get+0x58>
 800cb74:	4919      	ldr	r1, [pc, #100]	; (800cbdc <csp_buffer_get+0xb8>)
 800cb76:	2000      	movs	r0, #0
 800cb78:	f000 fd10 	bl	800d59c <do_csp_debug>
		return NULL;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	e020      	b.n	800cbc2 <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d00c      	beq.n	800cba4 <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 800cb8a:	4b11      	ldr	r3, [pc, #68]	; (800cbd0 <csp_buffer_get+0xac>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <csp_buffer_get+0x7c>
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	4911      	ldr	r1, [pc, #68]	; (800cbe0 <csp_buffer_get+0xbc>)
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	f000 fcfe 	bl	800d59c <do_csp_debug>
		return NULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	e00e      	b.n	800cbc2 <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 800cba4:	4b0a      	ldr	r3, [pc, #40]	; (800cbd0 <csp_buffer_get+0xac>)
 800cba6:	78db      	ldrb	r3, [r3, #3]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <csp_buffer_get+0x94>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	490c      	ldr	r1, [pc, #48]	; (800cbe4 <csp_buffer_get+0xc0>)
 800cbb2:	2003      	movs	r0, #3
 800cbb4:	f000 fcf2 	bl	800d59c <do_csp_debug>

	buffer->refcount = 1;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3308      	adds	r3, #8
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	2000a96c 	.word	0x2000a96c
 800cbd0:	200001a0 	.word	0x200001a0
 800cbd4:	080139d4 	.word	0x080139d4
 800cbd8:	2000a948 	.word	0x2000a948
 800cbdc:	08013a10 	.word	0x08013a10
 800cbe0:	08013a24 	.word	0x08013a24
 800cbe4:	08013a48 	.word	0x08013a48

0800cbe8 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d023      	beq.n	800cc3e <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	3b08      	subs	r3, #8
 800cbfa:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f003 0303 	and.w	r3, r3, #3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d11d      	bne.n	800cc42 <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685a      	ldr	r2, [r3, #4]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d11a      	bne.n	800cc46 <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d018      	beq.n	800cc4a <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	3a01      	subs	r2, #1
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d113      	bne.n	800cc4e <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 800cc2a:	4b0b      	ldr	r3, [pc, #44]	; (800cc58 <csp_buffer_free_isr+0x70>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f107 0208 	add.w	r2, r7, #8
 800cc32:	f107 010c 	add.w	r1, r7, #12
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff fda9 	bl	800c78e <csp_queue_enqueue_isr>
 800cc3c:	e008      	b.n	800cc50 <csp_buffer_free_isr+0x68>
		return;
 800cc3e:	bf00      	nop
 800cc40:	e006      	b.n	800cc50 <csp_buffer_free_isr+0x68>
		return;
 800cc42:	bf00      	nop
 800cc44:	e004      	b.n	800cc50 <csp_buffer_free_isr+0x68>
		return;
 800cc46:	bf00      	nop
 800cc48:	e002      	b.n	800cc50 <csp_buffer_free_isr+0x68>
		return;
 800cc4a:	bf00      	nop
 800cc4c:	e000      	b.n	800cc50 <csp_buffer_free_isr+0x68>
		return;
 800cc4e:	bf00      	nop

}
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	2000a948 	.word	0x2000a948

0800cc5c <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d055      	beq.n	800cd16 <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3b08      	subs	r3, #8
 800cc6e:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f003 0303 	and.w	r3, r3, #3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d009      	beq.n	800cc8e <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 800cc7a:	4b2d      	ldr	r3, [pc, #180]	; (800cd30 <csp_buffer_free+0xd4>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d04b      	beq.n	800cd1a <csp_buffer_free+0xbe>
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	492b      	ldr	r1, [pc, #172]	; (800cd34 <csp_buffer_free+0xd8>)
 800cc86:	2000      	movs	r0, #0
 800cc88:	f000 fc88 	bl	800d59c <do_csp_debug>
		return;
 800cc8c:	e045      	b.n	800cd1a <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d009      	beq.n	800ccac <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 800cc98:	4b25      	ldr	r3, [pc, #148]	; (800cd30 <csp_buffer_free+0xd4>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d03e      	beq.n	800cd1e <csp_buffer_free+0xc2>
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	4925      	ldr	r1, [pc, #148]	; (800cd38 <csp_buffer_free+0xdc>)
 800cca4:	2000      	movs	r0, #0
 800cca6:	f000 fc79 	bl	800d59c <do_csp_debug>
		return;
 800ccaa:	e038      	b.n	800cd1e <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10a      	bne.n	800ccca <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 800ccb4:	4b1e      	ldr	r3, [pc, #120]	; (800cd30 <csp_buffer_free+0xd4>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d032      	beq.n	800cd22 <csp_buffer_free+0xc6>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	491e      	ldr	r1, [pc, #120]	; (800cd3c <csp_buffer_free+0xe0>)
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	f000 fc6a 	bl	800d59c <do_csp_debug>
		return;
 800ccc8:	e02b      	b.n	800cd22 <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	3a01      	subs	r2, #1
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00b      	beq.n	800ccf0 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 800ccd8:	4b15      	ldr	r3, [pc, #84]	; (800cd30 <csp_buffer_free+0xd4>)
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d022      	beq.n	800cd26 <csp_buffer_free+0xca>
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4916      	ldr	r1, [pc, #88]	; (800cd40 <csp_buffer_free+0xe4>)
 800cce8:	2000      	movs	r0, #0
 800ccea:	f000 fc57 	bl	800d59c <do_csp_debug>
		return;
 800ccee:	e01a      	b.n	800cd26 <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 800ccf0:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <csp_buffer_free+0xd4>)
 800ccf2:	78db      	ldrb	r3, [r3, #3]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <csp_buffer_free+0xa8>
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	4911      	ldr	r1, [pc, #68]	; (800cd44 <csp_buffer_free+0xe8>)
 800ccfe:	2003      	movs	r0, #3
 800cd00:	f000 fc4c 	bl	800d59c <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 800cd04:	4b10      	ldr	r3, [pc, #64]	; (800cd48 <csp_buffer_free+0xec>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f107 010c 	add.w	r1, r7, #12
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff fd29 	bl	800c766 <csp_queue_enqueue>
 800cd14:	e008      	b.n	800cd28 <csp_buffer_free+0xcc>
		return;
 800cd16:	bf00      	nop
 800cd18:	e006      	b.n	800cd28 <csp_buffer_free+0xcc>
		return;
 800cd1a:	bf00      	nop
 800cd1c:	e004      	b.n	800cd28 <csp_buffer_free+0xcc>
		return;
 800cd1e:	bf00      	nop
 800cd20:	e002      	b.n	800cd28 <csp_buffer_free+0xcc>
		return;
 800cd22:	bf00      	nop
 800cd24:	e000      	b.n	800cd28 <csp_buffer_free+0xcc>
		return;
 800cd26:	bf00      	nop

}
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	200001a0 	.word	0x200001a0
 800cd34:	08013a50 	.word	0x08013a50
 800cd38:	08013a78 	.word	0x08013a78
 800cd3c:	08013a9c 	.word	0x08013a9c
 800cd40:	08013abc 	.word	0x08013abc
 800cd44:	08013ae0 	.word	0x08013ae0
 800cd48:	2000a948 	.word	0x2000a948

0800cd4c <csp_buffer_clone>:

void *csp_buffer_clone(void *buffer) {
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]

	csp_packet_t *packet = (csp_packet_t *) buffer;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	60fb      	str	r3, [r7, #12]
	if (!packet) {
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d101      	bne.n	800cd62 <csp_buffer_clone+0x16>
		return NULL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	e011      	b.n	800cd86 <csp_buffer_clone+0x3a>
	}

	csp_packet_t *clone = csp_buffer_get(packet->length);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	895b      	ldrh	r3, [r3, #10]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff fedc 	bl	800cb24 <csp_buffer_get>
 800cd6c:	60b8      	str	r0, [r7, #8]
	if (clone) {
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <csp_buffer_clone+0x38>
		memcpy(clone, packet, csp_buffer_size());
 800cd74:	f000 f80c 	bl	800cd90 <csp_buffer_size>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	68f9      	ldr	r1, [r7, #12]
 800cd7e:	68b8      	ldr	r0, [r7, #8]
 800cd80:	f003 fd7c 	bl	801087c <memcpy>
	}

	return clone;
 800cd84:	68bb      	ldr	r3, [r7, #8]

}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
	...

0800cd90 <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 800cd94:	4b03      	ldr	r3, [pc, #12]	; (800cda4 <csp_buffer_size+0x14>)
 800cd96:	8b1b      	ldrh	r3, [r3, #24]
 800cd98:	3310      	adds	r3, #16
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	2000a96c 	.word	0x2000a96c

0800cda8 <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 800cda8:	b480      	push	{r7}
 800cdaa:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 800cdac:	4b03      	ldr	r3, [pc, #12]	; (800cdbc <csp_buffer_data_size+0x14>)
 800cdae:	8b1b      	ldrh	r3, [r3, #24]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	2000a96c 	.word	0x2000a96c

0800cdc0 <csp_conn_check_timeouts>:
static uint8_t sport;

/* Source port lock */
static csp_bin_sem_handle_t sport_lock;

void csp_conn_check_timeouts(void) {
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
#if (CSP_USE_RDP)
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	607b      	str	r3, [r7, #4]
 800cdca:	e022      	b.n	800ce12 <csp_conn_check_timeouts+0x52>
		if (arr_conn[i].state == CONN_OPEN) {
 800cdcc:	4b16      	ldr	r3, [pc, #88]	; (800ce28 <csp_conn_check_timeouts+0x68>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2154      	movs	r1, #84	; 0x54
 800cdd4:	fb01 f303 	mul.w	r3, r1, r3
 800cdd8:	4413      	add	r3, r2
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d115      	bne.n	800ce0c <csp_conn_check_timeouts+0x4c>
			if (arr_conn[i].idin.flags & CSP_FRDP) {
 800cde0:	4b11      	ldr	r3, [pc, #68]	; (800ce28 <csp_conn_check_timeouts+0x68>)
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2154      	movs	r1, #84	; 0x54
 800cde8:	fb01 f303 	mul.w	r3, r1, r3
 800cdec:	4413      	add	r3, r2
 800cdee:	791b      	ldrb	r3, [r3, #4]
 800cdf0:	f003 0302 	and.w	r3, r3, #2
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d009      	beq.n	800ce0c <csp_conn_check_timeouts+0x4c>
				csp_rdp_check_timeouts(&arr_conn[i]);
 800cdf8:	4b0b      	ldr	r3, [pc, #44]	; (800ce28 <csp_conn_check_timeouts+0x68>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2154      	movs	r1, #84	; 0x54
 800ce00:	fb01 f303 	mul.w	r3, r1, r3
 800ce04:	4413      	add	r3, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f002 fade 	bl	800f3c8 <csp_rdp_check_timeouts>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	607b      	str	r3, [r7, #4]
 800ce12:	4b06      	ldr	r3, [pc, #24]	; (800ce2c <csp_conn_check_timeouts+0x6c>)
 800ce14:	7c1b      	ldrb	r3, [r3, #16]
 800ce16:	461a      	mov	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	dbd6      	blt.n	800cdcc <csp_conn_check_timeouts+0xc>
			}
		}
	}
#endif
}
 800ce1e:	bf00      	nop
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	2000a950 	.word	0x2000a950
 800ce2c:	2000a96c 	.word	0x2000a96c

0800ce30 <csp_conn_get_rxq>:

int csp_conn_get_rxq(int prio) {
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 800ce38:	2300      	movs	r3, #0
#endif

}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
	...

0800ce48 <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800ce48:	b590      	push	{r4, r7, lr}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]

	if (!conn)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d102      	bne.n	800ce5e <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 800ce58:	f06f 0301 	mvn.w	r3, #1
 800ce5c:	e039      	b.n	800ced2 <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d009      	beq.n	800ce78 <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	7bdb      	ldrb	r3, [r3, #15]
 800ce68:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7ff ffde 	bl	800ce30 <csp_conn_get_rxq>
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	e001      	b.n	800ce7c <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3302      	adds	r3, #2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4413      	add	r3, r2
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	4639      	mov	r1, r7
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7ff fc6a 	bl	800c766 <csp_queue_enqueue>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d01b      	beq.n	800ced0 <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 800ce98:	4b10      	ldr	r3, [pc, #64]	; (800cedc <csp_conn_enqueue_packet+0x94>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d014      	beq.n	800ceca <csp_conn_enqueue_packet+0x82>
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3302      	adds	r3, #2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4413      	add	r3, r2
 800ceaa:	685c      	ldr	r4, [r3, #4]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3302      	adds	r3, #2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7ff fc9c 	bl	800c7f6 <csp_queue_size>
 800cebe:	4603      	mov	r3, r0
 800cec0:	4622      	mov	r2, r4
 800cec2:	4907      	ldr	r1, [pc, #28]	; (800cee0 <csp_conn_enqueue_packet+0x98>)
 800cec4:	2000      	movs	r0, #0
 800cec6:	f000 fb69 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOMEM;
 800ceca:	f04f 33ff 	mov.w	r3, #4294967295
 800cece:	e000      	b.n	800ced2 <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd90      	pop	{r4, r7, pc}
 800ceda:	bf00      	nop
 800cedc:	200001a0 	.word	0x200001a0
 800cee0:	08013aec 	.word	0x08013aec

0800cee4 <csp_conn_init>:

int csp_conn_init(void) {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 800ceea:	4b55      	ldr	r3, [pc, #340]	; (800d040 <csp_conn_init+0x15c>)
 800ceec:	7c1b      	ldrb	r3, [r3, #16]
 800ceee:	2154      	movs	r1, #84	; 0x54
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff fbf7 	bl	800c6e4 <csp_calloc>
 800cef6:	4603      	mov	r3, r0
 800cef8:	4a52      	ldr	r2, [pc, #328]	; (800d044 <csp_conn_init+0x160>)
 800cefa:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 800cefc:	4b51      	ldr	r3, [pc, #324]	; (800d044 <csp_conn_init+0x160>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10d      	bne.n	800cf20 <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 800cf04:	4b50      	ldr	r3, [pc, #320]	; (800d048 <csp_conn_init+0x164>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d006      	beq.n	800cf1a <csp_conn_init+0x36>
 800cf0c:	4b4c      	ldr	r3, [pc, #304]	; (800d040 <csp_conn_init+0x15c>)
 800cf0e:	7c1b      	ldrb	r3, [r3, #16]
 800cf10:	461a      	mov	r2, r3
 800cf12:	494e      	ldr	r1, [pc, #312]	; (800d04c <csp_conn_init+0x168>)
 800cf14:	2000      	movs	r0, #0
 800cf16:	f000 fb41 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOMEM;
 800cf1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1e:	e08b      	b.n	800d038 <csp_conn_init+0x154>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 800cf20:	484b      	ldr	r0, [pc, #300]	; (800d050 <csp_conn_init+0x16c>)
 800cf22:	f7ff fc74 	bl	800c80e <csp_bin_sem_create>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d00a      	beq.n	800cf42 <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 800cf2c:	4b46      	ldr	r3, [pc, #280]	; (800d048 <csp_conn_init+0x164>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <csp_conn_init+0x58>
 800cf34:	4947      	ldr	r1, [pc, #284]	; (800d054 <csp_conn_init+0x170>)
 800cf36:	2000      	movs	r0, #0
 800cf38:	f000 fb30 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOMEM;
 800cf3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf40:	e07a      	b.n	800d038 <csp_conn_init+0x154>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 800cf42:	f7ff fd66 	bl	800ca12 <csp_get_ms>
 800cf46:	4603      	mov	r3, r0
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f004 fa9b 	bl	8011484 <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 800cf4e:	f004 fac7 	bl	80114e0 <rand>
 800cf52:	4602      	mov	r2, r0
 800cf54:	4b3a      	ldr	r3, [pc, #232]	; (800d040 <csp_conn_init+0x15c>)
 800cf56:	7cdb      	ldrb	r3, [r3, #19]
 800cf58:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800cf5c:	fb92 f1f3 	sdiv	r1, r2, r3
 800cf60:	fb01 f303 	mul.w	r3, r1, r3
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	b2da      	uxtb	r2, r3
 800cf68:	4b35      	ldr	r3, [pc, #212]	; (800d040 <csp_conn_init+0x15c>)
 800cf6a:	7cdb      	ldrb	r3, [r3, #19]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	3301      	adds	r3, #1
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	4b38      	ldr	r3, [pc, #224]	; (800d058 <csp_conn_init+0x174>)
 800cf76:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 800cf78:	4838      	ldr	r0, [pc, #224]	; (800d05c <csp_conn_init+0x178>)
 800cf7a:	f7ff fc48 	bl	800c80e <csp_bin_sem_create>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d00a      	beq.n	800cf9a <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 800cf84:	4b30      	ldr	r3, [pc, #192]	; (800d048 <csp_conn_init+0x164>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <csp_conn_init+0xb0>
 800cf8c:	4934      	ldr	r1, [pc, #208]	; (800d060 <csp_conn_init+0x17c>)
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f000 fb04 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOMEM;
 800cf94:	f04f 33ff 	mov.w	r3, #4294967295
 800cf98:	e04e      	b.n	800d038 <csp_conn_init+0x154>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	e044      	b.n	800d02a <csp_conn_init+0x146>
		csp_conn_t * conn = &arr_conn[i];
 800cfa0:	4b28      	ldr	r3, [pc, #160]	; (800d044 <csp_conn_init+0x160>)
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2154      	movs	r1, #84	; 0x54
 800cfa8:	fb01 f303 	mul.w	r3, r1, r3
 800cfac:	4413      	add	r3, r2
 800cfae:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60bb      	str	r3, [r7, #8]
 800cfb4:	e022      	b.n	800cffc <csp_conn_init+0x118>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 800cfb6:	4b22      	ldr	r3, [pc, #136]	; (800d040 <csp_conn_init+0x15c>)
 800cfb8:	7c5b      	ldrb	r3, [r3, #17]
 800cfba:	2104      	movs	r1, #4
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff fbb7 	bl	800c730 <csp_queue_create>
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	3302      	adds	r3, #2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	3302      	adds	r3, #2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10a      	bne.n	800cff6 <csp_conn_init+0x112>
				csp_log_error("rx_queue = csp_queue_create() failed");
 800cfe0:	4b19      	ldr	r3, [pc, #100]	; (800d048 <csp_conn_init+0x164>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d003      	beq.n	800cff0 <csp_conn_init+0x10c>
 800cfe8:	491e      	ldr	r1, [pc, #120]	; (800d064 <csp_conn_init+0x180>)
 800cfea:	2000      	movs	r0, #0
 800cfec:	f000 fad6 	bl	800d59c <do_csp_debug>
				return CSP_ERR_NOMEM;
 800cff0:	f04f 33ff 	mov.w	r3, #4294967295
 800cff4:	e020      	b.n	800d038 <csp_conn_init+0x154>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	3301      	adds	r3, #1
 800cffa:	60bb      	str	r3, [r7, #8]
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	ddd9      	ble.n	800cfb6 <csp_conn_init+0xd2>
			return CSP_ERR_NOMEM;
		}
#endif

#if (CSP_USE_RDP)
		if (csp_rdp_init(conn) != CSP_ERR_NONE) {
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f003 f96c 	bl	80102e0 <csp_rdp_init>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00a      	beq.n	800d024 <csp_conn_init+0x140>
			csp_log_error("csp_rdp_allocate(conn) failed");
 800d00e:	4b0e      	ldr	r3, [pc, #56]	; (800d048 <csp_conn_init+0x164>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d003      	beq.n	800d01e <csp_conn_init+0x13a>
 800d016:	4914      	ldr	r1, [pc, #80]	; (800d068 <csp_conn_init+0x184>)
 800d018:	2000      	movs	r0, #0
 800d01a:	f000 fabf 	bl	800d59c <do_csp_debug>
			return CSP_ERR_NOMEM;
 800d01e:	f04f 33ff 	mov.w	r3, #4294967295
 800d022:	e009      	b.n	800d038 <csp_conn_init+0x154>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3301      	adds	r3, #1
 800d028:	60fb      	str	r3, [r7, #12]
 800d02a:	4b05      	ldr	r3, [pc, #20]	; (800d040 <csp_conn_init+0x15c>)
 800d02c:	7c1b      	ldrb	r3, [r3, #16]
 800d02e:	461a      	mov	r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4293      	cmp	r3, r2
 800d034:	dbb4      	blt.n	800cfa0 <csp_conn_init+0xbc>
		}
#endif
	}

	return CSP_ERR_NONE;
 800d036:	2300      	movs	r3, #0

}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	2000a96c 	.word	0x2000a96c
 800d044:	2000a950 	.word	0x2000a950
 800d048:	200001a0 	.word	0x200001a0
 800d04c:	08013b0c 	.word	0x08013b0c
 800d050:	2000a954 	.word	0x2000a954
 800d054:	08013b34 	.word	0x08013b34
 800d058:	2000a958 	.word	0x2000a958
 800d05c:	2000a95c 	.word	0x2000a95c
 800d060:	08013b5c 	.word	0x08013b5c
 800d064:	08013b84 	.word	0x08013b84
 800d068:	08013bac 	.word	0x08013bac

0800d06c <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	4013      	ands	r3, r2
 800d07c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	e01b      	b.n	800d0bc <csp_conn_find+0x50>
		csp_conn_t * conn = &arr_conn[i];
 800d084:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <csp_conn_find+0x6c>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2154      	movs	r1, #84	; 0x54
 800d08c:	fb01 f303 	mul.w	r3, r1, r3
 800d090:	4413      	add	r3, r2
 800d092:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	785b      	ldrb	r3, [r3, #1]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d10c      	bne.n	800d0b6 <csp_conn_find+0x4a>
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d108      	bne.n	800d0b6 <csp_conn_find+0x4a>
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d101      	bne.n	800d0b6 <csp_conn_find+0x4a>
			return conn;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	e009      	b.n	800d0ca <csp_conn_find+0x5e>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	60fb      	str	r3, [r7, #12]
 800d0bc:	4b07      	ldr	r3, [pc, #28]	; (800d0dc <csp_conn_find+0x70>)
 800d0be:	7c1b      	ldrb	r3, [r3, #16]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	dbdd      	blt.n	800d084 <csp_conn_find+0x18>
		}
	}

	return NULL;
 800d0c8:	2300      	movs	r3, #0

}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	2000a950 	.word	0x2000a950
 800d0dc:	2000a96c 	.word	0x2000a96c

0800d0e0 <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	e018      	b.n	800d120 <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d003      	beq.n	800d0fc <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff fdb0 	bl	800cc5c <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3302      	adds	r3, #2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	f107 0108 	add.w	r1, r7, #8
 800d10c:	2200      	movs	r2, #0
 800d10e:	4618      	mov	r0, r3
 800d110:	f7ff fb4e 	bl	800c7b0 <csp_queue_dequeue>
 800d114:	4603      	mov	r3, r0
 800d116:	2b01      	cmp	r3, #1
 800d118:	d0e9      	beq.n	800d0ee <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3301      	adds	r3, #1
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2b00      	cmp	r3, #0
 800d124:	ddea      	ble.n	800d0fc <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 800d126:	2300      	movs	r3, #0

}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800d13a:	f04f 31ff 	mov.w	r1, #4294967295
 800d13e:	4837      	ldr	r0, [pc, #220]	; (800d21c <csp_conn_allocate+0xec>)
 800d140:	f7ff fb96 	bl	800c870 <csp_bin_sem_wait>
 800d144:	4603      	mov	r3, r0
 800d146:	2b01      	cmp	r3, #1
 800d148:	d009      	beq.n	800d15e <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 800d14a:	4b35      	ldr	r3, [pc, #212]	; (800d220 <csp_conn_allocate+0xf0>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d003      	beq.n	800d15a <csp_conn_allocate+0x2a>
 800d152:	4934      	ldr	r1, [pc, #208]	; (800d224 <csp_conn_allocate+0xf4>)
 800d154:	2000      	movs	r0, #0
 800d156:	f000 fa21 	bl	800d59c <do_csp_debug>
		return NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	e05a      	b.n	800d214 <csp_conn_allocate+0xe4>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 800d15e:	2300      	movs	r3, #0
 800d160:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 800d162:	4b31      	ldr	r3, [pc, #196]	; (800d228 <csp_conn_allocate+0xf8>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 800d168:	2300      	movs	r3, #0
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	e018      	b.n	800d1a0 <csp_conn_allocate+0x70>
		i = (i + 1) % csp_conf.conn_max;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	3301      	adds	r3, #1
 800d172:	4a2e      	ldr	r2, [pc, #184]	; (800d22c <csp_conn_allocate+0xfc>)
 800d174:	7c12      	ldrb	r2, [r2, #16]
 800d176:	fb93 f1f2 	sdiv	r1, r3, r2
 800d17a:	fb01 f202 	mul.w	r2, r1, r2
 800d17e:	1a9b      	subs	r3, r3, r2
 800d180:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 800d182:	4b2b      	ldr	r3, [pc, #172]	; (800d230 <csp_conn_allocate+0x100>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	2154      	movs	r1, #84	; 0x54
 800d18a:	fb01 f303 	mul.w	r3, r1, r3
 800d18e:	4413      	add	r3, r2
 800d190:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d009      	beq.n	800d1ae <csp_conn_allocate+0x7e>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	3301      	adds	r3, #1
 800d19e:	60fb      	str	r3, [r7, #12]
 800d1a0:	4b22      	ldr	r3, [pc, #136]	; (800d22c <csp_conn_allocate+0xfc>)
 800d1a2:	7c1b      	ldrb	r3, [r3, #16]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	dbe0      	blt.n	800d16e <csp_conn_allocate+0x3e>
 800d1ac:	e000      	b.n	800d1b0 <csp_conn_allocate+0x80>
			break;
 800d1ae:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d01a      	beq.n	800d1ec <csp_conn_allocate+0xbc>
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	785b      	ldrb	r3, [r3, #1]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d116      	bne.n	800d1ec <csp_conn_allocate+0xbc>
		conn->idin.ext = 0;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	615a      	str	r2, [r3, #20]
		conn->type = type;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	79fa      	ldrb	r2, [r7, #7]
 800d1da:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	4b10      	ldr	r3, [pc, #64]	; (800d228 <csp_conn_allocate+0xf8>)
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	e001      	b.n	800d1f0 <csp_conn_allocate+0xc0>
	} else {
		// no free connections
		conn = NULL;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 800d1f0:	480a      	ldr	r0, [pc, #40]	; (800d21c <csp_conn_allocate+0xec>)
 800d1f2:	f7ff fb63 	bl	800c8bc <csp_bin_sem_post>

	if (conn == NULL) {
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10a      	bne.n	800d212 <csp_conn_allocate+0xe2>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 800d1fc:	4b08      	ldr	r3, [pc, #32]	; (800d220 <csp_conn_allocate+0xf0>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d006      	beq.n	800d212 <csp_conn_allocate+0xe2>
 800d204:	4b09      	ldr	r3, [pc, #36]	; (800d22c <csp_conn_allocate+0xfc>)
 800d206:	7c1b      	ldrb	r3, [r3, #16]
 800d208:	461a      	mov	r2, r3
 800d20a:	490a      	ldr	r1, [pc, #40]	; (800d234 <csp_conn_allocate+0x104>)
 800d20c:	2000      	movs	r0, #0
 800d20e:	f000 f9c5 	bl	800d59c <do_csp_debug>
	}

	return conn;
 800d212:	697b      	ldr	r3, [r7, #20]

}
 800d214:	4618      	mov	r0, r3
 800d216:	3718      	adds	r7, #24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	2000a954 	.word	0x2000a954
 800d220:	200001a0 	.word	0x200001a0
 800d224:	08013bcc 	.word	0x08013bcc
 800d228:	2000a960 	.word	0x2000a960
 800d22c:	2000a96c 	.word	0x2000a96c
 800d230:	2000a950 	.word	0x2000a950
 800d234:	08013be8 	.word	0x08013be8

0800d238 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 800d242:	2000      	movs	r0, #0
 800d244:	f7ff ff74 	bl	800d130 <csp_conn_allocate>
 800d248:	60f8      	str	r0, [r7, #12]

	if (conn) {
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00d      	beq.n	800d26c <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 800d25c:	f7ff fbd9 	bl	800ca12 <csp_get_ms>
 800d260:	4602      	mov	r2, r0
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7ff ff3a 	bl	800d0e0 <csp_conn_flush_rx_queue>
	}

	return conn;
 800d26c:	68fb      	ldr	r3, [r7, #12]

}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <csp_close>:

int csp_close(csp_conn_t * conn) {
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 800d27e:	2101      	movs	r1, #1
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 f805 	bl	800d290 <csp_conn_close>
 800d286:	4603      	mov	r3, r0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e060      	b.n	800d368 <csp_conn_close+0xd8>
	}

	if (conn->state == CONN_CLOSED) {
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	785b      	ldrb	r3, [r3, #1]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d109      	bne.n	800d2c2 <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 800d2ae:	4b30      	ldr	r3, [pc, #192]	; (800d370 <csp_conn_close+0xe0>)
 800d2b0:	795b      	ldrb	r3, [r3, #5]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d003      	beq.n	800d2be <csp_conn_close+0x2e>
 800d2b6:	492f      	ldr	r1, [pc, #188]	; (800d374 <csp_conn_close+0xe4>)
 800d2b8:	2005      	movs	r0, #5
 800d2ba:	f000 f96f 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NONE;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	e052      	b.n	800d368 <csp_conn_close+0xd8>
	}

#if (CSP_USE_RDP)
	/* Ensure RDP knows this connection is closing */
	if ((conn->idin.flags & CSP_FRDP) || (conn->idout.flags & CSP_FRDP)) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	791b      	ldrb	r3, [r3, #4]
 800d2c6:	f003 0302 	and.w	r3, r3, #2
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d105      	bne.n	800d2da <csp_conn_close+0x4a>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	7a1b      	ldrb	r3, [r3, #8]
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <csp_conn_close+0x60>
		if (csp_rdp_close(conn, closed_by) == CSP_ERR_AGAIN) {
 800d2da:	78fb      	ldrb	r3, [r7, #3]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f003 f882 	bl	80103e8 <csp_rdp_close>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	f113 0f0c 	cmn.w	r3, #12
 800d2ea:	d101      	bne.n	800d2f0 <csp_conn_close+0x60>
			return CSP_ERR_NONE;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	e03b      	b.n	800d368 <csp_conn_close+0xd8>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800d2f0:	f04f 31ff 	mov.w	r1, #4294967295
 800d2f4:	4820      	ldr	r0, [pc, #128]	; (800d378 <csp_conn_close+0xe8>)
 800d2f6:	f7ff fabb 	bl	800c870 <csp_bin_sem_wait>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d00a      	beq.n	800d316 <csp_conn_close+0x86>
		csp_log_error("Failed to lock conn array");
 800d300:	4b1b      	ldr	r3, [pc, #108]	; (800d370 <csp_conn_close+0xe0>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d003      	beq.n	800d310 <csp_conn_close+0x80>
 800d308:	491c      	ldr	r1, [pc, #112]	; (800d37c <csp_conn_close+0xec>)
 800d30a:	2000      	movs	r0, #0
 800d30c:	f000 f946 	bl	800d59c <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 800d310:	f06f 0302 	mvn.w	r3, #2
 800d314:	e028      	b.n	800d368 <csp_conn_close+0xd8>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff fedf 	bl	800d0e0 <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d011      	beq.n	800d34e <csp_conn_close+0xbe>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d10d      	bne.n	800d34e <csp_conn_close+0xbe>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	f403 5388 	and.w	r3, r3, #4352	; 0x1100
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d007      	beq.n	800d34e <csp_conn_close+0xbe>
		csp_queue_remove(conn->socket);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fa04 	bl	800c750 <csp_queue_remove>
		conn->socket = NULL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	611a      	str	r2, [r3, #16]
        }

	/* Reset RDP state */
#if (CSP_USE_RDP)
	if (conn->idin.flags & CSP_FRDP) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	791b      	ldrb	r3, [r3, #4]
 800d352:	f003 0302 	and.w	r3, r3, #2
 800d356:	2b00      	cmp	r3, #0
 800d358:	d002      	beq.n	800d360 <csp_conn_close+0xd0>
		csp_rdp_flush_all(conn);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f001 ff5a 	bl	800f214 <csp_rdp_flush_all>
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 800d360:	4805      	ldr	r0, [pc, #20]	; (800d378 <csp_conn_close+0xe8>)
 800d362:	f7ff faab 	bl	800c8bc <csp_bin_sem_post>

	return CSP_ERR_NONE;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	200001a0 	.word	0x200001a0
 800d374:	08013c04 	.word	0x08013c04
 800d378:	2000a954 	.word	0x2000a954
 800d37c:	08013bcc 	.word	0x08013bcc

0800d380 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint8_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	603b      	str	r3, [r7, #0]
 800d388:	4603      	mov	r3, r0
 800d38a:	71fb      	strb	r3, [r7, #7]
 800d38c:	460b      	mov	r3, r1
 800d38e:	71bb      	strb	r3, [r7, #6]
 800d390:	4613      	mov	r3, r2
 800d392:	717b      	strb	r3, [r7, #5]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 800d394:	4b7a      	ldr	r3, [pc, #488]	; (800d580 <csp_connect+0x200>)
 800d396:	69db      	ldr	r3, [r3, #28]
 800d398:	6a3a      	ldr	r2, [r7, #32]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	623b      	str	r3, [r7, #32]

	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	f003 0303 	and.w	r3, r3, #3
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	f362 1387 	bfi	r3, r2, #6, #2
 800d3ac:	73fb      	strb	r3, [r7, #15]
	incoming_id.dst = csp_conf.address;
 800d3ae:	4b74      	ldr	r3, [pc, #464]	; (800d580 <csp_connect+0x200>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	f003 031f 	and.w	r3, r3, #31
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	89fb      	ldrh	r3, [r7, #14]
 800d3ba:	f362 1308 	bfi	r3, r2, #4, #5
 800d3be:	81fb      	strh	r3, [r7, #14]
	incoming_id.src = dest;
 800d3c0:	79bb      	ldrb	r3, [r7, #6]
 800d3c2:	f003 031f 	and.w	r3, r3, #31
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	f362 0345 	bfi	r3, r2, #1, #5
 800d3ce:	73fb      	strb	r3, [r7, #15]
	incoming_id.sport = dport;
 800d3d0:	797b      	ldrb	r3, [r7, #5]
 800d3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	7b7b      	ldrb	r3, [r7, #13]
 800d3da:	f362 0305 	bfi	r3, r2, #0, #6
 800d3de:	737b      	strb	r3, [r7, #13]
	incoming_id.flags = 0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	733b      	strb	r3, [r7, #12]
	outgoing_id.pri = prio;
 800d3e4:	79fb      	ldrb	r3, [r7, #7]
 800d3e6:	f003 0303 	and.w	r3, r3, #3
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	7afb      	ldrb	r3, [r7, #11]
 800d3ee:	f362 1387 	bfi	r3, r2, #6, #2
 800d3f2:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dst = dest;
 800d3f4:	79bb      	ldrb	r3, [r7, #6]
 800d3f6:	f003 031f 	and.w	r3, r3, #31
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	897b      	ldrh	r3, [r7, #10]
 800d3fe:	f362 1308 	bfi	r3, r2, #4, #5
 800d402:	817b      	strh	r3, [r7, #10]
	outgoing_id.src = csp_conf.address;
 800d404:	4b5e      	ldr	r3, [pc, #376]	; (800d580 <csp_connect+0x200>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	f003 031f 	and.w	r3, r3, #31
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	7afb      	ldrb	r3, [r7, #11]
 800d410:	f362 0345 	bfi	r3, r2, #1, #5
 800d414:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dport = dport;
 800d416:	797b      	ldrb	r3, [r7, #5]
 800d418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	f362 3393 	bfi	r3, r2, #14, #6
 800d424:	60bb      	str	r3, [r7, #8]
	outgoing_id.flags = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	723b      	strb	r3, [r7, #8]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <csp_connect+0xbc>
		opts &= ~CSP_O_CRC32;
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d43a:	623b      	str	r3, [r7, #32]
	}

	if (opts & CSP_O_RDP) {
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	2b00      	cmp	r3, #0
 800d444:	d009      	beq.n	800d45a <csp_connect+0xda>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
 800d446:	7b3b      	ldrb	r3, [r7, #12]
 800d448:	f043 0302 	orr.w	r3, r3, #2
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	733b      	strb	r3, [r7, #12]
		outgoing_id.flags |= CSP_FRDP;
 800d450:	7a3b      	ldrb	r3, [r7, #8]
 800d452:	f043 0302 	orr.w	r3, r3, #2
 800d456:	b2db      	uxtb	r3, r3
 800d458:	723b      	strb	r3, [r7, #8]
		csp_log_error("Attempt to create RDP connection, but CSP was compiled without RDP support");
		return NULL;
#endif
	}

	if (opts & CSP_O_HMAC) {
 800d45a:	6a3b      	ldr	r3, [r7, #32]
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b00      	cmp	r3, #0
 800d462:	d009      	beq.n	800d478 <csp_connect+0xf8>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_log_error("Attempt to create HMAC authenticated connection, but CSP was compiled without HMAC support");
 800d464:	4b47      	ldr	r3, [pc, #284]	; (800d584 <csp_connect+0x204>)
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d003      	beq.n	800d474 <csp_connect+0xf4>
 800d46c:	4946      	ldr	r1, [pc, #280]	; (800d588 <csp_connect+0x208>)
 800d46e:	2000      	movs	r0, #0
 800d470:	f000 f894 	bl	800d59c <do_csp_debug>
		return NULL;
 800d474:	2300      	movs	r3, #0
 800d476:	e07f      	b.n	800d578 <csp_connect+0x1f8>
#endif
	}

	if (opts & CSP_O_XTEA) {
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	f003 0310 	and.w	r3, r3, #16
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d009      	beq.n	800d496 <csp_connect+0x116>
#if (CSP_USE_XTEA)
		outgoing_id.flags |= CSP_FXTEA;
		incoming_id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted connection, but CSP was compiled without XTEA support");
 800d482:	4b40      	ldr	r3, [pc, #256]	; (800d584 <csp_connect+0x204>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <csp_connect+0x112>
 800d48a:	4940      	ldr	r1, [pc, #256]	; (800d58c <csp_connect+0x20c>)
 800d48c:	2000      	movs	r0, #0
 800d48e:	f000 f885 	bl	800d59c <do_csp_debug>
		return NULL;
 800d492:	2300      	movs	r3, #0
 800d494:	e070      	b.n	800d578 <csp_connect+0x1f8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 800d496:	6a3b      	ldr	r3, [r7, #32]
 800d498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d009      	beq.n	800d4b4 <csp_connect+0x134>
#if (CSP_USE_CRC32)
		outgoing_id.flags |= CSP_FCRC32;
		incoming_id.flags |= CSP_FCRC32;
#else
		csp_log_error("Attempt to create CRC32 validated connection, but CSP was compiled without CRC32 support");
 800d4a0:	4b38      	ldr	r3, [pc, #224]	; (800d584 <csp_connect+0x204>)
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <csp_connect+0x130>
 800d4a8:	4939      	ldr	r1, [pc, #228]	; (800d590 <csp_connect+0x210>)
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	f000 f876 	bl	800d59c <do_csp_debug>
		return NULL;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	e061      	b.n	800d578 <csp_connect+0x1f8>
#endif
	}

	/* Find an unused ephemeral port */
	csp_conn_t * conn = NULL;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	617b      	str	r3, [r7, #20]

	/* Wait for sport lock - note that csp_conn_new(..) is called inside the lock! */
	if (csp_bin_sem_wait(&sport_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800d4b8:	f04f 31ff 	mov.w	r1, #4294967295
 800d4bc:	4835      	ldr	r0, [pc, #212]	; (800d594 <csp_connect+0x214>)
 800d4be:	f7ff f9d7 	bl	800c870 <csp_bin_sem_wait>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d001      	beq.n	800d4cc <csp_connect+0x14c>
		return NULL;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	e055      	b.n	800d578 <csp_connect+0x1f8>
	}

	const uint8_t start = sport;
 800d4cc:	4b32      	ldr	r3, [pc, #200]	; (800d598 <csp_connect+0x218>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	74fb      	strb	r3, [r7, #19]
	while (++sport != start) {
 800d4d2:	e02a      	b.n	800d52a <csp_connect+0x1aa>
		if (sport > CSP_ID_PORT_MAX)
 800d4d4:	4b30      	ldr	r3, [pc, #192]	; (800d598 <csp_connect+0x218>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b3f      	cmp	r3, #63	; 0x3f
 800d4da:	d905      	bls.n	800d4e8 <csp_connect+0x168>
			sport = csp_conf.port_max_bind + 1;
 800d4dc:	4b28      	ldr	r3, [pc, #160]	; (800d580 <csp_connect+0x200>)
 800d4de:	7cdb      	ldrb	r3, [r3, #19]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	4b2c      	ldr	r3, [pc, #176]	; (800d598 <csp_connect+0x218>)
 800d4e6:	701a      	strb	r2, [r3, #0]

		outgoing_id.sport = sport;
 800d4e8:	4b2b      	ldr	r3, [pc, #172]	; (800d598 <csp_connect+0x218>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	7a7b      	ldrb	r3, [r7, #9]
 800d4f4:	f362 0305 	bfi	r3, r2, #0, #6
 800d4f8:	727b      	strb	r3, [r7, #9]
		incoming_id.dport = sport;
 800d4fa:	4b27      	ldr	r3, [pc, #156]	; (800d598 <csp_connect+0x218>)
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d502:	b2da      	uxtb	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f362 3393 	bfi	r3, r2, #14, #6
 800d50a:	60fb      	str	r3, [r7, #12]

		/* Match on destination port of _incoming_ identifier */
		if (csp_conn_find(incoming_id.ext, CSP_ID_DPORT_MASK) == NULL) {
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f44f 217c 	mov.w	r1, #1032192	; 0xfc000
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff fdaa 	bl	800d06c <csp_conn_find>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d105      	bne.n	800d52a <csp_connect+0x1aa>
			/* Break - we found an unused ephemeral port
                           allocate connection while locked to mark port in use */
			conn = csp_conn_new(incoming_id, outgoing_id);
 800d51e:	68b9      	ldr	r1, [r7, #8]
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f7ff fe89 	bl	800d238 <csp_conn_new>
 800d526:	6178      	str	r0, [r7, #20]
			break;
 800d528:	e00a      	b.n	800d540 <csp_connect+0x1c0>
	while (++sport != start) {
 800d52a:	4b1b      	ldr	r3, [pc, #108]	; (800d598 <csp_connect+0x218>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	3301      	adds	r3, #1
 800d530:	b2da      	uxtb	r2, r3
 800d532:	4b19      	ldr	r3, [pc, #100]	; (800d598 <csp_connect+0x218>)
 800d534:	701a      	strb	r2, [r3, #0]
 800d536:	4b18      	ldr	r3, [pc, #96]	; (800d598 <csp_connect+0x218>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	7cfa      	ldrb	r2, [r7, #19]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d1c9      	bne.n	800d4d4 <csp_connect+0x154>
		}
	}

	/* Post sport lock */
	csp_bin_sem_post(&sport_lock);
 800d540:	4814      	ldr	r0, [pc, #80]	; (800d594 <csp_connect+0x214>)
 800d542:	f7ff f9bb 	bl	800c8bc <csp_bin_sem_post>

	if (conn == NULL) {
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <csp_connect+0x1d0>
		return NULL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	e013      	b.n	800d578 <csp_connect+0x1f8>
	}

	/* Set connection options */
	conn->opts = opts;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	6a3a      	ldr	r2, [r7, #32]
 800d554:	619a      	str	r2, [r3, #24]

#if (CSP_USE_RDP)
	/* Call Transport Layer connect */
	if (outgoing_id.flags & CSP_FRDP) {
 800d556:	7a3b      	ldrb	r3, [r7, #8]
 800d558:	f003 0302 	and.w	r3, r3, #2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00a      	beq.n	800d576 <csp_connect+0x1f6>
		/* If the transport layer has failed to connect
		 * deallocate connection structure again and return NULL */
		if (csp_rdp_connect(conn) != CSP_ERR_NONE) {
 800d560:	6978      	ldr	r0, [r7, #20]
 800d562:	f002 fcb9 	bl	800fed8 <csp_rdp_connect>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d004      	beq.n	800d576 <csp_connect+0x1f6>
			csp_close(conn);
 800d56c:	6978      	ldr	r0, [r7, #20]
 800d56e:	f7ff fe82 	bl	800d276 <csp_close>
			return NULL;
 800d572:	2300      	movs	r3, #0
 800d574:	e000      	b.n	800d578 <csp_connect+0x1f8>
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 800d576:	697b      	ldr	r3, [r7, #20]

}
 800d578:	4618      	mov	r0, r3
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	2000a96c 	.word	0x2000a96c
 800d584:	200001a0 	.word	0x200001a0
 800d588:	08013c18 	.word	0x08013c18
 800d58c:	08013c74 	.word	0x08013c74
 800d590:	08013ccc 	.word	0x08013ccc
 800d594:	2000a95c 	.word	0x2000a95c
 800d598:	2000a958 	.word	0x2000a958

0800d59c <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 800d59c:	b40e      	push	{r1, r2, r3}
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 800d5a8:	23f0      	movs	r3, #240	; 0xf0
 800d5aa:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	2b06      	cmp	r3, #6
 800d5b0:	d84f      	bhi.n	800d652 <do_csp_debug+0xb6>
 800d5b2:	79fb      	ldrb	r3, [r7, #7]
 800d5b4:	4a2b      	ldr	r2, [pc, #172]	; (800d664 <do_csp_debug+0xc8>)
 800d5b6:	5cd3      	ldrb	r3, [r2, r3]
 800d5b8:	f083 0301 	eor.w	r3, r3, #1
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d147      	bne.n	800d652 <do_csp_debug+0xb6>
		return;

	switch(level) {
 800d5c2:	79fb      	ldrb	r3, [r7, #7]
 800d5c4:	2b06      	cmp	r3, #6
 800d5c6:	d846      	bhi.n	800d656 <do_csp_debug+0xba>
 800d5c8:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <do_csp_debug+0x34>)
 800d5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ce:	bf00      	nop
 800d5d0:	0800d5f3 	.word	0x0800d5f3
 800d5d4:	0800d5f9 	.word	0x0800d5f9
 800d5d8:	0800d5ed 	.word	0x0800d5ed
 800d5dc:	0800d5ff 	.word	0x0800d5ff
 800d5e0:	0800d605 	.word	0x0800d605
 800d5e4:	0800d60b 	.word	0x0800d60b
 800d5e8:	0800d611 	.word	0x0800d611
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 800d5ec:	2313      	movs	r3, #19
 800d5ee:	60fb      	str	r3, [r7, #12]
		break;
 800d5f0:	e011      	b.n	800d616 <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 800d5f2:	2312      	movs	r3, #18
 800d5f4:	60fb      	str	r3, [r7, #12]
		break;
 800d5f6:	e00e      	b.n	800d616 <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 800d5f8:	2314      	movs	r3, #20
 800d5fa:	60fb      	str	r3, [r7, #12]
		break;
 800d5fc:	e00b      	b.n	800d616 <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 800d5fe:	2306      	movs	r3, #6
 800d600:	60fb      	str	r3, [r7, #12]
		break;
 800d602:	e008      	b.n	800d616 <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 800d604:	2303      	movs	r3, #3
 800d606:	60fb      	str	r3, [r7, #12]
		break;
 800d608:	e005      	b.n	800d616 <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 800d60a:	2305      	movs	r3, #5
 800d60c:	60fb      	str	r3, [r7, #12]
		break;
 800d60e:	e002      	b.n	800d616 <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 800d610:	2307      	movs	r3, #7
 800d612:	60fb      	str	r3, [r7, #12]
		break;
 800d614:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 800d616:	f107 0320 	add.w	r3, r7, #32
 800d61a:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 800d61c:	4b12      	ldr	r3, [pc, #72]	; (800d668 <do_csp_debug+0xcc>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d006      	beq.n	800d632 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 800d624:	4b10      	ldr	r3, [pc, #64]	; (800d668 <do_csp_debug+0xcc>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	79f8      	ldrb	r0, [r7, #7]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	69f9      	ldr	r1, [r7, #28]
 800d62e:	4798      	blx	r3
 800d630:	e012      	b.n	800d658 <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	b2db      	uxtb	r3, r3
 800d636:	4618      	mov	r0, r3
 800d638:	f7ff f962 	bl	800c900 <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 800d63c:	68b9      	ldr	r1, [r7, #8]
 800d63e:	69f8      	ldr	r0, [r7, #28]
 800d640:	f004 f8a0 	bl	8011784 <viprintf>
#endif
		printf("\r\n");
 800d644:	4809      	ldr	r0, [pc, #36]	; (800d66c <do_csp_debug+0xd0>)
 800d646:	f003 ff15 	bl	8011474 <puts>
		csp_sys_set_color(COLOR_RESET);
 800d64a:	20f0      	movs	r0, #240	; 0xf0
 800d64c:	f7ff f958 	bl	800c900 <csp_sys_set_color>
 800d650:	e002      	b.n	800d658 <do_csp_debug+0xbc>
		return;
 800d652:	bf00      	nop
 800d654:	e000      	b.n	800d658 <do_csp_debug+0xbc>
		return;
 800d656:	bf00      	nop
	}

	va_end(args);
}
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d660:	b003      	add	sp, #12
 800d662:	4770      	bx	lr
 800d664:	200001a0 	.word	0x200001a0
 800d668:	2000a964 	.word	0x2000a964
 800d66c:	08013d7c 	.word	0x08013d7c

0800d670 <csp_debug_set_level>:

void csp_debug_set_level(csp_debug_level_t level, bool value) {
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	460a      	mov	r2, r1
 800d67a:	71fb      	strb	r3, [r7, #7]
 800d67c:	4613      	mov	r3, r2
 800d67e:	71bb      	strb	r3, [r7, #6]

	if (level <= CSP_LOCK) {
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	2b06      	cmp	r3, #6
 800d684:	d803      	bhi.n	800d68e <csp_debug_set_level+0x1e>
		csp_debug_level_enabled[level] = value;
 800d686:	79fb      	ldrb	r3, [r7, #7]
 800d688:	4904      	ldr	r1, [pc, #16]	; (800d69c <csp_debug_set_level+0x2c>)
 800d68a:	79ba      	ldrb	r2, [r7, #6]
 800d68c:	54ca      	strb	r2, [r1, r3]
	}
}
 800d68e:	bf00      	nop
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	200001a0 	.word	0x200001a0

0800d6a0 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 800d6aa:	88fb      	ldrh	r3, [r7, #6]
 800d6ac:	0a1b      	lsrs	r3, r3, #8
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	b21a      	sxth	r2, r3
			((h16 & 0x00ff) << 8));
 800d6b2:	88fb      	ldrh	r3, [r7, #6]
 800d6b4:	021b      	lsls	r3, r3, #8
	return (((h16 & 0xff00) >> 8) |
 800d6b6:	b21b      	sxth	r3, r3
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	b21b      	sxth	r3, r3
 800d6bc:	b29b      	uxth	r3, r3
#endif
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b082      	sub	sp, #8
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 800d6d4:	88fb      	ldrh	r3, [r7, #6]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff ffe2 	bl	800d6a0 <csp_hton16>
 800d6dc:	4603      	mov	r3, r0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 800d6e6:	b480      	push	{r7}
 800d6e8:	b083      	sub	sp, #12
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 800d6f6:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	021b      	lsls	r3, r3, #8
 800d6fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			((h32 & 0x000000ff) << 24) |
 800d700:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	0a1b      	lsrs	r3, r3, #8
 800d706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			((h32 & 0x0000ff00) <<  8) |
 800d70a:	4313      	orrs	r3, r2
#endif
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7ff ffe0 	bl	800d6e6 <csp_hton32>
 800d726:	4603      	mov	r3, r0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 800d73e:	4b18      	ldr	r3, [pc, #96]	; (800d7a0 <csp_iflist_add+0x70>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 800d746:	4a16      	ldr	r2, [pc, #88]	; (800d7a0 <csp_iflist_add+0x70>)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6013      	str	r3, [r2, #0]
 800d74c:	e022      	b.n	800d794 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 800d74e:	2300      	movs	r3, #0
 800d750:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 800d752:	4b13      	ldr	r3, [pc, #76]	; (800d7a0 <csp_iflist_add+0x70>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	60bb      	str	r3, [r7, #8]
 800d758:	e016      	b.n	800d788 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 800d75a:	68ba      	ldr	r2, [r7, #8]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d00a      	beq.n	800d778 <csp_iflist_add+0x48>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6818      	ldr	r0, [r3, #0]
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	220a      	movs	r2, #10
 800d76c:	4619      	mov	r1, r3
 800d76e:	f003 ffd3 	bl	8011718 <strncasecmp>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d102      	bne.n	800d77e <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 800d778:	f06f 0306 	mvn.w	r3, #6
 800d77c:	e00b      	b.n	800d796 <csp_iflist_add+0x66>
			}
			last = i;
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	60bb      	str	r3, [r7, #8]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1e5      	bne.n	800d75a <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	return CSP_ERR_NONE;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	2000a968 	.word	0x2000a968

0800d7a4 <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	6039      	str	r1, [r7, #0]
 800d7ae:	71fb      	strb	r3, [r7, #7]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 800d7b4:	79bb      	ldrb	r3, [r7, #6]
 800d7b6:	79f8      	ldrb	r0, [r7, #7]
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	2105      	movs	r1, #5
 800d7bc:	f000 ff4e 	bl	800e65c <csp_rtable_set>
 800d7c0:	4603      	mov	r3, r0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
	...

0800d7cc <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 800d7d4:	f7fe ff62 	bl	800c69c <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 800d7d8:	2220      	movs	r2, #32
 800d7da:	6879      	ldr	r1, [r7, #4]
 800d7dc:	481b      	ldr	r0, [pc, #108]	; (800d84c <csp_init+0x80>)
 800d7de:	f003 f84d 	bl	801087c <memcpy>

	int ret = csp_buffer_init();
 800d7e2:	f7ff f92b 	bl	800ca3c <csp_buffer_init>
 800d7e6:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <csp_init+0x26>
		return ret;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	e027      	b.n	800d842 <csp_init+0x76>
	}

	ret = csp_conn_init();
 800d7f2:	f7ff fb77 	bl	800cee4 <csp_conn_init>
 800d7f6:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d001      	beq.n	800d802 <csp_init+0x36>
		return ret;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	e01f      	b.n	800d842 <csp_init+0x76>
	}

	ret = csp_port_init();
 800d802:	f000 f9d1 	bl	800dba8 <csp_port_init>
 800d806:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <csp_init+0x46>
		return ret;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	e017      	b.n	800d842 <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 800d812:	f000 f9e3 	bl	800dbdc <csp_qfifo_init>
 800d816:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <csp_init+0x56>
		return ret;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	e00f      	b.n	800d842 <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 800d822:	480b      	ldr	r0, [pc, #44]	; (800d850 <csp_init+0x84>)
 800d824:	f7ff ff84 	bl	800d730 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 800d828:	4b08      	ldr	r3, [pc, #32]	; (800d84c <csp_init+0x80>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	22ff      	movs	r2, #255	; 0xff
 800d82e:	4908      	ldr	r1, [pc, #32]	; (800d850 <csp_init+0x84>)
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff ffb7 	bl	800d7a4 <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 800d836:	22ff      	movs	r2, #255	; 0xff
 800d838:	4905      	ldr	r1, [pc, #20]	; (800d850 <csp_init+0x84>)
 800d83a:	2020      	movs	r0, #32
 800d83c:	f7ff ffb2 	bl	800d7a4 <csp_route_set>

	return CSP_ERR_NONE;
 800d840:	2300      	movs	r3, #0

}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	2000a96c 	.word	0x2000a96c
 800d850:	200001a8 	.word	0x200001a8

0800d854 <csp_read>:

	return NULL;

}

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d003      	beq.n	800d870 <csp_read+0x1c>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	785b      	ldrb	r3, [r3, #1]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d001      	beq.n	800d874 <csp_read+0x20>
		return NULL;
 800d870:	2300      	movs	r3, #0
 800d872:	e02b      	b.n	800d8cc <csp_read+0x78>
	}

#if (CSP_USE_RDP)
        // RDP: timeout can either be 0 (for no hang poll/check) or minimum the "connection timeout"
        if (timeout && (conn->idin.flags & CSP_FRDP) && (timeout < conn->rdp.conn_timeout)) {
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00d      	beq.n	800d896 <csp_read+0x42>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	791b      	ldrb	r3, [r3, #4]
 800d87e:	f003 0302 	and.w	r3, r3, #2
 800d882:	2b00      	cmp	r3, #0
 800d884:	d007      	beq.n	800d896 <csp_read+0x42>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88a:	683a      	ldr	r2, [r7, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d202      	bcs.n	800d896 <csp_read+0x42>
            timeout = conn->rdp.conn_timeout;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d894:	603b      	str	r3, [r7, #0]
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	f107 010c 	add.w	r1, r7, #12
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fe ff85 	bl	800c7b0 <csp_queue_dequeue>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d001      	beq.n	800d8b0 <csp_read+0x5c>
		return NULL;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e00d      	b.n	800d8cc <csp_read+0x78>
	}
#endif

#if (CSP_USE_RDP)
	/* Packet read could trigger ACK transmission */
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	791b      	ldrb	r3, [r3, #4]
 800d8b4:	f003 0302 	and.w	r3, r3, #2
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d006      	beq.n	800d8ca <csp_read+0x76>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <csp_read+0x76>
		csp_rdp_check_ack(conn);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f001 fd21 	bl	800f30c <csp_rdp_check_ack>
	}
#endif

	return packet;
 800d8ca:	68fb      	ldr	r3, [r7, #12]

}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 800d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8d6:	b08f      	sub	sp, #60	; 0x3c
 800d8d8:	af08      	add	r7, sp, #32
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d109      	bne.n	800d8fc <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 800d8e8:	4b66      	ldr	r3, [pc, #408]	; (800da84 <csp_send_direct+0x1b0>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 80c0 	beq.w	800da72 <csp_send_direct+0x19e>
 800d8f2:	4965      	ldr	r1, [pc, #404]	; (800da88 <csp_send_direct+0x1b4>)
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	f7ff fe51 	bl	800d59c <do_csp_debug>
		goto err;
 800d8fa:	e0ba      	b.n	800da72 <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10f      	bne.n	800d922 <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 800d902:	4b60      	ldr	r3, [pc, #384]	; (800da84 <csp_send_direct+0x1b0>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 80b5 	beq.w	800da76 <csp_send_direct+0x1a2>
 800d90c:	89fb      	ldrh	r3, [r7, #14]
 800d90e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800d912:	b2db      	uxtb	r3, r3
 800d914:	461a      	mov	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	495c      	ldr	r1, [pc, #368]	; (800da8c <csp_send_direct+0x1b8>)
 800d91a:	2000      	movs	r0, #0
 800d91c:	f7ff fe3e 	bl	800d59c <do_csp_debug>
		goto err;
 800d920:	e0a9      	b.n	800da76 <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 800d928:	4b56      	ldr	r3, [pc, #344]	; (800da84 <csp_send_direct+0x1b0>)
 800d92a:	791b      	ldrb	r3, [r3, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d037      	beq.n	800d9a0 <csp_send_direct+0xcc>
 800d930:	7bfb      	ldrb	r3, [r7, #15]
 800d932:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800d936:	b2db      	uxtb	r3, r3
 800d938:	469c      	mov	ip, r3
 800d93a:	89fb      	ldrh	r3, [r7, #14]
 800d93c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800d940:	b2db      	uxtb	r3, r3
 800d942:	469e      	mov	lr, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	4619      	mov	r1, r3
 800d94e:	7b7b      	ldrb	r3, [r7, #13]
 800d950:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800d954:	b2db      	uxtb	r3, r3
 800d956:	4618      	mov	r0, r3
 800d958:	7bfb      	ldrb	r3, [r7, #15]
 800d95a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	461c      	mov	r4, r3
 800d962:	7b3b      	ldrb	r3, [r7, #12]
 800d964:	461d      	mov	r5, r3
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	895b      	ldrh	r3, [r3, #10]
 800d96a:	461e      	mov	r6, r3
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	7912      	ldrb	r2, [r2, #4]
 800d974:	2aff      	cmp	r2, #255	; 0xff
 800d976:	d002      	beq.n	800d97e <csp_send_direct+0xaa>
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	7912      	ldrb	r2, [r2, #4]
 800d97c:	e003      	b.n	800d986 <csp_send_direct+0xb2>
 800d97e:	89fa      	ldrh	r2, [r7, #14]
 800d980:	f3c2 1204 	ubfx	r2, r2, #4, #5
 800d984:	b2d2      	uxtb	r2, r2
 800d986:	9206      	str	r2, [sp, #24]
 800d988:	9305      	str	r3, [sp, #20]
 800d98a:	9604      	str	r6, [sp, #16]
 800d98c:	9503      	str	r5, [sp, #12]
 800d98e:	9402      	str	r4, [sp, #8]
 800d990:	9001      	str	r0, [sp, #4]
 800d992:	9100      	str	r1, [sp, #0]
 800d994:	4673      	mov	r3, lr
 800d996:	4662      	mov	r2, ip
 800d998:	493d      	ldr	r1, [pc, #244]	; (800da90 <csp_send_direct+0x1bc>)
 800d99a:	2004      	movs	r0, #4
 800d99c:	f7ff fdfe 	bl	800d59c <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 800d9a6:	7bfb      	ldrb	r3, [r7, #15]
 800d9a8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	4b38      	ldr	r3, [pc, #224]	; (800da94 <csp_send_direct+0x1c0>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d12d      	bne.n	800da14 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 800d9b8:	7b3b      	ldrb	r3, [r7, #12]
 800d9ba:	f003 0308 	and.w	r3, r3, #8
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d008      	beq.n	800d9d4 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 800d9c2:	4b30      	ldr	r3, [pc, #192]	; (800da84 <csp_send_direct+0x1b0>)
 800d9c4:	785b      	ldrb	r3, [r3, #1]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d046      	beq.n	800da58 <csp_send_direct+0x184>
 800d9ca:	4933      	ldr	r1, [pc, #204]	; (800da98 <csp_send_direct+0x1c4>)
 800d9cc:	2001      	movs	r0, #1
 800d9ce:	f7ff fde5 	bl	800d59c <do_csp_debug>
			goto tx_err;
 800d9d2:	e041      	b.n	800da58 <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 800d9d4:	7b3b      	ldrb	r3, [r7, #12]
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00c      	beq.n	800d9f8 <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 800d9de:	4b29      	ldr	r3, [pc, #164]	; (800da84 <csp_send_direct+0x1b0>)
 800d9e0:	785b      	ldrb	r3, [r3, #1]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <csp_send_direct+0x11a>
 800d9e6:	492d      	ldr	r1, [pc, #180]	; (800da9c <csp_send_direct+0x1c8>)
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	f7ff fdd7 	bl	800d59c <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 800d9ee:	7b3b      	ldrb	r3, [r7, #12]
 800d9f0:	f023 0301 	bic.w	r3, r3, #1
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 800d9f8:	7b3b      	ldrb	r3, [r7, #12]
 800d9fa:	f003 0304 	and.w	r3, r3, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d008      	beq.n	800da14 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 800da02:	4b20      	ldr	r3, [pc, #128]	; (800da84 <csp_send_direct+0x1b0>)
 800da04:	785b      	ldrb	r3, [r3, #1]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d028      	beq.n	800da5c <csp_send_direct+0x188>
 800da0a:	4925      	ldr	r1, [pc, #148]	; (800daa0 <csp_send_direct+0x1cc>)
 800da0c:	2001      	movs	r0, #1
 800da0e:	f7ff fdc5 	bl	800d59c <do_csp_debug>
			goto tx_err;
 800da12:	e023      	b.n	800da5c <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	895b      	ldrh	r3, [r3, #10]
 800da18:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	8a1b      	ldrh	r3, [r3, #16]
 800da1e:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 800da20:	8a3b      	ldrh	r3, [r7, #16]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d003      	beq.n	800da2e <csp_send_direct+0x15a>
 800da26:	8a7a      	ldrh	r2, [r7, #18]
 800da28:	8a3b      	ldrh	r3, [r7, #16]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d818      	bhi.n	800da60 <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	68b9      	ldr	r1, [r7, #8]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	4798      	blx	r3
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d112      	bne.n	800da64 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da4c:	8a7b      	ldrh	r3, [r7, #18]
 800da4e:	441a      	add	r2, r3
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	631a      	str	r2, [r3, #48]	; 0x30
	return CSP_ERR_NONE;
 800da54:	2300      	movs	r3, #0
 800da56:	e011      	b.n	800da7c <csp_send_direct+0x1a8>
			goto tx_err;
 800da58:	bf00      	nop
 800da5a:	e004      	b.n	800da66 <csp_send_direct+0x192>
			goto tx_err;
 800da5c:	bf00      	nop
 800da5e:	e002      	b.n	800da66 <csp_send_direct+0x192>
		goto tx_err;
 800da60:	bf00      	nop
 800da62:	e000      	b.n	800da66 <csp_send_direct+0x192>
		goto tx_err;
 800da64:	bf00      	nop

tx_err:
	ifout->tx_error++;
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	69db      	ldr	r3, [r3, #28]
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	61da      	str	r2, [r3, #28]
 800da70:	e002      	b.n	800da78 <csp_send_direct+0x1a4>
		goto err;
 800da72:	bf00      	nop
 800da74:	e000      	b.n	800da78 <csp_send_direct+0x1a4>
		goto err;
 800da76:	bf00      	nop
err:
	return CSP_ERR_TX;
 800da78:	f06f 0309 	mvn.w	r3, #9

}
 800da7c:	4618      	mov	r0, r3
 800da7e:	371c      	adds	r7, #28
 800da80:	46bd      	mov	sp, r7
 800da82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da84:	200001a0 	.word	0x200001a0
 800da88:	08013ea4 	.word	0x08013ea4
 800da8c:	08013ecc 	.word	0x08013ecc
 800da90:	08013eec 	.word	0x08013eec
 800da94:	2000a96c 	.word	0x2000a96c
 800da98:	08013f30 	.word	0x08013f30
 800da9c:	08013f90 	.word	0x08013f90
 800daa0:	08013ff8 	.word	0x08013ff8

0800daa4 <csp_send>:

int csp_send(csp_conn_t * conn, csp_packet_t * packet, uint32_t timeout) {
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]

	if ((conn == NULL) || (packet == NULL) || (conn->state != CONN_OPEN)) {
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d006      	beq.n	800dac4 <csp_send+0x20>
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d003      	beq.n	800dac4 <csp_send+0x20>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	785b      	ldrb	r3, [r3, #1]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d009      	beq.n	800dad8 <csp_send+0x34>
		csp_log_error("Invalid call to csp_send");
 800dac4:	4b19      	ldr	r3, [pc, #100]	; (800db2c <csp_send+0x88>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <csp_send+0x30>
 800dacc:	4918      	ldr	r1, [pc, #96]	; (800db30 <csp_send+0x8c>)
 800dace:	2000      	movs	r0, #0
 800dad0:	f7ff fd64 	bl	800d59c <do_csp_debug>
		return 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	e024      	b.n	800db22 <csp_send+0x7e>
	}

#if (CSP_USE_RDP)
	if (conn->idout.flags & CSP_FRDP) {
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	7a1b      	ldrb	r3, [r3, #8]
 800dadc:	f003 0302 	and.w	r3, r3, #2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d008      	beq.n	800daf6 <csp_send+0x52>
		if (csp_rdp_send(conn, packet) != CSP_ERR_NONE) {
 800dae4:	68b9      	ldr	r1, [r7, #8]
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f002 fad8 	bl	801009c <csp_rdp_send>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <csp_send+0x52>
			return 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	e015      	b.n	800db22 <csp_send+0x7e>
		}
	}
#endif

	int ret = csp_send_direct(conn->idout, packet, csp_rtable_find_route(conn->idout.dst), timeout);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	895b      	ldrh	r3, [r3, #10]
 800dafa:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	4618      	mov	r0, r3
 800db02:	f000 fe4d 	bl	800e7a0 <csp_rtable_find_route>
 800db06:	4602      	mov	r2, r0
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	6880      	ldr	r0, [r0, #8]
 800db10:	f7ff fee0 	bl	800d8d4 <csp_send_direct>
 800db14:	6178      	str	r0, [r7, #20]

	return (ret == CSP_ERR_NONE) ? 1 : 0;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	bf0c      	ite	eq
 800db1c:	2301      	moveq	r3, #1
 800db1e:	2300      	movne	r3, #0
 800db20:	b2db      	uxtb	r3, r3

}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	200001a0 	.word	0x200001a0
 800db30:	0801405c 	.word	0x0801405c

0800db34 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 800db3c:	4b18      	ldr	r3, [pc, #96]	; (800dba0 <csp_port_get_socket+0x6c>)
 800db3e:	7cdb      	ldrb	r3, [r3, #19]
 800db40:	461a      	mov	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4293      	cmp	r3, r2
 800db46:	d901      	bls.n	800db4c <csp_port_get_socket+0x18>
		return NULL;
 800db48:	2300      	movs	r3, #0
 800db4a:	e022      	b.n	800db92 <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 800db4c:	4b15      	ldr	r3, [pc, #84]	; (800dba4 <csp_port_get_socket+0x70>)
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	4413      	add	r3, r2
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d106      	bne.n	800db6a <csp_port_get_socket+0x36>
		return ports[port].socket;
 800db5c:	4b11      	ldr	r3, [pc, #68]	; (800dba4 <csp_port_get_socket+0x70>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	4413      	add	r3, r2
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	e013      	b.n	800db92 <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 800db6a:	4b0e      	ldr	r3, [pc, #56]	; (800dba4 <csp_port_get_socket+0x70>)
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	4b0c      	ldr	r3, [pc, #48]	; (800dba0 <csp_port_get_socket+0x6c>)
 800db70:	7cdb      	ldrb	r3, [r3, #19]
 800db72:	3301      	adds	r3, #1
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	4413      	add	r3, r2
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d108      	bne.n	800db90 <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 800db7e:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <csp_port_get_socket+0x70>)
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	4b07      	ldr	r3, [pc, #28]	; (800dba0 <csp_port_get_socket+0x6c>)
 800db84:	7cdb      	ldrb	r3, [r3, #19]
 800db86:	3301      	adds	r3, #1
 800db88:	00db      	lsls	r3, r3, #3
 800db8a:	4413      	add	r3, r2
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	e000      	b.n	800db92 <csp_port_get_socket+0x5e>
	}

	return NULL;
 800db90:	2300      	movs	r3, #0

}
 800db92:	4618      	mov	r0, r3
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	2000a96c 	.word	0x2000a96c
 800dba4:	2000a98c 	.word	0x2000a98c

0800dba8 <csp_port_init>:

int csp_port_init(void) {
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 800dbac:	4b09      	ldr	r3, [pc, #36]	; (800dbd4 <csp_port_init+0x2c>)
 800dbae:	7cdb      	ldrb	r3, [r3, #19]
 800dbb0:	3302      	adds	r3, #2
 800dbb2:	2108      	movs	r1, #8
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fe fd95 	bl	800c6e4 <csp_calloc>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	4a06      	ldr	r2, [pc, #24]	; (800dbd8 <csp_port_init+0x30>)
 800dbbe:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 800dbc0:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <csp_port_init+0x30>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d102      	bne.n	800dbce <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 800dbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbcc:	e000      	b.n	800dbd0 <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 800dbce:	2300      	movs	r3, #0

}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	2000a96c 	.word	0x2000a96c
 800dbd8:	2000a98c 	.word	0x2000a98c

0800dbdc <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	607b      	str	r3, [r7, #4]
 800dbe6:	e01c      	b.n	800dc22 <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 800dbe8:	4a12      	ldr	r2, [pc, #72]	; (800dc34 <csp_qfifo_init+0x58>)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d113      	bne.n	800dc1c <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 800dbf4:	4b10      	ldr	r3, [pc, #64]	; (800dc38 <csp_qfifo_init+0x5c>)
 800dbf6:	7c9b      	ldrb	r3, [r3, #18]
 800dbf8:	2108      	movs	r1, #8
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe fd98 	bl	800c730 <csp_queue_create>
 800dc00:	4602      	mov	r2, r0
 800dc02:	490c      	ldr	r1, [pc, #48]	; (800dc34 <csp_qfifo_init+0x58>)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 800dc0a:	4a0a      	ldr	r2, [pc, #40]	; (800dc34 <csp_qfifo_init+0x58>)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d102      	bne.n	800dc1c <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 800dc16:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1a:	e006      	b.n	800dc2a <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	607b      	str	r3, [r7, #4]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	dddf      	ble.n	800dbe8 <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 800dc28:	2300      	movs	r3, #0

}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	2000a990 	.word	0x2000a990
 800dc38:	2000a96c 	.word	0x2000a96c

0800dc3c <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 800dc44:	4b08      	ldr	r3, [pc, #32]	; (800dc68 <csp_qfifo_read+0x2c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2264      	movs	r2, #100	; 0x64
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fe fdaf 	bl	800c7b0 <csp_queue_dequeue>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d002      	beq.n	800dc5e <csp_qfifo_read+0x22>
		return CSP_ERR_TIMEDOUT;
 800dc58:	f06f 0302 	mvn.w	r3, #2
 800dc5c:	e000      	b.n	800dc60 <csp_qfifo_read+0x24>
#endif

	return CSP_ERR_NONE;
 800dc5e:	2300      	movs	r3, #0

}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	2000a990 	.word	0x2000a990

0800dc6c <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b088      	sub	sp, #32
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10b      	bne.n	800dc96 <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d15f      	bne.n	800dd44 <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 800dc84:	4b31      	ldr	r3, [pc, #196]	; (800dd4c <csp_qfifo_write+0xe0>)
 800dc86:	785b      	ldrb	r3, [r3, #1]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d05b      	beq.n	800dd44 <csp_qfifo_write+0xd8>
 800dc8c:	4930      	ldr	r1, [pc, #192]	; (800dd50 <csp_qfifo_write+0xe4>)
 800dc8e:	2001      	movs	r0, #1
 800dc90:	f7ff fc84 	bl	800d59c <do_csp_debug>
		}
		return;
 800dc94:	e056      	b.n	800dd44 <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d115      	bne.n	800dcc8 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d107      	bne.n	800dcb2 <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 800dca2:	4b2a      	ldr	r3, [pc, #168]	; (800dd4c <csp_qfifo_write+0xe0>)
 800dca4:	785b      	ldrb	r3, [r3, #1]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d003      	beq.n	800dcb2 <csp_qfifo_write+0x46>
 800dcaa:	492a      	ldr	r1, [pc, #168]	; (800dd54 <csp_qfifo_write+0xe8>)
 800dcac:	2001      	movs	r0, #1
 800dcae:	f7ff fc75 	bl	800d59c <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d103      	bne.n	800dcc0 <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f7fe ffcf 	bl	800cc5c <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 800dcbe:	e042      	b.n	800dd46 <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7fe ff91 	bl	800cbe8 <csp_buffer_free_isr>
		return;
 800dcc6:	e03e      	b.n	800dd46 <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10b      	bne.n	800dcf2 <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 800dcda:	4a1f      	ldr	r2, [pc, #124]	; (800dd58 <csp_qfifo_write+0xec>)
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dce2:	f107 0110 	add.w	r1, r7, #16
 800dce6:	2200      	movs	r2, #0
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fe fd3c 	bl	800c766 <csp_queue_enqueue>
 800dcee:	61f8      	str	r0, [r7, #28]
 800dcf0:	e00a      	b.n	800dd08 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 800dcf2:	4a19      	ldr	r2, [pc, #100]	; (800dd58 <csp_qfifo_write+0xec>)
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcfa:	f107 0110 	add.w	r1, r7, #16
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fe fd44 	bl	800c78e <csp_queue_enqueue_isr>
 800dd06:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d01b      	beq.n	800dd46 <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d107      	bne.n	800dd24 <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 800dd14:	4b0d      	ldr	r3, [pc, #52]	; (800dd4c <csp_qfifo_write+0xe0>)
 800dd16:	785b      	ldrb	r3, [r3, #1]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d003      	beq.n	800dd24 <csp_qfifo_write+0xb8>
 800dd1c:	490f      	ldr	r1, [pc, #60]	; (800dd5c <csp_qfifo_write+0xf0>)
 800dd1e:	2001      	movs	r0, #1
 800dd20:	f7ff fc3c 	bl	800d59c <do_csp_debug>
		}
		iface->drop++;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	625a      	str	r2, [r3, #36]	; 0x24
		if (pxTaskWoken == NULL)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d103      	bne.n	800dd3c <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7fe ff91 	bl	800cc5c <csp_buffer_free>
 800dd3a:	e004      	b.n	800dd46 <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f7fe ff53 	bl	800cbe8 <csp_buffer_free_isr>
 800dd42:	e000      	b.n	800dd46 <csp_qfifo_write+0xda>
		return;
 800dd44:	bf00      	nop
	}

}
 800dd46:	3720      	adds	r7, #32
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	200001a0 	.word	0x200001a0
 800dd50:	080141d0 	.word	0x080141d0
 800dd54:	080141f8 	.word	0x080141f8
 800dd58:	2000a990 	.word	0x2000a990
 800dd5c:	08014224 	.word	0x08014224

0800dd60 <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	7b1b      	ldrb	r3, [r3, #12]
 800dd6e:	f003 0304 	and.w	r3, r3, #4
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00f      	beq.n	800dd96 <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 800dd76:	4b15      	ldr	r3, [pc, #84]	; (800ddcc <csp_route_check_options+0x6c>)
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <csp_route_check_options+0x26>
 800dd7e:	4914      	ldr	r1, [pc, #80]	; (800ddd0 <csp_route_check_options+0x70>)
 800dd80:	2000      	movs	r0, #0
 800dd82:	f7ff fc0b 	bl	800d59c <do_csp_debug>
		iface->autherr++;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 800dd90:	f06f 0304 	mvn.w	r3, #4
 800dd94:	e016      	b.n	800ddc4 <csp_route_check_options+0x64>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	7b1b      	ldrb	r3, [r3, #12]
 800dd9a:	f003 0308 	and.w	r3, r3, #8
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00f      	beq.n	800ddc2 <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 800dda2:	4b0a      	ldr	r3, [pc, #40]	; (800ddcc <csp_route_check_options+0x6c>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d003      	beq.n	800ddb2 <csp_route_check_options+0x52>
 800ddaa:	490a      	ldr	r1, [pc, #40]	; (800ddd4 <csp_route_check_options+0x74>)
 800ddac:	2000      	movs	r0, #0
 800ddae:	f7ff fbf5 	bl	800d59c <do_csp_debug>
		iface->autherr++;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 800ddbc:	f06f 0304 	mvn.w	r3, #4
 800ddc0:	e000      	b.n	800ddc4 <csp_route_check_options+0x64>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
		iface->rx_error++;
		return CSP_ERR_NOTSUP;
	}
#endif
	return CSP_ERR_NONE;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	200001a0 	.word	0x200001a0
 800ddd0:	08014258 	.word	0x08014258
 800ddd4:	080142b8 	.word	0x080142b8

0800ddd8 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	7b1b      	ldrb	r3, [r3, #12]
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d01a      	beq.n	800de26 <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	895b      	ldrh	r3, [r3, #10]
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d80f      	bhi.n	800de18 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 800ddf8:	4b21      	ldr	r3, [pc, #132]	; (800de80 <csp_route_security_check+0xa8>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d003      	beq.n	800de08 <csp_route_security_check+0x30>
 800de00:	4920      	ldr	r1, [pc, #128]	; (800de84 <csp_route_security_check+0xac>)
 800de02:	2000      	movs	r0, #0
 800de04:	f7ff fbca 	bl	800d59c <do_csp_debug>
			iface->rx_error++;
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 800de12:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800de16:	e02f      	b.n	800de78 <csp_route_security_check+0xa0>
		}
		packet->length -= sizeof(uint32_t);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	895b      	ldrh	r3, [r3, #10]
 800de1c:	3b04      	subs	r3, #4
 800de1e:	b29a      	uxth	r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	815a      	strh	r2, [r3, #10]
 800de24:	e00c      	b.n	800de40 <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d007      	beq.n	800de40 <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 800de30:	4b13      	ldr	r3, [pc, #76]	; (800de80 <csp_route_security_check+0xa8>)
 800de32:	785b      	ldrb	r3, [r3, #1]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d003      	beq.n	800de40 <csp_route_security_check+0x68>
 800de38:	4913      	ldr	r1, [pc, #76]	; (800de88 <csp_route_security_check+0xb0>)
 800de3a:	2001      	movs	r0, #1
 800de3c:	f7ff fbae 	bl	800d59c <do_csp_debug>
	}
#endif

#if (CSP_USE_RDP)
	/* RDP packet */
	if (!(packet->id.flags & CSP_FRDP)) {
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	7b1b      	ldrb	r3, [r3, #12]
 800de44:	f003 0302 	and.w	r3, r3, #2
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d114      	bne.n	800de76 <csp_route_security_check+0x9e>
		if (security_opts & CSP_SO_RDPREQ) {
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00f      	beq.n	800de76 <csp_route_security_check+0x9e>
			csp_log_warn("Received packet without RDP header. Discarding packet");
 800de56:	4b0a      	ldr	r3, [pc, #40]	; (800de80 <csp_route_security_check+0xa8>)
 800de58:	785b      	ldrb	r3, [r3, #1]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d003      	beq.n	800de66 <csp_route_security_check+0x8e>
 800de5e:	490b      	ldr	r1, [pc, #44]	; (800de8c <csp_route_security_check+0xb4>)
 800de60:	2001      	movs	r0, #1
 800de62:	f7ff fb9b 	bl	800d59c <do_csp_debug>
			iface->rx_error++;
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	6a1b      	ldr	r3, [r3, #32]
 800de6a:	1c5a      	adds	r2, r3, #1
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	621a      	str	r2, [r3, #32]
			return CSP_ERR_INVAL;
 800de70:	f06f 0301 	mvn.w	r3, #1
 800de74:	e000      	b.n	800de78 <csp_route_security_check+0xa0>
		}
	}
#endif

	return CSP_ERR_NONE;
 800de76:	2300      	movs	r3, #0

}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	200001a0 	.word	0x200001a0
 800de84:	08014310 	.word	0x08014310
 800de88:	0801433c 	.word	0x0801433c
 800de8c:	08014398 	.word	0x08014398

0800de90 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 800de90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de92:	b091      	sub	sp, #68	; 0x44
 800de94:	af06      	add	r7, sp, #24
 800de96:	6078      	str	r0, [r7, #4]
	csp_conn_t * conn;
	csp_socket_t * socket;

#if (CSP_USE_RDP)
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
 800de98:	f7fe ff92 	bl	800cdc0 <csp_conn_check_timeouts>
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 800de9c:	f107 0310 	add.w	r3, r7, #16
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff fecb 	bl	800dc3c <csp_qfifo_read>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <csp_route_work+0x22>
		return CSP_ERR_TIMEDOUT;
 800deac:	f06f 0302 	mvn.w	r3, #2
 800deb0:	e187      	b.n	800e1c2 <csp_route_work+0x332>
	}

	packet = input.packet;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	60fb      	str	r3, [r7, #12]
	if (packet == NULL) {
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d102      	bne.n	800dec2 <csp_route_work+0x32>
		return CSP_ERR_TIMEDOUT;
 800debc:	f06f 0302 	mvn.w	r3, #2
 800dec0:	e17f      	b.n	800e1c2 <csp_route_work+0x332>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 800dec2:	4ba3      	ldr	r3, [pc, #652]	; (800e150 <csp_route_work+0x2c0>)
 800dec4:	791b      	ldrb	r3, [r3, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d031      	beq.n	800df2e <csp_route_work+0x9e>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	7bdb      	ldrb	r3, [r3, #15]
 800dece:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	461e      	mov	r6, r3
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	89db      	ldrh	r3, [r3, #14]
 800deda:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	469c      	mov	ip, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800deea:	b2db      	uxtb	r3, r3
 800deec:	461a      	mov	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	7b5b      	ldrb	r3, [r3, #13]
 800def2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800def6:	b2db      	uxtb	r3, r3
 800def8:	4619      	mov	r1, r3
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	7bdb      	ldrb	r3, [r3, #15]
 800defe:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800df02:	b2db      	uxtb	r3, r3
 800df04:	4618      	mov	r0, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	7b1b      	ldrb	r3, [r3, #12]
 800df0a:	461c      	mov	r4, r3
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	895b      	ldrh	r3, [r3, #10]
 800df10:	461d      	mov	r5, r3
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	9305      	str	r3, [sp, #20]
 800df18:	9504      	str	r5, [sp, #16]
 800df1a:	9403      	str	r4, [sp, #12]
 800df1c:	9002      	str	r0, [sp, #8]
 800df1e:	9101      	str	r1, [sp, #4]
 800df20:	9200      	str	r2, [sp, #0]
 800df22:	4663      	mov	r3, ip
 800df24:	4632      	mov	r2, r6
 800df26:	498b      	ldr	r1, [pc, #556]	; (800e154 <csp_route_work+0x2c4>)
 800df28:	2004      	movs	r0, #4
 800df2a:	f7ff fb37 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	699a      	ldr	r2, [r3, #24]
 800df32:	3201      	adds	r2, #1
 800df34:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	895b      	ldrh	r3, [r3, #10]
 800df3e:	4619      	mov	r1, r3
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	440a      	add	r2, r1
 800df44:	635a      	str	r2, [r3, #52]	; 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	89db      	ldrh	r3, [r3, #14]
 800df4a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	461a      	mov	r2, r3
 800df52:	4b81      	ldr	r3, [pc, #516]	; (800e158 <csp_route_work+0x2c8>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	429a      	cmp	r2, r3
 800df58:	d03a      	beq.n	800dfd0 <csp_route_work+0x140>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	89db      	ldrh	r3, [r3, #14]
 800df5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800df62:	b29b      	uxth	r3, r3
 800df64:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 800df68:	d032      	beq.n	800dfd0 <csp_route_work+0x140>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	89db      	ldrh	r3, [r3, #14]
 800df6e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800df72:	b2db      	uxtb	r3, r3
 800df74:	4618      	mov	r0, r3
 800df76:	f000 fc13 	bl	800e7a0 <csp_rtable_find_route>
 800df7a:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d008      	beq.n	800df94 <csp_route_work+0x104>
 800df82:	6a3b      	ldr	r3, [r7, #32]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d109      	bne.n	800dfa0 <csp_route_work+0x110>
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	7c9b      	ldrb	r3, [r3, #18]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d105      	bne.n	800dfa0 <csp_route_work+0x110>
			csp_buffer_free(packet);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fe60 	bl	800cc5c <csp_buffer_free>
			return CSP_ERR_NONE;
 800df9c:	2300      	movs	r3, #0
 800df9e:	e110      	b.n	800e1c2 <csp_route_work+0x332>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	68f9      	ldr	r1, [r7, #12]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	6a3a      	ldr	r2, [r7, #32]
 800dfa8:	68c0      	ldr	r0, [r0, #12]
 800dfaa:	f7ff fc93 	bl	800d8d4 <csp_send_direct>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00b      	beq.n	800dfcc <csp_route_work+0x13c>
			csp_log_warn("Router failed to send");
 800dfb4:	4b66      	ldr	r3, [pc, #408]	; (800e150 <csp_route_work+0x2c0>)
 800dfb6:	785b      	ldrb	r3, [r3, #1]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d003      	beq.n	800dfc4 <csp_route_work+0x134>
 800dfbc:	4967      	ldr	r1, [pc, #412]	; (800e15c <csp_route_work+0x2cc>)
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	f7ff faec 	bl	800d59c <do_csp_debug>
			csp_buffer_free(packet);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe fe48 	bl	800cc5c <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e0f8      	b.n	800e1c2 <csp_route_work+0x332>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	4611      	mov	r1, r2
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7ff fec2 	bl	800dd60 <csp_route_check_options>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d005      	beq.n	800dfee <csp_route_work+0x15e>
		csp_buffer_free(packet);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe fe39 	bl	800cc5c <csp_buffer_free>
		return CSP_ERR_NONE;
 800dfea:	2300      	movs	r3, #0
 800dfec:	e0e9      	b.n	800e1c2 <csp_route_work+0x332>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff fd9b 	bl	800db34 <csp_port_get_socket>
 800dffe:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d030      	beq.n	800e068 <csp_route_work+0x1d8>
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d02a      	beq.n	800e068 <csp_route_work+0x1d8>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	699b      	ldr	r3, [r3, #24]
 800e016:	6939      	ldr	r1, [r7, #16]
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff fedc 	bl	800ddd8 <csp_route_security_check>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	da05      	bge.n	800e032 <csp_route_work+0x1a2>
			csp_buffer_free(packet);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fe fe17 	bl	800cc5c <csp_buffer_free>
			return CSP_ERR_NONE;
 800e02e:	2300      	movs	r3, #0
 800e030:	e0c7      	b.n	800e1c2 <csp_route_work+0x332>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	f107 010c 	add.w	r1, r7, #12
 800e03a:	2200      	movs	r2, #0
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7fe fb92 	bl	800c766 <csp_queue_enqueue>
 800e042:	4603      	mov	r3, r0
 800e044:	2b01      	cmp	r3, #1
 800e046:	d00d      	beq.n	800e064 <csp_route_work+0x1d4>
			csp_log_error("Conn-less socket queue full");
 800e048:	4b41      	ldr	r3, [pc, #260]	; (800e150 <csp_route_work+0x2c0>)
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d003      	beq.n	800e058 <csp_route_work+0x1c8>
 800e050:	4943      	ldr	r1, [pc, #268]	; (800e160 <csp_route_work+0x2d0>)
 800e052:	2000      	movs	r0, #0
 800e054:	f7ff faa2 	bl	800d59c <do_csp_debug>
			csp_buffer_free(packet);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fe fdfe 	bl	800cc5c <csp_buffer_free>
			return CSP_ERR_NONE;
 800e060:	2300      	movs	r3, #0
 800e062:	e0ae      	b.n	800e1c2 <csp_route_work+0x332>
		}
		return CSP_ERR_NONE;
 800e064:	2300      	movs	r3, #0
 800e066:	e0ac      	b.n	800e1c2 <csp_route_work+0x332>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	493d      	ldr	r1, [pc, #244]	; (800e164 <csp_route_work+0x2d4>)
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fffc 	bl	800d06c <csp_conn_find>
 800e074:	6278      	str	r0, [r7, #36]	; 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d177      	bne.n	800e16c <csp_route_work+0x2dc>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d105      	bne.n	800e08e <csp_route_work+0x1fe>
			csp_buffer_free(packet);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	4618      	mov	r0, r3
 800e086:	f7fe fde9 	bl	800cc5c <csp_buffer_free>
			return CSP_ERR_NONE;
 800e08a:	2300      	movs	r3, #0
 800e08c:	e099      	b.n	800e1c2 <csp_route_work+0x332>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	699b      	ldr	r3, [r3, #24]
 800e092:	6939      	ldr	r1, [r7, #16]
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fe9e 	bl	800ddd8 <csp_route_security_check>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	da05      	bge.n	800e0ae <csp_route_work+0x21e>
			csp_buffer_free(packet);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fe fdd9 	bl	800cc5c <csp_buffer_free>
			return CSP_ERR_NONE;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	e089      	b.n	800e1c2 <csp_route_work+0x332>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	7bdb      	ldrb	r3, [r3, #15]
 800e0b2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	7afb      	ldrb	r3, [r7, #11]
 800e0ba:	f362 1387 	bfi	r3, r2, #6, #2
 800e0be:	72fb      	strb	r3, [r7, #11]
		idout.src   = csp_conf.address;
 800e0c0:	4b25      	ldr	r3, [pc, #148]	; (800e158 <csp_route_work+0x2c8>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	f003 031f 	and.w	r3, r3, #31
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	7afb      	ldrb	r3, [r7, #11]
 800e0cc:	f362 0345 	bfi	r3, r2, #1, #5
 800e0d0:	72fb      	strb	r3, [r7, #11]

		idout.dst   = packet->id.src;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	7bdb      	ldrb	r3, [r3, #15]
 800e0d6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	897b      	ldrh	r3, [r7, #10]
 800e0de:	f362 1308 	bfi	r3, r2, #4, #5
 800e0e2:	817b      	strh	r3, [r7, #10]
		idout.dport = packet->id.sport;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	7b5b      	ldrb	r3, [r3, #13]
 800e0e8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	f362 3393 	bfi	r3, r2, #14, #6
 800e0f4:	60bb      	str	r3, [r7, #8]
		idout.sport = packet->id.dport;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	7a7b      	ldrb	r3, [r7, #9]
 800e102:	f362 0305 	bfi	r3, r2, #0, #6
 800e106:	727b      	strb	r3, [r7, #9]
		idout.flags = packet->id.flags;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	7b1b      	ldrb	r3, [r3, #12]
 800e10c:	723b      	strb	r3, [r7, #8]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	68b9      	ldr	r1, [r7, #8]
 800e112:	68d8      	ldr	r0, [r3, #12]
 800e114:	f7ff f890 	bl	800d238 <csp_conn_new>
 800e118:	6278      	str	r0, [r7, #36]	; 0x24

		if (!conn) {
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10d      	bne.n	800e13c <csp_route_work+0x2ac>
			csp_log_error("No more connections available");
 800e120:	4b0b      	ldr	r3, [pc, #44]	; (800e150 <csp_route_work+0x2c0>)
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <csp_route_work+0x2a0>
 800e128:	490f      	ldr	r1, [pc, #60]	; (800e168 <csp_route_work+0x2d8>)
 800e12a:	2000      	movs	r0, #0
 800e12c:	f7ff fa36 	bl	800d59c <do_csp_debug>
			csp_buffer_free(packet);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4618      	mov	r0, r3
 800e134:	f7fe fd92 	bl	800cc5c <csp_buffer_free>
			return CSP_ERR_NONE;
 800e138:	2300      	movs	r3, #0
 800e13a:	e042      	b.n	800e1c2 <csp_route_work+0x332>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	691a      	ldr	r2, [r3, #16]
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	699a      	ldr	r2, [r3, #24]
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	619a      	str	r2, [r3, #24]
 800e14c:	e01e      	b.n	800e18c <csp_route_work+0x2fc>
 800e14e:	bf00      	nop
 800e150:	200001a0 	.word	0x200001a0
 800e154:	080143d0 	.word	0x080143d0
 800e158:	2000a96c 	.word	0x2000a96c
 800e15c:	08014410 	.word	0x08014410
 800e160:	08014428 	.word	0x08014428
 800e164:	3fffff00 	.word	0x3fffff00
 800e168:	08014444 	.word	0x08014444

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	699b      	ldr	r3, [r3, #24]
 800e170:	6939      	ldr	r1, [r7, #16]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fe2f 	bl	800ddd8 <csp_route_security_check>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	da05      	bge.n	800e18c <csp_route_work+0x2fc>
			csp_buffer_free(packet);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4618      	mov	r0, r3
 800e184:	f7fe fd6a 	bl	800cc5c <csp_buffer_free>
			return CSP_ERR_NONE;
 800e188:	2300      	movs	r3, #0
 800e18a:	e01a      	b.n	800e1c2 <csp_route_work+0x332>

	}

#if (CSP_USE_RDP)
	/* Pass packet to RDP module */
	if (packet->id.flags & CSP_FRDP) {
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	7b1b      	ldrb	r3, [r3, #12]
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00e      	beq.n	800e1b6 <csp_route_work+0x326>
		bool close_connection = csp_rdp_new_packet(conn, packet);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	4619      	mov	r1, r3
 800e19c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e19e:	f001 fa41 	bl	800f624 <csp_rdp_new_packet>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	76fb      	strb	r3, [r7, #27]
		if (close_connection) {
 800e1a6:	7efb      	ldrb	r3, [r7, #27]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <csp_route_work+0x322>
			csp_close(conn);
 800e1ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ae:	f7ff f862 	bl	800d276 <csp_close>
		}
		return CSP_ERR_NONE;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e005      	b.n	800e1c2 <csp_route_work+0x332>
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1bc:	f002 f9c4 	bl	8010548 <csp_udp_new_packet>
	return CSP_ERR_NONE;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	372c      	adds	r7, #44	; 0x2c
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ca:	bf00      	nop

0800e1cc <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 800e1d4:	2064      	movs	r0, #100	; 0x64
 800e1d6:	f7ff fe5b 	bl	800de90 <csp_route_work>
 800e1da:	e7fb      	b.n	800e1d4 <csp_task_router+0x8>

0800e1dc <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af02      	add	r7, sp, #8
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	490c      	ldr	r1, [pc, #48]	; (800e224 <csp_route_start_task+0x48>)
 800e1f4:	480c      	ldr	r0, [pc, #48]	; (800e228 <csp_route_start_task+0x4c>)
 800e1f6:	f7fe fbe7 	bl	800c9c8 <csp_thread_create>
 800e1fa:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00a      	beq.n	800e218 <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 800e202:	4b0a      	ldr	r3, [pc, #40]	; (800e22c <csp_route_start_task+0x50>)
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d004      	beq.n	800e214 <csp_route_start_task+0x38>
 800e20a:	68fa      	ldr	r2, [r7, #12]
 800e20c:	4908      	ldr	r1, [pc, #32]	; (800e230 <csp_route_start_task+0x54>)
 800e20e:	2000      	movs	r0, #0
 800e210:	f7ff f9c4 	bl	800d59c <do_csp_debug>
		return ret;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	e000      	b.n	800e21a <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 800e218:	2300      	movs	r3, #0

}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	08014464 	.word	0x08014464
 800e228:	0800e1cd 	.word	0x0800e1cd
 800e22c:	200001a0 	.word	0x200001a0
 800e230:	08014468 	.word	0x08014468

0800e234 <csp_ping>:

#include <csp/csp_cmp.h>
#include <csp/csp_endian.h>
#include <csp/arch/csp_time.h>

int csp_ping(uint8_t node, uint32_t timeout, unsigned int size, uint8_t conn_options) {
 800e234:	b580      	push	{r7, lr}
 800e236:	b08c      	sub	sp, #48	; 0x30
 800e238:	af02      	add	r7, sp, #8
 800e23a:	60b9      	str	r1, [r7, #8]
 800e23c:	607a      	str	r2, [r7, #4]
 800e23e:	461a      	mov	r2, r3
 800e240:	4603      	mov	r3, r0
 800e242:	73fb      	strb	r3, [r7, #15]
 800e244:	4613      	mov	r3, r2
 800e246:	73bb      	strb	r3, [r7, #14]

	unsigned int i;
	uint32_t start, time, status = 0;
 800e248:	2300      	movs	r3, #0
 800e24a:	623b      	str	r3, [r7, #32]

	/* Counter */
	start = csp_get_ms();
 800e24c:	f7fe fbe1 	bl	800ca12 <csp_get_ms>
 800e250:	61b8      	str	r0, [r7, #24]

	/* Open connection */
	csp_conn_t * conn = csp_connect(CSP_PRIO_NORM, node, CSP_PING, timeout, conn_options);
 800e252:	7bbb      	ldrb	r3, [r7, #14]
 800e254:	7bf9      	ldrb	r1, [r7, #15]
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	2201      	movs	r2, #1
 800e25c:	2002      	movs	r0, #2
 800e25e:	f7ff f88f 	bl	800d380 <csp_connect>
 800e262:	6178      	str	r0, [r7, #20]
	if (conn == NULL)
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d102      	bne.n	800e270 <csp_ping+0x3c>
		return -1;
 800e26a:	f04f 33ff 	mov.w	r3, #4294967295
 800e26e:	e05d      	b.n	800e32c <csp_ping+0xf8>

	/* Prepare data */
	csp_packet_t * packet = csp_buffer_get(size);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7fe fc57 	bl	800cb24 <csp_buffer_get>
 800e276:	61f8      	str	r0, [r7, #28]
	if (packet == NULL)
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d03c      	beq.n	800e2f8 <csp_ping+0xc4>
		goto out;

	/* Set data to increasing numbers */
	packet->length = size;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	b29a      	uxth	r2, r3
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	815a      	strh	r2, [r3, #10]
	for (i = 0; i < size; i++)
 800e286:	2300      	movs	r3, #0
 800e288:	627b      	str	r3, [r7, #36]	; 0x24
 800e28a:	e00a      	b.n	800e2a2 <csp_ping+0x6e>
		packet->data[i] = i;
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	b2d9      	uxtb	r1, r3
 800e290:	69fa      	ldr	r2, [r7, #28]
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	4413      	add	r3, r2
 800e296:	3310      	adds	r3, #16
 800e298:	460a      	mov	r2, r1
 800e29a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 800e29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29e:	3301      	adds	r3, #1
 800e2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800e2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d3f0      	bcc.n	800e28c <csp_ping+0x58>

	/* Try to send frame */
	if (!csp_send(conn, packet, 0))
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	69f9      	ldr	r1, [r7, #28]
 800e2ae:	6978      	ldr	r0, [r7, #20]
 800e2b0:	f7ff fbf8 	bl	800daa4 <csp_send>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d020      	beq.n	800e2fc <csp_ping+0xc8>
		goto out;

	/* Read incoming frame */
	packet = csp_read(conn, timeout);
 800e2ba:	68b9      	ldr	r1, [r7, #8]
 800e2bc:	6978      	ldr	r0, [r7, #20]
 800e2be:	f7ff fac9 	bl	800d854 <csp_read>
 800e2c2:	61f8      	str	r0, [r7, #28]
	if (packet == NULL)
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d01a      	beq.n	800e300 <csp_ping+0xcc>
		goto out;

	/* Ensure that the data was actually echoed */
	for (i = 0; i < size; i++) {
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ce:	e00c      	b.n	800e2ea <csp_ping+0xb6>
		if (packet->data[i] != i % (0xff + 1)) {
 800e2d0:	69fa      	ldr	r2, [r7, #28]
 800e2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d4:	4413      	add	r3, r2
 800e2d6:	3310      	adds	r3, #16
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d10f      	bne.n	800e304 <csp_ping+0xd0>
	for (i = 0; i < size; i++) {
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d3ee      	bcc.n	800e2d0 <csp_ping+0x9c>
			goto out;
		}
	}
	status = 1;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	623b      	str	r3, [r7, #32]
 800e2f6:	e006      	b.n	800e306 <csp_ping+0xd2>
		goto out;
 800e2f8:	bf00      	nop
 800e2fa:	e004      	b.n	800e306 <csp_ping+0xd2>
		goto out;
 800e2fc:	bf00      	nop
 800e2fe:	e002      	b.n	800e306 <csp_ping+0xd2>
		goto out;
 800e300:	bf00      	nop
 800e302:	e000      	b.n	800e306 <csp_ping+0xd2>
			goto out;
 800e304:	bf00      	nop

out:
	/* Clean up */
	csp_buffer_free(packet);
 800e306:	69f8      	ldr	r0, [r7, #28]
 800e308:	f7fe fca8 	bl	800cc5c <csp_buffer_free>
	csp_close(conn);
 800e30c:	6978      	ldr	r0, [r7, #20]
 800e30e:	f7fe ffb2 	bl	800d276 <csp_close>

	/* We have a reply */
	time = (csp_get_ms() - start);
 800e312:	f7fe fb7e 	bl	800ca12 <csp_get_ms>
 800e316:	4602      	mov	r2, r0
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	613b      	str	r3, [r7, #16]

	if (status) {
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d001      	beq.n	800e328 <csp_ping+0xf4>
		return time;
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	e001      	b.n	800e32c <csp_ping+0xf8>
	}

	return -1;
 800e328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3728      	adds	r7, #40	; 0x28
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <csp_can_tx_frame>:
	csp_iface_t iface;
	csp_can_interface_data_t ifdata;
	pthread_t rx_thread;
} can_context_t;

static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc) {
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
 800e340:	70fb      	strb	r3, [r7, #3]
	if (dlc > 8) {
 800e342:	78fb      	ldrb	r3, [r7, #3]
 800e344:	2b08      	cmp	r3, #8
 800e346:	d902      	bls.n	800e34e <csp_can_tx_frame+0x1a>
		return CSP_ERR_INVAL;
 800e348:	f06f 0301 	mvn.w	r3, #1
 800e34c:	e000      	b.n	800e350 <csp_can_tx_frame+0x1c>
	}

	return CSP_ERR_NONE;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <csp_can_stm32_open_and_add_interface>:

int csp_can_stm32_open_and_add_interface(const char *ifname, csp_iface_t **return_iface) {
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
	if (ifname == NULL) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <csp_can_stm32_open_and_add_interface+0x14>
		ifname = CSP_IF_CAN_DEFAULT_NAME;
 800e36c:	4b1c      	ldr	r3, [pc, #112]	; (800e3e0 <csp_can_stm32_open_and_add_interface+0x84>)
 800e36e:	607b      	str	r3, [r7, #4]
	}

	can_context_t *ctx = calloc(1, sizeof(*ctx));
 800e370:	2158      	movs	r1, #88	; 0x58
 800e372:	2001      	movs	r0, #1
 800e374:	f002 f928 	bl	80105c8 <calloc>
 800e378:	4603      	mov	r3, r0
 800e37a:	60fb      	str	r3, [r7, #12]
	if (ctx == NULL) {
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d102      	bne.n	800e388 <csp_can_stm32_open_and_add_interface+0x2c>
		return CSP_ERR_NOMEM;
 800e382:	f04f 33ff 	mov.w	r3, #4294967295
 800e386:	e027      	b.n	800e3d8 <csp_can_stm32_open_and_add_interface+0x7c>
	}

	strncpy(ctx->name, ifname, sizeof(ctx->name) - 1);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	220a      	movs	r2, #10
 800e38c:	6879      	ldr	r1, [r7, #4]
 800e38e:	4618      	mov	r0, r3
 800e390:	f003 f9e4 	bl	801175c <strncpy>
	ctx->iface.name = ctx->name;
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	60da      	str	r2, [r3, #12]
	ctx->iface.interface_data = &ctx->ifdata;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	611a      	str	r2, [r3, #16]
	ctx->iface.driver_data = ctx;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	615a      	str	r2, [r3, #20]
	ctx->ifdata.tx_func = csp_can_tx_frame;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	4a0d      	ldr	r2, [pc, #52]	; (800e3e4 <csp_can_stm32_open_and_add_interface+0x88>)
 800e3ae:	651a      	str	r2, [r3, #80]	; 0x50

	int res = csp_can_add_interface(&ctx->iface);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	330c      	adds	r3, #12
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f000 f8f5 	bl	800e5a4 <csp_can_add_interface>
 800e3ba:	60b8      	str	r0, [r7, #8]
	if (res != CSP_ERR_NONE) {
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <csp_can_stm32_open_and_add_interface+0x6a>
		return res;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	e008      	b.n	800e3d8 <csp_can_stm32_open_and_add_interface+0x7c>
	}

	if (return_iface) {
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d004      	beq.n	800e3d6 <csp_can_stm32_open_and_add_interface+0x7a>
		*return_iface = &ctx->iface;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f103 020c 	add.w	r2, r3, #12
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	601a      	str	r2, [r3, #0]
	}

	return CSP_ERR_NONE;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	08014490 	.word	0x08014490
 800e3e4:	0800e335 	.word	0x0800e335

0800e3e8 <csp_can_tx>:

	return CSP_ERR_NONE;
}

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet)
{
 800e3e8:	b590      	push	{r4, r7, lr}
 800e3ea:	b08f      	sub	sp, #60	; 0x3c
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
        csp_iface_t * iface = ifroute->iface;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	633b      	str	r3, [r7, #48]	; 0x30
        csp_can_interface_data_t * ifdata = iface->interface_data;
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	1c59      	adds	r1, r3, #1
 800e404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e406:	6011      	str	r1, [r2, #0]
 800e408:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
        if (packet->length > MAX_CAN_DATA_SIZE) {
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	895b      	ldrh	r3, [r3, #10]
 800e40e:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800e412:	4293      	cmp	r3, r2
 800e414:	d902      	bls.n	800e41c <csp_can_tx+0x34>
		return CSP_ERR_TX;
 800e416:	f06f 0309 	mvn.w	r3, #9
 800e41a:	e0bf      	b.n	800e59c <csp_can_tx+0x1b4>
        }

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	791b      	ldrb	r3, [r3, #4]
 800e420:	2bff      	cmp	r3, #255	; 0xff
 800e422:	d002      	beq.n	800e42a <csp_can_tx+0x42>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	791b      	ldrb	r3, [r3, #4]
 800e428:	e004      	b.n	800e434 <csp_can_tx+0x4c>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	89db      	ldrh	r3, [r3, #14]
 800e42e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800e432:	b2db      	uxtb	r3, r3
 800e434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	7bdb      	ldrb	r3, [r3, #15]
 800e43c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e440:	b2db      	uxtb	r3, r3
 800e442:	061a      	lsls	r2, r3, #24
                       CFP_MAKE_DST(dest) |
 800e444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e448:	04db      	lsls	r3, r3, #19
 800e44a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800e44e:	431a      	orrs	r2, r3
                       CFP_MAKE_ID(ident) |
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e456:	431a      	orrs	r2, r3
                       CFP_MAKE_TYPE(CFP_BEGIN) |
                       CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	895b      	ldrh	r3, [r3, #10]
 800e45c:	3305      	adds	r3, #5
 800e45e:	08db      	lsrs	r3, r3, #3
 800e460:	029b      	lsls	r3, r3, #10
 800e462:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800e466:	4313      	orrs	r3, r2
 800e468:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 800e46a:	2302      	movs	r3, #2
 800e46c:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	895a      	ldrh	r2, [r3, #10]
 800e472:	7ffb      	ldrb	r3, [r7, #31]
 800e474:	b29b      	uxth	r3, r3
 800e476:	429a      	cmp	r2, r3
 800e478:	d803      	bhi.n	800e482 <csp_can_tx+0x9a>
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	895b      	ldrh	r3, [r3, #10]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	e000      	b.n	800e484 <csp_can_tx+0x9c>
 800e482:	7ffb      	ldrb	r3, [r7, #31]
 800e484:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff f92b 	bl	800d6e6 <csp_hton32>
 800e490:	4603      	mov	r3, r0
 800e492:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	895b      	ldrh	r3, [r3, #10]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7ff f901 	bl	800d6a0 <csp_hton16>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	827b      	strh	r3, [r7, #18]
 800e4a2:	697b      	ldr	r3, [r7, #20]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 800e4a4:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 800e4a6:	f107 0308 	add.w	r3, r7, #8
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	8a7a      	ldrh	r2, [r7, #18]
 800e4ae:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 800e4b0:	f107 0308 	add.w	r3, r7, #8
 800e4b4:	3306      	adds	r3, #6
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	f102 0110 	add.w	r1, r2, #16
 800e4bc:	7fba      	ldrb	r2, [r7, #30]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f002 f9dc 	bl	801087c <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 800e4c4:	7fbb      	ldrb	r3, [r7, #30]
 800e4c6:	86fb      	strh	r3, [r7, #54]	; 0x36

        const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 800e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	6898      	ldr	r0, [r3, #8]
 800e4d2:	7fbb      	ldrb	r3, [r7, #30]
 800e4d4:	3306      	adds	r3, #6
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	f107 0208 	add.w	r2, r7, #8
 800e4dc:	69bc      	ldr	r4, [r7, #24]
 800e4de:	6a39      	ldr	r1, [r7, #32]
 800e4e0:	47a0      	blx	r4
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d050      	beq.n	800e58a <csp_can_tx+0x1a2>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ea:	69db      	ldr	r3, [r3, #28]
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 800e4f2:	f06f 030a 	mvn.w	r3, #10
 800e4f6:	e051      	b.n	800e59c <csp_can_tx+0x1b4>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	895b      	ldrh	r3, [r3, #10]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	2b08      	cmp	r3, #8
 800e504:	bfa8      	it	ge
 800e506:	2308      	movge	r3, #8
 800e508:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	7bdb      	ldrb	r3, [r3, #15]
 800e50e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e512:	b2db      	uxtb	r3, r3
 800e514:	061a      	lsls	r2, r3, #24
                      CFP_MAKE_DST(dest) |
 800e516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51a:	04db      	lsls	r3, r3, #19
 800e51c:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 800e520:	431a      	orrs	r2, r3
                      CFP_MAKE_ID(ident) |
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	f3c3 0309 	ubfx	r3, r3, #0, #10
                      CFP_MAKE_DST(dest) |
 800e528:	431a      	orrs	r2, r3
                      CFP_MAKE_TYPE(CFP_MORE) |
                      CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	895b      	ldrh	r3, [r3, #10]
 800e52e:	4619      	mov	r1, r3
 800e530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e532:	1ac9      	subs	r1, r1, r3
 800e534:	7fbb      	ldrb	r3, [r7, #30]
 800e536:	1acb      	subs	r3, r1, r3
 800e538:	3307      	adds	r3, #7
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da00      	bge.n	800e540 <csp_can_tx+0x158>
 800e53e:	3307      	adds	r3, #7
 800e540:	10db      	asrs	r3, r3, #3
 800e542:	029b      	lsls	r3, r3, #10
 800e544:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
                      CFP_MAKE_TYPE(CFP_MORE) |
 800e548:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 800e54a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e54e:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 800e550:	7fbb      	ldrb	r3, [r7, #30]
 800e552:	b29a      	uxth	r2, r3
 800e554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e556:	4413      	add	r3, r2
 800e558:	86fb      	strh	r3, [r7, #54]	; 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 800e55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55c:	6898      	ldr	r0, [r3, #8]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	f103 0210 	add.w	r2, r3, #16
 800e564:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800e566:	7fbb      	ldrb	r3, [r7, #30]
 800e568:	1acb      	subs	r3, r1, r3
 800e56a:	441a      	add	r2, r3
 800e56c:	7fbb      	ldrb	r3, [r7, #30]
 800e56e:	69bc      	ldr	r4, [r7, #24]
 800e570:	6a39      	ldr	r1, [r7, #32]
 800e572:	47a0      	blx	r4
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d007      	beq.n	800e58a <csp_can_tx+0x1a2>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	69db      	ldr	r3, [r3, #28]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e582:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 800e584:	f06f 030a 	mvn.w	r3, #10
 800e588:	e008      	b.n	800e59c <csp_can_tx+0x1b4>
	while (tx_count < packet->length) {
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	895b      	ldrh	r3, [r3, #10]
 800e58e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e590:	429a      	cmp	r2, r3
 800e592:	d3b1      	bcc.n	800e4f8 <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 800e594:	6838      	ldr	r0, [r7, #0]
 800e596:	f7fe fb61 	bl	800cc5c <csp_buffer_free>

	return CSP_ERR_NONE;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	373c      	adds	r7, #60	; 0x3c
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd90      	pop	{r4, r7, pc}

0800e5a4 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d007      	beq.n	800e5c2 <csp_can_add_interface+0x1e>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d003      	beq.n	800e5c2 <csp_can_add_interface+0x1e>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d102      	bne.n	800e5c8 <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 800e5c2:	f06f 0301 	mvn.w	r3, #1
 800e5c6:	e021      	b.n	800e60c <csp_can_add_interface+0x68>
	}

        csp_can_interface_data_t * ifdata = iface->interface_data;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d102      	bne.n	800e5dc <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 800e5d6:	f06f 0301 	mvn.w	r3, #1
 800e5da:	e017      	b.n	800e60c <csp_can_add_interface+0x68>
	}

        if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	8a1b      	ldrh	r3, [r3, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d005      	beq.n	800e5f0 <csp_can_add_interface+0x4c>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	8a1b      	ldrh	r3, [r3, #16]
 800e5e8:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d903      	bls.n	800e5f8 <csp_can_add_interface+0x54>
            iface->mtu = MAX_CAN_DATA_SIZE;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800e5f6:	821a      	strh	r2, [r3, #16]
        }

        ifdata->cfp_frame_id = 0;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4a04      	ldr	r2, [pc, #16]	; (800e614 <csp_can_add_interface+0x70>)
 800e602:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff f893 	bl	800d730 <csp_iflist_add>
 800e60a:	4603      	mov	r3, r0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	0800e3e9 	.word	0x0800e3e9

0800e618 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	89db      	ldrh	r3, [r3, #14]
 800e626:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	461a      	mov	r2, r3
 800e62e:	4b09      	ldr	r3, [pc, #36]	; (800e654 <csp_lo_tx+0x3c>)
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d004      	beq.n	800e640 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 800e636:	6838      	ldr	r0, [r7, #0]
 800e638:	f7fe fb10 	bl	800cc5c <csp_buffer_free>
		return CSP_ERR_NONE;
 800e63c:	2300      	movs	r3, #0
 800e63e:	e005      	b.n	800e64c <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 800e640:	2200      	movs	r2, #0
 800e642:	4905      	ldr	r1, [pc, #20]	; (800e658 <csp_lo_tx+0x40>)
 800e644:	6838      	ldr	r0, [r7, #0]
 800e646:	f7ff fb11 	bl	800dc6c <csp_qfifo_write>

	return CSP_ERR_NONE;
 800e64a:	2300      	movs	r3, #0

}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	2000a96c 	.word	0x2000a96c
 800e658:	200001a8 	.word	0x200001a8

0800e65c <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af04      	add	r7, sp, #16
 800e662:	603a      	str	r2, [r7, #0]
 800e664:	461a      	mov	r2, r3
 800e666:	4603      	mov	r3, r0
 800e668:	71fb      	strb	r3, [r7, #7]
 800e66a:	460b      	mov	r3, r1
 800e66c:	71bb      	strb	r3, [r7, #6]
 800e66e:	4613      	mov	r3, r2
 800e670:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 800e672:	79fb      	ldrb	r3, [r7, #7]
 800e674:	2b20      	cmp	r3, #32
 800e676:	d103      	bne.n	800e680 <csp_rtable_set+0x24>
		netmask = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	71bb      	strb	r3, [r7, #6]
		address = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	2b1f      	cmp	r3, #31
 800e684:	d902      	bls.n	800e68c <csp_rtable_set+0x30>
 800e686:	79fb      	ldrb	r3, [r7, #7]
 800e688:	2bff      	cmp	r3, #255	; 0xff
 800e68a:	d105      	bne.n	800e698 <csp_rtable_set+0x3c>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <csp_rtable_set+0x3c>
 800e692:	79bb      	ldrb	r3, [r7, #6]
 800e694:	2b05      	cmp	r3, #5
 800e696:	d91b      	bls.n	800e6d0 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 800e698:	4b13      	ldr	r3, [pc, #76]	; (800e6e8 <csp_rtable_set+0x8c>)
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d014      	beq.n	800e6ca <csp_rtable_set+0x6e>
 800e6a0:	79f8      	ldrb	r0, [r7, #7]
 800e6a2:	79ba      	ldrb	r2, [r7, #6]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <csp_rtable_set+0x54>
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	e000      	b.n	800e6b2 <csp_rtable_set+0x56>
 800e6b0:	4b0e      	ldr	r3, [pc, #56]	; (800e6ec <csp_rtable_set+0x90>)
 800e6b2:	7979      	ldrb	r1, [r7, #5]
 800e6b4:	9103      	str	r1, [sp, #12]
 800e6b6:	9302      	str	r3, [sp, #8]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	9200      	str	r2, [sp, #0]
 800e6be:	4603      	mov	r3, r0
 800e6c0:	4a0b      	ldr	r2, [pc, #44]	; (800e6f0 <csp_rtable_set+0x94>)
 800e6c2:	490c      	ldr	r1, [pc, #48]	; (800e6f4 <csp_rtable_set+0x98>)
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	f7fe ff69 	bl	800d59c <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 800e6ca:	f06f 0301 	mvn.w	r3, #1
 800e6ce:	e006      	b.n	800e6de <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 800e6d0:	797b      	ldrb	r3, [r7, #5]
 800e6d2:	79b9      	ldrb	r1, [r7, #6]
 800e6d4:	79f8      	ldrb	r0, [r7, #7]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	f000 f878 	bl	800e7cc <csp_rtable_set_internal>
 800e6dc:	4603      	mov	r3, r0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	200001a0 	.word	0x200001a0
 800e6ec:	0801450c 	.word	0x0801450c
 800e6f0:	080153b4 	.word	0x080153b4
 800e6f4:	08014510 	.word	0x08014510

0800e6f8 <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 800e6f8:	b480      	push	{r7}
 800e6fa:	b087      	sub	sp, #28
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	4603      	mov	r3, r0
 800e700:	71fb      	strb	r3, [r7, #7]
 800e702:	460b      	mov	r3, r1
 800e704:	71bb      	strb	r3, [r7, #6]
 800e706:	4613      	mov	r3, r2
 800e708:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 800e70a:	2300      	movs	r3, #0
 800e70c:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 800e70e:	2300      	movs	r3, #0
 800e710:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 800e712:	4b22      	ldr	r3, [pc, #136]	; (800e79c <csp_rtable_find+0xa4>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	60fb      	str	r3, [r7, #12]
	while(i) {
 800e718:	e036      	b.n	800e788 <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	7a1b      	ldrb	r3, [r3, #8]
 800e71e:	79fa      	ldrb	r2, [r7, #7]
 800e720:	429a      	cmp	r2, r3
 800e722:	d107      	bne.n	800e734 <csp_rtable_find+0x3c>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	7a5b      	ldrb	r3, [r3, #9]
 800e728:	79ba      	ldrb	r2, [r7, #6]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d102      	bne.n	800e734 <csp_rtable_find+0x3c>
			best_result = i;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	617b      	str	r3, [r7, #20]
			break;
 800e732:	e02c      	b.n	800e78e <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 800e734:	797b      	ldrb	r3, [r7, #5]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d123      	bne.n	800e782 <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	7a5b      	ldrb	r3, [r3, #9]
 800e73e:	f1c3 0305 	rsb	r3, r3, #5
 800e742:	2201      	movs	r2, #1
 800e744:	fa02 f303 	lsl.w	r3, r2, r3
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	3b01      	subs	r3, #1
 800e74c:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 800e74e:	7afb      	ldrb	r3, [r7, #11]
 800e750:	43db      	mvns	r3, r3
 800e752:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	7a1a      	ldrb	r2, [r3, #8]
 800e758:	7abb      	ldrb	r3, [r7, #10]
 800e75a:	4013      	ands	r3, r2
 800e75c:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 800e75e:	79fa      	ldrb	r2, [r7, #7]
 800e760:	7abb      	ldrb	r3, [r7, #10]
 800e762:	4013      	ands	r3, r2
 800e764:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 800e766:	7a7a      	ldrb	r2, [r7, #9]
 800e768:	7a3b      	ldrb	r3, [r7, #8]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d109      	bne.n	800e782 <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	7a5b      	ldrb	r3, [r3, #9]
 800e772:	7cfa      	ldrb	r2, [r7, #19]
 800e774:	429a      	cmp	r2, r3
 800e776:	d804      	bhi.n	800e782 <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	7a5b      	ldrb	r3, [r3, #9]
 800e780:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	60fb      	str	r3, [r7, #12]
	while(i) {
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1c5      	bne.n	800e71a <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 800e78e:	697b      	ldr	r3, [r7, #20]

}
 800e790:	4618      	mov	r0, r3
 800e792:	371c      	adds	r7, #28
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr
 800e79c:	2000a994 	.word	0x2000a994

0800e7a0 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 800e7aa:	79fb      	ldrb	r3, [r7, #7]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	2105      	movs	r1, #5
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7ff ffa1 	bl	800e6f8 <csp_rtable_find>
 800e7b6:	60f8      	str	r0, [r7, #12]
    if (entry) {
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <csp_rtable_find_route+0x22>
	return &entry->route;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	e000      	b.n	800e7c4 <csp_rtable_find_route+0x24>
    }
    return NULL;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	603a      	str	r2, [r7, #0]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	71fb      	strb	r3, [r7, #7]
 800e7da:	460b      	mov	r3, r1
 800e7dc:	71bb      	strb	r3, [r7, #6]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 800e7e2:	79b9      	ldrb	r1, [r7, #6]
 800e7e4:	79fb      	ldrb	r3, [r7, #7]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7ff ff85 	bl	800e6f8 <csp_rtable_find>
 800e7ee:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d122      	bne.n	800e83c <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 800e7f6:	2010      	movs	r0, #16
 800e7f8:	f7fd ff68 	bl	800c6cc <csp_malloc>
 800e7fc:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d102      	bne.n	800e80a <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 800e804:	f04f 33ff 	mov.w	r3, #4294967295
 800e808:	e025      	b.n	800e856 <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2200      	movs	r2, #0
 800e80e:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 800e810:	4b13      	ldr	r3, [pc, #76]	; (800e860 <csp_rtable_set_internal+0x94>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d103      	bne.n	800e820 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 800e818:	4a11      	ldr	r2, [pc, #68]	; (800e860 <csp_rtable_set_internal+0x94>)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	e00d      	b.n	800e83c <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 800e820:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <csp_rtable_set_internal+0x94>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 800e826:	e002      	b.n	800e82e <csp_rtable_set_internal+0x62>
				i = i->next;
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1f8      	bne.n	800e828 <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	79fa      	ldrb	r2, [r7, #7]
 800e840:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	79ba      	ldrb	r2, [r7, #6]
 800e846:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	797a      	ldrb	r2, [r7, #5]
 800e852:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	2000a994 	.word	0x2000a994

0800e864 <csp_rdp_header_add>:
/**
 * RDP Headers:
 * The following functions are helper functions that handles the extra RDP
 * information that needs to be appended to all data packets.
 */
static rdp_header_t * csp_rdp_header_add(csp_packet_t * packet) {
 800e864:	b590      	push	{r4, r7, lr}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
	rdp_header_t * header;
	if ((packet->length + sizeof(*header)) > csp_buffer_data_size()) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	895b      	ldrh	r3, [r3, #10]
 800e870:	1d5c      	adds	r4, r3, #5
 800e872:	f7fe fa99 	bl	800cda8 <csp_buffer_data_size>
 800e876:	4603      	mov	r3, r0
 800e878:	429c      	cmp	r4, r3
 800e87a:	d901      	bls.n	800e880 <csp_rdp_header_add+0x1c>
		return NULL;
 800e87c:	2300      	movs	r3, #0
 800e87e:	e011      	b.n	800e8a4 <csp_rdp_header_add+0x40>
	}
	header = (rdp_header_t *) &packet->data[packet->length];
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	895b      	ldrh	r3, [r3, #10]
 800e884:	3310      	adds	r3, #16
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	4413      	add	r3, r2
 800e88a:	60fb      	str	r3, [r7, #12]
	packet->length += sizeof(*header);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	895b      	ldrh	r3, [r3, #10]
 800e890:	3305      	adds	r3, #5
 800e892:	b29a      	uxth	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	815a      	strh	r2, [r3, #10]
	memset(header, 0, sizeof(*header));
 800e898:	2205      	movs	r2, #5
 800e89a:	2100      	movs	r1, #0
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f001 fffb 	bl	8010898 <memset>
	return header;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd90      	pop	{r4, r7, pc}

0800e8ac <csp_rdp_header_remove>:

static rdp_header_t * csp_rdp_header_remove(csp_packet_t * packet) {
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
	rdp_header_t * header = (rdp_header_t *) &packet->data[packet->length - sizeof(*header)];
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	895b      	ldrh	r3, [r3, #10]
 800e8b8:	3b05      	subs	r3, #5
 800e8ba:	3310      	adds	r3, #16
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	4413      	add	r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]
	packet->length -= sizeof(*header);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	895b      	ldrh	r3, [r3, #10]
 800e8c6:	3b05      	subs	r3, #5
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	815a      	strh	r2, [r3, #10]
	return header;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <csp_rdp_header_ref>:

static rdp_header_t * csp_rdp_header_ref(csp_packet_t * packet) {
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
	rdp_header_t * header = (rdp_header_t *) &packet->data[packet->length - sizeof(*header)];
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	895b      	ldrh	r3, [r3, #10]
 800e8e8:	3b05      	subs	r3, #5
 800e8ea:	3310      	adds	r3, #16
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	60fb      	str	r3, [r7, #12]
	return header;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <csp_rdp_seq_between>:

/* Functions for comparing wrapping sequence numbers and timestamps */

/* Return 1 if seq is between start and end (both inclusive) */
static inline int csp_rdp_seq_between(uint16_t seq, uint16_t start, uint16_t end) {
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	4603      	mov	r3, r0
 800e908:	80fb      	strh	r3, [r7, #6]
 800e90a:	460b      	mov	r3, r1
 800e90c:	80bb      	strh	r3, [r7, #4]
 800e90e:	4613      	mov	r3, r2
 800e910:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(end - start) >= (uint16_t)(seq - start);
 800e912:	887a      	ldrh	r2, [r7, #2]
 800e914:	88bb      	ldrh	r3, [r7, #4]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	b29a      	uxth	r2, r3
 800e91a:	88f9      	ldrh	r1, [r7, #6]
 800e91c:	88bb      	ldrh	r3, [r7, #4]
 800e91e:	1acb      	subs	r3, r1, r3
 800e920:	b29b      	uxth	r3, r3
 800e922:	429a      	cmp	r2, r3
 800e924:	bf2c      	ite	cs
 800e926:	2301      	movcs	r3, #1
 800e928:	2300      	movcc	r3, #0
 800e92a:	b2db      	uxtb	r3, r3
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <csp_rdp_seq_before>:

/* Return 1 if seq is before cmp */
static inline int csp_rdp_seq_before(uint16_t seq, uint16_t cmp) {
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	460a      	mov	r2, r1
 800e942:	80fb      	strh	r3, [r7, #6]
 800e944:	4613      	mov	r3, r2
 800e946:	80bb      	strh	r3, [r7, #4]
	return (int16_t)(seq - cmp) < 0;
 800e948:	88fa      	ldrh	r2, [r7, #6]
 800e94a:	88bb      	ldrh	r3, [r7, #4]
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	b29b      	uxth	r3, r3
 800e950:	b21b      	sxth	r3, r3
 800e952:	b29b      	uxth	r3, r3
 800e954:	0bdb      	lsrs	r3, r3, #15
 800e956:	b2db      	uxtb	r3, r3
}
 800e958:	4618      	mov	r0, r3
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <csp_rdp_seq_after>:

/* Return 1 if seq is after cmp */
static inline int csp_rdp_seq_after(uint16_t seq, uint16_t cmp) {
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	4603      	mov	r3, r0
 800e96c:	460a      	mov	r2, r1
 800e96e:	80fb      	strh	r3, [r7, #6]
 800e970:	4613      	mov	r3, r2
 800e972:	80bb      	strh	r3, [r7, #4]
	return csp_rdp_seq_before(cmp, seq);
 800e974:	88fa      	ldrh	r2, [r7, #6]
 800e976:	88bb      	ldrh	r3, [r7, #4]
 800e978:	4611      	mov	r1, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff ffdc 	bl	800e938 <csp_rdp_seq_before>
 800e980:	4603      	mov	r3, r0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <csp_rdp_time_before>:
//static inline int csp_rdp_time_between(uint32_t time, uint32_t start, uint32_t end) {
//	return (uint32_t)(end - start) >= (uint32_t)(time - start);
//}

/* Return 1 if time is before cmp */
static inline int csp_rdp_time_before(uint32_t time, uint32_t cmp) {
 800e98a:	b480      	push	{r7}
 800e98c:	b083      	sub	sp, #12
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	6039      	str	r1, [r7, #0]
	return (int32_t)(time - cmp) < 0;
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	0fdb      	lsrs	r3, r3, #31
 800e99c:	b2db      	uxtb	r3, r3
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	370c      	adds	r7, #12
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <csp_rdp_time_after>:

/* Return 1 if time is after cmp */
static inline int csp_rdp_time_after(uint32_t time, uint32_t cmp) {
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
	return csp_rdp_time_before(cmp, time);
 800e9b4:	6879      	ldr	r1, [r7, #4]
 800e9b6:	6838      	ldr	r0, [r7, #0]
 800e9b8:	f7ff ffe7 	bl	800e98a <csp_rdp_time_before>
 800e9bc:	4603      	mov	r3, r0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
	...

0800e9c8 <csp_rdp_send_cmp>:
/**
 * CONTROL MESSAGES
 * The following function is used to send empty messages,
 * with ACK, SYN or RST flag.
 */
static int csp_rdp_send_cmp(csp_conn_t * conn, csp_packet_t * packet, int flags, int seq_nr, int ack_nr) {
 800e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9cc:	b092      	sub	sp, #72	; 0x48
 800e9ce:	af08      	add	r7, sp, #32
 800e9d0:	6178      	str	r0, [r7, #20]
 800e9d2:	6139      	str	r1, [r7, #16]
 800e9d4:	60fa      	str	r2, [r7, #12]
 800e9d6:	60bb      	str	r3, [r7, #8]

	/* Generate message */
	if (!packet) {
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10c      	bne.n	800e9f8 <csp_rdp_send_cmp+0x30>
		packet = csp_buffer_get(20);
 800e9de:	2014      	movs	r0, #20
 800e9e0:	f7fe f8a0 	bl	800cb24 <csp_buffer_get>
 800e9e4:	6138      	str	r0, [r7, #16]
		if (!packet)
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d102      	bne.n	800e9f2 <csp_rdp_send_cmp+0x2a>
			return CSP_ERR_NOMEM;
 800e9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f0:	e103      	b.n	800ebfa <csp_rdp_send_cmp+0x232>
		packet->length = 0;
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	815a      	strh	r2, [r3, #10]
	}

	/* Add RDP header */
	rdp_header_t * header = csp_rdp_header_add(packet);
 800e9f8:	6938      	ldr	r0, [r7, #16]
 800e9fa:	f7ff ff33 	bl	800e864 <csp_rdp_header_add>
 800e9fe:	6278      	str	r0, [r7, #36]	; 0x24
	if (header == NULL) {
 800ea00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10e      	bne.n	800ea24 <csp_rdp_send_cmp+0x5c>
		csp_log_error("RDP %p: No space for RDP header (cmp)", conn);
 800ea06:	4b7f      	ldr	r3, [pc, #508]	; (800ec04 <csp_rdp_send_cmp+0x23c>)
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d004      	beq.n	800ea18 <csp_rdp_send_cmp+0x50>
 800ea0e:	697a      	ldr	r2, [r7, #20]
 800ea10:	497d      	ldr	r1, [pc, #500]	; (800ec08 <csp_rdp_send_cmp+0x240>)
 800ea12:	2000      	movs	r0, #0
 800ea14:	f7fe fdc2 	bl	800d59c <do_csp_debug>
		csp_buffer_free(packet);
 800ea18:	6938      	ldr	r0, [r7, #16]
 800ea1a:	f7fe f91f 	bl	800cc5c <csp_buffer_free>
		return CSP_ERR_NOMEM;
 800ea1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea22:	e0ea      	b.n	800ebfa <csp_rdp_send_cmp+0x232>
	}
	header->seq_nr = csp_hton16(seq_nr);
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fe fe39 	bl	800d6a0 <csp_hton16>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	461a      	mov	r2, r3
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	f8a3 2001 	strh.w	r2, [r3, #1]
	header->ack_nr = csp_hton16(ack_nr);
 800ea38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fe fe2f 	bl	800d6a0 <csp_hton16>
 800ea42:	4603      	mov	r3, r0
 800ea44:	461a      	mov	r2, r3
 800ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea48:	f8a3 2003 	strh.w	r2, [r3, #3]
	header->ack = (flags & RDP_ACK) ? 1 : 0;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	105b      	asrs	r3, r3, #1
 800ea50:	f003 0301 	and.w	r3, r3, #1
 800ea54:	b2d9      	uxtb	r1, r3
 800ea56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea58:	7813      	ldrb	r3, [r2, #0]
 800ea5a:	f361 0382 	bfi	r3, r1, #2, #1
 800ea5e:	7013      	strb	r3, [r2, #0]
	header->eak = (flags & RDP_EAK) ? 1 : 0;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	109b      	asrs	r3, r3, #2
 800ea64:	f003 0301 	and.w	r3, r3, #1
 800ea68:	b2d9      	uxtb	r1, r3
 800ea6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea6c:	7813      	ldrb	r3, [r2, #0]
 800ea6e:	f361 0341 	bfi	r3, r1, #1, #1
 800ea72:	7013      	strb	r3, [r2, #0]
	header->syn = (flags & RDP_SYN) ? 1 : 0;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f003 0301 	and.w	r3, r3, #1
 800ea7a:	b2d9      	uxtb	r1, r3
 800ea7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea7e:	7813      	ldrb	r3, [r2, #0]
 800ea80:	f361 03c3 	bfi	r3, r1, #3, #1
 800ea84:	7013      	strb	r3, [r2, #0]
	header->rst = (flags & RDP_RST) ? 1 : 0;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	10db      	asrs	r3, r3, #3
 800ea8a:	f003 0301 	and.w	r3, r3, #1
 800ea8e:	b2d9      	uxtb	r1, r3
 800ea90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea92:	7813      	ldrb	r3, [r2, #0]
 800ea94:	f361 0300 	bfi	r3, r1, #0, #1
 800ea98:	7013      	strb	r3, [r2, #0]

	/* Send copy to tx_queue, before sending packet to IF */
	if (flags & RDP_SYN) {
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f003 0301 	and.w	r3, r3, #1
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d01e      	beq.n	800eae2 <csp_rdp_send_cmp+0x11a>
		rdp_packet_t * rdp_packet = csp_buffer_clone(packet);
 800eaa4:	6938      	ldr	r0, [r7, #16]
 800eaa6:	f7fe f951 	bl	800cd4c <csp_buffer_clone>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	61fb      	str	r3, [r7, #28]
		if (rdp_packet == NULL) return CSP_ERR_NOMEM;
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d102      	bne.n	800eaba <csp_rdp_send_cmp+0xf2>
 800eab4:	f04f 33ff 	mov.w	r3, #4294967295
 800eab8:	e09f      	b.n	800ebfa <csp_rdp_send_cmp+0x232>
		rdp_packet->timestamp = csp_get_ms();
 800eaba:	69fc      	ldr	r4, [r7, #28]
 800eabc:	f7fd ffa9 	bl	800ca12 <csp_get_ms>
 800eac0:	4603      	mov	r3, r0
 800eac2:	6063      	str	r3, [r4, #4]
		if (csp_queue_enqueue(conn->rdp.tx_queue, &rdp_packet, 0) != CSP_QUEUE_OK)
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eac8:	f107 011c 	add.w	r1, r7, #28
 800eacc:	2200      	movs	r2, #0
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fd fe49 	bl	800c766 <csp_queue_enqueue>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d003      	beq.n	800eae2 <csp_rdp_send_cmp+0x11a>
			csp_buffer_free(rdp_packet);
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fe f8bd 	bl	800cc5c <csp_buffer_free>
	}

	/* Send control messages with high priority */
	csp_id_t idout = conn->idout;
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	623b      	str	r3, [r7, #32]
	idout.pri = conn->idout.pri < CSP_PRIO_HIGH ? conn->idout.pri : CSP_PRIO_HIGH;
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	7adb      	ldrb	r3, [r3, #11]
 800eaec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d105      	bne.n	800eb02 <csp_rdp_send_cmp+0x13a>
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	7adb      	ldrb	r3, [r3, #11]
 800eafa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	e000      	b.n	800eb04 <csp_rdp_send_cmp+0x13c>
 800eb02:	2201      	movs	r2, #1
 800eb04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb08:	f362 1387 	bfi	r3, r2, #6, #2
 800eb0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	csp_log_protocol("RDP %p: Send CMP S %u: syn %u, ack %u, eack %u, rst %u, seq_nr %5u, ack_nr %5u, packet_len %u (%u)",
 800eb10:	4b3c      	ldr	r3, [pc, #240]	; (800ec04 <csp_rdp_send_cmp+0x23c>)
 800eb12:	795b      	ldrb	r3, [r3, #5]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d042      	beq.n	800eb9e <csp_rdp_send_cmp+0x1d6>
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	7f1b      	ldrb	r3, [r3, #28]
 800eb1c:	4698      	mov	r8, r3
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	461c      	mov	r4, r3
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	461d      	mov	r5, r3
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	461e      	mov	r6, r3
 800eb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	607b      	str	r3, [r7, #4]
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe fdb7 	bl	800d6ca <csp_ntoh16>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fe fdae 	bl	800d6ca <csp_ntoh16>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	461a      	mov	r2, r3
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	895b      	ldrh	r3, [r3, #10]
 800eb76:	4619      	mov	r1, r3
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	895b      	ldrh	r3, [r3, #10]
 800eb7c:	3b05      	subs	r3, #5
 800eb7e:	9307      	str	r3, [sp, #28]
 800eb80:	9106      	str	r1, [sp, #24]
 800eb82:	9205      	str	r2, [sp, #20]
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	9204      	str	r2, [sp, #16]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	9303      	str	r3, [sp, #12]
 800eb8c:	9602      	str	r6, [sp, #8]
 800eb8e:	9501      	str	r5, [sp, #4]
 800eb90:	9400      	str	r4, [sp, #0]
 800eb92:	4643      	mov	r3, r8
 800eb94:	697a      	ldr	r2, [r7, #20]
 800eb96:	491d      	ldr	r1, [pc, #116]	; (800ec0c <csp_rdp_send_cmp+0x244>)
 800eb98:	2005      	movs	r0, #5
 800eb9a:	f7fe fcff 	bl	800d59c <do_csp_debug>
                         conn, conn->rdp.state, header->syn, header->ack, header->eak,
                         header->rst, csp_ntoh16(header->seq_nr), csp_ntoh16(header->ack_nr),
                         packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	/* Send packet to IF */
	if (csp_send_direct(idout, packet, csp_rtable_find_route(idout.dst), 0) != CSP_ERR_NONE) {
 800eb9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eba0:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fdfa 	bl	800e7a0 <csp_rtable_find_route>
 800ebac:	4602      	mov	r2, r0
 800ebae:	2300      	movs	r3, #0
 800ebb0:	6939      	ldr	r1, [r7, #16]
 800ebb2:	6a38      	ldr	r0, [r7, #32]
 800ebb4:	f7fe fe8e 	bl	800d8d4 <csp_send_direct>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00e      	beq.n	800ebdc <csp_rdp_send_cmp+0x214>
		csp_log_error("RDP %p: INTERFACE ERROR: not possible to send", conn);
 800ebbe:	4b11      	ldr	r3, [pc, #68]	; (800ec04 <csp_rdp_send_cmp+0x23c>)
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d004      	beq.n	800ebd0 <csp_rdp_send_cmp+0x208>
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	4911      	ldr	r1, [pc, #68]	; (800ec10 <csp_rdp_send_cmp+0x248>)
 800ebca:	2000      	movs	r0, #0
 800ebcc:	f7fe fce6 	bl	800d59c <do_csp_debug>
		csp_buffer_free(packet);
 800ebd0:	6938      	ldr	r0, [r7, #16]
 800ebd2:	f7fe f843 	bl	800cc5c <csp_buffer_free>
		return CSP_ERR_BUSY;
 800ebd6:	f06f 0305 	mvn.w	r3, #5
 800ebda:	e00e      	b.n	800ebfa <csp_rdp_send_cmp+0x232>
	}

	/* Update last ACK time stamp */
	if (flags & RDP_ACK) {
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f003 0302 	and.w	r3, r3, #2
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d008      	beq.n	800ebf8 <csp_rdp_send_cmp+0x230>
		conn->rdp.rcv_lsa = ack_nr;
 800ebe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	851a      	strh	r2, [r3, #40]	; 0x28
		conn->rdp.ack_timestamp = csp_get_ms();
 800ebee:	f7fd ff10 	bl	800ca12 <csp_get_ms>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	645a      	str	r2, [r3, #68]	; 0x44
	}

	return CSP_ERR_NONE;
 800ebf8:	2300      	movs	r3, #0

}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3728      	adds	r7, #40	; 0x28
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec04:	200001a0 	.word	0x200001a0
 800ec08:	08014590 	.word	0x08014590
 800ec0c:	080145b8 	.word	0x080145b8
 800ec10:	0801461c 	.word	0x0801461c

0800ec14 <csp_rdp_send_eack>:

/**
 * EXTENDED ACKNOWLEDGEMENTS
 * The following function sends an extended ACK packet
 */
static int csp_rdp_send_eack(csp_conn_t * conn) {
 800ec14:	b590      	push	{r4, r7, lr}
 800ec16:	b08b      	sub	sp, #44	; 0x2c
 800ec18:	af02      	add	r7, sp, #8
 800ec1a:	6078      	str	r0, [r7, #4]

	/* Allocate message */
	csp_packet_t * packet_eack = csp_buffer_get(100);
 800ec1c:	2064      	movs	r0, #100	; 0x64
 800ec1e:	f7fd ff81 	bl	800cb24 <csp_buffer_get>
 800ec22:	61b8      	str	r0, [r7, #24]
	if (packet_eack == NULL) return CSP_ERR_NOMEM;
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d102      	bne.n	800ec30 <csp_rdp_send_eack+0x1c>
 800ec2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec2e:	e069      	b.n	800ed04 <csp_rdp_send_eack+0xf0>
	packet_eack->length = 0;
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	2200      	movs	r2, #0
 800ec34:	815a      	strh	r2, [r3, #10]

	/* Loop through RX queue */
	int i, count;
	csp_packet_t * packet;
	count = csp_queue_size(conn->rdp.rx_queue);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fd fddb 	bl	800c7f6 <csp_queue_size>
 800ec40:	6178      	str	r0, [r7, #20]
	for (i = 0; i < count; i++) {
 800ec42:	2300      	movs	r3, #0
 800ec44:	61fb      	str	r3, [r7, #28]
 800ec46:	e04a      	b.n	800ecde <csp_rdp_send_eack+0xca>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec4c:	f107 010c 	add.w	r1, r7, #12
 800ec50:	4a2e      	ldr	r2, [pc, #184]	; (800ed0c <csp_rdp_send_eack+0xf8>)
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fd fdbf 	bl	800c7d6 <csp_queue_dequeue_isr>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d009      	beq.n	800ec72 <csp_rdp_send_eack+0x5e>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue deliver", conn);
 800ec5e:	4b2c      	ldr	r3, [pc, #176]	; (800ed10 <csp_rdp_send_eack+0xfc>)
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d040      	beq.n	800ece8 <csp_rdp_send_eack+0xd4>
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	492a      	ldr	r1, [pc, #168]	; (800ed14 <csp_rdp_send_eack+0x100>)
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	f7fe fc96 	bl	800d59c <do_csp_debug>
			break;
 800ec70:	e03a      	b.n	800ece8 <csp_rdp_send_eack+0xd4>
		}

		/* Add seq nr to EACK packet */
		rdp_header_t * header = csp_rdp_header_ref(packet);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7ff fe31 	bl	800e8dc <csp_rdp_header_ref>
 800ec7a:	6138      	str	r0, [r7, #16]
		packet_eack->data16[packet_eack->length/sizeof(uint16_t)] = csp_hton16(header->seq_nr);
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	895b      	ldrh	r3, [r3, #10]
 800ec88:	085b      	lsrs	r3, r3, #1
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	461c      	mov	r4, r3
 800ec8e:	4610      	mov	r0, r2
 800ec90:	f7fe fd06 	bl	800d6a0 <csp_hton16>
 800ec94:	4603      	mov	r3, r0
 800ec96:	4619      	mov	r1, r3
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	f104 0208 	add.w	r2, r4, #8
 800ec9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		packet_eack->length += sizeof(uint16_t);
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	895b      	ldrh	r3, [r3, #10]
 800eca6:	3302      	adds	r3, #2
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	815a      	strh	r2, [r3, #10]
		csp_log_protocol("RDP %p: Added EACK nr %u", conn, header->seq_nr);
 800ecae:	4b18      	ldr	r3, [pc, #96]	; (800ed10 <csp_rdp_send_eack+0xfc>)
 800ecb0:	795b      	ldrb	r3, [r3, #5]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d008      	beq.n	800ecc8 <csp_rdp_send_eack+0xb4>
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	4915      	ldr	r1, [pc, #84]	; (800ed18 <csp_rdp_send_eack+0x104>)
 800ecc2:	2005      	movs	r0, #5
 800ecc4:	f7fe fc6a 	bl	800d59c <do_csp_debug>

		/* Requeue */
		csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eccc:	f107 010c 	add.w	r1, r7, #12
 800ecd0:	4a0e      	ldr	r2, [pc, #56]	; (800ed0c <csp_rdp_send_eack+0xf8>)
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fd fd5b 	bl	800c78e <csp_queue_enqueue_isr>
	for (i = 0; i < count; i++) {
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	61fb      	str	r3, [r7, #28]
 800ecde:	69fa      	ldr	r2, [r7, #28]
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	dbb0      	blt.n	800ec48 <csp_rdp_send_eack+0x34>
 800ece6:	e000      	b.n	800ecea <csp_rdp_send_eack+0xd6>
			break;
 800ece8:	bf00      	nop

	}

	return csp_rdp_send_cmp(conn, packet_eack, RDP_ACK | RDP_EAK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	8bdb      	ldrh	r3, [r3, #30]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ecf4:	9300      	str	r3, [sp, #0]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	2206      	movs	r2, #6
 800ecfa:	69b9      	ldr	r1, [r7, #24]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7ff fe63 	bl	800e9c8 <csp_rdp_send_cmp>
 800ed02:	4603      	mov	r3, r0

}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3724      	adds	r7, #36	; 0x24
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd90      	pop	{r4, r7, pc}
 800ed0c:	20000200 	.word	0x20000200
 800ed10:	200001a0 	.word	0x200001a0
 800ed14:	0801464c 	.word	0x0801464c
 800ed18:	08014684 	.word	0x08014684

0800ed1c <csp_rdp_send_syn>:

/**
 * SYN Packet
 * The following function sends a SYN packet
 */
static int csp_rdp_send_syn(csp_conn_t * conn) {
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b086      	sub	sp, #24
 800ed20:	af02      	add	r7, sp, #8
 800ed22:	6078      	str	r0, [r7, #4]

	/* Allocate message */
	csp_packet_t * packet = csp_buffer_get(100);
 800ed24:	2064      	movs	r0, #100	; 0x64
 800ed26:	f7fd fefd 	bl	800cb24 <csp_buffer_get>
 800ed2a:	60f8      	str	r0, [r7, #12]
	if (packet == NULL) return CSP_ERR_NOMEM;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d102      	bne.n	800ed38 <csp_rdp_send_syn+0x1c>
 800ed32:	f04f 33ff 	mov.w	r3, #4294967295
 800ed36:	e03e      	b.n	800edb6 <csp_rdp_send_syn+0x9a>

	/* Generate contents */
	packet->data32[0] = csp_hton32(csp_rdp_window_size);
 800ed38:	4b21      	ldr	r3, [pc, #132]	; (800edc0 <csp_rdp_send_syn+0xa4>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fe fcd2 	bl	800d6e6 <csp_hton32>
 800ed42:	4602      	mov	r2, r0
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	611a      	str	r2, [r3, #16]
	packet->data32[1] = csp_hton32(csp_rdp_conn_timeout);
 800ed48:	4b1e      	ldr	r3, [pc, #120]	; (800edc4 <csp_rdp_send_syn+0xa8>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7fe fcca 	bl	800d6e6 <csp_hton32>
 800ed52:	4602      	mov	r2, r0
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	615a      	str	r2, [r3, #20]
	packet->data32[2] = csp_hton32(csp_rdp_packet_timeout);
 800ed58:	4b1b      	ldr	r3, [pc, #108]	; (800edc8 <csp_rdp_send_syn+0xac>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fe fcc2 	bl	800d6e6 <csp_hton32>
 800ed62:	4602      	mov	r2, r0
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	619a      	str	r2, [r3, #24]
	packet->data32[3] = csp_hton32(csp_rdp_delayed_acks);
 800ed68:	4b18      	ldr	r3, [pc, #96]	; (800edcc <csp_rdp_send_syn+0xb0>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fe fcba 	bl	800d6e6 <csp_hton32>
 800ed72:	4602      	mov	r2, r0
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	61da      	str	r2, [r3, #28]
	packet->data32[4] = csp_hton32(csp_rdp_ack_timeout);
 800ed78:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <csp_rdp_send_syn+0xb4>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fe fcb2 	bl	800d6e6 <csp_hton32>
 800ed82:	4602      	mov	r2, r0
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	621a      	str	r2, [r3, #32]
	packet->data32[5] = csp_hton32(csp_rdp_ack_delay_count);
 800ed88:	4b12      	ldr	r3, [pc, #72]	; (800edd4 <csp_rdp_send_syn+0xb8>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fe fcaa 	bl	800d6e6 <csp_hton32>
 800ed92:	4602      	mov	r2, r0
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	625a      	str	r2, [r3, #36]	; 0x24
	packet->length = 6 * sizeof(uint32_t);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2218      	movs	r2, #24
 800ed9c:	815a      	strh	r2, [r3, #10]

	return csp_rdp_send_cmp(conn, packet, RDP_SYN, conn->rdp.snd_iss, 0);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800eda2:	461a      	mov	r2, r3
 800eda4:	2300      	movs	r3, #0
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	4613      	mov	r3, r2
 800edaa:	2201      	movs	r2, #1
 800edac:	68f9      	ldr	r1, [r7, #12]
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7ff fe0a 	bl	800e9c8 <csp_rdp_send_cmp>
 800edb4:	4603      	mov	r3, r0

}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	200001e8 	.word	0x200001e8
 800edc4:	200001ec 	.word	0x200001ec
 800edc8:	200001f0 	.word	0x200001f0
 800edcc:	200001f4 	.word	0x200001f4
 800edd0:	200001f8 	.word	0x200001f8
 800edd4:	200001fc 	.word	0x200001fc

0800edd8 <csp_rdp_receive_data>:

static inline int csp_rdp_receive_data(csp_conn_t * conn, csp_packet_t * packet) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]

	/* Remove RDP header before passing to userspace */
	csp_rdp_header_remove(packet);
 800ede2:	6838      	ldr	r0, [r7, #0]
 800ede4:	f7ff fd62 	bl	800e8ac <csp_rdp_header_remove>

	/* Enqueue data */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 800ede8:	6839      	ldr	r1, [r7, #0]
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7fe f82c 	bl	800ce48 <csp_conn_enqueue_packet>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	da0b      	bge.n	800ee0e <csp_rdp_receive_data+0x36>
		csp_log_warn("RDP %p: Conn RX buffer full", conn);
 800edf6:	4b08      	ldr	r3, [pc, #32]	; (800ee18 <csp_rdp_receive_data+0x40>)
 800edf8:	785b      	ldrb	r3, [r3, #1]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d004      	beq.n	800ee08 <csp_rdp_receive_data+0x30>
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	4906      	ldr	r1, [pc, #24]	; (800ee1c <csp_rdp_receive_data+0x44>)
 800ee02:	2001      	movs	r0, #1
 800ee04:	f7fe fbca 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOBUFS;
 800ee08:	f06f 0308 	mvn.w	r3, #8
 800ee0c:	e000      	b.n	800ee10 <csp_rdp_receive_data+0x38>
	}

	return CSP_ERR_NONE;
 800ee0e:	2300      	movs	r3, #0

}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	200001a0 	.word	0x200001a0
 800ee1c:	080146a0 	.word	0x080146a0

0800ee20 <csp_rdp_rx_queue_flush>:

static inline void csp_rdp_rx_queue_flush(csp_conn_t * conn) {
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
	/* Loop through RX queue */
	int i, count;
	csp_packet_t * packet;

front:
	count = csp_queue_size(conn->rdp.rx_queue);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fd fce2 	bl	800c7f6 <csp_queue_size>
 800ee32:	6138      	str	r0, [r7, #16]
	for (i = 0; i < count; i++) {
 800ee34:	2300      	movs	r3, #0
 800ee36:	617b      	str	r3, [r7, #20]
 800ee38:	e054      	b.n	800eee4 <csp_rdp_rx_queue_flush+0xc4>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee3e:	f107 0108 	add.w	r1, r7, #8
 800ee42:	4a2d      	ldr	r2, [pc, #180]	; (800eef8 <csp_rdp_rx_queue_flush+0xd8>)
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fd fcc6 	bl	800c7d6 <csp_queue_dequeue_isr>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d009      	beq.n	800ee64 <csp_rdp_rx_queue_flush+0x44>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue deliver", conn);
 800ee50:	4b2a      	ldr	r3, [pc, #168]	; (800eefc <csp_rdp_rx_queue_flush+0xdc>)
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d04a      	beq.n	800eeee <csp_rdp_rx_queue_flush+0xce>
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	4929      	ldr	r1, [pc, #164]	; (800ef00 <csp_rdp_rx_queue_flush+0xe0>)
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	f7fe fb9d 	bl	800d59c <do_csp_debug>
			break;
 800ee62:	e044      	b.n	800eeee <csp_rdp_rx_queue_flush+0xce>
		}

		rdp_header_t * header = csp_rdp_header_ref(packet);
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff fd38 	bl	800e8dc <csp_rdp_header_ref>
 800ee6c:	60f8      	str	r0, [r7, #12]
		csp_log_protocol("RDP %p: RX Queue deliver matching Element, seq %u", conn, header->seq_nr);
 800ee6e:	4b23      	ldr	r3, [pc, #140]	; (800eefc <csp_rdp_rx_queue_flush+0xdc>)
 800ee70:	795b      	ldrb	r3, [r3, #5]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d008      	beq.n	800ee88 <csp_rdp_rx_queue_flush+0x68>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	4920      	ldr	r1, [pc, #128]	; (800ef04 <csp_rdp_rx_queue_flush+0xe4>)
 800ee82:	2005      	movs	r0, #5
 800ee84:	f7fe fb8a 	bl	800d59c <do_csp_debug>

		/* If the matching packet was found: */
		if (header->seq_nr == (uint16_t)(conn->rdp.rcv_cur + 1)) {
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee94:	3301      	adds	r3, #1
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d118      	bne.n	800eece <csp_rdp_rx_queue_flush+0xae>
			csp_log_protocol("RDP %p: Deliver seq %u", conn, header->seq_nr);
 800ee9c:	4b17      	ldr	r3, [pc, #92]	; (800eefc <csp_rdp_rx_queue_flush+0xdc>)
 800ee9e:	795b      	ldrb	r3, [r3, #5]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d008      	beq.n	800eeb6 <csp_rdp_rx_queue_flush+0x96>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	4916      	ldr	r1, [pc, #88]	; (800ef08 <csp_rdp_rx_queue_flush+0xe8>)
 800eeb0:	2005      	movs	r0, #5
 800eeb2:	f7fe fb73 	bl	800d59c <do_csp_debug>
			csp_rdp_receive_data(conn, packet);
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff ff8c 	bl	800edd8 <csp_rdp_receive_data>
			conn->rdp.rcv_cur++;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eec4:	3301      	adds	r3, #1
 800eec6:	b29a      	uxth	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	849a      	strh	r2, [r3, #36]	; 0x24
			/* Loop from first element again */
			goto front;
 800eecc:	e7ac      	b.n	800ee28 <csp_rdp_rx_queue_flush+0x8>

		/* Otherwise, requeue */
		} else {
			csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eed2:	f107 0108 	add.w	r1, r7, #8
 800eed6:	4a08      	ldr	r2, [pc, #32]	; (800eef8 <csp_rdp_rx_queue_flush+0xd8>)
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fd fc58 	bl	800c78e <csp_queue_enqueue_isr>
	for (i = 0; i < count; i++) {
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	3301      	adds	r3, #1
 800eee2:	617b      	str	r3, [r7, #20]
 800eee4:	697a      	ldr	r2, [r7, #20]
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	dba6      	blt.n	800ee3a <csp_rdp_rx_queue_flush+0x1a>
		}

	}

}
 800eeec:	e000      	b.n	800eef0 <csp_rdp_rx_queue_flush+0xd0>
			break;
 800eeee:	bf00      	nop
}
 800eef0:	bf00      	nop
 800eef2:	3718      	adds	r7, #24
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	20000200 	.word	0x20000200
 800eefc:	200001a0 	.word	0x200001a0
 800ef00:	0801464c 	.word	0x0801464c
 800ef04:	080146bc 	.word	0x080146bc
 800ef08:	080146f0 	.word	0x080146f0

0800ef0c <csp_rdp_seq_in_rx_queue>:

static inline bool csp_rdp_seq_in_rx_queue(csp_conn_t * conn, uint16_t seq_nr) {
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	460b      	mov	r3, r1
 800ef16:	807b      	strh	r3, [r7, #2]

	/* Loop through RX queue */
	int i, count;
	rdp_packet_t * packet;
	count = csp_queue_size(conn->rdp.rx_queue);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fd fc6a 	bl	800c7f6 <csp_queue_size>
 800ef22:	6138      	str	r0, [r7, #16]
	for (i = 0; i < count; i++) {
 800ef24:	2300      	movs	r3, #0
 800ef26:	617b      	str	r3, [r7, #20]
 800ef28:	e043      	b.n	800efb2 <csp_rdp_seq_in_rx_queue+0xa6>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef2e:	f107 0108 	add.w	r1, r7, #8
 800ef32:	4a25      	ldr	r2, [pc, #148]	; (800efc8 <csp_rdp_seq_in_rx_queue+0xbc>)
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fd fc4e 	bl	800c7d6 <csp_queue_dequeue_isr>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d009      	beq.n	800ef54 <csp_rdp_seq_in_rx_queue+0x48>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue exists", conn);
 800ef40:	4b22      	ldr	r3, [pc, #136]	; (800efcc <csp_rdp_seq_in_rx_queue+0xc0>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d039      	beq.n	800efbc <csp_rdp_seq_in_rx_queue+0xb0>
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	4921      	ldr	r1, [pc, #132]	; (800efd0 <csp_rdp_seq_in_rx_queue+0xc4>)
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	f7fe fb25 	bl	800d59c <do_csp_debug>
			break;
 800ef52:	e033      	b.n	800efbc <csp_rdp_seq_in_rx_queue+0xb0>
		}

		csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef58:	f107 0108 	add.w	r1, r7, #8
 800ef5c:	4a1a      	ldr	r2, [pc, #104]	; (800efc8 <csp_rdp_seq_in_rx_queue+0xbc>)
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fd fc15 	bl	800c78e <csp_queue_enqueue_isr>

		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff fcb8 	bl	800e8dc <csp_rdp_header_ref>
 800ef6c:	60f8      	str	r0, [r7, #12]
		csp_log_protocol("RDP %p: RX Queue exists matching Element, seq %u", conn, header->seq_nr);
 800ef6e:	4b17      	ldr	r3, [pc, #92]	; (800efcc <csp_rdp_seq_in_rx_queue+0xc0>)
 800ef70:	795b      	ldrb	r3, [r3, #5]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d008      	beq.n	800ef88 <csp_rdp_seq_in_rx_queue+0x7c>
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	4914      	ldr	r1, [pc, #80]	; (800efd4 <csp_rdp_seq_in_rx_queue+0xc8>)
 800ef82:	2005      	movs	r0, #5
 800ef84:	f7fe fb0a 	bl	800d59c <do_csp_debug>

		/* If the matching packet was found, deliver */
		if (header->seq_nr == seq_nr) {
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	887a      	ldrh	r2, [r7, #2]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d10a      	bne.n	800efac <csp_rdp_seq_in_rx_queue+0xa0>
                    csp_log_protocol("RDP %p: We have a match", conn);
 800ef96:	4b0d      	ldr	r3, [pc, #52]	; (800efcc <csp_rdp_seq_in_rx_queue+0xc0>)
 800ef98:	795b      	ldrb	r3, [r3, #5]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d004      	beq.n	800efa8 <csp_rdp_seq_in_rx_queue+0x9c>
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	490d      	ldr	r1, [pc, #52]	; (800efd8 <csp_rdp_seq_in_rx_queue+0xcc>)
 800efa2:	2005      	movs	r0, #5
 800efa4:	f7fe fafa 	bl	800d59c <do_csp_debug>
			return true;
 800efa8:	2301      	movs	r3, #1
 800efaa:	e009      	b.n	800efc0 <csp_rdp_seq_in_rx_queue+0xb4>
	for (i = 0; i < count; i++) {
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	3301      	adds	r3, #1
 800efb0:	617b      	str	r3, [r7, #20]
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	dbb7      	blt.n	800ef2a <csp_rdp_seq_in_rx_queue+0x1e>
 800efba:	e000      	b.n	800efbe <csp_rdp_seq_in_rx_queue+0xb2>
			break;
 800efbc:	bf00      	nop
		}

	}

	return false;
 800efbe:	2300      	movs	r3, #0

}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3718      	adds	r7, #24
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	20000200 	.word	0x20000200
 800efcc:	200001a0 	.word	0x200001a0
 800efd0:	08014708 	.word	0x08014708
 800efd4:	08014740 	.word	0x08014740
 800efd8:	08014774 	.word	0x08014774

0800efdc <csp_rdp_rx_queue_add>:

static inline int csp_rdp_rx_queue_add(csp_conn_t * conn, csp_packet_t * packet, uint16_t seq_nr) {
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	4613      	mov	r3, r2
 800efe8:	80fb      	strh	r3, [r7, #6]

	if (csp_rdp_seq_in_rx_queue(conn, seq_nr))
 800efea:	88fb      	ldrh	r3, [r7, #6]
 800efec:	4619      	mov	r1, r3
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff ff8c 	bl	800ef0c <csp_rdp_seq_in_rx_queue>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <csp_rdp_rx_queue_add+0x22>
		return CSP_QUEUE_ERROR;
 800effa:	2300      	movs	r3, #0
 800effc:	e008      	b.n	800f010 <csp_rdp_rx_queue_add+0x34>
	return csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f002:	f107 0108 	add.w	r1, r7, #8
 800f006:	4a04      	ldr	r2, [pc, #16]	; (800f018 <csp_rdp_rx_queue_add+0x3c>)
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fd fbc0 	bl	800c78e <csp_queue_enqueue_isr>
 800f00e:	4603      	mov	r3, r0

}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	20000200 	.word	0x20000200

0800f01c <csp_rdp_flush_eack>:

static void csp_rdp_flush_eack(csp_conn_t * conn, csp_packet_t * eack_packet) {
 800f01c:	b590      	push	{r4, r7, lr}
 800f01e:	b08d      	sub	sp, #52	; 0x34
 800f020:	af02      	add	r7, sp, #8
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]

	/* Loop through TX queue */
	int i, j, count;
	rdp_packet_t * packet;
	count = csp_queue_size(conn->rdp.tx_queue);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fd fbe3 	bl	800c7f6 <csp_queue_size>
 800f030:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < count; i++) {
 800f032:	2300      	movs	r3, #0
 800f034:	627b      	str	r3, [r7, #36]	; 0x24
 800f036:	e0a7      	b.n	800f188 <csp_rdp_flush_eack+0x16c>

		if (csp_queue_dequeue(conn->rdp.tx_queue, &packet, 0) != CSP_QUEUE_OK) {
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f03c:	f107 010c 	add.w	r1, r7, #12
 800f040:	2200      	movs	r2, #0
 800f042:	4618      	mov	r0, r3
 800f044:	f7fd fbb4 	bl	800c7b0 <csp_queue_dequeue>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d00a      	beq.n	800f064 <csp_rdp_flush_eack+0x48>
			csp_log_error("RDP %p: Cannot dequeue from tx_queue in flush EACK", conn);
 800f04e:	4b54      	ldr	r3, [pc, #336]	; (800f1a0 <csp_rdp_flush_eack+0x184>)
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 809e 	beq.w	800f194 <csp_rdp_flush_eack+0x178>
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	4952      	ldr	r1, [pc, #328]	; (800f1a4 <csp_rdp_flush_eack+0x188>)
 800f05c:	2000      	movs	r0, #0
 800f05e:	f7fe fa9d 	bl	800d59c <do_csp_debug>
			break;
 800f062:	e097      	b.n	800f194 <csp_rdp_flush_eack+0x178>
		}

		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff fc38 	bl	800e8dc <csp_rdp_header_ref>
 800f06c:	6178      	str	r0, [r7, #20]
		csp_log_protocol("RDP %p: EACK compare element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(header->seq_nr));
 800f06e:	4b4c      	ldr	r3, [pc, #304]	; (800f1a0 <csp_rdp_flush_eack+0x184>)
 800f070:	795b      	ldrb	r3, [r3, #5]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d010      	beq.n	800f098 <csp_rdp_flush_eack+0x7c>
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	685c      	ldr	r4, [r3, #4]
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f080:	b29b      	uxth	r3, r3
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe fb21 	bl	800d6ca <csp_ntoh16>
 800f088:	4603      	mov	r3, r0
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	4623      	mov	r3, r4
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	4945      	ldr	r1, [pc, #276]	; (800f1a8 <csp_rdp_flush_eack+0x18c>)
 800f092:	2005      	movs	r0, #5
 800f094:	f7fe fa82 	bl	800d59c <do_csp_debug>

		/* Look for this element in EACKs */
		int match = 0;
 800f098:	2300      	movs	r3, #0
 800f09a:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < (int)((eack_packet->length - sizeof(rdp_header_t)) / sizeof(uint16_t)); j++) {
 800f09c:	2300      	movs	r3, #0
 800f09e:	623b      	str	r3, [r7, #32]
 800f0a0:	e046      	b.n	800f130 <csp_rdp_flush_eack+0x114>
			if (csp_ntoh16(eack_packet->data16[j]) == csp_ntoh16(header->seq_nr))
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	6a3a      	ldr	r2, [r7, #32]
 800f0a6:	3208      	adds	r2, #8
 800f0a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fe fb0c 	bl	800d6ca <csp_ntoh16>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	461c      	mov	r4, r3
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe fb03 	bl	800d6ca <csp_ntoh16>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	429c      	cmp	r4, r3
 800f0c8:	d101      	bne.n	800f0ce <csp_rdp_flush_eack+0xb2>
				match = 1;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	61fb      	str	r3, [r7, #28]

			/* Enable this if you want EACK's to trigger retransmission */
			if (csp_ntoh16(eack_packet->data16[j]) > csp_ntoh16(header->seq_nr)) {
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	6a3a      	ldr	r2, [r7, #32]
 800f0d2:	3208      	adds	r2, #8
 800f0d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fe faf6 	bl	800d6ca <csp_ntoh16>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	461c      	mov	r4, r3
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fe faed 	bl	800d6ca <csp_ntoh16>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	429c      	cmp	r4, r3
 800f0f4:	d919      	bls.n	800f12a <csp_rdp_flush_eack+0x10e>
				uint32_t time_now = csp_get_ms();
 800f0f6:	f7fd fc8c 	bl	800ca12 <csp_get_ms>
 800f0fa:	6138      	str	r0, [r7, #16]
				if (csp_rdp_time_after(time_now, packet->quarantine)) {
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4619      	mov	r1, r3
 800f102:	6938      	ldr	r0, [r7, #16]
 800f104:	f7ff fc51 	bl	800e9aa <csp_rdp_time_after>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00d      	beq.n	800f12a <csp_rdp_flush_eack+0x10e>
					packet->timestamp = time_now - conn->rdp.packet_timeout - 1;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	1ad2      	subs	r2, r2, r3
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	3a01      	subs	r2, #1
 800f11a:	605a      	str	r2, [r3, #4]
					packet->quarantine = time_now +	conn->rdp.packet_timeout / 2;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f120:	0859      	lsrs	r1, r3, #1
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	440a      	add	r2, r1
 800f128:	601a      	str	r2, [r3, #0]
		for (j = 0; j < (int)((eack_packet->length - sizeof(rdp_header_t)) / sizeof(uint16_t)); j++) {
 800f12a:	6a3b      	ldr	r3, [r7, #32]
 800f12c:	3301      	adds	r3, #1
 800f12e:	623b      	str	r3, [r7, #32]
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	895b      	ldrh	r3, [r3, #10]
 800f134:	3b05      	subs	r3, #5
 800f136:	085b      	lsrs	r3, r3, #1
 800f138:	461a      	mov	r2, r3
 800f13a:	6a3b      	ldr	r3, [r7, #32]
 800f13c:	4293      	cmp	r3, r2
 800f13e:	dbb0      	blt.n	800f0a2 <csp_rdp_flush_eack+0x86>
				}
			}
		}

		if (match == 0) {
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d108      	bne.n	800f158 <csp_rdp_flush_eack+0x13c>
			/* If not found, put back on tx queue */
			csp_queue_enqueue(conn->rdp.tx_queue, &packet, 0);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f14a:	f107 010c 	add.w	r1, r7, #12
 800f14e:	2200      	movs	r2, #0
 800f150:	4618      	mov	r0, r3
 800f152:	f7fd fb08 	bl	800c766 <csp_queue_enqueue>
 800f156:	e014      	b.n	800f182 <csp_rdp_flush_eack+0x166>
		} else {
			/* Found, free */
			csp_log_protocol("RDP %p: TX Element %u freed", conn, csp_ntoh16(header->seq_nr));
 800f158:	4b11      	ldr	r3, [pc, #68]	; (800f1a0 <csp_rdp_flush_eack+0x184>)
 800f15a:	795b      	ldrb	r3, [r3, #5]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00c      	beq.n	800f17a <csp_rdp_flush_eack+0x15e>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f166:	b29b      	uxth	r3, r3
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fe faae 	bl	800d6ca <csp_ntoh16>
 800f16e:	4603      	mov	r3, r0
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	490e      	ldr	r1, [pc, #56]	; (800f1ac <csp_rdp_flush_eack+0x190>)
 800f174:	2005      	movs	r0, #5
 800f176:	f7fe fa11 	bl	800d59c <do_csp_debug>
			csp_buffer_free(packet);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7fd fd6d 	bl	800cc5c <csp_buffer_free>
	for (i = 0; i < count; i++) {
 800f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f184:	3301      	adds	r3, #1
 800f186:	627b      	str	r3, [r7, #36]	; 0x24
 800f188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f18a:	69bb      	ldr	r3, [r7, #24]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	f6ff af53 	blt.w	800f038 <csp_rdp_flush_eack+0x1c>
		}

	}

}
 800f192:	e000      	b.n	800f196 <csp_rdp_flush_eack+0x17a>
			break;
 800f194:	bf00      	nop
}
 800f196:	bf00      	nop
 800f198:	372c      	adds	r7, #44	; 0x2c
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd90      	pop	{r4, r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	200001a0 	.word	0x200001a0
 800f1a4:	0801478c 	.word	0x0801478c
 800f1a8:	080147c0 	.word	0x080147c0
 800f1ac:	080147f0 	.word	0x080147f0

0800f1b0 <csp_rdp_should_ack>:

static inline bool csp_rdp_should_ack(csp_conn_t * conn) {
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]

	/* If delayed ACKs are not used, always ACK */
	if (!conn->rdp.delayed_acks) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d101      	bne.n	800f1c4 <csp_rdp_should_ack+0x14>
		return true;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	e022      	b.n	800f20a <csp_rdp_should_ack+0x5a>
	}

	/* ACK if time since last ACK is greater than ACK timeout */
	uint32_t time_now = csp_get_ms();
 800f1c4:	f7fd fc25 	bl	800ca12 <csp_get_ms>
 800f1c8:	60f8      	str	r0, [r7, #12]
	if (csp_rdp_time_after(time_now, conn->rdp.ack_timestamp + conn->rdp.ack_timeout))
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1d2:	4413      	add	r3, r2
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f7ff fbe7 	bl	800e9aa <csp_rdp_time_after>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d001      	beq.n	800f1e6 <csp_rdp_should_ack+0x36>
		return true;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	e011      	b.n	800f20a <csp_rdp_should_ack+0x5a>

	/* ACK if number of unacknowledged packets is greater than delay count */
	if (csp_rdp_seq_after(conn->rdp.rcv_cur, conn->rdp.rcv_lsa + conn->rdp.ack_delay_count))
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	4413      	add	r3, r2
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	f7ff fbb3 	bl	800e964 <csp_rdp_seq_after>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <csp_rdp_should_ack+0x58>
		return true;
 800f204:	2301      	movs	r3, #1
 800f206:	e000      	b.n	800f20a <csp_rdp_should_ack+0x5a>

	return false;
 800f208:	2300      	movs	r3, #0

}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
	...

0800f214 <csp_rdp_flush_all>:

void csp_rdp_flush_all(csp_conn_t * conn) {
 800f214:	b590      	push	{r4, r7, lr}
 800f216:	b087      	sub	sp, #28
 800f218:	af02      	add	r7, sp, #8
 800f21a:	6078      	str	r0, [r7, #4]

	if ((conn == NULL) || conn->rdp.tx_queue == NULL) {
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d003      	beq.n	800f22a <csp_rdp_flush_all+0x16>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f226:	2b00      	cmp	r3, #0
 800f228:	d129      	bne.n	800f27e <csp_rdp_flush_all+0x6a>
		csp_log_error("RDP %p: Null pointer passed to rdp flush all", conn);
 800f22a:	4b33      	ldr	r3, [pc, #204]	; (800f2f8 <csp_rdp_flush_all+0xe4>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d05d      	beq.n	800f2ee <csp_rdp_flush_all+0xda>
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	4931      	ldr	r1, [pc, #196]	; (800f2fc <csp_rdp_flush_all+0xe8>)
 800f236:	2000      	movs	r0, #0
 800f238:	f7fe f9b0 	bl	800d59c <do_csp_debug>
 800f23c:	e058      	b.n	800f2f0 <csp_rdp_flush_all+0xdc>

	rdp_packet_t * packet;

	/* Empty TX queue */
	while (csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
		if (packet != NULL) {
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d01c      	beq.n	800f27e <csp_rdp_flush_all+0x6a>
			csp_log_protocol("RDP %p: Flush TX Element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(csp_rdp_header_ref((csp_packet_t *) packet)->seq_nr));
 800f244:	4b2c      	ldr	r3, [pc, #176]	; (800f2f8 <csp_rdp_flush_all+0xe4>)
 800f246:	795b      	ldrb	r3, [r3, #5]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d014      	beq.n	800f276 <csp_rdp_flush_all+0x62>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	685c      	ldr	r4, [r3, #4]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff fb42 	bl	800e8dc <csp_rdp_header_ref>
 800f258:	4603      	mov	r3, r0
 800f25a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f25e:	b29b      	uxth	r3, r3
 800f260:	4618      	mov	r0, r3
 800f262:	f7fe fa32 	bl	800d6ca <csp_ntoh16>
 800f266:	4603      	mov	r3, r0
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	4623      	mov	r3, r4
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	4924      	ldr	r1, [pc, #144]	; (800f300 <csp_rdp_flush_all+0xec>)
 800f270:	2005      	movs	r0, #5
 800f272:	f7fe f993 	bl	800d59c <do_csp_debug>
			csp_buffer_free(packet);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fd fcef 	bl	800cc5c <csp_buffer_free>
	while (csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f282:	f107 010c 	add.w	r1, r7, #12
 800f286:	4a1f      	ldr	r2, [pc, #124]	; (800f304 <csp_rdp_flush_all+0xf0>)
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fd faa4 	bl	800c7d6 <csp_queue_dequeue_isr>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b01      	cmp	r3, #1
 800f292:	d0d4      	beq.n	800f23e <csp_rdp_flush_all+0x2a>
		}
	}

	/* Empty RX queue */
	while (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 800f294:	e01f      	b.n	800f2d6 <csp_rdp_flush_all+0xc2>
		if (packet != NULL) {
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d01c      	beq.n	800f2d6 <csp_rdp_flush_all+0xc2>
			csp_log_protocol("RDP %p: Flush RX Element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(csp_rdp_header_ref((csp_packet_t *) packet)->seq_nr));
 800f29c:	4b16      	ldr	r3, [pc, #88]	; (800f2f8 <csp_rdp_flush_all+0xe4>)
 800f29e:	795b      	ldrb	r3, [r3, #5]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d014      	beq.n	800f2ce <csp_rdp_flush_all+0xba>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	685c      	ldr	r4, [r3, #4]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff fb16 	bl	800e8dc <csp_rdp_header_ref>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe fa06 	bl	800d6ca <csp_ntoh16>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	4623      	mov	r3, r4
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	4910      	ldr	r1, [pc, #64]	; (800f308 <csp_rdp_flush_all+0xf4>)
 800f2c8:	2005      	movs	r0, #5
 800f2ca:	f7fe f967 	bl	800d59c <do_csp_debug>
			csp_buffer_free(packet);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fd fcc3 	bl	800cc5c <csp_buffer_free>
	while (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2da:	f107 010c 	add.w	r1, r7, #12
 800f2de:	4a09      	ldr	r2, [pc, #36]	; (800f304 <csp_rdp_flush_all+0xf0>)
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7fd fa78 	bl	800c7d6 <csp_queue_dequeue_isr>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d0d4      	beq.n	800f296 <csp_rdp_flush_all+0x82>
 800f2ec:	e000      	b.n	800f2f0 <csp_rdp_flush_all+0xdc>
		return;
 800f2ee:	bf00      	nop
		}
	}

}
 800f2f0:	3714      	adds	r7, #20
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd90      	pop	{r4, r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	200001a0 	.word	0x200001a0
 800f2fc:	0801480c 	.word	0x0801480c
 800f300:	0801483c 	.word	0x0801483c
 800f304:	20000200 	.word	0x20000200
 800f308:	08014868 	.word	0x08014868

0800f30c <csp_rdp_check_ack>:


int csp_rdp_check_ack(csp_conn_t * conn) {
 800f30c:	b590      	push	{r4, r7, lr}
 800f30e:	b087      	sub	sp, #28
 800f310:	af02      	add	r7, sp, #8
 800f312:	6078      	str	r0, [r7, #4]

	/* Check all RX queues for spare capacity */
	int avail = 1;
 800f314:	2301      	movs	r3, #1
 800f316:	60fb      	str	r3, [r7, #12]
	for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800f318:	2300      	movs	r3, #0
 800f31a:	60bb      	str	r3, [r7, #8]
 800f31c:	e018      	b.n	800f350 <csp_rdp_check_ack+0x44>
		if (csp_conf.conn_queue_length - csp_queue_size(conn->rx_queue[prio]) <= 2 * (int32_t)conn->rdp.window_size) {
 800f31e:	4b1b      	ldr	r3, [pc, #108]	; (800f38c <csp_rdp_check_ack+0x80>)
 800f320:	7c5b      	ldrb	r3, [r3, #17]
 800f322:	461c      	mov	r4, r3
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	3302      	adds	r3, #2
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	f7fd fa60 	bl	800c7f6 <csp_queue_size>
 800f336:	4603      	mov	r3, r0
 800f338:	1ae2      	subs	r2, r4, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f33e:	005b      	lsls	r3, r3, #1
 800f340:	429a      	cmp	r2, r3
 800f342:	dc02      	bgt.n	800f34a <csp_rdp_check_ack+0x3e>
			avail = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	60fb      	str	r3, [r7, #12]
			break;
 800f348:	e005      	b.n	800f356 <csp_rdp_check_ack+0x4a>
	for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	3301      	adds	r3, #1
 800f34e:	60bb      	str	r3, [r7, #8]
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	dde3      	ble.n	800f31e <csp_rdp_check_ack+0x12>
		}
	}

	/* If more space available, only send after ack timeout or immediately if delay_acks is zero */
	if (avail && csp_rdp_should_ack(conn)) {
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d011      	beq.n	800f380 <csp_rdp_check_ack+0x74>
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7ff ff27 	bl	800f1b0 <csp_rdp_should_ack>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00b      	beq.n	800f380 <csp_rdp_check_ack+0x74>
		csp_rdp_send_cmp(conn, NULL, RDP_ACK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	8bdb      	ldrh	r3, [r3, #30]
 800f36c:	461a      	mov	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f372:	9300      	str	r3, [sp, #0]
 800f374:	4613      	mov	r3, r2
 800f376:	2202      	movs	r2, #2
 800f378:	2100      	movs	r1, #0
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7ff fb24 	bl	800e9c8 <csp_rdp_send_cmp>
	}

	return CSP_ERR_NONE;
 800f380:	2300      	movs	r3, #0

}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	bd90      	pop	{r4, r7, pc}
 800f38a:	bf00      	nop
 800f38c:	2000a96c 	.word	0x2000a96c

0800f390 <csp_rdp_is_conn_ready_for_tx>:

static inline bool csp_rdp_is_conn_ready_for_tx(csp_conn_t * conn)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
	// Check Tx window (messages waiting for acks)
	if (csp_rdp_seq_after(conn->rdp.snd_nxt, conn->rdp.snd_una + conn->rdp.window_size - 1)) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	8bd8      	ldrh	r0, [r3, #30]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	8c1a      	ldrh	r2, [r3, #32]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	4413      	add	r3, r2
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	f7ff fad8 	bl	800e964 <csp_rdp_seq_after>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <csp_rdp_is_conn_ready_for_tx+0x2e>
		return false;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	e000      	b.n	800f3c0 <csp_rdp_is_conn_ready_for_tx+0x30>
	}
	return true;
 800f3be:	2301      	movs	r3, #1
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <csp_rdp_check_timeouts>:
 * This function must be called with regular intervals for the
 * RDP protocol to work as expected. This takes care of closing
 * stale connections and retransmitting traffic. A good place to
 * call this function is from the CSP router task.
 */
void csp_rdp_check_timeouts(csp_conn_t * conn) {
 800f3c8:	b590      	push	{r4, r7, lr}
 800f3ca:	b08b      	sub	sp, #44	; 0x2c
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	6078      	str	r0, [r7, #4]

	const uint32_t time_now = csp_get_ms();
 800f3d0:	f7fd fb1f 	bl	800ca12 <csp_get_ms>
 800f3d4:	61b8      	str	r0, [r7, #24]

	/**
	 * CONNECTION TIMEOUT:
	 * Check that connection has not timed out inside the network stack
	 */
	if (conn->socket != NULL) {
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d020      	beq.n	800f420 <csp_rdp_check_timeouts+0x58>
		if (csp_rdp_time_after(time_now, conn->timestamp + conn->rdp.conn_timeout)) {
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	695a      	ldr	r2, [r3, #20]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e6:	4413      	add	r3, r2
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	69b8      	ldr	r0, [r7, #24]
 800f3ec:	f7ff fadd 	bl	800e9aa <csp_rdp_time_after>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d014      	beq.n	800f420 <csp_rdp_check_timeouts+0x58>
			csp_log_warn("RDP %p: Found a lost connection (now: %"PRIu32", ts: %"PRIu32", to: %"PRIu32"), closing",
 800f3f6:	4b83      	ldr	r3, [pc, #524]	; (800f604 <csp_rdp_check_timeouts+0x23c>)
 800f3f8:	785b      	ldrb	r3, [r3, #1]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00b      	beq.n	800f416 <csp_rdp_check_timeouts+0x4e>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f406:	9201      	str	r2, [sp, #4]
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	497e      	ldr	r1, [pc, #504]	; (800f608 <csp_rdp_check_timeouts+0x240>)
 800f410:	2001      	movs	r0, #1
 800f412:	f7fe f8c3 	bl	800d59c <do_csp_debug>
				conn, time_now, conn->timestamp, conn->rdp.conn_timeout);
			csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE | CSP_RDP_CLOSED_BY_PROTOCOL | CSP_RDP_CLOSED_BY_TIMEOUT);
 800f416:	2107      	movs	r1, #7
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7fd ff39 	bl	800d290 <csp_conn_close>
			return;
 800f41e:	e0ee      	b.n	800f5fe <csp_rdp_check_timeouts+0x236>

	/**
	 * CLOSE-WAIT TIMEOUT:
	 * After waiting a while in CLOSE-WAIT, the connection should be closed.
	 */
	if (conn->rdp.state == RDP_CLOSE_WAIT) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	7f1b      	ldrb	r3, [r3, #28]
 800f424:	2b04      	cmp	r3, #4
 800f426:	d111      	bne.n	800f44c <csp_rdp_check_timeouts+0x84>
		if (csp_rdp_time_after(time_now, conn->timestamp + conn->rdp.conn_timeout)) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	695a      	ldr	r2, [r3, #20]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f430:	4413      	add	r3, r2
 800f432:	4619      	mov	r1, r3
 800f434:	69b8      	ldr	r0, [r7, #24]
 800f436:	f7ff fab8 	bl	800e9aa <csp_rdp_time_after>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f000 80dd 	beq.w	800f5fc <csp_rdp_check_timeouts+0x234>
			csp_conn_close(conn, CSP_RDP_CLOSED_BY_PROTOCOL | CSP_RDP_CLOSED_BY_TIMEOUT);
 800f442:	2106      	movs	r1, #6
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f7fd ff23 	bl	800d290 <csp_conn_close>
		}
		return;
 800f44a:	e0d7      	b.n	800f5fc <csp_rdp_check_timeouts+0x234>

	/**
	 * MESSAGE TIMEOUT:
	 * Check each outgoing message for TX timeout
	 */
	int count = csp_queue_size(conn->rdp.tx_queue);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f450:	4618      	mov	r0, r3
 800f452:	f7fd f9d0 	bl	800c7f6 <csp_queue_size>
 800f456:	6178      	str	r0, [r7, #20]
	for (int i = 0; i < count; i++) {
 800f458:	2300      	movs	r3, #0
 800f45a:	61fb      	str	r3, [r7, #28]
 800f45c:	e0a7      	b.n	800f5ae <csp_rdp_check_timeouts+0x1e6>

		rdp_packet_t * packet;
		if ((csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) || packet == NULL) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f462:	f107 0108 	add.w	r1, r7, #8
 800f466:	4a69      	ldr	r2, [pc, #420]	; (800f60c <csp_rdp_check_timeouts+0x244>)
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fd f9b4 	bl	800c7d6 <csp_queue_dequeue_isr>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b01      	cmp	r3, #1
 800f472:	d102      	bne.n	800f47a <csp_rdp_check_timeouts+0xb2>
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d10a      	bne.n	800f490 <csp_rdp_check_timeouts+0xc8>
			csp_log_warn("RDP %p: Cannot dequeue from tx_queue in check timeout", conn);
 800f47a:	4b62      	ldr	r3, [pc, #392]	; (800f604 <csp_rdp_check_timeouts+0x23c>)
 800f47c:	785b      	ldrb	r3, [r3, #1]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 809b 	beq.w	800f5ba <csp_rdp_check_timeouts+0x1f2>
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	4962      	ldr	r1, [pc, #392]	; (800f610 <csp_rdp_check_timeouts+0x248>)
 800f488:	2001      	movs	r0, #1
 800f48a:	f7fe f887 	bl	800d59c <do_csp_debug>
 800f48e:	e095      	b.n	800f5bc <csp_rdp_check_timeouts+0x1f4>
			break;
		}

		/* Get header */
		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	4618      	mov	r0, r3
 800f494:	f7ff fa22 	bl	800e8dc <csp_rdp_header_ref>
 800f498:	6138      	str	r0, [r7, #16]

		/* If acked, do not retransmit */
		if (csp_rdp_seq_before(csp_ntoh16(header->seq_nr), conn->rdp.snd_una)) {
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fe f911 	bl	800d6ca <csp_ntoh16>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	8c1b      	ldrh	r3, [r3, #32]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	f7ff fa40 	bl	800e938 <csp_rdp_seq_before>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d01d      	beq.n	800f4fa <csp_rdp_check_timeouts+0x132>
			csp_log_protocol("RDP %p: TX Element Free, time %"PRIu32", seq %u, una %u", conn, packet->timestamp, csp_ntoh16(header->seq_nr), conn->rdp.snd_una);
 800f4be:	4b51      	ldr	r3, [pc, #324]	; (800f604 <csp_rdp_check_timeouts+0x23c>)
 800f4c0:	795b      	ldrb	r3, [r3, #5]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d014      	beq.n	800f4f0 <csp_rdp_check_timeouts+0x128>
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	685c      	ldr	r4, [r3, #4]
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fe f8f9 	bl	800d6ca <csp_ntoh16>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	461a      	mov	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	8c1b      	ldrh	r3, [r3, #32]
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	9200      	str	r2, [sp, #0]
 800f4e4:	4623      	mov	r3, r4
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	494a      	ldr	r1, [pc, #296]	; (800f614 <csp_rdp_check_timeouts+0x24c>)
 800f4ea:	2005      	movs	r0, #5
 800f4ec:	f7fe f856 	bl	800d59c <do_csp_debug>
			csp_buffer_free(packet);
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fd fbb2 	bl	800cc5c <csp_buffer_free>
 800f4f8:	e056      	b.n	800f5a8 <csp_rdp_check_timeouts+0x1e0>
			continue;
		}

		/* Check timestamp and retransmit if needed */
		if (csp_rdp_time_after(time_now, packet->timestamp + conn->rdp.packet_timeout)) {
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	685a      	ldr	r2, [r3, #4]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f502:	4413      	add	r3, r2
 800f504:	4619      	mov	r1, r3
 800f506:	69b8      	ldr	r0, [r7, #24]
 800f508:	f7ff fa4f 	bl	800e9aa <csp_rdp_time_after>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d042      	beq.n	800f598 <csp_rdp_check_timeouts+0x1d0>
			csp_log_protocol("RDP %p: TX Element timed out, retransmitting seq %u", conn, csp_ntoh16(header->seq_nr));
 800f512:	4b3c      	ldr	r3, [pc, #240]	; (800f604 <csp_rdp_check_timeouts+0x23c>)
 800f514:	795b      	ldrb	r3, [r3, #5]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00c      	beq.n	800f534 <csp_rdp_check_timeouts+0x16c>
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f520:	b29b      	uxth	r3, r3
 800f522:	4618      	mov	r0, r3
 800f524:	f7fe f8d1 	bl	800d6ca <csp_ntoh16>
 800f528:	4603      	mov	r3, r0
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	493a      	ldr	r1, [pc, #232]	; (800f618 <csp_rdp_check_timeouts+0x250>)
 800f52e:	2005      	movs	r0, #5
 800f530:	f7fe f834 	bl	800d59c <do_csp_debug>

			/* Update to latest outgoing ACK */
			header->ack_nr = csp_hton16(conn->rdp.rcv_cur);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f538:	4618      	mov	r0, r3
 800f53a:	f7fe f8b1 	bl	800d6a0 <csp_hton16>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	f8a3 2003 	strh.w	r2, [r3, #3]

			/* Send copy to tx_queue */
			packet->timestamp = csp_get_ms();
 800f548:	68bc      	ldr	r4, [r7, #8]
 800f54a:	f7fd fa62 	bl	800ca12 <csp_get_ms>
 800f54e:	4603      	mov	r3, r0
 800f550:	6063      	str	r3, [r4, #4]
			csp_packet_t * new_packet = csp_buffer_clone(packet);
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	4618      	mov	r0, r3
 800f556:	f7fd fbf9 	bl	800cd4c <csp_buffer_clone>
 800f55a:	60f8      	str	r0, [r7, #12]
			if (csp_send_direct(conn->idout, new_packet, csp_rtable_find_route(conn->idout.dst), 0) != CSP_ERR_NONE) {
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	895b      	ldrh	r3, [r3, #10]
 800f560:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800f564:	b2db      	uxtb	r3, r3
 800f566:	4618      	mov	r0, r3
 800f568:	f7ff f91a 	bl	800e7a0 <csp_rtable_find_route>
 800f56c:	4602      	mov	r2, r0
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	2300      	movs	r3, #0
 800f572:	68f9      	ldr	r1, [r7, #12]
 800f574:	6880      	ldr	r0, [r0, #8]
 800f576:	f7fe f9ad 	bl	800d8d4 <csp_send_direct>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00b      	beq.n	800f598 <csp_rdp_check_timeouts+0x1d0>
				csp_log_warn("RDP %p: Retransmission failed", conn);
 800f580:	4b20      	ldr	r3, [pc, #128]	; (800f604 <csp_rdp_check_timeouts+0x23c>)
 800f582:	785b      	ldrb	r3, [r3, #1]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d004      	beq.n	800f592 <csp_rdp_check_timeouts+0x1ca>
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	4924      	ldr	r1, [pc, #144]	; (800f61c <csp_rdp_check_timeouts+0x254>)
 800f58c:	2001      	movs	r0, #1
 800f58e:	f7fe f805 	bl	800d59c <do_csp_debug>
				csp_buffer_free(new_packet);
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	f7fd fb62 	bl	800cc5c <csp_buffer_free>
			}

		}

		/* Requeue the TX element */
		csp_queue_enqueue_isr(conn->rdp.tx_queue, &packet, &pdTrue);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f59c:	f107 0108 	add.w	r1, r7, #8
 800f5a0:	4a1a      	ldr	r2, [pc, #104]	; (800f60c <csp_rdp_check_timeouts+0x244>)
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fd f8f3 	bl	800c78e <csp_queue_enqueue_isr>
	for (int i = 0; i < count; i++) {
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	61fb      	str	r3, [r7, #28]
 800f5ae:	69fa      	ldr	r2, [r7, #28]
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	f6ff af53 	blt.w	800f45e <csp_rdp_check_timeouts+0x96>
 800f5b8:	e000      	b.n	800f5bc <csp_rdp_check_timeouts+0x1f4>
			break;
 800f5ba:	bf00      	nop

	}

	if (conn->rdp.state == RDP_OPEN) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	7f1b      	ldrb	r3, [r3, #28]
 800f5c0:	2b03      	cmp	r3, #3
 800f5c2:	d11c      	bne.n	800f5fe <csp_rdp_check_timeouts+0x236>

		/* Check if we have unacknowledged segments */
		if (conn->rdp.delayed_acks) {
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d002      	beq.n	800f5d2 <csp_rdp_check_timeouts+0x20a>
			csp_rdp_check_ack(conn);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7ff fe9d 	bl	800f30c <csp_rdp_check_ack>
		}

		/* Wake user task if additional Tx can be done */
		if (csp_rdp_is_conn_ready_for_tx(conn)) {
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7ff fedc 	bl	800f390 <csp_rdp_is_conn_ready_for_tx>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00f      	beq.n	800f5fe <csp_rdp_check_timeouts+0x236>
			csp_log_protocol("RDP %p: Wake Tx task (check timeouts)", conn);
 800f5de:	4b09      	ldr	r3, [pc, #36]	; (800f604 <csp_rdp_check_timeouts+0x23c>)
 800f5e0:	795b      	ldrb	r3, [r3, #5]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d004      	beq.n	800f5f0 <csp_rdp_check_timeouts+0x228>
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	490d      	ldr	r1, [pc, #52]	; (800f620 <csp_rdp_check_timeouts+0x258>)
 800f5ea:	2005      	movs	r0, #5
 800f5ec:	f7fd ffd6 	bl	800d59c <do_csp_debug>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3348      	adds	r3, #72	; 0x48
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fd f961 	bl	800c8bc <csp_bin_sem_post>
 800f5fa:	e000      	b.n	800f5fe <csp_rdp_check_timeouts+0x236>
		return;
 800f5fc:	bf00      	nop
		}
	}
}
 800f5fe:	3724      	adds	r7, #36	; 0x24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd90      	pop	{r4, r7, pc}
 800f604:	200001a0 	.word	0x200001a0
 800f608:	08014894 	.word	0x08014894
 800f60c:	20000200 	.word	0x20000200
 800f610:	080148dc 	.word	0x080148dc
 800f614:	08014914 	.word	0x08014914
 800f618:	08014948 	.word	0x08014948
 800f61c:	0801497c 	.word	0x0801497c
 800f620:	0801499c 	.word	0x0801499c

0800f624 <csp_rdp_new_packet>:

bool csp_rdp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800f624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f626:	b091      	sub	sp, #68	; 0x44
 800f628:	af08      	add	r7, sp, #32
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]

	bool close_connection = false;
 800f62e:	2300      	movs	r3, #0
 800f630:	77fb      	strb	r3, [r7, #31]

	/* Get RX header and convert to host byte-order */
	rdp_header_t * rx_header = csp_rdp_header_ref(packet);
 800f632:	68b8      	ldr	r0, [r7, #8]
 800f634:	f7ff f952 	bl	800e8dc <csp_rdp_header_ref>
 800f638:	61b8      	str	r0, [r7, #24]
	rx_header->ack_nr = csp_ntoh16(rx_header->ack_nr);
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f640:	b29b      	uxth	r3, r3
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe f841 	bl	800d6ca <csp_ntoh16>
 800f648:	4603      	mov	r3, r0
 800f64a:	461a      	mov	r2, r3
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	f8a3 2003 	strh.w	r2, [r3, #3]
	rx_header->seq_nr = csp_ntoh16(rx_header->seq_nr);
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fe f835 	bl	800d6ca <csp_ntoh16>
 800f660:	4603      	mov	r3, r0
 800f662:	461a      	mov	r2, r3
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	f8a3 2001 	strh.w	r2, [r3, #1]

        uint8_t closed_by = CSP_RDP_CLOSED_BY_PROTOCOL;
 800f66a:	2302      	movs	r3, #2
 800f66c:	75fb      	strb	r3, [r7, #23]

	csp_log_protocol("RDP %p: Received in S %u: syn %u, ack %u, eack %u, "
 800f66e:	4b72      	ldr	r3, [pc, #456]	; (800f838 <csp_rdp_new_packet+0x214>)
 800f670:	795b      	ldrb	r3, [r3, #5]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d03a      	beq.n	800f6ec <csp_rdp_new_packet+0xc8>
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	7f1b      	ldrb	r3, [r3, #28]
 800f67c:	469c      	mov	ip, r3
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f686:	b2db      	uxtb	r3, r3
 800f688:	4619      	mov	r1, r3
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f692:	b2db      	uxtb	r3, r3
 800f694:	4618      	mov	r0, r3
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	461c      	mov	r4, r3
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	461d      	mov	r5, r3
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	461e      	mov	r6, r3
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	607b      	str	r3, [r7, #4]
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	895b      	ldrh	r3, [r3, #10]
 800f6c6:	603b      	str	r3, [r7, #0]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	895b      	ldrh	r3, [r3, #10]
 800f6cc:	3b05      	subs	r3, #5
 800f6ce:	9307      	str	r3, [sp, #28]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	9306      	str	r3, [sp, #24]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	9305      	str	r3, [sp, #20]
 800f6d8:	9604      	str	r6, [sp, #16]
 800f6da:	9503      	str	r5, [sp, #12]
 800f6dc:	9402      	str	r4, [sp, #8]
 800f6de:	9001      	str	r0, [sp, #4]
 800f6e0:	9100      	str	r1, [sp, #0]
 800f6e2:	4663      	mov	r3, ip
 800f6e4:	4955      	ldr	r1, [pc, #340]	; (800f83c <csp_rdp_new_packet+0x218>)
 800f6e6:	2005      	movs	r0, #5
 800f6e8:	f7fd ff58 	bl	800d59c <do_csp_debug>
			conn, conn->rdp.state, rx_header->syn, rx_header->ack, rx_header->eak,
			rx_header->rst, rx_header->seq_nr, rx_header->ack_nr,
			packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	/* If a RESET was received. */
	if (rx_header->rst) {
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d06d      	beq.n	800f7d6 <csp_rdp_new_packet+0x1b2>

		if (rx_header->ack) {
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	f003 0304 	and.w	r3, r3, #4
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d007      	beq.n	800f718 <csp_rdp_new_packet+0xf4>
			/* Store current ack'ed sequence number */
			conn->rdp.snd_una = rx_header->ack_nr + 1;
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f70e:	b29a      	uxth	r2, r3
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	3201      	adds	r2, #1
 800f714:	b292      	uxth	r2, r2
 800f716:	841a      	strh	r2, [r3, #32]
		}

		if (conn->rdp.state == RDP_CLOSED) {
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	7f1b      	ldrb	r3, [r3, #28]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d111      	bne.n	800f744 <csp_rdp_new_packet+0x120>
			csp_log_protocol("RDP %p: RST received in CLOSED - ignored", conn);
 800f720:	4b45      	ldr	r3, [pc, #276]	; (800f838 <csp_rdp_new_packet+0x214>)
 800f722:	795b      	ldrb	r3, [r3, #5]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d005      	beq.n	800f734 <csp_rdp_new_packet+0x110>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	461a      	mov	r2, r3
 800f72c:	4944      	ldr	r1, [pc, #272]	; (800f840 <csp_rdp_new_packet+0x21c>)
 800f72e:	2005      	movs	r0, #5
 800f730:	f7fd ff34 	bl	800d59c <do_csp_debug>
			close_connection = (conn->socket != NULL);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	bf14      	ite	ne
 800f73c:	2301      	movne	r3, #1
 800f73e:	2300      	moveq	r3, #0
 800f740:	77fb      	strb	r3, [r7, #31]
			goto discard_open;
 800f742:	e3ba      	b.n	800feba <csp_rdp_new_packet+0x896>
                }

		if (conn->rdp.state == RDP_CLOSE_WAIT) {
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	7f1b      	ldrb	r3, [r3, #28]
 800f748:	2b04      	cmp	r3, #4
 800f74a:	d10f      	bne.n	800f76c <csp_rdp_new_packet+0x148>
			csp_log_protocol("RDP %p: RST received in CLOSE_WAIT, ack: %d - closing", conn, rx_header->ack);
 800f74c:	4b3a      	ldr	r3, [pc, #232]	; (800f838 <csp_rdp_new_packet+0x214>)
 800f74e:	795b      	ldrb	r3, [r3, #5]
 800f750:	2b00      	cmp	r3, #0
 800f752:	f000 837c 	beq.w	800fe4e <csp_rdp_new_packet+0x82a>
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f760:	b2db      	uxtb	r3, r3
 800f762:	4938      	ldr	r1, [pc, #224]	; (800f844 <csp_rdp_new_packet+0x220>)
 800f764:	2005      	movs	r0, #5
 800f766:	f7fd ff19 	bl	800d59c <do_csp_debug>
			if (rx_header->ack && CSP_USE_RDP_FAST_CLOSE) {
				// skip timeout - the other end has acknowledged the RST
				closed_by |= CSP_RDP_CLOSED_BY_TIMEOUT;
			}
			goto discard_close;
 800f76a:	e370      	b.n	800fe4e <csp_rdp_new_packet+0x82a>
		}

		if (rx_header->seq_nr == (conn->rdp.rcv_cur + 1)) {
 800f76c:	69bb      	ldr	r3, [r7, #24]
 800f76e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f772:	b29b      	uxth	r3, r3
 800f774:	461a      	mov	r2, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f77a:	3301      	adds	r3, #1
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d11e      	bne.n	800f7be <csp_rdp_new_packet+0x19a>
			csp_log_protocol("RDP %p: Received RST in sequence, no more data incoming, reply with RST", conn);
 800f780:	4b2d      	ldr	r3, [pc, #180]	; (800f838 <csp_rdp_new_packet+0x214>)
 800f782:	795b      	ldrb	r3, [r3, #5]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d005      	beq.n	800f794 <csp_rdp_new_packet+0x170>
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	461a      	mov	r2, r3
 800f78c:	492e      	ldr	r1, [pc, #184]	; (800f848 <csp_rdp_new_packet+0x224>)
 800f78e:	2005      	movs	r0, #5
 800f790:	f7fd ff04 	bl	800d59c <do_csp_debug>
			conn->rdp.state = RDP_CLOSE_WAIT;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2204      	movs	r2, #4
 800f798:	771a      	strb	r2, [r3, #28]
			conn->timestamp = csp_get_ms();
 800f79a:	68fc      	ldr	r4, [r7, #12]
 800f79c:	f7fd f939 	bl	800ca12 <csp_get_ms>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	6163      	str	r3, [r4, #20]
			csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	8bdb      	ldrh	r3, [r3, #30]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	220a      	movs	r2, #10
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	f7ff f906 	bl	800e9c8 <csp_rdp_send_cmp>
                        if (CSP_USE_RDP_FAST_CLOSE) {
                            closed_by |= CSP_RDP_CLOSED_BY_TIMEOUT;
                        }
			goto discard_close;
 800f7bc:	e352      	b.n	800fe64 <csp_rdp_new_packet+0x840>
		}

                csp_log_protocol("RDP %p: RST out of sequence, keep connection open", conn);
 800f7be:	4b1e      	ldr	r3, [pc, #120]	; (800f838 <csp_rdp_new_packet+0x214>)
 800f7c0:	795b      	ldrb	r3, [r3, #5]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f000 8368 	beq.w	800fe98 <csp_rdp_new_packet+0x874>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	491f      	ldr	r1, [pc, #124]	; (800f84c <csp_rdp_new_packet+0x228>)
 800f7ce:	2005      	movs	r0, #5
 800f7d0:	f7fd fee4 	bl	800d59c <do_csp_debug>
		goto discard_open;
 800f7d4:	e360      	b.n	800fe98 <csp_rdp_new_packet+0x874>
	}

	/* The BIG FAT switch (state-machine) */
	switch(conn->rdp.state) {
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	7f1b      	ldrb	r3, [r3, #28]
 800f7da:	2b04      	cmp	r3, #4
 800f7dc:	f200 832c 	bhi.w	800fe38 <csp_rdp_new_packet+0x814>
 800f7e0:	a201      	add	r2, pc, #4	; (adr r2, 800f7e8 <csp_rdp_new_packet+0x1c4>)
 800f7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e6:	bf00      	nop
 800f7e8:	0800f7fd 	.word	0x0800f7fd
 800f7ec:	0800f965 	.word	0x0800f965
 800f7f0:	0800fa73 	.word	0x0800fa73
 800f7f4:	0800fa73 	.word	0x0800fa73
 800f7f8:	0800fd4d 	.word	0x0800fd4d
	 * STATE == CLOSED
	 */
	case RDP_CLOSED: {

		/* No SYN flag set while in closed. Inform by sending back RST */
		if (!rx_header->syn) {
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	f003 0308 	and.w	r3, r3, #8
 800f804:	b2db      	uxtb	r3, r3
 800f806:	2b00      	cmp	r3, #0
 800f808:	d124      	bne.n	800f854 <csp_rdp_new_packet+0x230>
			csp_log_protocol("RDP %p: Not SYN received in CLOSED state. Discarding packet", conn);
 800f80a:	4b0b      	ldr	r3, [pc, #44]	; (800f838 <csp_rdp_new_packet+0x214>)
 800f80c:	795b      	ldrb	r3, [r3, #5]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d005      	beq.n	800f81e <csp_rdp_new_packet+0x1fa>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	461a      	mov	r2, r3
 800f816:	490e      	ldr	r1, [pc, #56]	; (800f850 <csp_rdp_new_packet+0x22c>)
 800f818:	2005      	movs	r0, #5
 800f81a:	f7fd febf 	bl	800d59c <do_csp_debug>
			csp_rdp_send_cmp(conn, NULL, RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	8bdb      	ldrh	r3, [r3, #30]
 800f824:	461a      	mov	r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	4613      	mov	r3, r2
 800f82e:	2208      	movs	r2, #8
 800f830:	2100      	movs	r1, #0
 800f832:	f7ff f8c9 	bl	800e9c8 <csp_rdp_send_cmp>
			goto discard_close;
 800f836:	e315      	b.n	800fe64 <csp_rdp_new_packet+0x840>
 800f838:	200001a0 	.word	0x200001a0
 800f83c:	080149c4 	.word	0x080149c4
 800f840:	08014a2c 	.word	0x08014a2c
 800f844:	08014a58 	.word	0x08014a58
 800f848:	08014a90 	.word	0x08014a90
 800f84c:	08014ad8 	.word	0x08014ad8
 800f850:	08014b0c 	.word	0x08014b0c
		}

		csp_log_protocol("RDP %p: SYN-Received", conn);
 800f854:	4b9e      	ldr	r3, [pc, #632]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800f856:	795b      	ldrb	r3, [r3, #5]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d005      	beq.n	800f868 <csp_rdp_new_packet+0x244>
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	461a      	mov	r2, r3
 800f860:	499c      	ldr	r1, [pc, #624]	; (800fad4 <csp_rdp_new_packet+0x4b0>)
 800f862:	2005      	movs	r0, #5
 800f864:	f7fd fe9a 	bl	800d59c <do_csp_debug>

		/* Setup TX seq. */
		conn->rdp.snd_iss = (uint16_t)rand();
 800f868:	f001 fe3a 	bl	80114e0 <rand>
 800f86c:	4602      	mov	r2, r0
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	b292      	uxth	r2, r2
 800f872:	845a      	strh	r2, [r3, #34]	; 0x22
		conn->rdp.snd_nxt = conn->rdp.snd_iss + 1;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	3201      	adds	r2, #1
 800f87c:	b292      	uxth	r2, r2
 800f87e:	83da      	strh	r2, [r3, #30]
		conn->rdp.snd_una = conn->rdp.snd_iss;
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800f886:	841a      	strh	r2, [r3, #32]

		/* Store RX seq. */
		conn->rdp.rcv_cur = rx_header->seq_nr;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	69ba      	ldr	r2, [r7, #24]
 800f88c:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800f890:	b292      	uxth	r2, r2
 800f892:	849a      	strh	r2, [r3, #36]	; 0x24
		conn->rdp.rcv_irs = rx_header->seq_nr;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	69ba      	ldr	r2, [r7, #24]
 800f898:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800f89c:	b292      	uxth	r2, r2
 800f89e:	84da      	strh	r2, [r3, #38]	; 0x26
		conn->rdp.rcv_lsa = rx_header->seq_nr;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	69ba      	ldr	r2, [r7, #24]
 800f8a4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800f8a8:	b292      	uxth	r2, r2
 800f8aa:	851a      	strh	r2, [r3, #40]	; 0x28

		/* Store RDP options */
		conn->rdp.window_size 		= csp_ntoh32(packet->data32[0]);
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	68fc      	ldr	r4, [r7, #12]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fd ff30 	bl	800d718 <csp_ntoh32>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	62e3      	str	r3, [r4, #44]	; 0x2c
		conn->rdp.conn_timeout 		= csp_ntoh32(packet->data32[1]);
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	695b      	ldr	r3, [r3, #20]
 800f8c0:	68fc      	ldr	r4, [r7, #12]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fd ff28 	bl	800d718 <csp_ntoh32>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	6323      	str	r3, [r4, #48]	; 0x30
		conn->rdp.packet_timeout 	= csp_ntoh32(packet->data32[2]);
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	699b      	ldr	r3, [r3, #24]
 800f8d0:	68fc      	ldr	r4, [r7, #12]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fd ff20 	bl	800d718 <csp_ntoh32>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	6363      	str	r3, [r4, #52]	; 0x34
		conn->rdp.delayed_acks 		= csp_ntoh32(packet->data32[3]);
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	69db      	ldr	r3, [r3, #28]
 800f8e0:	68fc      	ldr	r4, [r7, #12]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fd ff18 	bl	800d718 <csp_ntoh32>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	63a3      	str	r3, [r4, #56]	; 0x38
		conn->rdp.ack_timeout 		= csp_ntoh32(packet->data32[4]);
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	6a1b      	ldr	r3, [r3, #32]
 800f8f0:	68fc      	ldr	r4, [r7, #12]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fd ff10 	bl	800d718 <csp_ntoh32>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	63e3      	str	r3, [r4, #60]	; 0x3c
		conn->rdp.ack_delay_count 	= csp_ntoh32(packet->data32[5]);
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f900:	68fc      	ldr	r4, [r7, #12]
 800f902:	4618      	mov	r0, r3
 800f904:	f7fd ff08 	bl	800d718 <csp_ntoh32>
 800f908:	4603      	mov	r3, r0
 800f90a:	6423      	str	r3, [r4, #64]	; 0x40
		csp_log_protocol("RDP %p: window size %"PRIu32", conn timeout %"PRIu32", packet timeout %"PRIu32", delayed acks: %"PRIu32", ack timeout %"PRIu32", ack each %"PRIu32" packet",
 800f90c:	4b70      	ldr	r3, [pc, #448]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800f90e:	795b      	ldrb	r3, [r3, #5]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d017      	beq.n	800f944 <csp_rdp_new_packet+0x320>
 800f914:	68fd      	ldr	r5, [r7, #12]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f922:	68f9      	ldr	r1, [r7, #12]
 800f924:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800f92a:	68fc      	ldr	r4, [r7, #12]
 800f92c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800f92e:	9404      	str	r4, [sp, #16]
 800f930:	9003      	str	r0, [sp, #12]
 800f932:	9102      	str	r1, [sp, #8]
 800f934:	9201      	str	r2, [sp, #4]
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	4633      	mov	r3, r6
 800f93a:	462a      	mov	r2, r5
 800f93c:	4966      	ldr	r1, [pc, #408]	; (800fad8 <csp_rdp_new_packet+0x4b4>)
 800f93e:	2005      	movs	r0, #5
 800f940:	f7fd fe2c 	bl	800d59c <do_csp_debug>
				conn, conn->rdp.window_size, conn->rdp.conn_timeout, conn->rdp.packet_timeout,
				conn->rdp.delayed_acks, conn->rdp.ack_timeout, conn->rdp.ack_delay_count);

		/* Connection accepted */
		conn->rdp.state = RDP_SYN_RCVD;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2202      	movs	r2, #2
 800f948:	771a      	strb	r2, [r3, #28]

		/* Send SYN/ACK */
		csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_SYN, conn->rdp.snd_iss, conn->rdp.rcv_irs);
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f950:	461a      	mov	r2, r3
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	4613      	mov	r3, r2
 800f95a:	2203      	movs	r2, #3
 800f95c:	2100      	movs	r1, #0
 800f95e:	f7ff f833 	bl	800e9c8 <csp_rdp_send_cmp>

		goto discard_open;
 800f962:	e2aa      	b.n	800feba <csp_rdp_new_packet+0x896>
	 * STATE == SYN-SENT
	 */
	case RDP_SYN_SENT: {

		/* First check SYN/ACK */
		if (rx_header->syn && rx_header->ack) {
 800f964:	69bb      	ldr	r3, [r7, #24]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	f003 0308 	and.w	r3, r3, #8
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d050      	beq.n	800fa14 <csp_rdp_new_packet+0x3f0>
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	f003 0304 	and.w	r3, r3, #4
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d049      	beq.n	800fa14 <csp_rdp_new_packet+0x3f0>

			conn->rdp.rcv_cur = rx_header->seq_nr;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	69ba      	ldr	r2, [r7, #24]
 800f984:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800f988:	b292      	uxth	r2, r2
 800f98a:	849a      	strh	r2, [r3, #36]	; 0x24
			conn->rdp.rcv_irs = rx_header->seq_nr;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	69ba      	ldr	r2, [r7, #24]
 800f990:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800f994:	b292      	uxth	r2, r2
 800f996:	84da      	strh	r2, [r3, #38]	; 0x26
			conn->rdp.rcv_lsa = rx_header->seq_nr - 1;
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	3a01      	subs	r2, #1
 800f9a4:	b292      	uxth	r2, r2
 800f9a6:	851a      	strh	r2, [r3, #40]	; 0x28
			conn->rdp.snd_una = rx_header->ack_nr + 1;
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3201      	adds	r2, #1
 800f9b4:	b292      	uxth	r2, r2
 800f9b6:	841a      	strh	r2, [r3, #32]
			conn->rdp.ack_timestamp = csp_get_ms();
 800f9b8:	68fc      	ldr	r4, [r7, #12]
 800f9ba:	f7fd f82a 	bl	800ca12 <csp_get_ms>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	6463      	str	r3, [r4, #68]	; 0x44
			conn->rdp.state = RDP_OPEN;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2203      	movs	r2, #3
 800f9c6:	771a      	strb	r2, [r3, #28]

			csp_log_protocol("RDP %p: NP: Connection OPEN", conn);
 800f9c8:	4b41      	ldr	r3, [pc, #260]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800f9ca:	795b      	ldrb	r3, [r3, #5]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d005      	beq.n	800f9dc <csp_rdp_new_packet+0x3b8>
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	4941      	ldr	r1, [pc, #260]	; (800fadc <csp_rdp_new_packet+0x4b8>)
 800f9d6:	2005      	movs	r0, #5
 800f9d8:	f7fd fde0 	bl	800d59c <do_csp_debug>

			/* Send ACK */
			csp_rdp_send_cmp(conn, NULL, RDP_ACK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800f9dc:	68f8      	ldr	r0, [r7, #12]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	8bdb      	ldrh	r3, [r3, #30]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	2202      	movs	r2, #2
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	f7fe ffea 	bl	800e9c8 <csp_rdp_send_cmp>

			/* Wake TX task */
			csp_log_protocol("RDP %p: Wake Tx task (ack)", conn);
 800f9f4:	4b36      	ldr	r3, [pc, #216]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800f9f6:	795b      	ldrb	r3, [r3, #5]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d005      	beq.n	800fa08 <csp_rdp_new_packet+0x3e4>
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	4937      	ldr	r1, [pc, #220]	; (800fae0 <csp_rdp_new_packet+0x4bc>)
 800fa02:	2005      	movs	r0, #5
 800fa04:	f7fd fdca 	bl	800d59c <do_csp_debug>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	3348      	adds	r3, #72	; 0x48
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fc ff55 	bl	800c8bc <csp_bin_sem_post>

			goto discard_open;
 800fa12:	e252      	b.n	800feba <csp_rdp_new_packet+0x896>
		/* If there was no SYN in the reply, our SYN message hit an already open connection
		 * This is handled by sending a RST.
		 * Normally this would be followed up by a new connection attempt, however
		 * we don't have a method for signaling this to the user space.
		 */
		if (rx_header->ack) {
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	f003 0304 	and.w	r3, r3, #4
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d01b      	beq.n	800fa5a <csp_rdp_new_packet+0x436>
			csp_log_error("RDP %p: Half-open connection found, send RST and wake Tx task", conn);
 800fa22:	4b2b      	ldr	r3, [pc, #172]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d005      	beq.n	800fa36 <csp_rdp_new_packet+0x412>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	492d      	ldr	r1, [pc, #180]	; (800fae4 <csp_rdp_new_packet+0x4c0>)
 800fa30:	2000      	movs	r0, #0
 800fa32:	f7fd fdb3 	bl	800d59c <do_csp_debug>
			csp_rdp_send_cmp(conn, NULL, RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	8bdb      	ldrh	r3, [r3, #30]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	4613      	mov	r3, r2
 800fa46:	2208      	movs	r2, #8
 800fa48:	2100      	movs	r1, #0
 800fa4a:	f7fe ffbd 	bl	800e9c8 <csp_rdp_send_cmp>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	3348      	adds	r3, #72	; 0x48
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fc ff32 	bl	800c8bc <csp_bin_sem_post>

			goto discard_open;
 800fa58:	e22f      	b.n	800feba <csp_rdp_new_packet+0x896>

		/* Otherwise we have an invalid command, such as a SYN reply to a SYN command,
		 * indicating simultaneous connections, which is not possible in the way CSP
		 * reserves some ports for server and some for clients.
		 */
		csp_log_error("RDP %p: Invalid reply to SYN request", conn);
 800fa5a:	4b1d      	ldr	r3, [pc, #116]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f000 81f7 	beq.w	800fe52 <csp_rdp_new_packet+0x82e>
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	461a      	mov	r2, r3
 800fa68:	491f      	ldr	r1, [pc, #124]	; (800fae8 <csp_rdp_new_packet+0x4c4>)
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	f7fd fd96 	bl	800d59c <do_csp_debug>
		goto discard_close;
 800fa70:	e1ef      	b.n	800fe52 <csp_rdp_new_packet+0x82e>
	case RDP_SYN_RCVD:
	case RDP_OPEN:
	{

		/* SYN or !ACK is invalid */
		if (rx_header->syn || !rx_header->ack) {
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	f003 0308 	and.w	r3, r3, #8
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d106      	bne.n	800fa8e <csp_rdp_new_packet+0x46a>
 800fa80:	69bb      	ldr	r3, [r7, #24]
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	f003 0304 	and.w	r3, r3, #4
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d132      	bne.n	800faf4 <csp_rdp_new_packet+0x4d0>
			if (rx_header->seq_nr != conn->rdp.rcv_irs) {
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d00b      	beq.n	800fab6 <csp_rdp_new_packet+0x492>
				csp_log_error("RDP %p: Invalid SYN or no ACK, resetting!", conn);
 800fa9e:	4b0c      	ldr	r3, [pc, #48]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f000 81d7 	beq.w	800fe56 <csp_rdp_new_packet+0x832>
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	461a      	mov	r2, r3
 800faac:	490f      	ldr	r1, [pc, #60]	; (800faec <csp_rdp_new_packet+0x4c8>)
 800faae:	2000      	movs	r0, #0
 800fab0:	f7fd fd74 	bl	800d59c <do_csp_debug>
				goto discard_close;
 800fab4:	e1cf      	b.n	800fe56 <csp_rdp_new_packet+0x832>
			} else {
				csp_log_protocol("RDP %p: Ignoring duplicate SYN packet!", conn);
 800fab6:	4b06      	ldr	r3, [pc, #24]	; (800fad0 <csp_rdp_new_packet+0x4ac>)
 800fab8:	795b      	ldrb	r3, [r3, #5]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f000 81ee 	beq.w	800fe9c <csp_rdp_new_packet+0x878>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	461a      	mov	r2, r3
 800fac4:	490a      	ldr	r1, [pc, #40]	; (800faf0 <csp_rdp_new_packet+0x4cc>)
 800fac6:	2005      	movs	r0, #5
 800fac8:	f7fd fd68 	bl	800d59c <do_csp_debug>
				goto discard_open;
 800facc:	e1e6      	b.n	800fe9c <csp_rdp_new_packet+0x878>
 800face:	bf00      	nop
 800fad0:	200001a0 	.word	0x200001a0
 800fad4:	08014b48 	.word	0x08014b48
 800fad8:	08014b60 	.word	0x08014b60
 800fadc:	08014bd8 	.word	0x08014bd8
 800fae0:	08014bf4 	.word	0x08014bf4
 800fae4:	08014c10 	.word	0x08014c10
 800fae8:	08014c50 	.word	0x08014c50
 800faec:	08014c78 	.word	0x08014c78
 800faf0:	08014ca4 	.word	0x08014ca4
			}
		}

		/* Check sequence number */
		if (!csp_rdp_seq_between(rx_header->seq_nr, conn->rdp.rcv_cur + 1, conn->rdp.rcv_cur + (conn->rdp.window_size * 2))) {
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fafa:	b298      	uxth	r0, r3
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fb00:	3301      	adds	r3, #1
 800fb02:	b299      	uxth	r1, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	4413      	add	r3, r2
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	461a      	mov	r2, r3
 800fb18:	f7fe fef2 	bl	800e900 <csp_rdp_seq_between>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d135      	bne.n	800fb8e <csp_rdp_new_packet+0x56a>
			csp_log_protocol("RDP %p: Invalid sequence number! %u not between %u and %"PRIu32,
 800fb22:	4b97      	ldr	r3, [pc, #604]	; (800fd80 <csp_rdp_new_packet+0x75c>)
 800fb24:	795b      	ldrb	r3, [r3, #5]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d017      	beq.n	800fb5a <csp_rdp_new_packet+0x536>
 800fb2a:	68f9      	ldr	r1, [r7, #12]
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	461c      	mov	r4, r3
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800fb40:	4610      	mov	r0, r2
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fb46:	0052      	lsls	r2, r2, #1
 800fb48:	4402      	add	r2, r0
 800fb4a:	9201      	str	r2, [sp, #4]
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	4623      	mov	r3, r4
 800fb50:	460a      	mov	r2, r1
 800fb52:	498c      	ldr	r1, [pc, #560]	; (800fd84 <csp_rdp_new_packet+0x760>)
 800fb54:	2005      	movs	r0, #5
 800fb56:	f7fd fd21 	bl	800d59c <do_csp_debug>
				conn, rx_header->seq_nr, conn->rdp.rcv_cur + 1U, conn->rdp.rcv_cur + (conn->rdp.window_size * 2U));
			/* If duplicate SYN received, send another SYN/ACK */
			if (conn->rdp.state == RDP_SYN_RCVD)
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	7f1b      	ldrb	r3, [r3, #28]
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	d10b      	bne.n	800fb7a <csp_rdp_new_packet+0x556>
				csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_SYN, conn->rdp.snd_iss, conn->rdp.rcv_irs);
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fb68:	461a      	mov	r2, r3
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	4613      	mov	r3, r2
 800fb72:	2203      	movs	r2, #3
 800fb74:	2100      	movs	r1, #0
 800fb76:	f7fe ff27 	bl	800e9c8 <csp_rdp_send_cmp>
			/* If duplicate data packet received, send EACK back */
			if (conn->rdp.state == RDP_OPEN)
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	7f1b      	ldrb	r3, [r3, #28]
 800fb7e:	2b03      	cmp	r3, #3
 800fb80:	f040 818e 	bne.w	800fea0 <csp_rdp_new_packet+0x87c>
				csp_rdp_send_eack(conn);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff f844 	bl	800ec14 <csp_rdp_send_eack>

			goto discard_open;
 800fb8c:	e188      	b.n	800fea0 <csp_rdp_new_packet+0x87c>
		}

		/* Check ACK number */
		if (!csp_rdp_seq_between(rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1)) {
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fb94:	b298      	uxth	r0, r3
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	8c1a      	ldrh	r2, [r3, #32]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	005b      	lsls	r3, r3, #1
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	b299      	uxth	r1, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	8bdb      	ldrh	r3, [r3, #30]
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	f7fe fea3 	bl	800e900 <csp_rdp_seq_between>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d11e      	bne.n	800fbfe <csp_rdp_new_packet+0x5da>
			csp_log_error("RDP %p: Invalid ACK number! %u not between %"PRIu32" and %u",
 800fbc0:	4b6f      	ldr	r3, [pc, #444]	; (800fd80 <csp_rdp_new_packet+0x75c>)
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f000 816d 	beq.w	800fea4 <csp_rdp_new_packet+0x880>
 800fbca:	68f9      	ldr	r1, [r7, #12]
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	8c1b      	ldrh	r3, [r3, #32]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe0:	005b      	lsls	r3, r3, #1
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	8bd2      	ldrh	r2, [r2, #30]
 800fbea:	3a01      	subs	r2, #1
 800fbec:	9201      	str	r2, [sp, #4]
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	460a      	mov	r2, r1
 800fbf4:	4964      	ldr	r1, [pc, #400]	; (800fd88 <csp_rdp_new_packet+0x764>)
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	f7fd fcd0 	bl	800d59c <do_csp_debug>
				conn, rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1);
			goto discard_open;
 800fbfc:	e152      	b.n	800fea4 <csp_rdp_new_packet+0x880>
		}

		/* Check SYN_RCVD ACK */
		if (conn->rdp.state == RDP_SYN_RCVD) {
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	7f1b      	ldrb	r3, [r3, #28]
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	d13e      	bne.n	800fc84 <csp_rdp_new_packet+0x660>
			if (rx_header->ack_nr != conn->rdp.snd_iss) {
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d00b      	beq.n	800fc2e <csp_rdp_new_packet+0x60a>
				csp_log_error("RDP %p: SYN-RCVD: Wrong ACK number", conn);
 800fc16:	4b5a      	ldr	r3, [pc, #360]	; (800fd80 <csp_rdp_new_packet+0x75c>)
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f000 811d 	beq.w	800fe5a <csp_rdp_new_packet+0x836>
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	461a      	mov	r2, r3
 800fc24:	4959      	ldr	r1, [pc, #356]	; (800fd8c <csp_rdp_new_packet+0x768>)
 800fc26:	2000      	movs	r0, #0
 800fc28:	f7fd fcb8 	bl	800d59c <do_csp_debug>
				goto discard_close;
 800fc2c:	e115      	b.n	800fe5a <csp_rdp_new_packet+0x836>
			}
			csp_log_protocol("RDP %p: NC: Connection OPEN", conn);
 800fc2e:	4b54      	ldr	r3, [pc, #336]	; (800fd80 <csp_rdp_new_packet+0x75c>)
 800fc30:	795b      	ldrb	r3, [r3, #5]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d005      	beq.n	800fc42 <csp_rdp_new_packet+0x61e>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	461a      	mov	r2, r3
 800fc3a:	4955      	ldr	r1, [pc, #340]	; (800fd90 <csp_rdp_new_packet+0x76c>)
 800fc3c:	2005      	movs	r0, #5
 800fc3e:	f7fd fcad 	bl	800d59c <do_csp_debug>
			conn->rdp.state = RDP_OPEN;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2203      	movs	r2, #3
 800fc46:	771a      	strb	r2, [r3, #28]

			/* If a socket is set, this message is the first in a new connection
			 * so the connection must be queued to the socket. */
			if (conn->socket != NULL) {
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	691b      	ldr	r3, [r3, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d019      	beq.n	800fc84 <csp_rdp_new_packet+0x660>

				/* Try queueing */
				if (csp_queue_enqueue(conn->socket, &conn, 0) == CSP_QUEUE_FULL) {
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	f107 010c 	add.w	r1, r7, #12
 800fc58:	2200      	movs	r2, #0
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fc fd83 	bl	800c766 <csp_queue_enqueue>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d10b      	bne.n	800fc7e <csp_rdp_new_packet+0x65a>
					csp_log_error("RDP %p: ERROR socket cannot accept more connections", conn);
 800fc66:	4b46      	ldr	r3, [pc, #280]	; (800fd80 <csp_rdp_new_packet+0x75c>)
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f000 80f7 	beq.w	800fe5e <csp_rdp_new_packet+0x83a>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	461a      	mov	r2, r3
 800fc74:	4947      	ldr	r1, [pc, #284]	; (800fd94 <csp_rdp_new_packet+0x770>)
 800fc76:	2000      	movs	r0, #0
 800fc78:	f7fd fc90 	bl	800d59c <do_csp_debug>
					goto discard_close;
 800fc7c:	e0ef      	b.n	800fe5e <csp_rdp_new_packet+0x83a>
				}

				/* Ensure that this connection will not be posted to this socket again
				 * and remember that the connection handle has been passed to userspace
				 * by setting the socket = NULL */
				conn->socket = NULL;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2200      	movs	r2, #0
 800fc82:	611a      	str	r2, [r3, #16]
			}

		}

		/* Store current ack'ed sequence number */
		conn->rdp.snd_una = rx_header->ack_nr + 1;
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	3201      	adds	r2, #1
 800fc90:	b292      	uxth	r2, r2
 800fc92:	841a      	strh	r2, [r3, #32]

		/* We have an EACK */
		if (rx_header->eak) {
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f003 0302 	and.w	r3, r3, #2
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00a      	beq.n	800fcb8 <csp_rdp_new_packet+0x694>
			if (packet->length > sizeof(rdp_header_t))
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	895b      	ldrh	r3, [r3, #10]
 800fca6:	2b05      	cmp	r3, #5
 800fca8:	f240 80fe 	bls.w	800fea8 <csp_rdp_new_packet+0x884>
				csp_rdp_flush_eack(conn, packet);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	68b9      	ldr	r1, [r7, #8]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff f9b3 	bl	800f01c <csp_rdp_flush_eack>
			goto discard_open;
 800fcb6:	e0f7      	b.n	800fea8 <csp_rdp_new_packet+0x884>
		}

		/* If no data, return here */
		if (packet->length <= sizeof(rdp_header_t))
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	895b      	ldrh	r3, [r3, #10]
 800fcbc:	2b05      	cmp	r3, #5
 800fcbe:	f240 80f5 	bls.w	800feac <csp_rdp_new_packet+0x888>
			goto discard_open;

		/* If message is not in sequence, send EACK and store packet */
		if (rx_header->seq_nr != (uint16_t)(conn->rdp.rcv_cur + 1)) {
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcce:	3301      	adds	r3, #1
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d01f      	beq.n	800fd16 <csp_rdp_new_packet+0x6f2>
			if (csp_rdp_rx_queue_add(conn, packet, rx_header->seq_nr) != CSP_QUEUE_OK) {
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	69bb      	ldr	r3, [r7, #24]
 800fcda:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	461a      	mov	r2, r3
 800fce2:	68b9      	ldr	r1, [r7, #8]
 800fce4:	f7ff f97a 	bl	800efdc <csp_rdp_rx_queue_add>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d00e      	beq.n	800fd0c <csp_rdp_new_packet+0x6e8>
				csp_log_protocol("RDP %p: Duplicate sequence number", conn);
 800fcee:	4b24      	ldr	r3, [pc, #144]	; (800fd80 <csp_rdp_new_packet+0x75c>)
 800fcf0:	795b      	ldrb	r3, [r3, #5]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d005      	beq.n	800fd02 <csp_rdp_new_packet+0x6de>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	4927      	ldr	r1, [pc, #156]	; (800fd98 <csp_rdp_new_packet+0x774>)
 800fcfc:	2005      	movs	r0, #5
 800fcfe:	f7fd fc4d 	bl	800d59c <do_csp_debug>
				csp_rdp_check_ack(conn);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff fb01 	bl	800f30c <csp_rdp_check_ack>
				goto discard_open;
 800fd0a:	e0d6      	b.n	800feba <csp_rdp_new_packet+0x896>
			}
			csp_rdp_send_eack(conn);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fe ff80 	bl	800ec14 <csp_rdp_send_eack>
			goto accepted_open;
 800fd14:	e0d4      	b.n	800fec0 <csp_rdp_new_packet+0x89c>
		}

		/* Store sequence number before stripping RDP header */
		uint16_t seq_nr = rx_header->seq_nr;
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	785a      	ldrb	r2, [r3, #1]
 800fd1a:	789b      	ldrb	r3, [r3, #2]
 800fd1c:	021b      	lsls	r3, r3, #8
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	82bb      	strh	r3, [r7, #20]

		/* Receive data */
		if (csp_rdp_receive_data(conn, packet) != CSP_ERR_NONE)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	68b9      	ldr	r1, [r7, #8]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7ff f856 	bl	800edd8 <csp_rdp_receive_data>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f040 80be 	bne.w	800feb0 <csp_rdp_new_packet+0x88c>
			goto discard_open;

		/* Update last received packet */
		conn->rdp.rcv_cur = seq_nr;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	8aba      	ldrh	r2, [r7, #20]
 800fd38:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Only ACK the message if there is room for a full window in the RX buffer.
		 * Unacknowledged segments are ACKed by csp_rdp_check_timeouts when the buffer is
		 * no longer full. */
		csp_rdp_check_ack(conn);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff fae5 	bl	800f30c <csp_rdp_check_ack>

		/* Flush RX queue */
		csp_rdp_rx_queue_flush(conn);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7ff f86b 	bl	800ee20 <csp_rdp_rx_queue_flush>

		goto accepted_open;
 800fd4a:	e0b9      	b.n	800fec0 <csp_rdp_new_packet+0x89c>
	break;

	case RDP_CLOSE_WAIT:

		/* Ignore SYN or !ACK */
		if (rx_header->syn || !rx_header->ack) {
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	f003 0308 	and.w	r3, r3, #8
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <csp_rdp_new_packet+0x744>
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	f003 0304 	and.w	r3, r3, #4
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d11b      	bne.n	800fda0 <csp_rdp_new_packet+0x77c>
			csp_log_protocol("RDP %p: Invalid SYN or no ACK in CLOSE-WAIT", conn);
 800fd68:	4b05      	ldr	r3, [pc, #20]	; (800fd80 <csp_rdp_new_packet+0x75c>)
 800fd6a:	795b      	ldrb	r3, [r3, #5]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f000 80a1 	beq.w	800feb4 <csp_rdp_new_packet+0x890>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	461a      	mov	r2, r3
 800fd76:	4909      	ldr	r1, [pc, #36]	; (800fd9c <csp_rdp_new_packet+0x778>)
 800fd78:	2005      	movs	r0, #5
 800fd7a:	f7fd fc0f 	bl	800d59c <do_csp_debug>
			goto discard_open;
 800fd7e:	e099      	b.n	800feb4 <csp_rdp_new_packet+0x890>
 800fd80:	200001a0 	.word	0x200001a0
 800fd84:	08014ccc 	.word	0x08014ccc
 800fd88:	08014d08 	.word	0x08014d08
 800fd8c:	08014d40 	.word	0x08014d40
 800fd90:	08014d64 	.word	0x08014d64
 800fd94:	08014d80 	.word	0x08014d80
 800fd98:	08014db4 	.word	0x08014db4
 800fd9c:	08014dd8 	.word	0x08014dd8
		}

		/* Check ACK number */
		if (!csp_rdp_seq_between(rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1)) {
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fda6:	b298      	uxth	r0, r3
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	8c1a      	ldrh	r2, [r3, #32]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	b299      	uxth	r1, r3
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	8bdb      	ldrh	r3, [r3, #30]
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	f7fe fd9a 	bl	800e900 <csp_rdp_seq_between>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d11d      	bne.n	800fe0e <csp_rdp_new_packet+0x7ea>
			csp_log_error("RDP %p: Invalid ACK number! %u not between %"PRIu32" and %u",
 800fdd2:	4b3e      	ldr	r3, [pc, #248]	; (800fecc <csp_rdp_new_packet+0x8a8>)
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d06e      	beq.n	800feb8 <csp_rdp_new_packet+0x894>
 800fdda:	68f9      	ldr	r1, [r7, #12]
 800fddc:	69bb      	ldr	r3, [r7, #24]
 800fdde:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	4618      	mov	r0, r3
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	8c1b      	ldrh	r3, [r3, #32]
 800fdea:	461a      	mov	r2, r3
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf0:	005b      	lsls	r3, r3, #1
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	8bd2      	ldrh	r2, [r2, #30]
 800fdfa:	3a01      	subs	r2, #1
 800fdfc:	9201      	str	r2, [sp, #4]
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	4603      	mov	r3, r0
 800fe02:	460a      	mov	r2, r1
 800fe04:	4932      	ldr	r1, [pc, #200]	; (800fed0 <csp_rdp_new_packet+0x8ac>)
 800fe06:	2000      	movs	r0, #0
 800fe08:	f7fd fbc8 	bl	800d59c <do_csp_debug>
				conn, rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1);
			goto discard_open;
 800fe0c:	e054      	b.n	800feb8 <csp_rdp_new_packet+0x894>
		}

		/* Store current ack'ed sequence number */
		conn->rdp.snd_una = rx_header->ack_nr + 1;
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	3201      	adds	r2, #1
 800fe1a:	b292      	uxth	r2, r2
 800fe1c:	841a      	strh	r2, [r3, #32]

		/* Send back a reset */
		csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	8bdb      	ldrh	r3, [r3, #30]
 800fe24:	461a      	mov	r2, r3
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe2a:	9300      	str	r3, [sp, #0]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	220a      	movs	r2, #10
 800fe30:	2100      	movs	r1, #0
 800fe32:	f7fe fdc9 	bl	800e9c8 <csp_rdp_send_cmp>

		goto discard_open;
 800fe36:	e040      	b.n	800feba <csp_rdp_new_packet+0x896>

	default:
            csp_log_error("RDP %p: ERROR default state!", conn);
 800fe38:	4b24      	ldr	r3, [pc, #144]	; (800fecc <csp_rdp_new_packet+0x8a8>)
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d010      	beq.n	800fe62 <csp_rdp_new_packet+0x83e>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	461a      	mov	r2, r3
 800fe44:	4923      	ldr	r1, [pc, #140]	; (800fed4 <csp_rdp_new_packet+0x8b0>)
 800fe46:	2000      	movs	r0, #0
 800fe48:	f7fd fba8 	bl	800d59c <do_csp_debug>
		goto discard_close;
 800fe4c:	e009      	b.n	800fe62 <csp_rdp_new_packet+0x83e>
			goto discard_close;
 800fe4e:	bf00      	nop
 800fe50:	e008      	b.n	800fe64 <csp_rdp_new_packet+0x840>
		goto discard_close;
 800fe52:	bf00      	nop
 800fe54:	e006      	b.n	800fe64 <csp_rdp_new_packet+0x840>
				goto discard_close;
 800fe56:	bf00      	nop
 800fe58:	e004      	b.n	800fe64 <csp_rdp_new_packet+0x840>
				goto discard_close;
 800fe5a:	bf00      	nop
 800fe5c:	e002      	b.n	800fe64 <csp_rdp_new_packet+0x840>
					goto discard_close;
 800fe5e:	bf00      	nop
 800fe60:	e000      	b.n	800fe64 <csp_rdp_new_packet+0x840>
		goto discard_close;
 800fe62:	bf00      	nop
	}

discard_close:
	/* If user-space has received the connection handle, wake it up,
	 * by sending a NULL pointer, user-space must close connection */
	if (conn->socket == NULL) {
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	691b      	ldr	r3, [r3, #16]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10b      	bne.n	800fe84 <csp_rdp_new_packet+0x860>
		csp_conn_close(conn, closed_by);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	7dfa      	ldrb	r2, [r7, #23]
 800fe70:	4611      	mov	r1, r2
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fd fa0c 	bl	800d290 <csp_conn_close>
		csp_conn_enqueue_packet(conn, NULL);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7fc ffe3 	bl	800ce48 <csp_conn_enqueue_packet>
 800fe82:	e01a      	b.n	800feba <csp_rdp_new_packet+0x896>
	} else {
		/* New connection, userspace doesn't know anything about it yet - so it can be completely closed */
		csp_conn_close(conn, closed_by | CSP_RDP_CLOSED_BY_USERSPACE);
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	7dfb      	ldrb	r3, [r7, #23]
 800fe88:	f043 0301 	orr.w	r3, r3, #1
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	4619      	mov	r1, r3
 800fe90:	4610      	mov	r0, r2
 800fe92:	f7fd f9fd 	bl	800d290 <csp_conn_close>
 800fe96:	e010      	b.n	800feba <csp_rdp_new_packet+0x896>
		goto discard_open;
 800fe98:	bf00      	nop
 800fe9a:	e00e      	b.n	800feba <csp_rdp_new_packet+0x896>
				goto discard_open;
 800fe9c:	bf00      	nop
 800fe9e:	e00c      	b.n	800feba <csp_rdp_new_packet+0x896>
			goto discard_open;
 800fea0:	bf00      	nop
 800fea2:	e00a      	b.n	800feba <csp_rdp_new_packet+0x896>
			goto discard_open;
 800fea4:	bf00      	nop
 800fea6:	e008      	b.n	800feba <csp_rdp_new_packet+0x896>
			goto discard_open;
 800fea8:	bf00      	nop
 800feaa:	e006      	b.n	800feba <csp_rdp_new_packet+0x896>
			goto discard_open;
 800feac:	bf00      	nop
 800feae:	e004      	b.n	800feba <csp_rdp_new_packet+0x896>
			goto discard_open;
 800feb0:	bf00      	nop
 800feb2:	e002      	b.n	800feba <csp_rdp_new_packet+0x896>
			goto discard_open;
 800feb4:	bf00      	nop
 800feb6:	e000      	b.n	800feba <csp_rdp_new_packet+0x896>
			goto discard_open;
 800feb8:	bf00      	nop
	}

discard_open:
	csp_buffer_free(packet);
 800feba:	68b8      	ldr	r0, [r7, #8]
 800febc:	f7fc fece 	bl	800cc5c <csp_buffer_free>
accepted_open:
	return close_connection;
 800fec0:	7ffb      	ldrb	r3, [r7, #31]

}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3724      	adds	r7, #36	; 0x24
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feca:	bf00      	nop
 800fecc:	200001a0 	.word	0x200001a0
 800fed0:	08014d08 	.word	0x08014d08
 800fed4:	08014e04 	.word	0x08014e04

0800fed8 <csp_rdp_connect>:

int csp_rdp_connect(csp_conn_t * conn) {
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]

	int retry = 1;
 800fee0:	2301      	movs	r3, #1
 800fee2:	60fb      	str	r3, [r7, #12]

	conn->rdp.window_size     = csp_rdp_window_size;
 800fee4:	4b5e      	ldr	r3, [pc, #376]	; (8010060 <csp_rdp_connect+0x188>)
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	62da      	str	r2, [r3, #44]	; 0x2c
	conn->rdp.conn_timeout    = csp_rdp_conn_timeout;
 800feec:	4b5d      	ldr	r3, [pc, #372]	; (8010064 <csp_rdp_connect+0x18c>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	631a      	str	r2, [r3, #48]	; 0x30
	conn->rdp.packet_timeout  = csp_rdp_packet_timeout;
 800fef4:	4b5c      	ldr	r3, [pc, #368]	; (8010068 <csp_rdp_connect+0x190>)
 800fef6:	681a      	ldr	r2, [r3, #0]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	635a      	str	r2, [r3, #52]	; 0x34
	conn->rdp.delayed_acks    = csp_rdp_delayed_acks;
 800fefc:	4b5b      	ldr	r3, [pc, #364]	; (801006c <csp_rdp_connect+0x194>)
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	639a      	str	r2, [r3, #56]	; 0x38
	conn->rdp.ack_timeout     = csp_rdp_ack_timeout;
 800ff04:	4b5a      	ldr	r3, [pc, #360]	; (8010070 <csp_rdp_connect+0x198>)
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	63da      	str	r2, [r3, #60]	; 0x3c
	conn->rdp.ack_delay_count = csp_rdp_ack_delay_count;
 800ff0c:	4b59      	ldr	r3, [pc, #356]	; (8010074 <csp_rdp_connect+0x19c>)
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	641a      	str	r2, [r3, #64]	; 0x40
	conn->rdp.ack_timestamp   = csp_get_ms();
 800ff14:	f7fc fd7d 	bl	800ca12 <csp_get_ms>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	645a      	str	r2, [r3, #68]	; 0x44

retry:
	csp_log_protocol("RDP %p: Active connect, conn state %u", conn, conn->rdp.state);
 800ff1e:	4b56      	ldr	r3, [pc, #344]	; (8010078 <csp_rdp_connect+0x1a0>)
 800ff20:	795b      	ldrb	r3, [r3, #5]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d006      	beq.n	800ff34 <csp_rdp_connect+0x5c>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	7f1b      	ldrb	r3, [r3, #28]
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	4953      	ldr	r1, [pc, #332]	; (801007c <csp_rdp_connect+0x1a4>)
 800ff2e:	2005      	movs	r0, #5
 800ff30:	f7fd fb34 	bl	800d59c <do_csp_debug>

	if (conn->rdp.state == RDP_OPEN) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	7f1b      	ldrb	r3, [r3, #28]
 800ff38:	2b03      	cmp	r3, #3
 800ff3a:	d10b      	bne.n	800ff54 <csp_rdp_connect+0x7c>
		csp_log_error("RDP %p: Connection already open", conn);
 800ff3c:	4b4e      	ldr	r3, [pc, #312]	; (8010078 <csp_rdp_connect+0x1a0>)
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <csp_rdp_connect+0x76>
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	494e      	ldr	r1, [pc, #312]	; (8010080 <csp_rdp_connect+0x1a8>)
 800ff48:	2000      	movs	r0, #0
 800ff4a:	f7fd fb27 	bl	800d59c <do_csp_debug>
		return CSP_ERR_ALREADY;
 800ff4e:	f06f 0306 	mvn.w	r3, #6
 800ff52:	e081      	b.n	8010058 <csp_rdp_connect+0x180>
	}

	/* Randomize ISS */
	conn->rdp.snd_iss = (uint16_t)rand();
 800ff54:	f001 fac4 	bl	80114e0 <rand>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	845a      	strh	r2, [r3, #34]	; 0x22
	conn->rdp.snd_nxt = conn->rdp.snd_iss + 1;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ff64:	3301      	adds	r3, #1
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	83da      	strh	r2, [r3, #30]
	conn->rdp.snd_una = conn->rdp.snd_iss;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	841a      	strh	r2, [r3, #32]

	csp_log_protocol("RDP %p: AC: Sending SYN", conn);
 800ff74:	4b40      	ldr	r3, [pc, #256]	; (8010078 <csp_rdp_connect+0x1a0>)
 800ff76:	795b      	ldrb	r3, [r3, #5]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d004      	beq.n	800ff86 <csp_rdp_connect+0xae>
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	4941      	ldr	r1, [pc, #260]	; (8010084 <csp_rdp_connect+0x1ac>)
 800ff80:	2005      	movs	r0, #5
 800ff82:	f7fd fb0b 	bl	800d59c <do_csp_debug>

	/* Ensure semaphore is busy, so router task can release it */
	csp_bin_sem_wait(&conn->rdp.tx_wait, 0);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3348      	adds	r3, #72	; 0x48
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fc fc6f 	bl	800c870 <csp_bin_sem_wait>

	/* Send SYN message */
	conn->rdp.state = RDP_SYN_SENT;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2201      	movs	r2, #1
 800ff96:	771a      	strb	r2, [r3, #28]
	if (csp_rdp_send_syn(conn) != CSP_ERR_NONE)
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7fe febf 	bl	800ed1c <csp_rdp_send_syn>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d144      	bne.n	801002e <csp_rdp_connect+0x156>
		goto error;

	/* Wait for router task to release semaphore */
	csp_log_protocol("RDP %p: AC: Waiting for SYN/ACK reply...", conn);
 800ffa4:	4b34      	ldr	r3, [pc, #208]	; (8010078 <csp_rdp_connect+0x1a0>)
 800ffa6:	795b      	ldrb	r3, [r3, #5]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d004      	beq.n	800ffb6 <csp_rdp_connect+0xde>
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	4936      	ldr	r1, [pc, #216]	; (8010088 <csp_rdp_connect+0x1b0>)
 800ffb0:	2005      	movs	r0, #5
 800ffb2:	f7fd faf3 	bl	800d59c <do_csp_debug>
	int result = csp_bin_sem_wait(&conn->rdp.tx_wait, conn->rdp.conn_timeout);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	4610      	mov	r0, r2
 800ffc4:	f7fc fc54 	bl	800c870 <csp_bin_sem_wait>
 800ffc8:	60b8      	str	r0, [r7, #8]

	if (result == CSP_SEMAPHORE_OK) {
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d130      	bne.n	8010032 <csp_rdp_connect+0x15a>
		if (conn->rdp.state == RDP_OPEN) {
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	7f1b      	ldrb	r3, [r3, #28]
 800ffd4:	2b03      	cmp	r3, #3
 800ffd6:	d10a      	bne.n	800ffee <csp_rdp_connect+0x116>
			csp_log_protocol("RDP %p: AC: Connection OPEN", conn);
 800ffd8:	4b27      	ldr	r3, [pc, #156]	; (8010078 <csp_rdp_connect+0x1a0>)
 800ffda:	795b      	ldrb	r3, [r3, #5]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d004      	beq.n	800ffea <csp_rdp_connect+0x112>
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	492a      	ldr	r1, [pc, #168]	; (801008c <csp_rdp_connect+0x1b4>)
 800ffe4:	2005      	movs	r0, #5
 800ffe6:	f7fd fad9 	bl	800d59c <do_csp_debug>
			return CSP_ERR_NONE;
 800ffea:	2300      	movs	r3, #0
 800ffec:	e034      	b.n	8010058 <csp_rdp_connect+0x180>
		}
		if (conn->rdp.state == RDP_SYN_SENT) {
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	7f1b      	ldrb	r3, [r3, #28]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d11d      	bne.n	8010032 <csp_rdp_connect+0x15a>
			if (retry) {
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00e      	beq.n	801001a <csp_rdp_connect+0x142>
				csp_log_warn("RDP %p: Half-open connection detected, RST sent, now retrying", conn);
 800fffc:	4b1e      	ldr	r3, [pc, #120]	; (8010078 <csp_rdp_connect+0x1a0>)
 800fffe:	785b      	ldrb	r3, [r3, #1]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d004      	beq.n	801000e <csp_rdp_connect+0x136>
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	4922      	ldr	r1, [pc, #136]	; (8010090 <csp_rdp_connect+0x1b8>)
 8010008:	2001      	movs	r0, #1
 801000a:	f7fd fac7 	bl	800d59c <do_csp_debug>
				csp_rdp_flush_all(conn);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff f900 	bl	800f214 <csp_rdp_flush_all>
				retry = 0;
 8010014:	2300      	movs	r3, #0
 8010016:	60fb      	str	r3, [r7, #12]
				goto retry;
 8010018:	e781      	b.n	800ff1e <csp_rdp_connect+0x46>
			}
			csp_log_error("RDP %p: Connection stayed half-open, even after RST and retry!", conn);
 801001a:	4b17      	ldr	r3, [pc, #92]	; (8010078 <csp_rdp_connect+0x1a0>)
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d009      	beq.n	8010036 <csp_rdp_connect+0x15e>
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	491b      	ldr	r1, [pc, #108]	; (8010094 <csp_rdp_connect+0x1bc>)
 8010026:	2000      	movs	r0, #0
 8010028:	f7fd fab8 	bl	800d59c <do_csp_debug>
			goto error;
 801002c:	e003      	b.n	8010036 <csp_rdp_connect+0x15e>
		goto error;
 801002e:	bf00      	nop
 8010030:	e002      	b.n	8010038 <csp_rdp_connect+0x160>
		}
	}

error:
 8010032:	bf00      	nop
 8010034:	e000      	b.n	8010038 <csp_rdp_connect+0x160>
			goto error;
 8010036:	bf00      	nop
	csp_log_protocol("RDP %p: AC: Connection Failed", conn);
 8010038:	4b0f      	ldr	r3, [pc, #60]	; (8010078 <csp_rdp_connect+0x1a0>)
 801003a:	795b      	ldrb	r3, [r3, #5]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d004      	beq.n	801004a <csp_rdp_connect+0x172>
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	4915      	ldr	r1, [pc, #84]	; (8010098 <csp_rdp_connect+0x1c0>)
 8010044:	2005      	movs	r0, #5
 8010046:	f7fd faa9 	bl	800d59c <do_csp_debug>
	csp_rdp_close_internal(conn, CSP_RDP_CLOSED_BY_PROTOCOL, false);
 801004a:	2200      	movs	r2, #0
 801004c:	2102      	movs	r1, #2
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f9dc 	bl	801040c <csp_rdp_close_internal>
	return CSP_ERR_TIMEDOUT;
 8010054:	f06f 0302 	mvn.w	r3, #2

}
 8010058:	4618      	mov	r0, r3
 801005a:	3710      	adds	r7, #16
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	200001e8 	.word	0x200001e8
 8010064:	200001ec 	.word	0x200001ec
 8010068:	200001f0 	.word	0x200001f0
 801006c:	200001f4 	.word	0x200001f4
 8010070:	200001f8 	.word	0x200001f8
 8010074:	200001fc 	.word	0x200001fc
 8010078:	200001a0 	.word	0x200001a0
 801007c:	08014e24 	.word	0x08014e24
 8010080:	08014e4c 	.word	0x08014e4c
 8010084:	08014e6c 	.word	0x08014e6c
 8010088:	08014e84 	.word	0x08014e84
 801008c:	08014eb0 	.word	0x08014eb0
 8010090:	08014ecc 	.word	0x08014ecc
 8010094:	08014f0c 	.word	0x08014f0c
 8010098:	08014f4c 	.word	0x08014f4c

0801009c <csp_rdp_send>:

int csp_rdp_send(csp_conn_t * conn, csp_packet_t * packet) {
 801009c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a0:	b08e      	sub	sp, #56	; 0x38
 80100a2:	af08      	add	r7, sp, #32
 80100a4:	60f8      	str	r0, [r7, #12]
 80100a6:	60b9      	str	r1, [r7, #8]

	if (conn->rdp.state != RDP_OPEN) {
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	7f1b      	ldrb	r3, [r3, #28]
 80100ac:	2b03      	cmp	r3, #3
 80100ae:	d030      	beq.n	8010112 <csp_rdp_send+0x76>
		csp_log_error("RDP %p: ERROR cannot send, connection not open (%d)", conn, conn->rdp.state);
 80100b0:	4b82      	ldr	r3, [pc, #520]	; (80102bc <csp_rdp_send+0x220>)
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d006      	beq.n	80100c6 <csp_rdp_send+0x2a>
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	7f1b      	ldrb	r3, [r3, #28]
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	4980      	ldr	r1, [pc, #512]	; (80102c0 <csp_rdp_send+0x224>)
 80100c0:	2000      	movs	r0, #0
 80100c2:	f7fd fa6b 	bl	800d59c <do_csp_debug>
		return CSP_ERR_RESET;
 80100c6:	f06f 0307 	mvn.w	r3, #7
 80100ca:	e0f2      	b.n	80102b2 <csp_rdp_send+0x216>
	}

	while ((conn->rdp.state == RDP_OPEN) && (csp_rdp_is_conn_ready_for_tx(conn) == false)) {
		csp_log_protocol("RDP %p: Waiting for window update before sending seq %u", conn, conn->rdp.snd_nxt);
 80100cc:	4b7b      	ldr	r3, [pc, #492]	; (80102bc <csp_rdp_send+0x220>)
 80100ce:	795b      	ldrb	r3, [r3, #5]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d006      	beq.n	80100e2 <csp_rdp_send+0x46>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	8bdb      	ldrh	r3, [r3, #30]
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	497a      	ldr	r1, [pc, #488]	; (80102c4 <csp_rdp_send+0x228>)
 80100dc:	2005      	movs	r0, #5
 80100de:	f7fd fa5d 	bl	800d59c <do_csp_debug>
		if ((csp_bin_sem_wait(&conn->rdp.tx_wait, conn->rdp.conn_timeout)) != CSP_SEMAPHORE_OK) {
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ec:	4619      	mov	r1, r3
 80100ee:	4610      	mov	r0, r2
 80100f0:	f7fc fbbe 	bl	800c870 <csp_bin_sem_wait>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d00b      	beq.n	8010112 <csp_rdp_send+0x76>
			csp_log_error("RDP %p: Timeout during send", conn);
 80100fa:	4b70      	ldr	r3, [pc, #448]	; (80102bc <csp_rdp_send+0x220>)
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d004      	beq.n	801010c <csp_rdp_send+0x70>
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	4970      	ldr	r1, [pc, #448]	; (80102c8 <csp_rdp_send+0x22c>)
 8010106:	2000      	movs	r0, #0
 8010108:	f7fd fa48 	bl	800d59c <do_csp_debug>
			return CSP_ERR_TIMEDOUT;
 801010c:	f06f 0302 	mvn.w	r3, #2
 8010110:	e0cf      	b.n	80102b2 <csp_rdp_send+0x216>
	while ((conn->rdp.state == RDP_OPEN) && (csp_rdp_is_conn_ready_for_tx(conn) == false)) {
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	7f1b      	ldrb	r3, [r3, #28]
 8010116:	2b03      	cmp	r3, #3
 8010118:	d108      	bne.n	801012c <csp_rdp_send+0x90>
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f7ff f938 	bl	800f390 <csp_rdp_is_conn_ready_for_tx>
 8010120:	4603      	mov	r3, r0
 8010122:	f083 0301 	eor.w	r3, r3, #1
 8010126:	b2db      	uxtb	r3, r3
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1cf      	bne.n	80100cc <csp_rdp_send+0x30>
		}
	}

	if (conn->rdp.state != RDP_OPEN) {
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	7f1b      	ldrb	r3, [r3, #28]
 8010130:	2b03      	cmp	r3, #3
 8010132:	d00d      	beq.n	8010150 <csp_rdp_send+0xb4>
		csp_log_error("RDP %p: ERROR cannot send, connection not open (%d) -> reset", conn, conn->rdp.state);
 8010134:	4b61      	ldr	r3, [pc, #388]	; (80102bc <csp_rdp_send+0x220>)
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d006      	beq.n	801014a <csp_rdp_send+0xae>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	7f1b      	ldrb	r3, [r3, #28]
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	4962      	ldr	r1, [pc, #392]	; (80102cc <csp_rdp_send+0x230>)
 8010144:	2000      	movs	r0, #0
 8010146:	f7fd fa29 	bl	800d59c <do_csp_debug>
		return CSP_ERR_RESET;
 801014a:	f06f 0307 	mvn.w	r3, #7
 801014e:	e0b0      	b.n	80102b2 <csp_rdp_send+0x216>
	}

	/* Add RDP header */
	rdp_header_t * tx_header = csp_rdp_header_add(packet);
 8010150:	68b8      	ldr	r0, [r7, #8]
 8010152:	f7fe fb87 	bl	800e864 <csp_rdp_header_add>
 8010156:	6178      	str	r0, [r7, #20]
	if (tx_header == NULL) {
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10b      	bne.n	8010176 <csp_rdp_send+0xda>
		csp_log_error("RDP %p: No space for RDP header (send)", conn);
 801015e:	4b57      	ldr	r3, [pc, #348]	; (80102bc <csp_rdp_send+0x220>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d004      	beq.n	8010170 <csp_rdp_send+0xd4>
 8010166:	68fa      	ldr	r2, [r7, #12]
 8010168:	4959      	ldr	r1, [pc, #356]	; (80102d0 <csp_rdp_send+0x234>)
 801016a:	2000      	movs	r0, #0
 801016c:	f7fd fa16 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOMEM;
 8010170:	f04f 33ff 	mov.w	r3, #4294967295
 8010174:	e09d      	b.n	80102b2 <csp_rdp_send+0x216>
        }
	tx_header->ack_nr = csp_hton16(conn->rdp.rcv_cur);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801017a:	4618      	mov	r0, r3
 801017c:	f7fd fa90 	bl	800d6a0 <csp_hton16>
 8010180:	4603      	mov	r3, r0
 8010182:	461a      	mov	r2, r3
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	f8a3 2003 	strh.w	r2, [r3, #3]
	tx_header->seq_nr = csp_hton16(conn->rdp.snd_nxt);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	8bdb      	ldrh	r3, [r3, #30]
 801018e:	4618      	mov	r0, r3
 8010190:	f7fd fa86 	bl	800d6a0 <csp_hton16>
 8010194:	4603      	mov	r3, r0
 8010196:	461a      	mov	r2, r3
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f8a3 2001 	strh.w	r2, [r3, #1]
	tx_header->ack = 1;
 801019e:	697a      	ldr	r2, [r7, #20]
 80101a0:	7813      	ldrb	r3, [r2, #0]
 80101a2:	f043 0304 	orr.w	r3, r3, #4
 80101a6:	7013      	strb	r3, [r2, #0]

	/* Send copy to tx_queue */
	rdp_packet_t * rdp_packet = csp_buffer_clone(packet);
 80101a8:	68b8      	ldr	r0, [r7, #8]
 80101aa:	f7fc fdcf 	bl	800cd4c <csp_buffer_clone>
 80101ae:	4603      	mov	r3, r0
 80101b0:	613b      	str	r3, [r7, #16]
	if (rdp_packet == NULL) {
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10b      	bne.n	80101d0 <csp_rdp_send+0x134>
		csp_log_error("RDP %p: Failed to allocate packet buffer", conn);
 80101b8:	4b40      	ldr	r3, [pc, #256]	; (80102bc <csp_rdp_send+0x220>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d004      	beq.n	80101ca <csp_rdp_send+0x12e>
 80101c0:	68fa      	ldr	r2, [r7, #12]
 80101c2:	4944      	ldr	r1, [pc, #272]	; (80102d4 <csp_rdp_send+0x238>)
 80101c4:	2000      	movs	r0, #0
 80101c6:	f7fd f9e9 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOMEM;
 80101ca:	f04f 33ff 	mov.w	r3, #4294967295
 80101ce:	e070      	b.n	80102b2 <csp_rdp_send+0x216>
	}

	rdp_packet->timestamp = csp_get_ms();
 80101d0:	693c      	ldr	r4, [r7, #16]
 80101d2:	f7fc fc1e 	bl	800ca12 <csp_get_ms>
 80101d6:	4603      	mov	r3, r0
 80101d8:	6063      	str	r3, [r4, #4]
	rdp_packet->quarantine = 0;
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	2200      	movs	r2, #0
 80101de:	601a      	str	r2, [r3, #0]
	if (csp_queue_enqueue(conn->rdp.tx_queue, &rdp_packet, 0) != CSP_QUEUE_OK) {
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101e4:	f107 0110 	add.w	r1, r7, #16
 80101e8:	2200      	movs	r2, #0
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fc fabb 	bl	800c766 <csp_queue_enqueue>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d00f      	beq.n	8010216 <csp_rdp_send+0x17a>
		csp_log_error("RDP %p: No more space in RDP retransmit queue", conn);
 80101f6:	4b31      	ldr	r3, [pc, #196]	; (80102bc <csp_rdp_send+0x220>)
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d004      	beq.n	8010208 <csp_rdp_send+0x16c>
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	4935      	ldr	r1, [pc, #212]	; (80102d8 <csp_rdp_send+0x23c>)
 8010202:	2000      	movs	r0, #0
 8010204:	f7fd f9ca 	bl	800d59c <do_csp_debug>
		csp_buffer_free(rdp_packet);
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	4618      	mov	r0, r3
 801020c:	f7fc fd26 	bl	800cc5c <csp_buffer_free>
		return CSP_ERR_NOBUFS;
 8010210:	f06f 0308 	mvn.w	r3, #8
 8010214:	e04d      	b.n	80102b2 <csp_rdp_send+0x216>
	}

	csp_log_protocol("RDP %p: Sending  in S %u: syn %u, ack %u, eack %u, "
 8010216:	4b29      	ldr	r3, [pc, #164]	; (80102bc <csp_rdp_send+0x220>)
 8010218:	795b      	ldrb	r3, [r3, #5]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d042      	beq.n	80102a4 <csp_rdp_send+0x208>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	7f1b      	ldrb	r3, [r3, #28]
 8010222:	4698      	mov	r8, r3
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801022c:	b2db      	uxtb	r3, r3
 801022e:	461c      	mov	r4, r3
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010238:	b2db      	uxtb	r3, r3
 801023a:	461d      	mov	r5, r3
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010244:	b2db      	uxtb	r3, r3
 8010246:	461e      	mov	r6, r3
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010250:	b2db      	uxtb	r3, r3
 8010252:	607b      	str	r3, [r7, #4]
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801025a:	b29b      	uxth	r3, r3
 801025c:	4618      	mov	r0, r3
 801025e:	f7fd fa34 	bl	800d6ca <csp_ntoh16>
 8010262:	4603      	mov	r3, r0
 8010264:	603b      	str	r3, [r7, #0]
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801026c:	b29b      	uxth	r3, r3
 801026e:	4618      	mov	r0, r3
 8010270:	f7fd fa2b 	bl	800d6ca <csp_ntoh16>
 8010274:	4603      	mov	r3, r0
 8010276:	461a      	mov	r2, r3
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	895b      	ldrh	r3, [r3, #10]
 801027c:	4619      	mov	r1, r3
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	895b      	ldrh	r3, [r3, #10]
 8010282:	3b05      	subs	r3, #5
 8010284:	9307      	str	r3, [sp, #28]
 8010286:	9106      	str	r1, [sp, #24]
 8010288:	9205      	str	r2, [sp, #20]
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	9204      	str	r2, [sp, #16]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	9303      	str	r3, [sp, #12]
 8010292:	9602      	str	r6, [sp, #8]
 8010294:	9501      	str	r5, [sp, #4]
 8010296:	9400      	str	r4, [sp, #0]
 8010298:	4643      	mov	r3, r8
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	490f      	ldr	r1, [pc, #60]	; (80102dc <csp_rdp_send+0x240>)
 801029e:	2005      	movs	r0, #5
 80102a0:	f7fd f97c 	bl	800d59c <do_csp_debug>
				"rst %u, seq_nr %5u, ack_nr %5u, packet_len %u (%u)",
				conn, conn->rdp.state, tx_header->syn, tx_header->ack, tx_header->eak,
				tx_header->rst, csp_ntoh16(tx_header->seq_nr), csp_ntoh16(tx_header->ack_nr),
				packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	conn->rdp.snd_nxt++;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	8bdb      	ldrh	r3, [r3, #30]
 80102a8:	3301      	adds	r3, #1
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	83da      	strh	r2, [r3, #30]
	return CSP_ERR_NONE;
 80102b0:	2300      	movs	r3, #0

}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3718      	adds	r7, #24
 80102b6:	46bd      	mov	sp, r7
 80102b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102bc:	200001a0 	.word	0x200001a0
 80102c0:	08014f6c 	.word	0x08014f6c
 80102c4:	08014fa0 	.word	0x08014fa0
 80102c8:	08014fd8 	.word	0x08014fd8
 80102cc:	08014ff4 	.word	0x08014ff4
 80102d0:	08015034 	.word	0x08015034
 80102d4:	0801505c 	.word	0x0801505c
 80102d8:	08015088 	.word	0x08015088
 80102dc:	080150b8 	.word	0x080150b8

080102e0 <csp_rdp_init>:

int csp_rdp_init(csp_conn_t * conn) {
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]

	csp_log_protocol("RDP %p: Creating RDP queues", conn);
 80102e8:	4b37      	ldr	r3, [pc, #220]	; (80103c8 <csp_rdp_init+0xe8>)
 80102ea:	795b      	ldrb	r3, [r3, #5]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d004      	beq.n	80102fa <csp_rdp_init+0x1a>
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	4936      	ldr	r1, [pc, #216]	; (80103cc <csp_rdp_init+0xec>)
 80102f4:	2005      	movs	r0, #5
 80102f6:	f7fd f951 	bl	800d59c <do_csp_debug>

	/* Set initial state */
	conn->rdp.state = RDP_CLOSED;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	771a      	strb	r2, [r3, #28]
	conn->rdp.conn_timeout = csp_rdp_conn_timeout;
 8010300:	4b33      	ldr	r3, [pc, #204]	; (80103d0 <csp_rdp_init+0xf0>)
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	631a      	str	r2, [r3, #48]	; 0x30
	conn->rdp.packet_timeout = csp_rdp_packet_timeout;
 8010308:	4b32      	ldr	r3, [pc, #200]	; (80103d4 <csp_rdp_init+0xf4>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Create a binary semaphore to wait on for tasks */
	if (csp_bin_sem_create(&conn->rdp.tx_wait) != CSP_SEMAPHORE_OK) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	3348      	adds	r3, #72	; 0x48
 8010314:	4618      	mov	r0, r3
 8010316:	f7fc fa7a 	bl	800c80e <csp_bin_sem_create>
 801031a:	4603      	mov	r3, r0
 801031c:	2b01      	cmp	r3, #1
 801031e:	d00b      	beq.n	8010338 <csp_rdp_init+0x58>
		csp_log_error("RDP %p: Failed to initialize semaphore", conn);
 8010320:	4b29      	ldr	r3, [pc, #164]	; (80103c8 <csp_rdp_init+0xe8>)
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d004      	beq.n	8010332 <csp_rdp_init+0x52>
 8010328:	687a      	ldr	r2, [r7, #4]
 801032a:	492b      	ldr	r1, [pc, #172]	; (80103d8 <csp_rdp_init+0xf8>)
 801032c:	2000      	movs	r0, #0
 801032e:	f7fd f935 	bl	800d59c <do_csp_debug>
		return CSP_ERR_NOMEM;
 8010332:	f04f 33ff 	mov.w	r3, #4294967295
 8010336:	e042      	b.n	80103be <csp_rdp_init+0xde>
	}

	/* Create TX queue */
	conn->rdp.tx_queue = csp_queue_create(csp_conf.rdp_max_window, sizeof(csp_packet_t *));
 8010338:	4b28      	ldr	r3, [pc, #160]	; (80103dc <csp_rdp_init+0xfc>)
 801033a:	7d1b      	ldrb	r3, [r3, #20]
 801033c:	2104      	movs	r1, #4
 801033e:	4618      	mov	r0, r3
 8010340:	f7fc f9f6 	bl	800c730 <csp_queue_create>
 8010344:	4602      	mov	r2, r0
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	64da      	str	r2, [r3, #76]	; 0x4c
	if (conn->rdp.tx_queue == NULL) {
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801034e:	2b00      	cmp	r3, #0
 8010350:	d110      	bne.n	8010374 <csp_rdp_init+0x94>
		csp_log_error("RDP %p: Failed to create TX queue for conn", conn);
 8010352:	4b1d      	ldr	r3, [pc, #116]	; (80103c8 <csp_rdp_init+0xe8>)
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d004      	beq.n	8010364 <csp_rdp_init+0x84>
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	4920      	ldr	r1, [pc, #128]	; (80103e0 <csp_rdp_init+0x100>)
 801035e:	2000      	movs	r0, #0
 8010360:	f7fd f91c 	bl	800d59c <do_csp_debug>
		csp_bin_sem_remove(&conn->rdp.tx_wait);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	3348      	adds	r3, #72	; 0x48
 8010368:	4618      	mov	r0, r3
 801036a:	f7fc fa6c 	bl	800c846 <csp_bin_sem_remove>
		return CSP_ERR_NOMEM;
 801036e:	f04f 33ff 	mov.w	r3, #4294967295
 8010372:	e024      	b.n	80103be <csp_rdp_init+0xde>
	}

	/* Create RX queue */
	conn->rdp.rx_queue = csp_queue_create(csp_conf.rdp_max_window * 2, sizeof(csp_packet_t *));
 8010374:	4b19      	ldr	r3, [pc, #100]	; (80103dc <csp_rdp_init+0xfc>)
 8010376:	7d1b      	ldrb	r3, [r3, #20]
 8010378:	005b      	lsls	r3, r3, #1
 801037a:	2104      	movs	r1, #4
 801037c:	4618      	mov	r0, r3
 801037e:	f7fc f9d7 	bl	800c730 <csp_queue_create>
 8010382:	4602      	mov	r2, r0
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	651a      	str	r2, [r3, #80]	; 0x50
	if (conn->rdp.rx_queue == NULL) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801038c:	2b00      	cmp	r3, #0
 801038e:	d115      	bne.n	80103bc <csp_rdp_init+0xdc>
		csp_log_error("RDP %p: Failed to create RX queue for conn", conn);
 8010390:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <csp_rdp_init+0xe8>)
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d004      	beq.n	80103a2 <csp_rdp_init+0xc2>
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	4912      	ldr	r1, [pc, #72]	; (80103e4 <csp_rdp_init+0x104>)
 801039c:	2000      	movs	r0, #0
 801039e:	f7fd f8fd 	bl	800d59c <do_csp_debug>
		csp_bin_sem_remove(&conn->rdp.tx_wait);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	3348      	adds	r3, #72	; 0x48
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fc fa4d 	bl	800c846 <csp_bin_sem_remove>
		csp_queue_remove(conn->rdp.tx_queue);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fc f9cd 	bl	800c750 <csp_queue_remove>
		return CSP_ERR_NOMEM;
 80103b6:	f04f 33ff 	mov.w	r3, #4294967295
 80103ba:	e000      	b.n	80103be <csp_rdp_init+0xde>
	}

	return CSP_ERR_NONE;
 80103bc:	2300      	movs	r3, #0

}
 80103be:	4618      	mov	r0, r3
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	200001a0 	.word	0x200001a0
 80103cc:	08015120 	.word	0x08015120
 80103d0:	200001ec 	.word	0x200001ec
 80103d4:	200001f0 	.word	0x200001f0
 80103d8:	0801513c 	.word	0x0801513c
 80103dc:	2000a96c 	.word	0x2000a96c
 80103e0:	08015164 	.word	0x08015164
 80103e4:	08015190 	.word	0x08015190

080103e8 <csp_rdp_close>:

/**
 * @note This function may only be called from csp_close, and is therefore
 * without any checks for null pointers.
 */
int csp_rdp_close(csp_conn_t * conn, uint8_t closed_by) {
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	70fb      	strb	r3, [r7, #3]
    return csp_rdp_close_internal(conn, closed_by, true);
 80103f4:	78fb      	ldrb	r3, [r7, #3]
 80103f6:	2201      	movs	r2, #1
 80103f8:	4619      	mov	r1, r3
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 f806 	bl	801040c <csp_rdp_close_internal>
 8010400:	4603      	mov	r3, r0
}
 8010402:	4618      	mov	r0, r3
 8010404:	3708      	adds	r7, #8
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
	...

0801040c <csp_rdp_close_internal>:

static int csp_rdp_close_internal(csp_conn_t * conn, uint8_t closed_by, bool send_rst) {
 801040c:	b580      	push	{r7, lr}
 801040e:	b086      	sub	sp, #24
 8010410:	af04      	add	r7, sp, #16
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	70fb      	strb	r3, [r7, #3]
 8010418:	4613      	mov	r3, r2
 801041a:	70bb      	strb	r3, [r7, #2]

	if (conn->rdp.state == RDP_CLOSED) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	7f1b      	ldrb	r3, [r3, #28]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d101      	bne.n	8010428 <csp_rdp_close_internal+0x1c>
		return CSP_ERR_NONE;
 8010424:	2300      	movs	r3, #0
 8010426:	e079      	b.n	801051c <csp_rdp_close_internal+0x110>
	}

	conn->rdp.closed_by |= closed_by;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7f5a      	ldrb	r2, [r3, #29]
 801042c:	78fb      	ldrb	r3, [r7, #3]
 801042e:	4313      	orrs	r3, r2
 8010430:	b2da      	uxtb	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	775a      	strb	r2, [r3, #29]

	/* If connection is open, send reset */
	if (conn->rdp.state != RDP_CLOSE_WAIT) {
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	7f1b      	ldrb	r3, [r3, #28]
 801043a:	2b04      	cmp	r3, #4
 801043c:	d02d      	beq.n	801049a <csp_rdp_close_internal+0x8e>
		conn->rdp.state = RDP_CLOSE_WAIT;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2204      	movs	r2, #4
 8010442:	771a      	strb	r2, [r3, #28]
		conn->timestamp = csp_get_ms();
 8010444:	f7fc fae5 	bl	800ca12 <csp_get_ms>
 8010448:	4602      	mov	r2, r0
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	615a      	str	r2, [r3, #20]
		if (send_rst) {
 801044e:	78bb      	ldrb	r3, [r7, #2]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d00b      	beq.n	801046c <csp_rdp_close_internal+0x60>
			csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	8bdb      	ldrh	r3, [r3, #30]
 8010458:	461a      	mov	r2, r3
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	4613      	mov	r3, r2
 8010462:	220a      	movs	r2, #10
 8010464:	2100      	movs	r1, #0
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f7fe faae 	bl	800e9c8 <csp_rdp_send_cmp>
		}
		csp_log_protocol("RDP %p: csp_rdp_close(0x%x)%s -> CLOSE_WAIT", conn, closed_by, send_rst ? ", sent RST" : "");
 801046c:	4b2d      	ldr	r3, [pc, #180]	; (8010524 <csp_rdp_close_internal+0x118>)
 801046e:	795b      	ldrb	r3, [r3, #5]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00d      	beq.n	8010490 <csp_rdp_close_internal+0x84>
 8010474:	78fa      	ldrb	r2, [r7, #3]
 8010476:	78bb      	ldrb	r3, [r7, #2]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d001      	beq.n	8010480 <csp_rdp_close_internal+0x74>
 801047c:	4b2a      	ldr	r3, [pc, #168]	; (8010528 <csp_rdp_close_internal+0x11c>)
 801047e:	e000      	b.n	8010482 <csp_rdp_close_internal+0x76>
 8010480:	4b2a      	ldr	r3, [pc, #168]	; (801052c <csp_rdp_close_internal+0x120>)
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	4613      	mov	r3, r2
 8010486:	687a      	ldr	r2, [r7, #4]
 8010488:	4929      	ldr	r1, [pc, #164]	; (8010530 <csp_rdp_close_internal+0x124>)
 801048a:	2005      	movs	r0, #5
 801048c:	f7fd f886 	bl	800d59c <do_csp_debug>
		csp_bin_sem_post(&conn->rdp.tx_wait); // wake up any pendng Tx
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3348      	adds	r3, #72	; 0x48
 8010494:	4618      	mov	r0, r3
 8010496:	f7fc fa11 	bl	800c8bc <csp_bin_sem_post>
	}

	if (conn->rdp.closed_by != CSP_RDP_CLOSED_BY_ALL) {
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	7f5b      	ldrb	r3, [r3, #29]
 801049e:	2b07      	cmp	r3, #7
 80104a0:	d02b      	beq.n	80104fa <csp_rdp_close_internal+0xee>
		csp_log_protocol("RDP %p: csp_rdp_close(0x%x), waiting for:%s%s%s",
 80104a2:	4b20      	ldr	r3, [pc, #128]	; (8010524 <csp_rdp_close_internal+0x118>)
 80104a4:	795b      	ldrb	r3, [r3, #5]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d024      	beq.n	80104f4 <csp_rdp_close_internal+0xe8>
 80104aa:	78f8      	ldrb	r0, [r7, #3]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	7f5b      	ldrb	r3, [r3, #29]
 80104b0:	f003 0301 	and.w	r3, r3, #1
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <csp_rdp_close_internal+0xb0>
 80104b8:	4b1c      	ldr	r3, [pc, #112]	; (801052c <csp_rdp_close_internal+0x120>)
 80104ba:	e000      	b.n	80104be <csp_rdp_close_internal+0xb2>
 80104bc:	4b1d      	ldr	r3, [pc, #116]	; (8010534 <csp_rdp_close_internal+0x128>)
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	7f52      	ldrb	r2, [r2, #29]
 80104c2:	f002 0202 	and.w	r2, r2, #2
 80104c6:	2a00      	cmp	r2, #0
 80104c8:	d001      	beq.n	80104ce <csp_rdp_close_internal+0xc2>
 80104ca:	4a18      	ldr	r2, [pc, #96]	; (801052c <csp_rdp_close_internal+0x120>)
 80104cc:	e000      	b.n	80104d0 <csp_rdp_close_internal+0xc4>
 80104ce:	4a1a      	ldr	r2, [pc, #104]	; (8010538 <csp_rdp_close_internal+0x12c>)
 80104d0:	6879      	ldr	r1, [r7, #4]
 80104d2:	7f49      	ldrb	r1, [r1, #29]
 80104d4:	f001 0104 	and.w	r1, r1, #4
 80104d8:	2900      	cmp	r1, #0
 80104da:	d001      	beq.n	80104e0 <csp_rdp_close_internal+0xd4>
 80104dc:	4913      	ldr	r1, [pc, #76]	; (801052c <csp_rdp_close_internal+0x120>)
 80104de:	e000      	b.n	80104e2 <csp_rdp_close_internal+0xd6>
 80104e0:	4916      	ldr	r1, [pc, #88]	; (801053c <csp_rdp_close_internal+0x130>)
 80104e2:	9102      	str	r1, [sp, #8]
 80104e4:	9201      	str	r2, [sp, #4]
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	4603      	mov	r3, r0
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	4914      	ldr	r1, [pc, #80]	; (8010540 <csp_rdp_close_internal+0x134>)
 80104ee:	2005      	movs	r0, #5
 80104f0:	f7fd f854 	bl	800d59c <do_csp_debug>
			conn, closed_by,
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_USERSPACE) ? "" : " userspace",
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_PROTOCOL) ? "" : " protocol",
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_TIMEOUT) ? "" : " timeout");
		return CSP_ERR_AGAIN;
 80104f4:	f06f 030b 	mvn.w	r3, #11
 80104f8:	e010      	b.n	801051c <csp_rdp_close_internal+0x110>
        }

        csp_log_protocol("RDP %p: csp_rdp_close(0x%x) -> CLOSED", conn, closed_by);
 80104fa:	4b0a      	ldr	r3, [pc, #40]	; (8010524 <csp_rdp_close_internal+0x118>)
 80104fc:	795b      	ldrb	r3, [r3, #5]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d005      	beq.n	801050e <csp_rdp_close_internal+0x102>
 8010502:	78fb      	ldrb	r3, [r7, #3]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	490f      	ldr	r1, [pc, #60]	; (8010544 <csp_rdp_close_internal+0x138>)
 8010508:	2005      	movs	r0, #5
 801050a:	f7fd f847 	bl	800d59c <do_csp_debug>
	conn->rdp.state = RDP_CLOSED;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2200      	movs	r2, #0
 8010512:	771a      	strb	r2, [r3, #28]
        conn->rdp.closed_by = 0;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2200      	movs	r2, #0
 8010518:	775a      	strb	r2, [r3, #29]
	return CSP_ERR_NONE;
 801051a:	2300      	movs	r3, #0

}
 801051c:	4618      	mov	r0, r3
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	200001a0 	.word	0x200001a0
 8010528:	080151bc 	.word	0x080151bc
 801052c:	080151c8 	.word	0x080151c8
 8010530:	080151cc 	.word	0x080151cc
 8010534:	080151f8 	.word	0x080151f8
 8010538:	08015204 	.word	0x08015204
 801053c:	08015210 	.word	0x08015210
 8010540:	0801521c 	.word	0x0801521c
 8010544:	0801524c 	.word	0x0801524c

08010548 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	4618      	mov	r0, r3
 8010558:	f7fc fc76 	bl	800ce48 <csp_conn_enqueue_packet>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	da0b      	bge.n	801057a <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 8010562:	4b16      	ldr	r3, [pc, #88]	; (80105bc <csp_udp_new_packet+0x74>)
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d003      	beq.n	8010572 <csp_udp_new_packet+0x2a>
 801056a:	4915      	ldr	r1, [pc, #84]	; (80105c0 <csp_udp_new_packet+0x78>)
 801056c:	2000      	movs	r0, #0
 801056e:	f7fd f815 	bl	800d59c <do_csp_debug>
		csp_buffer_free(packet);
 8010572:	6838      	ldr	r0, [r7, #0]
 8010574:	f7fc fb72 	bl	800cc5c <csp_buffer_free>
		return;
 8010578:	e01d      	b.n	80105b6 <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	691b      	ldr	r3, [r3, #16]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d019      	beq.n	80105b6 <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	691b      	ldr	r3, [r3, #16]
 8010586:	1d39      	adds	r1, r7, #4
 8010588:	2200      	movs	r2, #0
 801058a:	4618      	mov	r0, r3
 801058c:	f7fc f8eb 	bl	800c766 <csp_queue_enqueue>
 8010590:	4603      	mov	r3, r0
 8010592:	2b01      	cmp	r3, #1
 8010594:	d00c      	beq.n	80105b0 <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 8010596:	4b09      	ldr	r3, [pc, #36]	; (80105bc <csp_udp_new_packet+0x74>)
 8010598:	785b      	ldrb	r3, [r3, #1]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d003      	beq.n	80105a6 <csp_udp_new_packet+0x5e>
 801059e:	4909      	ldr	r1, [pc, #36]	; (80105c4 <csp_udp_new_packet+0x7c>)
 80105a0:	2001      	movs	r0, #1
 80105a2:	f7fc fffb 	bl	800d59c <do_csp_debug>
			csp_close(conn);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fc fe64 	bl	800d276 <csp_close>
			return;
 80105ae:	e002      	b.n	80105b6 <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	611a      	str	r2, [r3, #16]
	}

}
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	200001a0 	.word	0x200001a0
 80105c0:	080152ac 	.word	0x080152ac
 80105c4:	080152cc 	.word	0x080152cc

080105c8 <calloc>:
 80105c8:	4b02      	ldr	r3, [pc, #8]	; (80105d4 <calloc+0xc>)
 80105ca:	460a      	mov	r2, r1
 80105cc:	4601      	mov	r1, r0
 80105ce:	6818      	ldr	r0, [r3, #0]
 80105d0:	f000 b96a 	b.w	80108a8 <_calloc_r>
 80105d4:	20000204 	.word	0x20000204

080105d8 <exit>:
 80105d8:	b508      	push	{r3, lr}
 80105da:	4b07      	ldr	r3, [pc, #28]	; (80105f8 <exit+0x20>)
 80105dc:	4604      	mov	r4, r0
 80105de:	b113      	cbz	r3, 80105e6 <exit+0xe>
 80105e0:	2100      	movs	r1, #0
 80105e2:	f3af 8000 	nop.w
 80105e6:	4b05      	ldr	r3, [pc, #20]	; (80105fc <exit+0x24>)
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80105ec:	b103      	cbz	r3, 80105f0 <exit+0x18>
 80105ee:	4798      	blx	r3
 80105f0:	4620      	mov	r0, r4
 80105f2:	f003 f931 	bl	8013858 <_exit>
 80105f6:	bf00      	nop
 80105f8:	00000000 	.word	0x00000000
 80105fc:	08015424 	.word	0x08015424

08010600 <std>:
 8010600:	2300      	movs	r3, #0
 8010602:	b510      	push	{r4, lr}
 8010604:	4604      	mov	r4, r0
 8010606:	e9c0 3300 	strd	r3, r3, [r0]
 801060a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801060e:	6083      	str	r3, [r0, #8]
 8010610:	8181      	strh	r1, [r0, #12]
 8010612:	6643      	str	r3, [r0, #100]	; 0x64
 8010614:	81c2      	strh	r2, [r0, #14]
 8010616:	6183      	str	r3, [r0, #24]
 8010618:	4619      	mov	r1, r3
 801061a:	2208      	movs	r2, #8
 801061c:	305c      	adds	r0, #92	; 0x5c
 801061e:	f000 f93b 	bl	8010898 <memset>
 8010622:	4b05      	ldr	r3, [pc, #20]	; (8010638 <std+0x38>)
 8010624:	6263      	str	r3, [r4, #36]	; 0x24
 8010626:	4b05      	ldr	r3, [pc, #20]	; (801063c <std+0x3c>)
 8010628:	62a3      	str	r3, [r4, #40]	; 0x28
 801062a:	4b05      	ldr	r3, [pc, #20]	; (8010640 <std+0x40>)
 801062c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801062e:	4b05      	ldr	r3, [pc, #20]	; (8010644 <std+0x44>)
 8010630:	6224      	str	r4, [r4, #32]
 8010632:	6323      	str	r3, [r4, #48]	; 0x30
 8010634:	bd10      	pop	{r4, pc}
 8010636:	bf00      	nop
 8010638:	08011691 	.word	0x08011691
 801063c:	080116b3 	.word	0x080116b3
 8010640:	080116eb 	.word	0x080116eb
 8010644:	0801170f 	.word	0x0801170f

08010648 <_cleanup_r>:
 8010648:	4901      	ldr	r1, [pc, #4]	; (8010650 <_cleanup_r+0x8>)
 801064a:	f000 b8af 	b.w	80107ac <_fwalk_reent>
 801064e:	bf00      	nop
 8010650:	080127b9 	.word	0x080127b9

08010654 <__sfmoreglue>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	2268      	movs	r2, #104	; 0x68
 8010658:	1e4d      	subs	r5, r1, #1
 801065a:	4355      	muls	r5, r2
 801065c:	460e      	mov	r6, r1
 801065e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010662:	f000 f9a3 	bl	80109ac <_malloc_r>
 8010666:	4604      	mov	r4, r0
 8010668:	b140      	cbz	r0, 801067c <__sfmoreglue+0x28>
 801066a:	2100      	movs	r1, #0
 801066c:	e9c0 1600 	strd	r1, r6, [r0]
 8010670:	300c      	adds	r0, #12
 8010672:	60a0      	str	r0, [r4, #8]
 8010674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010678:	f000 f90e 	bl	8010898 <memset>
 801067c:	4620      	mov	r0, r4
 801067e:	bd70      	pop	{r4, r5, r6, pc}

08010680 <__sfp_lock_acquire>:
 8010680:	4801      	ldr	r0, [pc, #4]	; (8010688 <__sfp_lock_acquire+0x8>)
 8010682:	f000 b8d8 	b.w	8010836 <__retarget_lock_acquire_recursive>
 8010686:	bf00      	nop
 8010688:	2000a999 	.word	0x2000a999

0801068c <__sfp_lock_release>:
 801068c:	4801      	ldr	r0, [pc, #4]	; (8010694 <__sfp_lock_release+0x8>)
 801068e:	f000 b8d3 	b.w	8010838 <__retarget_lock_release_recursive>
 8010692:	bf00      	nop
 8010694:	2000a999 	.word	0x2000a999

08010698 <__sinit_lock_acquire>:
 8010698:	4801      	ldr	r0, [pc, #4]	; (80106a0 <__sinit_lock_acquire+0x8>)
 801069a:	f000 b8cc 	b.w	8010836 <__retarget_lock_acquire_recursive>
 801069e:	bf00      	nop
 80106a0:	2000a99a 	.word	0x2000a99a

080106a4 <__sinit_lock_release>:
 80106a4:	4801      	ldr	r0, [pc, #4]	; (80106ac <__sinit_lock_release+0x8>)
 80106a6:	f000 b8c7 	b.w	8010838 <__retarget_lock_release_recursive>
 80106aa:	bf00      	nop
 80106ac:	2000a99a 	.word	0x2000a99a

080106b0 <__sinit>:
 80106b0:	b510      	push	{r4, lr}
 80106b2:	4604      	mov	r4, r0
 80106b4:	f7ff fff0 	bl	8010698 <__sinit_lock_acquire>
 80106b8:	69a3      	ldr	r3, [r4, #24]
 80106ba:	b11b      	cbz	r3, 80106c4 <__sinit+0x14>
 80106bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106c0:	f7ff bff0 	b.w	80106a4 <__sinit_lock_release>
 80106c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80106c8:	6523      	str	r3, [r4, #80]	; 0x50
 80106ca:	4b13      	ldr	r3, [pc, #76]	; (8010718 <__sinit+0x68>)
 80106cc:	4a13      	ldr	r2, [pc, #76]	; (801071c <__sinit+0x6c>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80106d2:	42a3      	cmp	r3, r4
 80106d4:	bf04      	itt	eq
 80106d6:	2301      	moveq	r3, #1
 80106d8:	61a3      	streq	r3, [r4, #24]
 80106da:	4620      	mov	r0, r4
 80106dc:	f000 f820 	bl	8010720 <__sfp>
 80106e0:	6060      	str	r0, [r4, #4]
 80106e2:	4620      	mov	r0, r4
 80106e4:	f000 f81c 	bl	8010720 <__sfp>
 80106e8:	60a0      	str	r0, [r4, #8]
 80106ea:	4620      	mov	r0, r4
 80106ec:	f000 f818 	bl	8010720 <__sfp>
 80106f0:	2200      	movs	r2, #0
 80106f2:	60e0      	str	r0, [r4, #12]
 80106f4:	2104      	movs	r1, #4
 80106f6:	6860      	ldr	r0, [r4, #4]
 80106f8:	f7ff ff82 	bl	8010600 <std>
 80106fc:	68a0      	ldr	r0, [r4, #8]
 80106fe:	2201      	movs	r2, #1
 8010700:	2109      	movs	r1, #9
 8010702:	f7ff ff7d 	bl	8010600 <std>
 8010706:	68e0      	ldr	r0, [r4, #12]
 8010708:	2202      	movs	r2, #2
 801070a:	2112      	movs	r1, #18
 801070c:	f7ff ff78 	bl	8010600 <std>
 8010710:	2301      	movs	r3, #1
 8010712:	61a3      	str	r3, [r4, #24]
 8010714:	e7d2      	b.n	80106bc <__sinit+0xc>
 8010716:	bf00      	nop
 8010718:	08015424 	.word	0x08015424
 801071c:	08010649 	.word	0x08010649

08010720 <__sfp>:
 8010720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010722:	4607      	mov	r7, r0
 8010724:	f7ff ffac 	bl	8010680 <__sfp_lock_acquire>
 8010728:	4b1e      	ldr	r3, [pc, #120]	; (80107a4 <__sfp+0x84>)
 801072a:	681e      	ldr	r6, [r3, #0]
 801072c:	69b3      	ldr	r3, [r6, #24]
 801072e:	b913      	cbnz	r3, 8010736 <__sfp+0x16>
 8010730:	4630      	mov	r0, r6
 8010732:	f7ff ffbd 	bl	80106b0 <__sinit>
 8010736:	3648      	adds	r6, #72	; 0x48
 8010738:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801073c:	3b01      	subs	r3, #1
 801073e:	d503      	bpl.n	8010748 <__sfp+0x28>
 8010740:	6833      	ldr	r3, [r6, #0]
 8010742:	b30b      	cbz	r3, 8010788 <__sfp+0x68>
 8010744:	6836      	ldr	r6, [r6, #0]
 8010746:	e7f7      	b.n	8010738 <__sfp+0x18>
 8010748:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801074c:	b9d5      	cbnz	r5, 8010784 <__sfp+0x64>
 801074e:	4b16      	ldr	r3, [pc, #88]	; (80107a8 <__sfp+0x88>)
 8010750:	60e3      	str	r3, [r4, #12]
 8010752:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010756:	6665      	str	r5, [r4, #100]	; 0x64
 8010758:	f000 f86c 	bl	8010834 <__retarget_lock_init_recursive>
 801075c:	f7ff ff96 	bl	801068c <__sfp_lock_release>
 8010760:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010764:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010768:	6025      	str	r5, [r4, #0]
 801076a:	61a5      	str	r5, [r4, #24]
 801076c:	2208      	movs	r2, #8
 801076e:	4629      	mov	r1, r5
 8010770:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010774:	f000 f890 	bl	8010898 <memset>
 8010778:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801077c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010780:	4620      	mov	r0, r4
 8010782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010784:	3468      	adds	r4, #104	; 0x68
 8010786:	e7d9      	b.n	801073c <__sfp+0x1c>
 8010788:	2104      	movs	r1, #4
 801078a:	4638      	mov	r0, r7
 801078c:	f7ff ff62 	bl	8010654 <__sfmoreglue>
 8010790:	4604      	mov	r4, r0
 8010792:	6030      	str	r0, [r6, #0]
 8010794:	2800      	cmp	r0, #0
 8010796:	d1d5      	bne.n	8010744 <__sfp+0x24>
 8010798:	f7ff ff78 	bl	801068c <__sfp_lock_release>
 801079c:	230c      	movs	r3, #12
 801079e:	603b      	str	r3, [r7, #0]
 80107a0:	e7ee      	b.n	8010780 <__sfp+0x60>
 80107a2:	bf00      	nop
 80107a4:	08015424 	.word	0x08015424
 80107a8:	ffff0001 	.word	0xffff0001

080107ac <_fwalk_reent>:
 80107ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107b0:	4606      	mov	r6, r0
 80107b2:	4688      	mov	r8, r1
 80107b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107b8:	2700      	movs	r7, #0
 80107ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107be:	f1b9 0901 	subs.w	r9, r9, #1
 80107c2:	d505      	bpl.n	80107d0 <_fwalk_reent+0x24>
 80107c4:	6824      	ldr	r4, [r4, #0]
 80107c6:	2c00      	cmp	r4, #0
 80107c8:	d1f7      	bne.n	80107ba <_fwalk_reent+0xe>
 80107ca:	4638      	mov	r0, r7
 80107cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107d0:	89ab      	ldrh	r3, [r5, #12]
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d907      	bls.n	80107e6 <_fwalk_reent+0x3a>
 80107d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107da:	3301      	adds	r3, #1
 80107dc:	d003      	beq.n	80107e6 <_fwalk_reent+0x3a>
 80107de:	4629      	mov	r1, r5
 80107e0:	4630      	mov	r0, r6
 80107e2:	47c0      	blx	r8
 80107e4:	4307      	orrs	r7, r0
 80107e6:	3568      	adds	r5, #104	; 0x68
 80107e8:	e7e9      	b.n	80107be <_fwalk_reent+0x12>
	...

080107ec <__libc_init_array>:
 80107ec:	b570      	push	{r4, r5, r6, lr}
 80107ee:	4d0d      	ldr	r5, [pc, #52]	; (8010824 <__libc_init_array+0x38>)
 80107f0:	4c0d      	ldr	r4, [pc, #52]	; (8010828 <__libc_init_array+0x3c>)
 80107f2:	1b64      	subs	r4, r4, r5
 80107f4:	10a4      	asrs	r4, r4, #2
 80107f6:	2600      	movs	r6, #0
 80107f8:	42a6      	cmp	r6, r4
 80107fa:	d109      	bne.n	8010810 <__libc_init_array+0x24>
 80107fc:	4d0b      	ldr	r5, [pc, #44]	; (801082c <__libc_init_array+0x40>)
 80107fe:	4c0c      	ldr	r4, [pc, #48]	; (8010830 <__libc_init_array+0x44>)
 8010800:	f003 f82c 	bl	801385c <_init>
 8010804:	1b64      	subs	r4, r4, r5
 8010806:	10a4      	asrs	r4, r4, #2
 8010808:	2600      	movs	r6, #0
 801080a:	42a6      	cmp	r6, r4
 801080c:	d105      	bne.n	801081a <__libc_init_array+0x2e>
 801080e:	bd70      	pop	{r4, r5, r6, pc}
 8010810:	f855 3b04 	ldr.w	r3, [r5], #4
 8010814:	4798      	blx	r3
 8010816:	3601      	adds	r6, #1
 8010818:	e7ee      	b.n	80107f8 <__libc_init_array+0xc>
 801081a:	f855 3b04 	ldr.w	r3, [r5], #4
 801081e:	4798      	blx	r3
 8010820:	3601      	adds	r6, #1
 8010822:	e7f2      	b.n	801080a <__libc_init_array+0x1e>
 8010824:	08015800 	.word	0x08015800
 8010828:	08015800 	.word	0x08015800
 801082c:	08015800 	.word	0x08015800
 8010830:	08015804 	.word	0x08015804

08010834 <__retarget_lock_init_recursive>:
 8010834:	4770      	bx	lr

08010836 <__retarget_lock_acquire_recursive>:
 8010836:	4770      	bx	lr

08010838 <__retarget_lock_release_recursive>:
 8010838:	4770      	bx	lr
	...

0801083c <malloc>:
 801083c:	4b02      	ldr	r3, [pc, #8]	; (8010848 <malloc+0xc>)
 801083e:	4601      	mov	r1, r0
 8010840:	6818      	ldr	r0, [r3, #0]
 8010842:	f000 b8b3 	b.w	80109ac <_malloc_r>
 8010846:	bf00      	nop
 8010848:	20000204 	.word	0x20000204

0801084c <free>:
 801084c:	4b02      	ldr	r3, [pc, #8]	; (8010858 <free+0xc>)
 801084e:	4601      	mov	r1, r0
 8010850:	6818      	ldr	r0, [r3, #0]
 8010852:	f000 b83f 	b.w	80108d4 <_free_r>
 8010856:	bf00      	nop
 8010858:	20000204 	.word	0x20000204

0801085c <memcmp>:
 801085c:	b510      	push	{r4, lr}
 801085e:	3901      	subs	r1, #1
 8010860:	4402      	add	r2, r0
 8010862:	4290      	cmp	r0, r2
 8010864:	d101      	bne.n	801086a <memcmp+0xe>
 8010866:	2000      	movs	r0, #0
 8010868:	e005      	b.n	8010876 <memcmp+0x1a>
 801086a:	7803      	ldrb	r3, [r0, #0]
 801086c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010870:	42a3      	cmp	r3, r4
 8010872:	d001      	beq.n	8010878 <memcmp+0x1c>
 8010874:	1b18      	subs	r0, r3, r4
 8010876:	bd10      	pop	{r4, pc}
 8010878:	3001      	adds	r0, #1
 801087a:	e7f2      	b.n	8010862 <memcmp+0x6>

0801087c <memcpy>:
 801087c:	440a      	add	r2, r1
 801087e:	4291      	cmp	r1, r2
 8010880:	f100 33ff 	add.w	r3, r0, #4294967295
 8010884:	d100      	bne.n	8010888 <memcpy+0xc>
 8010886:	4770      	bx	lr
 8010888:	b510      	push	{r4, lr}
 801088a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801088e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010892:	4291      	cmp	r1, r2
 8010894:	d1f9      	bne.n	801088a <memcpy+0xe>
 8010896:	bd10      	pop	{r4, pc}

08010898 <memset>:
 8010898:	4402      	add	r2, r0
 801089a:	4603      	mov	r3, r0
 801089c:	4293      	cmp	r3, r2
 801089e:	d100      	bne.n	80108a2 <memset+0xa>
 80108a0:	4770      	bx	lr
 80108a2:	f803 1b01 	strb.w	r1, [r3], #1
 80108a6:	e7f9      	b.n	801089c <memset+0x4>

080108a8 <_calloc_r>:
 80108a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108aa:	fba1 2402 	umull	r2, r4, r1, r2
 80108ae:	b94c      	cbnz	r4, 80108c4 <_calloc_r+0x1c>
 80108b0:	4611      	mov	r1, r2
 80108b2:	9201      	str	r2, [sp, #4]
 80108b4:	f000 f87a 	bl	80109ac <_malloc_r>
 80108b8:	9a01      	ldr	r2, [sp, #4]
 80108ba:	4605      	mov	r5, r0
 80108bc:	b930      	cbnz	r0, 80108cc <_calloc_r+0x24>
 80108be:	4628      	mov	r0, r5
 80108c0:	b003      	add	sp, #12
 80108c2:	bd30      	pop	{r4, r5, pc}
 80108c4:	220c      	movs	r2, #12
 80108c6:	6002      	str	r2, [r0, #0]
 80108c8:	2500      	movs	r5, #0
 80108ca:	e7f8      	b.n	80108be <_calloc_r+0x16>
 80108cc:	4621      	mov	r1, r4
 80108ce:	f7ff ffe3 	bl	8010898 <memset>
 80108d2:	e7f4      	b.n	80108be <_calloc_r+0x16>

080108d4 <_free_r>:
 80108d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108d6:	2900      	cmp	r1, #0
 80108d8:	d044      	beq.n	8010964 <_free_r+0x90>
 80108da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108de:	9001      	str	r0, [sp, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f1a1 0404 	sub.w	r4, r1, #4
 80108e6:	bfb8      	it	lt
 80108e8:	18e4      	addlt	r4, r4, r3
 80108ea:	f002 f82f 	bl	801294c <__malloc_lock>
 80108ee:	4a1e      	ldr	r2, [pc, #120]	; (8010968 <_free_r+0x94>)
 80108f0:	9801      	ldr	r0, [sp, #4]
 80108f2:	6813      	ldr	r3, [r2, #0]
 80108f4:	b933      	cbnz	r3, 8010904 <_free_r+0x30>
 80108f6:	6063      	str	r3, [r4, #4]
 80108f8:	6014      	str	r4, [r2, #0]
 80108fa:	b003      	add	sp, #12
 80108fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010900:	f002 b82a 	b.w	8012958 <__malloc_unlock>
 8010904:	42a3      	cmp	r3, r4
 8010906:	d908      	bls.n	801091a <_free_r+0x46>
 8010908:	6825      	ldr	r5, [r4, #0]
 801090a:	1961      	adds	r1, r4, r5
 801090c:	428b      	cmp	r3, r1
 801090e:	bf01      	itttt	eq
 8010910:	6819      	ldreq	r1, [r3, #0]
 8010912:	685b      	ldreq	r3, [r3, #4]
 8010914:	1949      	addeq	r1, r1, r5
 8010916:	6021      	streq	r1, [r4, #0]
 8010918:	e7ed      	b.n	80108f6 <_free_r+0x22>
 801091a:	461a      	mov	r2, r3
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	b10b      	cbz	r3, 8010924 <_free_r+0x50>
 8010920:	42a3      	cmp	r3, r4
 8010922:	d9fa      	bls.n	801091a <_free_r+0x46>
 8010924:	6811      	ldr	r1, [r2, #0]
 8010926:	1855      	adds	r5, r2, r1
 8010928:	42a5      	cmp	r5, r4
 801092a:	d10b      	bne.n	8010944 <_free_r+0x70>
 801092c:	6824      	ldr	r4, [r4, #0]
 801092e:	4421      	add	r1, r4
 8010930:	1854      	adds	r4, r2, r1
 8010932:	42a3      	cmp	r3, r4
 8010934:	6011      	str	r1, [r2, #0]
 8010936:	d1e0      	bne.n	80108fa <_free_r+0x26>
 8010938:	681c      	ldr	r4, [r3, #0]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	6053      	str	r3, [r2, #4]
 801093e:	4421      	add	r1, r4
 8010940:	6011      	str	r1, [r2, #0]
 8010942:	e7da      	b.n	80108fa <_free_r+0x26>
 8010944:	d902      	bls.n	801094c <_free_r+0x78>
 8010946:	230c      	movs	r3, #12
 8010948:	6003      	str	r3, [r0, #0]
 801094a:	e7d6      	b.n	80108fa <_free_r+0x26>
 801094c:	6825      	ldr	r5, [r4, #0]
 801094e:	1961      	adds	r1, r4, r5
 8010950:	428b      	cmp	r3, r1
 8010952:	bf04      	itt	eq
 8010954:	6819      	ldreq	r1, [r3, #0]
 8010956:	685b      	ldreq	r3, [r3, #4]
 8010958:	6063      	str	r3, [r4, #4]
 801095a:	bf04      	itt	eq
 801095c:	1949      	addeq	r1, r1, r5
 801095e:	6021      	streq	r1, [r4, #0]
 8010960:	6054      	str	r4, [r2, #4]
 8010962:	e7ca      	b.n	80108fa <_free_r+0x26>
 8010964:	b003      	add	sp, #12
 8010966:	bd30      	pop	{r4, r5, pc}
 8010968:	2000a99c 	.word	0x2000a99c

0801096c <sbrk_aligned>:
 801096c:	b570      	push	{r4, r5, r6, lr}
 801096e:	4e0e      	ldr	r6, [pc, #56]	; (80109a8 <sbrk_aligned+0x3c>)
 8010970:	460c      	mov	r4, r1
 8010972:	6831      	ldr	r1, [r6, #0]
 8010974:	4605      	mov	r5, r0
 8010976:	b911      	cbnz	r1, 801097e <sbrk_aligned+0x12>
 8010978:	f000 fe5a 	bl	8011630 <_sbrk_r>
 801097c:	6030      	str	r0, [r6, #0]
 801097e:	4621      	mov	r1, r4
 8010980:	4628      	mov	r0, r5
 8010982:	f000 fe55 	bl	8011630 <_sbrk_r>
 8010986:	1c43      	adds	r3, r0, #1
 8010988:	d00a      	beq.n	80109a0 <sbrk_aligned+0x34>
 801098a:	1cc4      	adds	r4, r0, #3
 801098c:	f024 0403 	bic.w	r4, r4, #3
 8010990:	42a0      	cmp	r0, r4
 8010992:	d007      	beq.n	80109a4 <sbrk_aligned+0x38>
 8010994:	1a21      	subs	r1, r4, r0
 8010996:	4628      	mov	r0, r5
 8010998:	f000 fe4a 	bl	8011630 <_sbrk_r>
 801099c:	3001      	adds	r0, #1
 801099e:	d101      	bne.n	80109a4 <sbrk_aligned+0x38>
 80109a0:	f04f 34ff 	mov.w	r4, #4294967295
 80109a4:	4620      	mov	r0, r4
 80109a6:	bd70      	pop	{r4, r5, r6, pc}
 80109a8:	2000a9a0 	.word	0x2000a9a0

080109ac <_malloc_r>:
 80109ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b0:	1ccd      	adds	r5, r1, #3
 80109b2:	f025 0503 	bic.w	r5, r5, #3
 80109b6:	3508      	adds	r5, #8
 80109b8:	2d0c      	cmp	r5, #12
 80109ba:	bf38      	it	cc
 80109bc:	250c      	movcc	r5, #12
 80109be:	2d00      	cmp	r5, #0
 80109c0:	4607      	mov	r7, r0
 80109c2:	db01      	blt.n	80109c8 <_malloc_r+0x1c>
 80109c4:	42a9      	cmp	r1, r5
 80109c6:	d905      	bls.n	80109d4 <_malloc_r+0x28>
 80109c8:	230c      	movs	r3, #12
 80109ca:	603b      	str	r3, [r7, #0]
 80109cc:	2600      	movs	r6, #0
 80109ce:	4630      	mov	r0, r6
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d4:	4e2e      	ldr	r6, [pc, #184]	; (8010a90 <_malloc_r+0xe4>)
 80109d6:	f001 ffb9 	bl	801294c <__malloc_lock>
 80109da:	6833      	ldr	r3, [r6, #0]
 80109dc:	461c      	mov	r4, r3
 80109de:	bb34      	cbnz	r4, 8010a2e <_malloc_r+0x82>
 80109e0:	4629      	mov	r1, r5
 80109e2:	4638      	mov	r0, r7
 80109e4:	f7ff ffc2 	bl	801096c <sbrk_aligned>
 80109e8:	1c43      	adds	r3, r0, #1
 80109ea:	4604      	mov	r4, r0
 80109ec:	d14d      	bne.n	8010a8a <_malloc_r+0xde>
 80109ee:	6834      	ldr	r4, [r6, #0]
 80109f0:	4626      	mov	r6, r4
 80109f2:	2e00      	cmp	r6, #0
 80109f4:	d140      	bne.n	8010a78 <_malloc_r+0xcc>
 80109f6:	6823      	ldr	r3, [r4, #0]
 80109f8:	4631      	mov	r1, r6
 80109fa:	4638      	mov	r0, r7
 80109fc:	eb04 0803 	add.w	r8, r4, r3
 8010a00:	f000 fe16 	bl	8011630 <_sbrk_r>
 8010a04:	4580      	cmp	r8, r0
 8010a06:	d13a      	bne.n	8010a7e <_malloc_r+0xd2>
 8010a08:	6821      	ldr	r1, [r4, #0]
 8010a0a:	3503      	adds	r5, #3
 8010a0c:	1a6d      	subs	r5, r5, r1
 8010a0e:	f025 0503 	bic.w	r5, r5, #3
 8010a12:	3508      	adds	r5, #8
 8010a14:	2d0c      	cmp	r5, #12
 8010a16:	bf38      	it	cc
 8010a18:	250c      	movcc	r5, #12
 8010a1a:	4629      	mov	r1, r5
 8010a1c:	4638      	mov	r0, r7
 8010a1e:	f7ff ffa5 	bl	801096c <sbrk_aligned>
 8010a22:	3001      	adds	r0, #1
 8010a24:	d02b      	beq.n	8010a7e <_malloc_r+0xd2>
 8010a26:	6823      	ldr	r3, [r4, #0]
 8010a28:	442b      	add	r3, r5
 8010a2a:	6023      	str	r3, [r4, #0]
 8010a2c:	e00e      	b.n	8010a4c <_malloc_r+0xa0>
 8010a2e:	6822      	ldr	r2, [r4, #0]
 8010a30:	1b52      	subs	r2, r2, r5
 8010a32:	d41e      	bmi.n	8010a72 <_malloc_r+0xc6>
 8010a34:	2a0b      	cmp	r2, #11
 8010a36:	d916      	bls.n	8010a66 <_malloc_r+0xba>
 8010a38:	1961      	adds	r1, r4, r5
 8010a3a:	42a3      	cmp	r3, r4
 8010a3c:	6025      	str	r5, [r4, #0]
 8010a3e:	bf18      	it	ne
 8010a40:	6059      	strne	r1, [r3, #4]
 8010a42:	6863      	ldr	r3, [r4, #4]
 8010a44:	bf08      	it	eq
 8010a46:	6031      	streq	r1, [r6, #0]
 8010a48:	5162      	str	r2, [r4, r5]
 8010a4a:	604b      	str	r3, [r1, #4]
 8010a4c:	4638      	mov	r0, r7
 8010a4e:	f104 060b 	add.w	r6, r4, #11
 8010a52:	f001 ff81 	bl	8012958 <__malloc_unlock>
 8010a56:	f026 0607 	bic.w	r6, r6, #7
 8010a5a:	1d23      	adds	r3, r4, #4
 8010a5c:	1af2      	subs	r2, r6, r3
 8010a5e:	d0b6      	beq.n	80109ce <_malloc_r+0x22>
 8010a60:	1b9b      	subs	r3, r3, r6
 8010a62:	50a3      	str	r3, [r4, r2]
 8010a64:	e7b3      	b.n	80109ce <_malloc_r+0x22>
 8010a66:	6862      	ldr	r2, [r4, #4]
 8010a68:	42a3      	cmp	r3, r4
 8010a6a:	bf0c      	ite	eq
 8010a6c:	6032      	streq	r2, [r6, #0]
 8010a6e:	605a      	strne	r2, [r3, #4]
 8010a70:	e7ec      	b.n	8010a4c <_malloc_r+0xa0>
 8010a72:	4623      	mov	r3, r4
 8010a74:	6864      	ldr	r4, [r4, #4]
 8010a76:	e7b2      	b.n	80109de <_malloc_r+0x32>
 8010a78:	4634      	mov	r4, r6
 8010a7a:	6876      	ldr	r6, [r6, #4]
 8010a7c:	e7b9      	b.n	80109f2 <_malloc_r+0x46>
 8010a7e:	230c      	movs	r3, #12
 8010a80:	603b      	str	r3, [r7, #0]
 8010a82:	4638      	mov	r0, r7
 8010a84:	f001 ff68 	bl	8012958 <__malloc_unlock>
 8010a88:	e7a1      	b.n	80109ce <_malloc_r+0x22>
 8010a8a:	6025      	str	r5, [r4, #0]
 8010a8c:	e7de      	b.n	8010a4c <_malloc_r+0xa0>
 8010a8e:	bf00      	nop
 8010a90:	2000a99c 	.word	0x2000a99c

08010a94 <__cvt>:
 8010a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a98:	ec55 4b10 	vmov	r4, r5, d0
 8010a9c:	2d00      	cmp	r5, #0
 8010a9e:	460e      	mov	r6, r1
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	462b      	mov	r3, r5
 8010aa4:	bfbb      	ittet	lt
 8010aa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010aaa:	461d      	movlt	r5, r3
 8010aac:	2300      	movge	r3, #0
 8010aae:	232d      	movlt	r3, #45	; 0x2d
 8010ab0:	700b      	strb	r3, [r1, #0]
 8010ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010ab8:	4691      	mov	r9, r2
 8010aba:	f023 0820 	bic.w	r8, r3, #32
 8010abe:	bfbc      	itt	lt
 8010ac0:	4622      	movlt	r2, r4
 8010ac2:	4614      	movlt	r4, r2
 8010ac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ac8:	d005      	beq.n	8010ad6 <__cvt+0x42>
 8010aca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ace:	d100      	bne.n	8010ad2 <__cvt+0x3e>
 8010ad0:	3601      	adds	r6, #1
 8010ad2:	2102      	movs	r1, #2
 8010ad4:	e000      	b.n	8010ad8 <__cvt+0x44>
 8010ad6:	2103      	movs	r1, #3
 8010ad8:	ab03      	add	r3, sp, #12
 8010ada:	9301      	str	r3, [sp, #4]
 8010adc:	ab02      	add	r3, sp, #8
 8010ade:	9300      	str	r3, [sp, #0]
 8010ae0:	ec45 4b10 	vmov	d0, r4, r5
 8010ae4:	4653      	mov	r3, sl
 8010ae6:	4632      	mov	r2, r6
 8010ae8:	f000 fff2 	bl	8011ad0 <_dtoa_r>
 8010aec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010af0:	4607      	mov	r7, r0
 8010af2:	d102      	bne.n	8010afa <__cvt+0x66>
 8010af4:	f019 0f01 	tst.w	r9, #1
 8010af8:	d022      	beq.n	8010b40 <__cvt+0xac>
 8010afa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010afe:	eb07 0906 	add.w	r9, r7, r6
 8010b02:	d110      	bne.n	8010b26 <__cvt+0x92>
 8010b04:	783b      	ldrb	r3, [r7, #0]
 8010b06:	2b30      	cmp	r3, #48	; 0x30
 8010b08:	d10a      	bne.n	8010b20 <__cvt+0x8c>
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	4620      	mov	r0, r4
 8010b10:	4629      	mov	r1, r5
 8010b12:	f7ef fff9 	bl	8000b08 <__aeabi_dcmpeq>
 8010b16:	b918      	cbnz	r0, 8010b20 <__cvt+0x8c>
 8010b18:	f1c6 0601 	rsb	r6, r6, #1
 8010b1c:	f8ca 6000 	str.w	r6, [sl]
 8010b20:	f8da 3000 	ldr.w	r3, [sl]
 8010b24:	4499      	add	r9, r3
 8010b26:	2200      	movs	r2, #0
 8010b28:	2300      	movs	r3, #0
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	f7ef ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 8010b32:	b108      	cbz	r0, 8010b38 <__cvt+0xa4>
 8010b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b38:	2230      	movs	r2, #48	; 0x30
 8010b3a:	9b03      	ldr	r3, [sp, #12]
 8010b3c:	454b      	cmp	r3, r9
 8010b3e:	d307      	bcc.n	8010b50 <__cvt+0xbc>
 8010b40:	9b03      	ldr	r3, [sp, #12]
 8010b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b44:	1bdb      	subs	r3, r3, r7
 8010b46:	4638      	mov	r0, r7
 8010b48:	6013      	str	r3, [r2, #0]
 8010b4a:	b004      	add	sp, #16
 8010b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b50:	1c59      	adds	r1, r3, #1
 8010b52:	9103      	str	r1, [sp, #12]
 8010b54:	701a      	strb	r2, [r3, #0]
 8010b56:	e7f0      	b.n	8010b3a <__cvt+0xa6>

08010b58 <__exponent>:
 8010b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2900      	cmp	r1, #0
 8010b5e:	bfb8      	it	lt
 8010b60:	4249      	neglt	r1, r1
 8010b62:	f803 2b02 	strb.w	r2, [r3], #2
 8010b66:	bfb4      	ite	lt
 8010b68:	222d      	movlt	r2, #45	; 0x2d
 8010b6a:	222b      	movge	r2, #43	; 0x2b
 8010b6c:	2909      	cmp	r1, #9
 8010b6e:	7042      	strb	r2, [r0, #1]
 8010b70:	dd2a      	ble.n	8010bc8 <__exponent+0x70>
 8010b72:	f10d 0407 	add.w	r4, sp, #7
 8010b76:	46a4      	mov	ip, r4
 8010b78:	270a      	movs	r7, #10
 8010b7a:	46a6      	mov	lr, r4
 8010b7c:	460a      	mov	r2, r1
 8010b7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8010b82:	fb07 1516 	mls	r5, r7, r6, r1
 8010b86:	3530      	adds	r5, #48	; 0x30
 8010b88:	2a63      	cmp	r2, #99	; 0x63
 8010b8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8010b8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010b92:	4631      	mov	r1, r6
 8010b94:	dcf1      	bgt.n	8010b7a <__exponent+0x22>
 8010b96:	3130      	adds	r1, #48	; 0x30
 8010b98:	f1ae 0502 	sub.w	r5, lr, #2
 8010b9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010ba0:	1c44      	adds	r4, r0, #1
 8010ba2:	4629      	mov	r1, r5
 8010ba4:	4561      	cmp	r1, ip
 8010ba6:	d30a      	bcc.n	8010bbe <__exponent+0x66>
 8010ba8:	f10d 0209 	add.w	r2, sp, #9
 8010bac:	eba2 020e 	sub.w	r2, r2, lr
 8010bb0:	4565      	cmp	r5, ip
 8010bb2:	bf88      	it	hi
 8010bb4:	2200      	movhi	r2, #0
 8010bb6:	4413      	add	r3, r2
 8010bb8:	1a18      	subs	r0, r3, r0
 8010bba:	b003      	add	sp, #12
 8010bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010bc6:	e7ed      	b.n	8010ba4 <__exponent+0x4c>
 8010bc8:	2330      	movs	r3, #48	; 0x30
 8010bca:	3130      	adds	r1, #48	; 0x30
 8010bcc:	7083      	strb	r3, [r0, #2]
 8010bce:	70c1      	strb	r1, [r0, #3]
 8010bd0:	1d03      	adds	r3, r0, #4
 8010bd2:	e7f1      	b.n	8010bb8 <__exponent+0x60>

08010bd4 <_printf_float>:
 8010bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd8:	ed2d 8b02 	vpush	{d8}
 8010bdc:	b08d      	sub	sp, #52	; 0x34
 8010bde:	460c      	mov	r4, r1
 8010be0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010be4:	4616      	mov	r6, r2
 8010be6:	461f      	mov	r7, r3
 8010be8:	4605      	mov	r5, r0
 8010bea:	f001 fe33 	bl	8012854 <_localeconv_r>
 8010bee:	f8d0 a000 	ldr.w	sl, [r0]
 8010bf2:	4650      	mov	r0, sl
 8010bf4:	f7ef fb0c 	bl	8000210 <strlen>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8010bfc:	6823      	ldr	r3, [r4, #0]
 8010bfe:	9305      	str	r3, [sp, #20]
 8010c00:	f8d8 3000 	ldr.w	r3, [r8]
 8010c04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010c08:	3307      	adds	r3, #7
 8010c0a:	f023 0307 	bic.w	r3, r3, #7
 8010c0e:	f103 0208 	add.w	r2, r3, #8
 8010c12:	f8c8 2000 	str.w	r2, [r8]
 8010c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010c22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c26:	9307      	str	r3, [sp, #28]
 8010c28:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c2c:	ee08 0a10 	vmov	s16, r0
 8010c30:	4b9f      	ldr	r3, [pc, #636]	; (8010eb0 <_printf_float+0x2dc>)
 8010c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c36:	f04f 32ff 	mov.w	r2, #4294967295
 8010c3a:	f7ef ff97 	bl	8000b6c <__aeabi_dcmpun>
 8010c3e:	bb88      	cbnz	r0, 8010ca4 <_printf_float+0xd0>
 8010c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c44:	4b9a      	ldr	r3, [pc, #616]	; (8010eb0 <_printf_float+0x2dc>)
 8010c46:	f04f 32ff 	mov.w	r2, #4294967295
 8010c4a:	f7ef ff71 	bl	8000b30 <__aeabi_dcmple>
 8010c4e:	bb48      	cbnz	r0, 8010ca4 <_printf_float+0xd0>
 8010c50:	2200      	movs	r2, #0
 8010c52:	2300      	movs	r3, #0
 8010c54:	4640      	mov	r0, r8
 8010c56:	4649      	mov	r1, r9
 8010c58:	f7ef ff60 	bl	8000b1c <__aeabi_dcmplt>
 8010c5c:	b110      	cbz	r0, 8010c64 <_printf_float+0x90>
 8010c5e:	232d      	movs	r3, #45	; 0x2d
 8010c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c64:	4b93      	ldr	r3, [pc, #588]	; (8010eb4 <_printf_float+0x2e0>)
 8010c66:	4894      	ldr	r0, [pc, #592]	; (8010eb8 <_printf_float+0x2e4>)
 8010c68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010c6c:	bf94      	ite	ls
 8010c6e:	4698      	movls	r8, r3
 8010c70:	4680      	movhi	r8, r0
 8010c72:	2303      	movs	r3, #3
 8010c74:	6123      	str	r3, [r4, #16]
 8010c76:	9b05      	ldr	r3, [sp, #20]
 8010c78:	f023 0204 	bic.w	r2, r3, #4
 8010c7c:	6022      	str	r2, [r4, #0]
 8010c7e:	f04f 0900 	mov.w	r9, #0
 8010c82:	9700      	str	r7, [sp, #0]
 8010c84:	4633      	mov	r3, r6
 8010c86:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c88:	4621      	mov	r1, r4
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	f000 f9d8 	bl	8011040 <_printf_common>
 8010c90:	3001      	adds	r0, #1
 8010c92:	f040 8090 	bne.w	8010db6 <_printf_float+0x1e2>
 8010c96:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9a:	b00d      	add	sp, #52	; 0x34
 8010c9c:	ecbd 8b02 	vpop	{d8}
 8010ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca4:	4642      	mov	r2, r8
 8010ca6:	464b      	mov	r3, r9
 8010ca8:	4640      	mov	r0, r8
 8010caa:	4649      	mov	r1, r9
 8010cac:	f7ef ff5e 	bl	8000b6c <__aeabi_dcmpun>
 8010cb0:	b140      	cbz	r0, 8010cc4 <_printf_float+0xf0>
 8010cb2:	464b      	mov	r3, r9
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	bfbc      	itt	lt
 8010cb8:	232d      	movlt	r3, #45	; 0x2d
 8010cba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010cbe:	487f      	ldr	r0, [pc, #508]	; (8010ebc <_printf_float+0x2e8>)
 8010cc0:	4b7f      	ldr	r3, [pc, #508]	; (8010ec0 <_printf_float+0x2ec>)
 8010cc2:	e7d1      	b.n	8010c68 <_printf_float+0x94>
 8010cc4:	6863      	ldr	r3, [r4, #4]
 8010cc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010cca:	9206      	str	r2, [sp, #24]
 8010ccc:	1c5a      	adds	r2, r3, #1
 8010cce:	d13f      	bne.n	8010d50 <_printf_float+0x17c>
 8010cd0:	2306      	movs	r3, #6
 8010cd2:	6063      	str	r3, [r4, #4]
 8010cd4:	9b05      	ldr	r3, [sp, #20]
 8010cd6:	6861      	ldr	r1, [r4, #4]
 8010cd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9303      	str	r3, [sp, #12]
 8010ce0:	ab0a      	add	r3, sp, #40	; 0x28
 8010ce2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010ce6:	ab09      	add	r3, sp, #36	; 0x24
 8010ce8:	ec49 8b10 	vmov	d0, r8, r9
 8010cec:	9300      	str	r3, [sp, #0]
 8010cee:	6022      	str	r2, [r4, #0]
 8010cf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	f7ff fecd 	bl	8010a94 <__cvt>
 8010cfa:	9b06      	ldr	r3, [sp, #24]
 8010cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cfe:	2b47      	cmp	r3, #71	; 0x47
 8010d00:	4680      	mov	r8, r0
 8010d02:	d108      	bne.n	8010d16 <_printf_float+0x142>
 8010d04:	1cc8      	adds	r0, r1, #3
 8010d06:	db02      	blt.n	8010d0e <_printf_float+0x13a>
 8010d08:	6863      	ldr	r3, [r4, #4]
 8010d0a:	4299      	cmp	r1, r3
 8010d0c:	dd41      	ble.n	8010d92 <_printf_float+0x1be>
 8010d0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8010d12:	fa5f fb8b 	uxtb.w	fp, fp
 8010d16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d1a:	d820      	bhi.n	8010d5e <_printf_float+0x18a>
 8010d1c:	3901      	subs	r1, #1
 8010d1e:	465a      	mov	r2, fp
 8010d20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d24:	9109      	str	r1, [sp, #36]	; 0x24
 8010d26:	f7ff ff17 	bl	8010b58 <__exponent>
 8010d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d2c:	1813      	adds	r3, r2, r0
 8010d2e:	2a01      	cmp	r2, #1
 8010d30:	4681      	mov	r9, r0
 8010d32:	6123      	str	r3, [r4, #16]
 8010d34:	dc02      	bgt.n	8010d3c <_printf_float+0x168>
 8010d36:	6822      	ldr	r2, [r4, #0]
 8010d38:	07d2      	lsls	r2, r2, #31
 8010d3a:	d501      	bpl.n	8010d40 <_printf_float+0x16c>
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	6123      	str	r3, [r4, #16]
 8010d40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d09c      	beq.n	8010c82 <_printf_float+0xae>
 8010d48:	232d      	movs	r3, #45	; 0x2d
 8010d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d4e:	e798      	b.n	8010c82 <_printf_float+0xae>
 8010d50:	9a06      	ldr	r2, [sp, #24]
 8010d52:	2a47      	cmp	r2, #71	; 0x47
 8010d54:	d1be      	bne.n	8010cd4 <_printf_float+0x100>
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1bc      	bne.n	8010cd4 <_printf_float+0x100>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e7b9      	b.n	8010cd2 <_printf_float+0xfe>
 8010d5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010d62:	d118      	bne.n	8010d96 <_printf_float+0x1c2>
 8010d64:	2900      	cmp	r1, #0
 8010d66:	6863      	ldr	r3, [r4, #4]
 8010d68:	dd0b      	ble.n	8010d82 <_printf_float+0x1ae>
 8010d6a:	6121      	str	r1, [r4, #16]
 8010d6c:	b913      	cbnz	r3, 8010d74 <_printf_float+0x1a0>
 8010d6e:	6822      	ldr	r2, [r4, #0]
 8010d70:	07d0      	lsls	r0, r2, #31
 8010d72:	d502      	bpl.n	8010d7a <_printf_float+0x1a6>
 8010d74:	3301      	adds	r3, #1
 8010d76:	440b      	add	r3, r1
 8010d78:	6123      	str	r3, [r4, #16]
 8010d7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d7c:	f04f 0900 	mov.w	r9, #0
 8010d80:	e7de      	b.n	8010d40 <_printf_float+0x16c>
 8010d82:	b913      	cbnz	r3, 8010d8a <_printf_float+0x1b6>
 8010d84:	6822      	ldr	r2, [r4, #0]
 8010d86:	07d2      	lsls	r2, r2, #31
 8010d88:	d501      	bpl.n	8010d8e <_printf_float+0x1ba>
 8010d8a:	3302      	adds	r3, #2
 8010d8c:	e7f4      	b.n	8010d78 <_printf_float+0x1a4>
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e7f2      	b.n	8010d78 <_printf_float+0x1a4>
 8010d92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d98:	4299      	cmp	r1, r3
 8010d9a:	db05      	blt.n	8010da8 <_printf_float+0x1d4>
 8010d9c:	6823      	ldr	r3, [r4, #0]
 8010d9e:	6121      	str	r1, [r4, #16]
 8010da0:	07d8      	lsls	r0, r3, #31
 8010da2:	d5ea      	bpl.n	8010d7a <_printf_float+0x1a6>
 8010da4:	1c4b      	adds	r3, r1, #1
 8010da6:	e7e7      	b.n	8010d78 <_printf_float+0x1a4>
 8010da8:	2900      	cmp	r1, #0
 8010daa:	bfd4      	ite	le
 8010dac:	f1c1 0202 	rsble	r2, r1, #2
 8010db0:	2201      	movgt	r2, #1
 8010db2:	4413      	add	r3, r2
 8010db4:	e7e0      	b.n	8010d78 <_printf_float+0x1a4>
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	055a      	lsls	r2, r3, #21
 8010dba:	d407      	bmi.n	8010dcc <_printf_float+0x1f8>
 8010dbc:	6923      	ldr	r3, [r4, #16]
 8010dbe:	4642      	mov	r2, r8
 8010dc0:	4631      	mov	r1, r6
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	47b8      	blx	r7
 8010dc6:	3001      	adds	r0, #1
 8010dc8:	d12c      	bne.n	8010e24 <_printf_float+0x250>
 8010dca:	e764      	b.n	8010c96 <_printf_float+0xc2>
 8010dcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010dd0:	f240 80e0 	bls.w	8010f94 <_printf_float+0x3c0>
 8010dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010dd8:	2200      	movs	r2, #0
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f7ef fe94 	bl	8000b08 <__aeabi_dcmpeq>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d034      	beq.n	8010e4e <_printf_float+0x27a>
 8010de4:	4a37      	ldr	r2, [pc, #220]	; (8010ec4 <_printf_float+0x2f0>)
 8010de6:	2301      	movs	r3, #1
 8010de8:	4631      	mov	r1, r6
 8010dea:	4628      	mov	r0, r5
 8010dec:	47b8      	blx	r7
 8010dee:	3001      	adds	r0, #1
 8010df0:	f43f af51 	beq.w	8010c96 <_printf_float+0xc2>
 8010df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	db02      	blt.n	8010e02 <_printf_float+0x22e>
 8010dfc:	6823      	ldr	r3, [r4, #0]
 8010dfe:	07d8      	lsls	r0, r3, #31
 8010e00:	d510      	bpl.n	8010e24 <_printf_float+0x250>
 8010e02:	ee18 3a10 	vmov	r3, s16
 8010e06:	4652      	mov	r2, sl
 8010e08:	4631      	mov	r1, r6
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	47b8      	blx	r7
 8010e0e:	3001      	adds	r0, #1
 8010e10:	f43f af41 	beq.w	8010c96 <_printf_float+0xc2>
 8010e14:	f04f 0800 	mov.w	r8, #0
 8010e18:	f104 091a 	add.w	r9, r4, #26
 8010e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	4543      	cmp	r3, r8
 8010e22:	dc09      	bgt.n	8010e38 <_printf_float+0x264>
 8010e24:	6823      	ldr	r3, [r4, #0]
 8010e26:	079b      	lsls	r3, r3, #30
 8010e28:	f100 8105 	bmi.w	8011036 <_printf_float+0x462>
 8010e2c:	68e0      	ldr	r0, [r4, #12]
 8010e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e30:	4298      	cmp	r0, r3
 8010e32:	bfb8      	it	lt
 8010e34:	4618      	movlt	r0, r3
 8010e36:	e730      	b.n	8010c9a <_printf_float+0xc6>
 8010e38:	2301      	movs	r3, #1
 8010e3a:	464a      	mov	r2, r9
 8010e3c:	4631      	mov	r1, r6
 8010e3e:	4628      	mov	r0, r5
 8010e40:	47b8      	blx	r7
 8010e42:	3001      	adds	r0, #1
 8010e44:	f43f af27 	beq.w	8010c96 <_printf_float+0xc2>
 8010e48:	f108 0801 	add.w	r8, r8, #1
 8010e4c:	e7e6      	b.n	8010e1c <_printf_float+0x248>
 8010e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dc39      	bgt.n	8010ec8 <_printf_float+0x2f4>
 8010e54:	4a1b      	ldr	r2, [pc, #108]	; (8010ec4 <_printf_float+0x2f0>)
 8010e56:	2301      	movs	r3, #1
 8010e58:	4631      	mov	r1, r6
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	47b8      	blx	r7
 8010e5e:	3001      	adds	r0, #1
 8010e60:	f43f af19 	beq.w	8010c96 <_printf_float+0xc2>
 8010e64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e68:	4313      	orrs	r3, r2
 8010e6a:	d102      	bne.n	8010e72 <_printf_float+0x29e>
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	07d9      	lsls	r1, r3, #31
 8010e70:	d5d8      	bpl.n	8010e24 <_printf_float+0x250>
 8010e72:	ee18 3a10 	vmov	r3, s16
 8010e76:	4652      	mov	r2, sl
 8010e78:	4631      	mov	r1, r6
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	47b8      	blx	r7
 8010e7e:	3001      	adds	r0, #1
 8010e80:	f43f af09 	beq.w	8010c96 <_printf_float+0xc2>
 8010e84:	f04f 0900 	mov.w	r9, #0
 8010e88:	f104 0a1a 	add.w	sl, r4, #26
 8010e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e8e:	425b      	negs	r3, r3
 8010e90:	454b      	cmp	r3, r9
 8010e92:	dc01      	bgt.n	8010e98 <_printf_float+0x2c4>
 8010e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e96:	e792      	b.n	8010dbe <_printf_float+0x1ea>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	4652      	mov	r2, sl
 8010e9c:	4631      	mov	r1, r6
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	47b8      	blx	r7
 8010ea2:	3001      	adds	r0, #1
 8010ea4:	f43f aef7 	beq.w	8010c96 <_printf_float+0xc2>
 8010ea8:	f109 0901 	add.w	r9, r9, #1
 8010eac:	e7ee      	b.n	8010e8c <_printf_float+0x2b8>
 8010eae:	bf00      	nop
 8010eb0:	7fefffff 	.word	0x7fefffff
 8010eb4:	08015428 	.word	0x08015428
 8010eb8:	0801542c 	.word	0x0801542c
 8010ebc:	08015434 	.word	0x08015434
 8010ec0:	08015430 	.word	0x08015430
 8010ec4:	08015438 	.word	0x08015438
 8010ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	bfa8      	it	ge
 8010ed0:	461a      	movge	r2, r3
 8010ed2:	2a00      	cmp	r2, #0
 8010ed4:	4691      	mov	r9, r2
 8010ed6:	dc37      	bgt.n	8010f48 <_printf_float+0x374>
 8010ed8:	f04f 0b00 	mov.w	fp, #0
 8010edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ee0:	f104 021a 	add.w	r2, r4, #26
 8010ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ee6:	9305      	str	r3, [sp, #20]
 8010ee8:	eba3 0309 	sub.w	r3, r3, r9
 8010eec:	455b      	cmp	r3, fp
 8010eee:	dc33      	bgt.n	8010f58 <_printf_float+0x384>
 8010ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	db3b      	blt.n	8010f70 <_printf_float+0x39c>
 8010ef8:	6823      	ldr	r3, [r4, #0]
 8010efa:	07da      	lsls	r2, r3, #31
 8010efc:	d438      	bmi.n	8010f70 <_printf_float+0x39c>
 8010efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f00:	9a05      	ldr	r2, [sp, #20]
 8010f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f04:	1a9a      	subs	r2, r3, r2
 8010f06:	eba3 0901 	sub.w	r9, r3, r1
 8010f0a:	4591      	cmp	r9, r2
 8010f0c:	bfa8      	it	ge
 8010f0e:	4691      	movge	r9, r2
 8010f10:	f1b9 0f00 	cmp.w	r9, #0
 8010f14:	dc35      	bgt.n	8010f82 <_printf_float+0x3ae>
 8010f16:	f04f 0800 	mov.w	r8, #0
 8010f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f1e:	f104 0a1a 	add.w	sl, r4, #26
 8010f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f26:	1a9b      	subs	r3, r3, r2
 8010f28:	eba3 0309 	sub.w	r3, r3, r9
 8010f2c:	4543      	cmp	r3, r8
 8010f2e:	f77f af79 	ble.w	8010e24 <_printf_float+0x250>
 8010f32:	2301      	movs	r3, #1
 8010f34:	4652      	mov	r2, sl
 8010f36:	4631      	mov	r1, r6
 8010f38:	4628      	mov	r0, r5
 8010f3a:	47b8      	blx	r7
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	f43f aeaa 	beq.w	8010c96 <_printf_float+0xc2>
 8010f42:	f108 0801 	add.w	r8, r8, #1
 8010f46:	e7ec      	b.n	8010f22 <_printf_float+0x34e>
 8010f48:	4613      	mov	r3, r2
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	4642      	mov	r2, r8
 8010f4e:	4628      	mov	r0, r5
 8010f50:	47b8      	blx	r7
 8010f52:	3001      	adds	r0, #1
 8010f54:	d1c0      	bne.n	8010ed8 <_printf_float+0x304>
 8010f56:	e69e      	b.n	8010c96 <_printf_float+0xc2>
 8010f58:	2301      	movs	r3, #1
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	9205      	str	r2, [sp, #20]
 8010f60:	47b8      	blx	r7
 8010f62:	3001      	adds	r0, #1
 8010f64:	f43f ae97 	beq.w	8010c96 <_printf_float+0xc2>
 8010f68:	9a05      	ldr	r2, [sp, #20]
 8010f6a:	f10b 0b01 	add.w	fp, fp, #1
 8010f6e:	e7b9      	b.n	8010ee4 <_printf_float+0x310>
 8010f70:	ee18 3a10 	vmov	r3, s16
 8010f74:	4652      	mov	r2, sl
 8010f76:	4631      	mov	r1, r6
 8010f78:	4628      	mov	r0, r5
 8010f7a:	47b8      	blx	r7
 8010f7c:	3001      	adds	r0, #1
 8010f7e:	d1be      	bne.n	8010efe <_printf_float+0x32a>
 8010f80:	e689      	b.n	8010c96 <_printf_float+0xc2>
 8010f82:	9a05      	ldr	r2, [sp, #20]
 8010f84:	464b      	mov	r3, r9
 8010f86:	4442      	add	r2, r8
 8010f88:	4631      	mov	r1, r6
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	47b8      	blx	r7
 8010f8e:	3001      	adds	r0, #1
 8010f90:	d1c1      	bne.n	8010f16 <_printf_float+0x342>
 8010f92:	e680      	b.n	8010c96 <_printf_float+0xc2>
 8010f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f96:	2a01      	cmp	r2, #1
 8010f98:	dc01      	bgt.n	8010f9e <_printf_float+0x3ca>
 8010f9a:	07db      	lsls	r3, r3, #31
 8010f9c:	d538      	bpl.n	8011010 <_printf_float+0x43c>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	4642      	mov	r2, r8
 8010fa2:	4631      	mov	r1, r6
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	47b8      	blx	r7
 8010fa8:	3001      	adds	r0, #1
 8010faa:	f43f ae74 	beq.w	8010c96 <_printf_float+0xc2>
 8010fae:	ee18 3a10 	vmov	r3, s16
 8010fb2:	4652      	mov	r2, sl
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	47b8      	blx	r7
 8010fba:	3001      	adds	r0, #1
 8010fbc:	f43f ae6b 	beq.w	8010c96 <_printf_float+0xc2>
 8010fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	f7ef fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 8010fcc:	b9d8      	cbnz	r0, 8011006 <_printf_float+0x432>
 8010fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fd0:	f108 0201 	add.w	r2, r8, #1
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	4631      	mov	r1, r6
 8010fd8:	4628      	mov	r0, r5
 8010fda:	47b8      	blx	r7
 8010fdc:	3001      	adds	r0, #1
 8010fde:	d10e      	bne.n	8010ffe <_printf_float+0x42a>
 8010fe0:	e659      	b.n	8010c96 <_printf_float+0xc2>
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	4652      	mov	r2, sl
 8010fe6:	4631      	mov	r1, r6
 8010fe8:	4628      	mov	r0, r5
 8010fea:	47b8      	blx	r7
 8010fec:	3001      	adds	r0, #1
 8010fee:	f43f ae52 	beq.w	8010c96 <_printf_float+0xc2>
 8010ff2:	f108 0801 	add.w	r8, r8, #1
 8010ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	4543      	cmp	r3, r8
 8010ffc:	dcf1      	bgt.n	8010fe2 <_printf_float+0x40e>
 8010ffe:	464b      	mov	r3, r9
 8011000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011004:	e6dc      	b.n	8010dc0 <_printf_float+0x1ec>
 8011006:	f04f 0800 	mov.w	r8, #0
 801100a:	f104 0a1a 	add.w	sl, r4, #26
 801100e:	e7f2      	b.n	8010ff6 <_printf_float+0x422>
 8011010:	2301      	movs	r3, #1
 8011012:	4642      	mov	r2, r8
 8011014:	e7df      	b.n	8010fd6 <_printf_float+0x402>
 8011016:	2301      	movs	r3, #1
 8011018:	464a      	mov	r2, r9
 801101a:	4631      	mov	r1, r6
 801101c:	4628      	mov	r0, r5
 801101e:	47b8      	blx	r7
 8011020:	3001      	adds	r0, #1
 8011022:	f43f ae38 	beq.w	8010c96 <_printf_float+0xc2>
 8011026:	f108 0801 	add.w	r8, r8, #1
 801102a:	68e3      	ldr	r3, [r4, #12]
 801102c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801102e:	1a5b      	subs	r3, r3, r1
 8011030:	4543      	cmp	r3, r8
 8011032:	dcf0      	bgt.n	8011016 <_printf_float+0x442>
 8011034:	e6fa      	b.n	8010e2c <_printf_float+0x258>
 8011036:	f04f 0800 	mov.w	r8, #0
 801103a:	f104 0919 	add.w	r9, r4, #25
 801103e:	e7f4      	b.n	801102a <_printf_float+0x456>

08011040 <_printf_common>:
 8011040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011044:	4616      	mov	r6, r2
 8011046:	4699      	mov	r9, r3
 8011048:	688a      	ldr	r2, [r1, #8]
 801104a:	690b      	ldr	r3, [r1, #16]
 801104c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011050:	4293      	cmp	r3, r2
 8011052:	bfb8      	it	lt
 8011054:	4613      	movlt	r3, r2
 8011056:	6033      	str	r3, [r6, #0]
 8011058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801105c:	4607      	mov	r7, r0
 801105e:	460c      	mov	r4, r1
 8011060:	b10a      	cbz	r2, 8011066 <_printf_common+0x26>
 8011062:	3301      	adds	r3, #1
 8011064:	6033      	str	r3, [r6, #0]
 8011066:	6823      	ldr	r3, [r4, #0]
 8011068:	0699      	lsls	r1, r3, #26
 801106a:	bf42      	ittt	mi
 801106c:	6833      	ldrmi	r3, [r6, #0]
 801106e:	3302      	addmi	r3, #2
 8011070:	6033      	strmi	r3, [r6, #0]
 8011072:	6825      	ldr	r5, [r4, #0]
 8011074:	f015 0506 	ands.w	r5, r5, #6
 8011078:	d106      	bne.n	8011088 <_printf_common+0x48>
 801107a:	f104 0a19 	add.w	sl, r4, #25
 801107e:	68e3      	ldr	r3, [r4, #12]
 8011080:	6832      	ldr	r2, [r6, #0]
 8011082:	1a9b      	subs	r3, r3, r2
 8011084:	42ab      	cmp	r3, r5
 8011086:	dc26      	bgt.n	80110d6 <_printf_common+0x96>
 8011088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801108c:	1e13      	subs	r3, r2, #0
 801108e:	6822      	ldr	r2, [r4, #0]
 8011090:	bf18      	it	ne
 8011092:	2301      	movne	r3, #1
 8011094:	0692      	lsls	r2, r2, #26
 8011096:	d42b      	bmi.n	80110f0 <_printf_common+0xb0>
 8011098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801109c:	4649      	mov	r1, r9
 801109e:	4638      	mov	r0, r7
 80110a0:	47c0      	blx	r8
 80110a2:	3001      	adds	r0, #1
 80110a4:	d01e      	beq.n	80110e4 <_printf_common+0xa4>
 80110a6:	6823      	ldr	r3, [r4, #0]
 80110a8:	68e5      	ldr	r5, [r4, #12]
 80110aa:	6832      	ldr	r2, [r6, #0]
 80110ac:	f003 0306 	and.w	r3, r3, #6
 80110b0:	2b04      	cmp	r3, #4
 80110b2:	bf08      	it	eq
 80110b4:	1aad      	subeq	r5, r5, r2
 80110b6:	68a3      	ldr	r3, [r4, #8]
 80110b8:	6922      	ldr	r2, [r4, #16]
 80110ba:	bf0c      	ite	eq
 80110bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110c0:	2500      	movne	r5, #0
 80110c2:	4293      	cmp	r3, r2
 80110c4:	bfc4      	itt	gt
 80110c6:	1a9b      	subgt	r3, r3, r2
 80110c8:	18ed      	addgt	r5, r5, r3
 80110ca:	2600      	movs	r6, #0
 80110cc:	341a      	adds	r4, #26
 80110ce:	42b5      	cmp	r5, r6
 80110d0:	d11a      	bne.n	8011108 <_printf_common+0xc8>
 80110d2:	2000      	movs	r0, #0
 80110d4:	e008      	b.n	80110e8 <_printf_common+0xa8>
 80110d6:	2301      	movs	r3, #1
 80110d8:	4652      	mov	r2, sl
 80110da:	4649      	mov	r1, r9
 80110dc:	4638      	mov	r0, r7
 80110de:	47c0      	blx	r8
 80110e0:	3001      	adds	r0, #1
 80110e2:	d103      	bne.n	80110ec <_printf_common+0xac>
 80110e4:	f04f 30ff 	mov.w	r0, #4294967295
 80110e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ec:	3501      	adds	r5, #1
 80110ee:	e7c6      	b.n	801107e <_printf_common+0x3e>
 80110f0:	18e1      	adds	r1, r4, r3
 80110f2:	1c5a      	adds	r2, r3, #1
 80110f4:	2030      	movs	r0, #48	; 0x30
 80110f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80110fa:	4422      	add	r2, r4
 80110fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011104:	3302      	adds	r3, #2
 8011106:	e7c7      	b.n	8011098 <_printf_common+0x58>
 8011108:	2301      	movs	r3, #1
 801110a:	4622      	mov	r2, r4
 801110c:	4649      	mov	r1, r9
 801110e:	4638      	mov	r0, r7
 8011110:	47c0      	blx	r8
 8011112:	3001      	adds	r0, #1
 8011114:	d0e6      	beq.n	80110e4 <_printf_common+0xa4>
 8011116:	3601      	adds	r6, #1
 8011118:	e7d9      	b.n	80110ce <_printf_common+0x8e>
	...

0801111c <_printf_i>:
 801111c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011120:	7e0f      	ldrb	r7, [r1, #24]
 8011122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011124:	2f78      	cmp	r7, #120	; 0x78
 8011126:	4691      	mov	r9, r2
 8011128:	4680      	mov	r8, r0
 801112a:	460c      	mov	r4, r1
 801112c:	469a      	mov	sl, r3
 801112e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011132:	d807      	bhi.n	8011144 <_printf_i+0x28>
 8011134:	2f62      	cmp	r7, #98	; 0x62
 8011136:	d80a      	bhi.n	801114e <_printf_i+0x32>
 8011138:	2f00      	cmp	r7, #0
 801113a:	f000 80d8 	beq.w	80112ee <_printf_i+0x1d2>
 801113e:	2f58      	cmp	r7, #88	; 0x58
 8011140:	f000 80a3 	beq.w	801128a <_printf_i+0x16e>
 8011144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801114c:	e03a      	b.n	80111c4 <_printf_i+0xa8>
 801114e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011152:	2b15      	cmp	r3, #21
 8011154:	d8f6      	bhi.n	8011144 <_printf_i+0x28>
 8011156:	a101      	add	r1, pc, #4	; (adr r1, 801115c <_printf_i+0x40>)
 8011158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801115c:	080111b5 	.word	0x080111b5
 8011160:	080111c9 	.word	0x080111c9
 8011164:	08011145 	.word	0x08011145
 8011168:	08011145 	.word	0x08011145
 801116c:	08011145 	.word	0x08011145
 8011170:	08011145 	.word	0x08011145
 8011174:	080111c9 	.word	0x080111c9
 8011178:	08011145 	.word	0x08011145
 801117c:	08011145 	.word	0x08011145
 8011180:	08011145 	.word	0x08011145
 8011184:	08011145 	.word	0x08011145
 8011188:	080112d5 	.word	0x080112d5
 801118c:	080111f9 	.word	0x080111f9
 8011190:	080112b7 	.word	0x080112b7
 8011194:	08011145 	.word	0x08011145
 8011198:	08011145 	.word	0x08011145
 801119c:	080112f7 	.word	0x080112f7
 80111a0:	08011145 	.word	0x08011145
 80111a4:	080111f9 	.word	0x080111f9
 80111a8:	08011145 	.word	0x08011145
 80111ac:	08011145 	.word	0x08011145
 80111b0:	080112bf 	.word	0x080112bf
 80111b4:	682b      	ldr	r3, [r5, #0]
 80111b6:	1d1a      	adds	r2, r3, #4
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	602a      	str	r2, [r5, #0]
 80111bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111c4:	2301      	movs	r3, #1
 80111c6:	e0a3      	b.n	8011310 <_printf_i+0x1f4>
 80111c8:	6820      	ldr	r0, [r4, #0]
 80111ca:	6829      	ldr	r1, [r5, #0]
 80111cc:	0606      	lsls	r6, r0, #24
 80111ce:	f101 0304 	add.w	r3, r1, #4
 80111d2:	d50a      	bpl.n	80111ea <_printf_i+0xce>
 80111d4:	680e      	ldr	r6, [r1, #0]
 80111d6:	602b      	str	r3, [r5, #0]
 80111d8:	2e00      	cmp	r6, #0
 80111da:	da03      	bge.n	80111e4 <_printf_i+0xc8>
 80111dc:	232d      	movs	r3, #45	; 0x2d
 80111de:	4276      	negs	r6, r6
 80111e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111e4:	485e      	ldr	r0, [pc, #376]	; (8011360 <_printf_i+0x244>)
 80111e6:	230a      	movs	r3, #10
 80111e8:	e019      	b.n	801121e <_printf_i+0x102>
 80111ea:	680e      	ldr	r6, [r1, #0]
 80111ec:	602b      	str	r3, [r5, #0]
 80111ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80111f2:	bf18      	it	ne
 80111f4:	b236      	sxthne	r6, r6
 80111f6:	e7ef      	b.n	80111d8 <_printf_i+0xbc>
 80111f8:	682b      	ldr	r3, [r5, #0]
 80111fa:	6820      	ldr	r0, [r4, #0]
 80111fc:	1d19      	adds	r1, r3, #4
 80111fe:	6029      	str	r1, [r5, #0]
 8011200:	0601      	lsls	r1, r0, #24
 8011202:	d501      	bpl.n	8011208 <_printf_i+0xec>
 8011204:	681e      	ldr	r6, [r3, #0]
 8011206:	e002      	b.n	801120e <_printf_i+0xf2>
 8011208:	0646      	lsls	r6, r0, #25
 801120a:	d5fb      	bpl.n	8011204 <_printf_i+0xe8>
 801120c:	881e      	ldrh	r6, [r3, #0]
 801120e:	4854      	ldr	r0, [pc, #336]	; (8011360 <_printf_i+0x244>)
 8011210:	2f6f      	cmp	r7, #111	; 0x6f
 8011212:	bf0c      	ite	eq
 8011214:	2308      	moveq	r3, #8
 8011216:	230a      	movne	r3, #10
 8011218:	2100      	movs	r1, #0
 801121a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801121e:	6865      	ldr	r5, [r4, #4]
 8011220:	60a5      	str	r5, [r4, #8]
 8011222:	2d00      	cmp	r5, #0
 8011224:	bfa2      	ittt	ge
 8011226:	6821      	ldrge	r1, [r4, #0]
 8011228:	f021 0104 	bicge.w	r1, r1, #4
 801122c:	6021      	strge	r1, [r4, #0]
 801122e:	b90e      	cbnz	r6, 8011234 <_printf_i+0x118>
 8011230:	2d00      	cmp	r5, #0
 8011232:	d04d      	beq.n	80112d0 <_printf_i+0x1b4>
 8011234:	4615      	mov	r5, r2
 8011236:	fbb6 f1f3 	udiv	r1, r6, r3
 801123a:	fb03 6711 	mls	r7, r3, r1, r6
 801123e:	5dc7      	ldrb	r7, [r0, r7]
 8011240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011244:	4637      	mov	r7, r6
 8011246:	42bb      	cmp	r3, r7
 8011248:	460e      	mov	r6, r1
 801124a:	d9f4      	bls.n	8011236 <_printf_i+0x11a>
 801124c:	2b08      	cmp	r3, #8
 801124e:	d10b      	bne.n	8011268 <_printf_i+0x14c>
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	07de      	lsls	r6, r3, #31
 8011254:	d508      	bpl.n	8011268 <_printf_i+0x14c>
 8011256:	6923      	ldr	r3, [r4, #16]
 8011258:	6861      	ldr	r1, [r4, #4]
 801125a:	4299      	cmp	r1, r3
 801125c:	bfde      	ittt	le
 801125e:	2330      	movle	r3, #48	; 0x30
 8011260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011268:	1b52      	subs	r2, r2, r5
 801126a:	6122      	str	r2, [r4, #16]
 801126c:	f8cd a000 	str.w	sl, [sp]
 8011270:	464b      	mov	r3, r9
 8011272:	aa03      	add	r2, sp, #12
 8011274:	4621      	mov	r1, r4
 8011276:	4640      	mov	r0, r8
 8011278:	f7ff fee2 	bl	8011040 <_printf_common>
 801127c:	3001      	adds	r0, #1
 801127e:	d14c      	bne.n	801131a <_printf_i+0x1fe>
 8011280:	f04f 30ff 	mov.w	r0, #4294967295
 8011284:	b004      	add	sp, #16
 8011286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801128a:	4835      	ldr	r0, [pc, #212]	; (8011360 <_printf_i+0x244>)
 801128c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011290:	6829      	ldr	r1, [r5, #0]
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	f851 6b04 	ldr.w	r6, [r1], #4
 8011298:	6029      	str	r1, [r5, #0]
 801129a:	061d      	lsls	r5, r3, #24
 801129c:	d514      	bpl.n	80112c8 <_printf_i+0x1ac>
 801129e:	07df      	lsls	r7, r3, #31
 80112a0:	bf44      	itt	mi
 80112a2:	f043 0320 	orrmi.w	r3, r3, #32
 80112a6:	6023      	strmi	r3, [r4, #0]
 80112a8:	b91e      	cbnz	r6, 80112b2 <_printf_i+0x196>
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	f023 0320 	bic.w	r3, r3, #32
 80112b0:	6023      	str	r3, [r4, #0]
 80112b2:	2310      	movs	r3, #16
 80112b4:	e7b0      	b.n	8011218 <_printf_i+0xfc>
 80112b6:	6823      	ldr	r3, [r4, #0]
 80112b8:	f043 0320 	orr.w	r3, r3, #32
 80112bc:	6023      	str	r3, [r4, #0]
 80112be:	2378      	movs	r3, #120	; 0x78
 80112c0:	4828      	ldr	r0, [pc, #160]	; (8011364 <_printf_i+0x248>)
 80112c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80112c6:	e7e3      	b.n	8011290 <_printf_i+0x174>
 80112c8:	0659      	lsls	r1, r3, #25
 80112ca:	bf48      	it	mi
 80112cc:	b2b6      	uxthmi	r6, r6
 80112ce:	e7e6      	b.n	801129e <_printf_i+0x182>
 80112d0:	4615      	mov	r5, r2
 80112d2:	e7bb      	b.n	801124c <_printf_i+0x130>
 80112d4:	682b      	ldr	r3, [r5, #0]
 80112d6:	6826      	ldr	r6, [r4, #0]
 80112d8:	6961      	ldr	r1, [r4, #20]
 80112da:	1d18      	adds	r0, r3, #4
 80112dc:	6028      	str	r0, [r5, #0]
 80112de:	0635      	lsls	r5, r6, #24
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	d501      	bpl.n	80112e8 <_printf_i+0x1cc>
 80112e4:	6019      	str	r1, [r3, #0]
 80112e6:	e002      	b.n	80112ee <_printf_i+0x1d2>
 80112e8:	0670      	lsls	r0, r6, #25
 80112ea:	d5fb      	bpl.n	80112e4 <_printf_i+0x1c8>
 80112ec:	8019      	strh	r1, [r3, #0]
 80112ee:	2300      	movs	r3, #0
 80112f0:	6123      	str	r3, [r4, #16]
 80112f2:	4615      	mov	r5, r2
 80112f4:	e7ba      	b.n	801126c <_printf_i+0x150>
 80112f6:	682b      	ldr	r3, [r5, #0]
 80112f8:	1d1a      	adds	r2, r3, #4
 80112fa:	602a      	str	r2, [r5, #0]
 80112fc:	681d      	ldr	r5, [r3, #0]
 80112fe:	6862      	ldr	r2, [r4, #4]
 8011300:	2100      	movs	r1, #0
 8011302:	4628      	mov	r0, r5
 8011304:	f7ee ff8c 	bl	8000220 <memchr>
 8011308:	b108      	cbz	r0, 801130e <_printf_i+0x1f2>
 801130a:	1b40      	subs	r0, r0, r5
 801130c:	6060      	str	r0, [r4, #4]
 801130e:	6863      	ldr	r3, [r4, #4]
 8011310:	6123      	str	r3, [r4, #16]
 8011312:	2300      	movs	r3, #0
 8011314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011318:	e7a8      	b.n	801126c <_printf_i+0x150>
 801131a:	6923      	ldr	r3, [r4, #16]
 801131c:	462a      	mov	r2, r5
 801131e:	4649      	mov	r1, r9
 8011320:	4640      	mov	r0, r8
 8011322:	47d0      	blx	sl
 8011324:	3001      	adds	r0, #1
 8011326:	d0ab      	beq.n	8011280 <_printf_i+0x164>
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	079b      	lsls	r3, r3, #30
 801132c:	d413      	bmi.n	8011356 <_printf_i+0x23a>
 801132e:	68e0      	ldr	r0, [r4, #12]
 8011330:	9b03      	ldr	r3, [sp, #12]
 8011332:	4298      	cmp	r0, r3
 8011334:	bfb8      	it	lt
 8011336:	4618      	movlt	r0, r3
 8011338:	e7a4      	b.n	8011284 <_printf_i+0x168>
 801133a:	2301      	movs	r3, #1
 801133c:	4632      	mov	r2, r6
 801133e:	4649      	mov	r1, r9
 8011340:	4640      	mov	r0, r8
 8011342:	47d0      	blx	sl
 8011344:	3001      	adds	r0, #1
 8011346:	d09b      	beq.n	8011280 <_printf_i+0x164>
 8011348:	3501      	adds	r5, #1
 801134a:	68e3      	ldr	r3, [r4, #12]
 801134c:	9903      	ldr	r1, [sp, #12]
 801134e:	1a5b      	subs	r3, r3, r1
 8011350:	42ab      	cmp	r3, r5
 8011352:	dcf2      	bgt.n	801133a <_printf_i+0x21e>
 8011354:	e7eb      	b.n	801132e <_printf_i+0x212>
 8011356:	2500      	movs	r5, #0
 8011358:	f104 0619 	add.w	r6, r4, #25
 801135c:	e7f5      	b.n	801134a <_printf_i+0x22e>
 801135e:	bf00      	nop
 8011360:	0801543a 	.word	0x0801543a
 8011364:	0801544b 	.word	0x0801544b

08011368 <iprintf>:
 8011368:	b40f      	push	{r0, r1, r2, r3}
 801136a:	4b0a      	ldr	r3, [pc, #40]	; (8011394 <iprintf+0x2c>)
 801136c:	b513      	push	{r0, r1, r4, lr}
 801136e:	681c      	ldr	r4, [r3, #0]
 8011370:	b124      	cbz	r4, 801137c <iprintf+0x14>
 8011372:	69a3      	ldr	r3, [r4, #24]
 8011374:	b913      	cbnz	r3, 801137c <iprintf+0x14>
 8011376:	4620      	mov	r0, r4
 8011378:	f7ff f99a 	bl	80106b0 <__sinit>
 801137c:	ab05      	add	r3, sp, #20
 801137e:	9a04      	ldr	r2, [sp, #16]
 8011380:	68a1      	ldr	r1, [r4, #8]
 8011382:	9301      	str	r3, [sp, #4]
 8011384:	4620      	mov	r0, r4
 8011386:	f001 fff7 	bl	8013378 <_vfiprintf_r>
 801138a:	b002      	add	sp, #8
 801138c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011390:	b004      	add	sp, #16
 8011392:	4770      	bx	lr
 8011394:	20000204 	.word	0x20000204

08011398 <_puts_r>:
 8011398:	b570      	push	{r4, r5, r6, lr}
 801139a:	460e      	mov	r6, r1
 801139c:	4605      	mov	r5, r0
 801139e:	b118      	cbz	r0, 80113a8 <_puts_r+0x10>
 80113a0:	6983      	ldr	r3, [r0, #24]
 80113a2:	b90b      	cbnz	r3, 80113a8 <_puts_r+0x10>
 80113a4:	f7ff f984 	bl	80106b0 <__sinit>
 80113a8:	69ab      	ldr	r3, [r5, #24]
 80113aa:	68ac      	ldr	r4, [r5, #8]
 80113ac:	b913      	cbnz	r3, 80113b4 <_puts_r+0x1c>
 80113ae:	4628      	mov	r0, r5
 80113b0:	f7ff f97e 	bl	80106b0 <__sinit>
 80113b4:	4b2c      	ldr	r3, [pc, #176]	; (8011468 <_puts_r+0xd0>)
 80113b6:	429c      	cmp	r4, r3
 80113b8:	d120      	bne.n	80113fc <_puts_r+0x64>
 80113ba:	686c      	ldr	r4, [r5, #4]
 80113bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113be:	07db      	lsls	r3, r3, #31
 80113c0:	d405      	bmi.n	80113ce <_puts_r+0x36>
 80113c2:	89a3      	ldrh	r3, [r4, #12]
 80113c4:	0598      	lsls	r0, r3, #22
 80113c6:	d402      	bmi.n	80113ce <_puts_r+0x36>
 80113c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113ca:	f7ff fa34 	bl	8010836 <__retarget_lock_acquire_recursive>
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	0719      	lsls	r1, r3, #28
 80113d2:	d51d      	bpl.n	8011410 <_puts_r+0x78>
 80113d4:	6923      	ldr	r3, [r4, #16]
 80113d6:	b1db      	cbz	r3, 8011410 <_puts_r+0x78>
 80113d8:	3e01      	subs	r6, #1
 80113da:	68a3      	ldr	r3, [r4, #8]
 80113dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80113e0:	3b01      	subs	r3, #1
 80113e2:	60a3      	str	r3, [r4, #8]
 80113e4:	bb39      	cbnz	r1, 8011436 <_puts_r+0x9e>
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	da38      	bge.n	801145c <_puts_r+0xc4>
 80113ea:	4622      	mov	r2, r4
 80113ec:	210a      	movs	r1, #10
 80113ee:	4628      	mov	r0, r5
 80113f0:	f000 f9e0 	bl	80117b4 <__swbuf_r>
 80113f4:	3001      	adds	r0, #1
 80113f6:	d011      	beq.n	801141c <_puts_r+0x84>
 80113f8:	250a      	movs	r5, #10
 80113fa:	e011      	b.n	8011420 <_puts_r+0x88>
 80113fc:	4b1b      	ldr	r3, [pc, #108]	; (801146c <_puts_r+0xd4>)
 80113fe:	429c      	cmp	r4, r3
 8011400:	d101      	bne.n	8011406 <_puts_r+0x6e>
 8011402:	68ac      	ldr	r4, [r5, #8]
 8011404:	e7da      	b.n	80113bc <_puts_r+0x24>
 8011406:	4b1a      	ldr	r3, [pc, #104]	; (8011470 <_puts_r+0xd8>)
 8011408:	429c      	cmp	r4, r3
 801140a:	bf08      	it	eq
 801140c:	68ec      	ldreq	r4, [r5, #12]
 801140e:	e7d5      	b.n	80113bc <_puts_r+0x24>
 8011410:	4621      	mov	r1, r4
 8011412:	4628      	mov	r0, r5
 8011414:	f000 fa32 	bl	801187c <__swsetup_r>
 8011418:	2800      	cmp	r0, #0
 801141a:	d0dd      	beq.n	80113d8 <_puts_r+0x40>
 801141c:	f04f 35ff 	mov.w	r5, #4294967295
 8011420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011422:	07da      	lsls	r2, r3, #31
 8011424:	d405      	bmi.n	8011432 <_puts_r+0x9a>
 8011426:	89a3      	ldrh	r3, [r4, #12]
 8011428:	059b      	lsls	r3, r3, #22
 801142a:	d402      	bmi.n	8011432 <_puts_r+0x9a>
 801142c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801142e:	f7ff fa03 	bl	8010838 <__retarget_lock_release_recursive>
 8011432:	4628      	mov	r0, r5
 8011434:	bd70      	pop	{r4, r5, r6, pc}
 8011436:	2b00      	cmp	r3, #0
 8011438:	da04      	bge.n	8011444 <_puts_r+0xac>
 801143a:	69a2      	ldr	r2, [r4, #24]
 801143c:	429a      	cmp	r2, r3
 801143e:	dc06      	bgt.n	801144e <_puts_r+0xb6>
 8011440:	290a      	cmp	r1, #10
 8011442:	d004      	beq.n	801144e <_puts_r+0xb6>
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	1c5a      	adds	r2, r3, #1
 8011448:	6022      	str	r2, [r4, #0]
 801144a:	7019      	strb	r1, [r3, #0]
 801144c:	e7c5      	b.n	80113da <_puts_r+0x42>
 801144e:	4622      	mov	r2, r4
 8011450:	4628      	mov	r0, r5
 8011452:	f000 f9af 	bl	80117b4 <__swbuf_r>
 8011456:	3001      	adds	r0, #1
 8011458:	d1bf      	bne.n	80113da <_puts_r+0x42>
 801145a:	e7df      	b.n	801141c <_puts_r+0x84>
 801145c:	6823      	ldr	r3, [r4, #0]
 801145e:	250a      	movs	r5, #10
 8011460:	1c5a      	adds	r2, r3, #1
 8011462:	6022      	str	r2, [r4, #0]
 8011464:	701d      	strb	r5, [r3, #0]
 8011466:	e7db      	b.n	8011420 <_puts_r+0x88>
 8011468:	080153e4 	.word	0x080153e4
 801146c:	08015404 	.word	0x08015404
 8011470:	080153c4 	.word	0x080153c4

08011474 <puts>:
 8011474:	4b02      	ldr	r3, [pc, #8]	; (8011480 <puts+0xc>)
 8011476:	4601      	mov	r1, r0
 8011478:	6818      	ldr	r0, [r3, #0]
 801147a:	f7ff bf8d 	b.w	8011398 <_puts_r>
 801147e:	bf00      	nop
 8011480:	20000204 	.word	0x20000204

08011484 <srand>:
 8011484:	b538      	push	{r3, r4, r5, lr}
 8011486:	4b10      	ldr	r3, [pc, #64]	; (80114c8 <srand+0x44>)
 8011488:	681d      	ldr	r5, [r3, #0]
 801148a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801148c:	4604      	mov	r4, r0
 801148e:	b9b3      	cbnz	r3, 80114be <srand+0x3a>
 8011490:	2018      	movs	r0, #24
 8011492:	f7ff f9d3 	bl	801083c <malloc>
 8011496:	4602      	mov	r2, r0
 8011498:	63a8      	str	r0, [r5, #56]	; 0x38
 801149a:	b920      	cbnz	r0, 80114a6 <srand+0x22>
 801149c:	4b0b      	ldr	r3, [pc, #44]	; (80114cc <srand+0x48>)
 801149e:	480c      	ldr	r0, [pc, #48]	; (80114d0 <srand+0x4c>)
 80114a0:	2142      	movs	r1, #66	; 0x42
 80114a2:	f000 fa59 	bl	8011958 <__assert_func>
 80114a6:	490b      	ldr	r1, [pc, #44]	; (80114d4 <srand+0x50>)
 80114a8:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <srand+0x54>)
 80114aa:	e9c0 1300 	strd	r1, r3, [r0]
 80114ae:	4b0b      	ldr	r3, [pc, #44]	; (80114dc <srand+0x58>)
 80114b0:	6083      	str	r3, [r0, #8]
 80114b2:	230b      	movs	r3, #11
 80114b4:	8183      	strh	r3, [r0, #12]
 80114b6:	2100      	movs	r1, #0
 80114b8:	2001      	movs	r0, #1
 80114ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80114be:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80114c0:	2200      	movs	r2, #0
 80114c2:	611c      	str	r4, [r3, #16]
 80114c4:	615a      	str	r2, [r3, #20]
 80114c6:	bd38      	pop	{r3, r4, r5, pc}
 80114c8:	20000204 	.word	0x20000204
 80114cc:	0801545c 	.word	0x0801545c
 80114d0:	08015473 	.word	0x08015473
 80114d4:	abcd330e 	.word	0xabcd330e
 80114d8:	e66d1234 	.word	0xe66d1234
 80114dc:	0005deec 	.word	0x0005deec

080114e0 <rand>:
 80114e0:	4b16      	ldr	r3, [pc, #88]	; (801153c <rand+0x5c>)
 80114e2:	b510      	push	{r4, lr}
 80114e4:	681c      	ldr	r4, [r3, #0]
 80114e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80114e8:	b9b3      	cbnz	r3, 8011518 <rand+0x38>
 80114ea:	2018      	movs	r0, #24
 80114ec:	f7ff f9a6 	bl	801083c <malloc>
 80114f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80114f2:	b928      	cbnz	r0, 8011500 <rand+0x20>
 80114f4:	4602      	mov	r2, r0
 80114f6:	4b12      	ldr	r3, [pc, #72]	; (8011540 <rand+0x60>)
 80114f8:	4812      	ldr	r0, [pc, #72]	; (8011544 <rand+0x64>)
 80114fa:	214e      	movs	r1, #78	; 0x4e
 80114fc:	f000 fa2c 	bl	8011958 <__assert_func>
 8011500:	4a11      	ldr	r2, [pc, #68]	; (8011548 <rand+0x68>)
 8011502:	4b12      	ldr	r3, [pc, #72]	; (801154c <rand+0x6c>)
 8011504:	e9c0 2300 	strd	r2, r3, [r0]
 8011508:	4b11      	ldr	r3, [pc, #68]	; (8011550 <rand+0x70>)
 801150a:	6083      	str	r3, [r0, #8]
 801150c:	230b      	movs	r3, #11
 801150e:	8183      	strh	r3, [r0, #12]
 8011510:	2201      	movs	r2, #1
 8011512:	2300      	movs	r3, #0
 8011514:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011518:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801151a:	4a0e      	ldr	r2, [pc, #56]	; (8011554 <rand+0x74>)
 801151c:	6920      	ldr	r0, [r4, #16]
 801151e:	6963      	ldr	r3, [r4, #20]
 8011520:	490d      	ldr	r1, [pc, #52]	; (8011558 <rand+0x78>)
 8011522:	4342      	muls	r2, r0
 8011524:	fb01 2203 	mla	r2, r1, r3, r2
 8011528:	fba0 0101 	umull	r0, r1, r0, r1
 801152c:	1c43      	adds	r3, r0, #1
 801152e:	eb42 0001 	adc.w	r0, r2, r1
 8011532:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011536:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801153a:	bd10      	pop	{r4, pc}
 801153c:	20000204 	.word	0x20000204
 8011540:	0801545c 	.word	0x0801545c
 8011544:	08015473 	.word	0x08015473
 8011548:	abcd330e 	.word	0xabcd330e
 801154c:	e66d1234 	.word	0xe66d1234
 8011550:	0005deec 	.word	0x0005deec
 8011554:	5851f42d 	.word	0x5851f42d
 8011558:	4c957f2d 	.word	0x4c957f2d

0801155c <cleanup_glue>:
 801155c:	b538      	push	{r3, r4, r5, lr}
 801155e:	460c      	mov	r4, r1
 8011560:	6809      	ldr	r1, [r1, #0]
 8011562:	4605      	mov	r5, r0
 8011564:	b109      	cbz	r1, 801156a <cleanup_glue+0xe>
 8011566:	f7ff fff9 	bl	801155c <cleanup_glue>
 801156a:	4621      	mov	r1, r4
 801156c:	4628      	mov	r0, r5
 801156e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011572:	f7ff b9af 	b.w	80108d4 <_free_r>
	...

08011578 <_reclaim_reent>:
 8011578:	4b2c      	ldr	r3, [pc, #176]	; (801162c <_reclaim_reent+0xb4>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4283      	cmp	r3, r0
 801157e:	b570      	push	{r4, r5, r6, lr}
 8011580:	4604      	mov	r4, r0
 8011582:	d051      	beq.n	8011628 <_reclaim_reent+0xb0>
 8011584:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011586:	b143      	cbz	r3, 801159a <_reclaim_reent+0x22>
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d14a      	bne.n	8011624 <_reclaim_reent+0xac>
 801158e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011590:	6819      	ldr	r1, [r3, #0]
 8011592:	b111      	cbz	r1, 801159a <_reclaim_reent+0x22>
 8011594:	4620      	mov	r0, r4
 8011596:	f7ff f99d 	bl	80108d4 <_free_r>
 801159a:	6961      	ldr	r1, [r4, #20]
 801159c:	b111      	cbz	r1, 80115a4 <_reclaim_reent+0x2c>
 801159e:	4620      	mov	r0, r4
 80115a0:	f7ff f998 	bl	80108d4 <_free_r>
 80115a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80115a6:	b111      	cbz	r1, 80115ae <_reclaim_reent+0x36>
 80115a8:	4620      	mov	r0, r4
 80115aa:	f7ff f993 	bl	80108d4 <_free_r>
 80115ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80115b0:	b111      	cbz	r1, 80115b8 <_reclaim_reent+0x40>
 80115b2:	4620      	mov	r0, r4
 80115b4:	f7ff f98e 	bl	80108d4 <_free_r>
 80115b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80115ba:	b111      	cbz	r1, 80115c2 <_reclaim_reent+0x4a>
 80115bc:	4620      	mov	r0, r4
 80115be:	f7ff f989 	bl	80108d4 <_free_r>
 80115c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80115c4:	b111      	cbz	r1, 80115cc <_reclaim_reent+0x54>
 80115c6:	4620      	mov	r0, r4
 80115c8:	f7ff f984 	bl	80108d4 <_free_r>
 80115cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80115ce:	b111      	cbz	r1, 80115d6 <_reclaim_reent+0x5e>
 80115d0:	4620      	mov	r0, r4
 80115d2:	f7ff f97f 	bl	80108d4 <_free_r>
 80115d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80115d8:	b111      	cbz	r1, 80115e0 <_reclaim_reent+0x68>
 80115da:	4620      	mov	r0, r4
 80115dc:	f7ff f97a 	bl	80108d4 <_free_r>
 80115e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115e2:	b111      	cbz	r1, 80115ea <_reclaim_reent+0x72>
 80115e4:	4620      	mov	r0, r4
 80115e6:	f7ff f975 	bl	80108d4 <_free_r>
 80115ea:	69a3      	ldr	r3, [r4, #24]
 80115ec:	b1e3      	cbz	r3, 8011628 <_reclaim_reent+0xb0>
 80115ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80115f0:	4620      	mov	r0, r4
 80115f2:	4798      	blx	r3
 80115f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80115f6:	b1b9      	cbz	r1, 8011628 <_reclaim_reent+0xb0>
 80115f8:	4620      	mov	r0, r4
 80115fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115fe:	f7ff bfad 	b.w	801155c <cleanup_glue>
 8011602:	5949      	ldr	r1, [r1, r5]
 8011604:	b941      	cbnz	r1, 8011618 <_reclaim_reent+0xa0>
 8011606:	3504      	adds	r5, #4
 8011608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801160a:	2d80      	cmp	r5, #128	; 0x80
 801160c:	68d9      	ldr	r1, [r3, #12]
 801160e:	d1f8      	bne.n	8011602 <_reclaim_reent+0x8a>
 8011610:	4620      	mov	r0, r4
 8011612:	f7ff f95f 	bl	80108d4 <_free_r>
 8011616:	e7ba      	b.n	801158e <_reclaim_reent+0x16>
 8011618:	680e      	ldr	r6, [r1, #0]
 801161a:	4620      	mov	r0, r4
 801161c:	f7ff f95a 	bl	80108d4 <_free_r>
 8011620:	4631      	mov	r1, r6
 8011622:	e7ef      	b.n	8011604 <_reclaim_reent+0x8c>
 8011624:	2500      	movs	r5, #0
 8011626:	e7ef      	b.n	8011608 <_reclaim_reent+0x90>
 8011628:	bd70      	pop	{r4, r5, r6, pc}
 801162a:	bf00      	nop
 801162c:	20000204 	.word	0x20000204

08011630 <_sbrk_r>:
 8011630:	b538      	push	{r3, r4, r5, lr}
 8011632:	4d06      	ldr	r5, [pc, #24]	; (801164c <_sbrk_r+0x1c>)
 8011634:	2300      	movs	r3, #0
 8011636:	4604      	mov	r4, r0
 8011638:	4608      	mov	r0, r1
 801163a:	602b      	str	r3, [r5, #0]
 801163c:	f002 f8f6 	bl	801382c <_sbrk>
 8011640:	1c43      	adds	r3, r0, #1
 8011642:	d102      	bne.n	801164a <_sbrk_r+0x1a>
 8011644:	682b      	ldr	r3, [r5, #0]
 8011646:	b103      	cbz	r3, 801164a <_sbrk_r+0x1a>
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	bd38      	pop	{r3, r4, r5, pc}
 801164c:	2000a9a4 	.word	0x2000a9a4

08011650 <siprintf>:
 8011650:	b40e      	push	{r1, r2, r3}
 8011652:	b500      	push	{lr}
 8011654:	b09c      	sub	sp, #112	; 0x70
 8011656:	ab1d      	add	r3, sp, #116	; 0x74
 8011658:	9002      	str	r0, [sp, #8]
 801165a:	9006      	str	r0, [sp, #24]
 801165c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011660:	4809      	ldr	r0, [pc, #36]	; (8011688 <siprintf+0x38>)
 8011662:	9107      	str	r1, [sp, #28]
 8011664:	9104      	str	r1, [sp, #16]
 8011666:	4909      	ldr	r1, [pc, #36]	; (801168c <siprintf+0x3c>)
 8011668:	f853 2b04 	ldr.w	r2, [r3], #4
 801166c:	9105      	str	r1, [sp, #20]
 801166e:	6800      	ldr	r0, [r0, #0]
 8011670:	9301      	str	r3, [sp, #4]
 8011672:	a902      	add	r1, sp, #8
 8011674:	f001 fd56 	bl	8013124 <_svfiprintf_r>
 8011678:	9b02      	ldr	r3, [sp, #8]
 801167a:	2200      	movs	r2, #0
 801167c:	701a      	strb	r2, [r3, #0]
 801167e:	b01c      	add	sp, #112	; 0x70
 8011680:	f85d eb04 	ldr.w	lr, [sp], #4
 8011684:	b003      	add	sp, #12
 8011686:	4770      	bx	lr
 8011688:	20000204 	.word	0x20000204
 801168c:	ffff0208 	.word	0xffff0208

08011690 <__sread>:
 8011690:	b510      	push	{r4, lr}
 8011692:	460c      	mov	r4, r1
 8011694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011698:	f001 ff9e 	bl	80135d8 <_read_r>
 801169c:	2800      	cmp	r0, #0
 801169e:	bfab      	itete	ge
 80116a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116a2:	89a3      	ldrhlt	r3, [r4, #12]
 80116a4:	181b      	addge	r3, r3, r0
 80116a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116aa:	bfac      	ite	ge
 80116ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80116ae:	81a3      	strhlt	r3, [r4, #12]
 80116b0:	bd10      	pop	{r4, pc}

080116b2 <__swrite>:
 80116b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116b6:	461f      	mov	r7, r3
 80116b8:	898b      	ldrh	r3, [r1, #12]
 80116ba:	05db      	lsls	r3, r3, #23
 80116bc:	4605      	mov	r5, r0
 80116be:	460c      	mov	r4, r1
 80116c0:	4616      	mov	r6, r2
 80116c2:	d505      	bpl.n	80116d0 <__swrite+0x1e>
 80116c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116c8:	2302      	movs	r3, #2
 80116ca:	2200      	movs	r2, #0
 80116cc:	f001 f8c6 	bl	801285c <_lseek_r>
 80116d0:	89a3      	ldrh	r3, [r4, #12]
 80116d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116da:	81a3      	strh	r3, [r4, #12]
 80116dc:	4632      	mov	r2, r6
 80116de:	463b      	mov	r3, r7
 80116e0:	4628      	mov	r0, r5
 80116e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116e6:	f000 b8b7 	b.w	8011858 <_write_r>

080116ea <__sseek>:
 80116ea:	b510      	push	{r4, lr}
 80116ec:	460c      	mov	r4, r1
 80116ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f2:	f001 f8b3 	bl	801285c <_lseek_r>
 80116f6:	1c43      	adds	r3, r0, #1
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	bf15      	itete	ne
 80116fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80116fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011706:	81a3      	strheq	r3, [r4, #12]
 8011708:	bf18      	it	ne
 801170a:	81a3      	strhne	r3, [r4, #12]
 801170c:	bd10      	pop	{r4, pc}

0801170e <__sclose>:
 801170e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011712:	f000 b93f 	b.w	8011994 <_close_r>
	...

08011718 <strncasecmp>:
 8011718:	b570      	push	{r4, r5, r6, lr}
 801171a:	4e0f      	ldr	r6, [pc, #60]	; (8011758 <strncasecmp+0x40>)
 801171c:	4604      	mov	r4, r0
 801171e:	440a      	add	r2, r1
 8011720:	428a      	cmp	r2, r1
 8011722:	d101      	bne.n	8011728 <strncasecmp+0x10>
 8011724:	2000      	movs	r0, #0
 8011726:	e013      	b.n	8011750 <strncasecmp+0x38>
 8011728:	f814 3b01 	ldrb.w	r3, [r4], #1
 801172c:	5d98      	ldrb	r0, [r3, r6]
 801172e:	f000 0003 	and.w	r0, r0, #3
 8011732:	2801      	cmp	r0, #1
 8011734:	f811 0b01 	ldrb.w	r0, [r1], #1
 8011738:	5c35      	ldrb	r5, [r6, r0]
 801173a:	f005 0503 	and.w	r5, r5, #3
 801173e:	bf08      	it	eq
 8011740:	3320      	addeq	r3, #32
 8011742:	2d01      	cmp	r5, #1
 8011744:	bf08      	it	eq
 8011746:	3020      	addeq	r0, #32
 8011748:	1a1b      	subs	r3, r3, r0
 801174a:	d102      	bne.n	8011752 <strncasecmp+0x3a>
 801174c:	2800      	cmp	r0, #0
 801174e:	d1e7      	bne.n	8011720 <strncasecmp+0x8>
 8011750:	bd70      	pop	{r4, r5, r6, pc}
 8011752:	4618      	mov	r0, r3
 8011754:	e7fc      	b.n	8011750 <strncasecmp+0x38>
 8011756:	bf00      	nop
 8011758:	0801550b 	.word	0x0801550b

0801175c <strncpy>:
 801175c:	b510      	push	{r4, lr}
 801175e:	3901      	subs	r1, #1
 8011760:	4603      	mov	r3, r0
 8011762:	b132      	cbz	r2, 8011772 <strncpy+0x16>
 8011764:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011768:	f803 4b01 	strb.w	r4, [r3], #1
 801176c:	3a01      	subs	r2, #1
 801176e:	2c00      	cmp	r4, #0
 8011770:	d1f7      	bne.n	8011762 <strncpy+0x6>
 8011772:	441a      	add	r2, r3
 8011774:	2100      	movs	r1, #0
 8011776:	4293      	cmp	r3, r2
 8011778:	d100      	bne.n	801177c <strncpy+0x20>
 801177a:	bd10      	pop	{r4, pc}
 801177c:	f803 1b01 	strb.w	r1, [r3], #1
 8011780:	e7f9      	b.n	8011776 <strncpy+0x1a>
	...

08011784 <viprintf>:
 8011784:	b513      	push	{r0, r1, r4, lr}
 8011786:	460b      	mov	r3, r1
 8011788:	4909      	ldr	r1, [pc, #36]	; (80117b0 <viprintf+0x2c>)
 801178a:	680c      	ldr	r4, [r1, #0]
 801178c:	4602      	mov	r2, r0
 801178e:	b144      	cbz	r4, 80117a2 <viprintf+0x1e>
 8011790:	69a1      	ldr	r1, [r4, #24]
 8011792:	b931      	cbnz	r1, 80117a2 <viprintf+0x1e>
 8011794:	e9cd 0300 	strd	r0, r3, [sp]
 8011798:	4620      	mov	r0, r4
 801179a:	f7fe ff89 	bl	80106b0 <__sinit>
 801179e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117a2:	68a1      	ldr	r1, [r4, #8]
 80117a4:	4620      	mov	r0, r4
 80117a6:	b002      	add	sp, #8
 80117a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117ac:	f001 bde4 	b.w	8013378 <_vfiprintf_r>
 80117b0:	20000204 	.word	0x20000204

080117b4 <__swbuf_r>:
 80117b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b6:	460e      	mov	r6, r1
 80117b8:	4614      	mov	r4, r2
 80117ba:	4605      	mov	r5, r0
 80117bc:	b118      	cbz	r0, 80117c6 <__swbuf_r+0x12>
 80117be:	6983      	ldr	r3, [r0, #24]
 80117c0:	b90b      	cbnz	r3, 80117c6 <__swbuf_r+0x12>
 80117c2:	f7fe ff75 	bl	80106b0 <__sinit>
 80117c6:	4b21      	ldr	r3, [pc, #132]	; (801184c <__swbuf_r+0x98>)
 80117c8:	429c      	cmp	r4, r3
 80117ca:	d12b      	bne.n	8011824 <__swbuf_r+0x70>
 80117cc:	686c      	ldr	r4, [r5, #4]
 80117ce:	69a3      	ldr	r3, [r4, #24]
 80117d0:	60a3      	str	r3, [r4, #8]
 80117d2:	89a3      	ldrh	r3, [r4, #12]
 80117d4:	071a      	lsls	r2, r3, #28
 80117d6:	d52f      	bpl.n	8011838 <__swbuf_r+0x84>
 80117d8:	6923      	ldr	r3, [r4, #16]
 80117da:	b36b      	cbz	r3, 8011838 <__swbuf_r+0x84>
 80117dc:	6923      	ldr	r3, [r4, #16]
 80117de:	6820      	ldr	r0, [r4, #0]
 80117e0:	1ac0      	subs	r0, r0, r3
 80117e2:	6963      	ldr	r3, [r4, #20]
 80117e4:	b2f6      	uxtb	r6, r6
 80117e6:	4283      	cmp	r3, r0
 80117e8:	4637      	mov	r7, r6
 80117ea:	dc04      	bgt.n	80117f6 <__swbuf_r+0x42>
 80117ec:	4621      	mov	r1, r4
 80117ee:	4628      	mov	r0, r5
 80117f0:	f000 ffe2 	bl	80127b8 <_fflush_r>
 80117f4:	bb30      	cbnz	r0, 8011844 <__swbuf_r+0x90>
 80117f6:	68a3      	ldr	r3, [r4, #8]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	60a3      	str	r3, [r4, #8]
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	1c5a      	adds	r2, r3, #1
 8011800:	6022      	str	r2, [r4, #0]
 8011802:	701e      	strb	r6, [r3, #0]
 8011804:	6963      	ldr	r3, [r4, #20]
 8011806:	3001      	adds	r0, #1
 8011808:	4283      	cmp	r3, r0
 801180a:	d004      	beq.n	8011816 <__swbuf_r+0x62>
 801180c:	89a3      	ldrh	r3, [r4, #12]
 801180e:	07db      	lsls	r3, r3, #31
 8011810:	d506      	bpl.n	8011820 <__swbuf_r+0x6c>
 8011812:	2e0a      	cmp	r6, #10
 8011814:	d104      	bne.n	8011820 <__swbuf_r+0x6c>
 8011816:	4621      	mov	r1, r4
 8011818:	4628      	mov	r0, r5
 801181a:	f000 ffcd 	bl	80127b8 <_fflush_r>
 801181e:	b988      	cbnz	r0, 8011844 <__swbuf_r+0x90>
 8011820:	4638      	mov	r0, r7
 8011822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011824:	4b0a      	ldr	r3, [pc, #40]	; (8011850 <__swbuf_r+0x9c>)
 8011826:	429c      	cmp	r4, r3
 8011828:	d101      	bne.n	801182e <__swbuf_r+0x7a>
 801182a:	68ac      	ldr	r4, [r5, #8]
 801182c:	e7cf      	b.n	80117ce <__swbuf_r+0x1a>
 801182e:	4b09      	ldr	r3, [pc, #36]	; (8011854 <__swbuf_r+0xa0>)
 8011830:	429c      	cmp	r4, r3
 8011832:	bf08      	it	eq
 8011834:	68ec      	ldreq	r4, [r5, #12]
 8011836:	e7ca      	b.n	80117ce <__swbuf_r+0x1a>
 8011838:	4621      	mov	r1, r4
 801183a:	4628      	mov	r0, r5
 801183c:	f000 f81e 	bl	801187c <__swsetup_r>
 8011840:	2800      	cmp	r0, #0
 8011842:	d0cb      	beq.n	80117dc <__swbuf_r+0x28>
 8011844:	f04f 37ff 	mov.w	r7, #4294967295
 8011848:	e7ea      	b.n	8011820 <__swbuf_r+0x6c>
 801184a:	bf00      	nop
 801184c:	080153e4 	.word	0x080153e4
 8011850:	08015404 	.word	0x08015404
 8011854:	080153c4 	.word	0x080153c4

08011858 <_write_r>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4d07      	ldr	r5, [pc, #28]	; (8011878 <_write_r+0x20>)
 801185c:	4604      	mov	r4, r0
 801185e:	4608      	mov	r0, r1
 8011860:	4611      	mov	r1, r2
 8011862:	2200      	movs	r2, #0
 8011864:	602a      	str	r2, [r5, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	f001 ffee 	bl	8013848 <_write>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d102      	bne.n	8011876 <_write_r+0x1e>
 8011870:	682b      	ldr	r3, [r5, #0]
 8011872:	b103      	cbz	r3, 8011876 <_write_r+0x1e>
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	bd38      	pop	{r3, r4, r5, pc}
 8011878:	2000a9a4 	.word	0x2000a9a4

0801187c <__swsetup_r>:
 801187c:	4b32      	ldr	r3, [pc, #200]	; (8011948 <__swsetup_r+0xcc>)
 801187e:	b570      	push	{r4, r5, r6, lr}
 8011880:	681d      	ldr	r5, [r3, #0]
 8011882:	4606      	mov	r6, r0
 8011884:	460c      	mov	r4, r1
 8011886:	b125      	cbz	r5, 8011892 <__swsetup_r+0x16>
 8011888:	69ab      	ldr	r3, [r5, #24]
 801188a:	b913      	cbnz	r3, 8011892 <__swsetup_r+0x16>
 801188c:	4628      	mov	r0, r5
 801188e:	f7fe ff0f 	bl	80106b0 <__sinit>
 8011892:	4b2e      	ldr	r3, [pc, #184]	; (801194c <__swsetup_r+0xd0>)
 8011894:	429c      	cmp	r4, r3
 8011896:	d10f      	bne.n	80118b8 <__swsetup_r+0x3c>
 8011898:	686c      	ldr	r4, [r5, #4]
 801189a:	89a3      	ldrh	r3, [r4, #12]
 801189c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118a0:	0719      	lsls	r1, r3, #28
 80118a2:	d42c      	bmi.n	80118fe <__swsetup_r+0x82>
 80118a4:	06dd      	lsls	r5, r3, #27
 80118a6:	d411      	bmi.n	80118cc <__swsetup_r+0x50>
 80118a8:	2309      	movs	r3, #9
 80118aa:	6033      	str	r3, [r6, #0]
 80118ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118b0:	81a3      	strh	r3, [r4, #12]
 80118b2:	f04f 30ff 	mov.w	r0, #4294967295
 80118b6:	e03e      	b.n	8011936 <__swsetup_r+0xba>
 80118b8:	4b25      	ldr	r3, [pc, #148]	; (8011950 <__swsetup_r+0xd4>)
 80118ba:	429c      	cmp	r4, r3
 80118bc:	d101      	bne.n	80118c2 <__swsetup_r+0x46>
 80118be:	68ac      	ldr	r4, [r5, #8]
 80118c0:	e7eb      	b.n	801189a <__swsetup_r+0x1e>
 80118c2:	4b24      	ldr	r3, [pc, #144]	; (8011954 <__swsetup_r+0xd8>)
 80118c4:	429c      	cmp	r4, r3
 80118c6:	bf08      	it	eq
 80118c8:	68ec      	ldreq	r4, [r5, #12]
 80118ca:	e7e6      	b.n	801189a <__swsetup_r+0x1e>
 80118cc:	0758      	lsls	r0, r3, #29
 80118ce:	d512      	bpl.n	80118f6 <__swsetup_r+0x7a>
 80118d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118d2:	b141      	cbz	r1, 80118e6 <__swsetup_r+0x6a>
 80118d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118d8:	4299      	cmp	r1, r3
 80118da:	d002      	beq.n	80118e2 <__swsetup_r+0x66>
 80118dc:	4630      	mov	r0, r6
 80118de:	f7fe fff9 	bl	80108d4 <_free_r>
 80118e2:	2300      	movs	r3, #0
 80118e4:	6363      	str	r3, [r4, #52]	; 0x34
 80118e6:	89a3      	ldrh	r3, [r4, #12]
 80118e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118ec:	81a3      	strh	r3, [r4, #12]
 80118ee:	2300      	movs	r3, #0
 80118f0:	6063      	str	r3, [r4, #4]
 80118f2:	6923      	ldr	r3, [r4, #16]
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	f043 0308 	orr.w	r3, r3, #8
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	6923      	ldr	r3, [r4, #16]
 8011900:	b94b      	cbnz	r3, 8011916 <__swsetup_r+0x9a>
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801190c:	d003      	beq.n	8011916 <__swsetup_r+0x9a>
 801190e:	4621      	mov	r1, r4
 8011910:	4630      	mov	r0, r6
 8011912:	f000 ffdb 	bl	80128cc <__smakebuf_r>
 8011916:	89a0      	ldrh	r0, [r4, #12]
 8011918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801191c:	f010 0301 	ands.w	r3, r0, #1
 8011920:	d00a      	beq.n	8011938 <__swsetup_r+0xbc>
 8011922:	2300      	movs	r3, #0
 8011924:	60a3      	str	r3, [r4, #8]
 8011926:	6963      	ldr	r3, [r4, #20]
 8011928:	425b      	negs	r3, r3
 801192a:	61a3      	str	r3, [r4, #24]
 801192c:	6923      	ldr	r3, [r4, #16]
 801192e:	b943      	cbnz	r3, 8011942 <__swsetup_r+0xc6>
 8011930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011934:	d1ba      	bne.n	80118ac <__swsetup_r+0x30>
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	0781      	lsls	r1, r0, #30
 801193a:	bf58      	it	pl
 801193c:	6963      	ldrpl	r3, [r4, #20]
 801193e:	60a3      	str	r3, [r4, #8]
 8011940:	e7f4      	b.n	801192c <__swsetup_r+0xb0>
 8011942:	2000      	movs	r0, #0
 8011944:	e7f7      	b.n	8011936 <__swsetup_r+0xba>
 8011946:	bf00      	nop
 8011948:	20000204 	.word	0x20000204
 801194c:	080153e4 	.word	0x080153e4
 8011950:	08015404 	.word	0x08015404
 8011954:	080153c4 	.word	0x080153c4

08011958 <__assert_func>:
 8011958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801195a:	4614      	mov	r4, r2
 801195c:	461a      	mov	r2, r3
 801195e:	4b09      	ldr	r3, [pc, #36]	; (8011984 <__assert_func+0x2c>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	4605      	mov	r5, r0
 8011964:	68d8      	ldr	r0, [r3, #12]
 8011966:	b14c      	cbz	r4, 801197c <__assert_func+0x24>
 8011968:	4b07      	ldr	r3, [pc, #28]	; (8011988 <__assert_func+0x30>)
 801196a:	9100      	str	r1, [sp, #0]
 801196c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011970:	4906      	ldr	r1, [pc, #24]	; (801198c <__assert_func+0x34>)
 8011972:	462b      	mov	r3, r5
 8011974:	f000 ff5c 	bl	8012830 <fiprintf>
 8011978:	f001 fe40 	bl	80135fc <abort>
 801197c:	4b04      	ldr	r3, [pc, #16]	; (8011990 <__assert_func+0x38>)
 801197e:	461c      	mov	r4, r3
 8011980:	e7f3      	b.n	801196a <__assert_func+0x12>
 8011982:	bf00      	nop
 8011984:	20000204 	.word	0x20000204
 8011988:	080154ce 	.word	0x080154ce
 801198c:	080154db 	.word	0x080154db
 8011990:	08015509 	.word	0x08015509

08011994 <_close_r>:
 8011994:	b538      	push	{r3, r4, r5, lr}
 8011996:	4d06      	ldr	r5, [pc, #24]	; (80119b0 <_close_r+0x1c>)
 8011998:	2300      	movs	r3, #0
 801199a:	4604      	mov	r4, r0
 801199c:	4608      	mov	r0, r1
 801199e:	602b      	str	r3, [r5, #0]
 80119a0:	f001 ff0c 	bl	80137bc <_close>
 80119a4:	1c43      	adds	r3, r0, #1
 80119a6:	d102      	bne.n	80119ae <_close_r+0x1a>
 80119a8:	682b      	ldr	r3, [r5, #0]
 80119aa:	b103      	cbz	r3, 80119ae <_close_r+0x1a>
 80119ac:	6023      	str	r3, [r4, #0]
 80119ae:	bd38      	pop	{r3, r4, r5, pc}
 80119b0:	2000a9a4 	.word	0x2000a9a4

080119b4 <quorem>:
 80119b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b8:	6903      	ldr	r3, [r0, #16]
 80119ba:	690c      	ldr	r4, [r1, #16]
 80119bc:	42a3      	cmp	r3, r4
 80119be:	4607      	mov	r7, r0
 80119c0:	f2c0 8081 	blt.w	8011ac6 <quorem+0x112>
 80119c4:	3c01      	subs	r4, #1
 80119c6:	f101 0814 	add.w	r8, r1, #20
 80119ca:	f100 0514 	add.w	r5, r0, #20
 80119ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119d2:	9301      	str	r3, [sp, #4]
 80119d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80119d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119dc:	3301      	adds	r3, #1
 80119de:	429a      	cmp	r2, r3
 80119e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80119e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80119e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80119ec:	d331      	bcc.n	8011a52 <quorem+0x9e>
 80119ee:	f04f 0e00 	mov.w	lr, #0
 80119f2:	4640      	mov	r0, r8
 80119f4:	46ac      	mov	ip, r5
 80119f6:	46f2      	mov	sl, lr
 80119f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80119fc:	b293      	uxth	r3, r2
 80119fe:	fb06 e303 	mla	r3, r6, r3, lr
 8011a02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	ebaa 0303 	sub.w	r3, sl, r3
 8011a0c:	f8dc a000 	ldr.w	sl, [ip]
 8011a10:	0c12      	lsrs	r2, r2, #16
 8011a12:	fa13 f38a 	uxtah	r3, r3, sl
 8011a16:	fb06 e202 	mla	r2, r6, r2, lr
 8011a1a:	9300      	str	r3, [sp, #0]
 8011a1c:	9b00      	ldr	r3, [sp, #0]
 8011a1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a22:	b292      	uxth	r2, r2
 8011a24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a30:	4581      	cmp	r9, r0
 8011a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a36:	f84c 3b04 	str.w	r3, [ip], #4
 8011a3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a3e:	d2db      	bcs.n	80119f8 <quorem+0x44>
 8011a40:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a44:	b92b      	cbnz	r3, 8011a52 <quorem+0x9e>
 8011a46:	9b01      	ldr	r3, [sp, #4]
 8011a48:	3b04      	subs	r3, #4
 8011a4a:	429d      	cmp	r5, r3
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	d32e      	bcc.n	8011aae <quorem+0xfa>
 8011a50:	613c      	str	r4, [r7, #16]
 8011a52:	4638      	mov	r0, r7
 8011a54:	f001 fa08 	bl	8012e68 <__mcmp>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	db24      	blt.n	8011aa6 <quorem+0xf2>
 8011a5c:	3601      	adds	r6, #1
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f04f 0c00 	mov.w	ip, #0
 8011a64:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a68:	f8d0 e000 	ldr.w	lr, [r0]
 8011a6c:	b293      	uxth	r3, r2
 8011a6e:	ebac 0303 	sub.w	r3, ip, r3
 8011a72:	0c12      	lsrs	r2, r2, #16
 8011a74:	fa13 f38e 	uxtah	r3, r3, lr
 8011a78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a86:	45c1      	cmp	r9, r8
 8011a88:	f840 3b04 	str.w	r3, [r0], #4
 8011a8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011a90:	d2e8      	bcs.n	8011a64 <quorem+0xb0>
 8011a92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a9a:	b922      	cbnz	r2, 8011aa6 <quorem+0xf2>
 8011a9c:	3b04      	subs	r3, #4
 8011a9e:	429d      	cmp	r5, r3
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	d30a      	bcc.n	8011aba <quorem+0x106>
 8011aa4:	613c      	str	r4, [r7, #16]
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	b003      	add	sp, #12
 8011aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aae:	6812      	ldr	r2, [r2, #0]
 8011ab0:	3b04      	subs	r3, #4
 8011ab2:	2a00      	cmp	r2, #0
 8011ab4:	d1cc      	bne.n	8011a50 <quorem+0x9c>
 8011ab6:	3c01      	subs	r4, #1
 8011ab8:	e7c7      	b.n	8011a4a <quorem+0x96>
 8011aba:	6812      	ldr	r2, [r2, #0]
 8011abc:	3b04      	subs	r3, #4
 8011abe:	2a00      	cmp	r2, #0
 8011ac0:	d1f0      	bne.n	8011aa4 <quorem+0xf0>
 8011ac2:	3c01      	subs	r4, #1
 8011ac4:	e7eb      	b.n	8011a9e <quorem+0xea>
 8011ac6:	2000      	movs	r0, #0
 8011ac8:	e7ee      	b.n	8011aa8 <quorem+0xf4>
 8011aca:	0000      	movs	r0, r0
 8011acc:	0000      	movs	r0, r0
	...

08011ad0 <_dtoa_r>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	ed2d 8b04 	vpush	{d8-d9}
 8011ad8:	ec57 6b10 	vmov	r6, r7, d0
 8011adc:	b093      	sub	sp, #76	; 0x4c
 8011ade:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011ae0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011ae4:	9106      	str	r1, [sp, #24]
 8011ae6:	ee10 aa10 	vmov	sl, s0
 8011aea:	4604      	mov	r4, r0
 8011aec:	9209      	str	r2, [sp, #36]	; 0x24
 8011aee:	930c      	str	r3, [sp, #48]	; 0x30
 8011af0:	46bb      	mov	fp, r7
 8011af2:	b975      	cbnz	r5, 8011b12 <_dtoa_r+0x42>
 8011af4:	2010      	movs	r0, #16
 8011af6:	f7fe fea1 	bl	801083c <malloc>
 8011afa:	4602      	mov	r2, r0
 8011afc:	6260      	str	r0, [r4, #36]	; 0x24
 8011afe:	b920      	cbnz	r0, 8011b0a <_dtoa_r+0x3a>
 8011b00:	4ba7      	ldr	r3, [pc, #668]	; (8011da0 <_dtoa_r+0x2d0>)
 8011b02:	21ea      	movs	r1, #234	; 0xea
 8011b04:	48a7      	ldr	r0, [pc, #668]	; (8011da4 <_dtoa_r+0x2d4>)
 8011b06:	f7ff ff27 	bl	8011958 <__assert_func>
 8011b0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b0e:	6005      	str	r5, [r0, #0]
 8011b10:	60c5      	str	r5, [r0, #12]
 8011b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b14:	6819      	ldr	r1, [r3, #0]
 8011b16:	b151      	cbz	r1, 8011b2e <_dtoa_r+0x5e>
 8011b18:	685a      	ldr	r2, [r3, #4]
 8011b1a:	604a      	str	r2, [r1, #4]
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	4093      	lsls	r3, r2
 8011b20:	608b      	str	r3, [r1, #8]
 8011b22:	4620      	mov	r0, r4
 8011b24:	f000 ff5e 	bl	80129e4 <_Bfree>
 8011b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	601a      	str	r2, [r3, #0]
 8011b2e:	1e3b      	subs	r3, r7, #0
 8011b30:	bfaa      	itet	ge
 8011b32:	2300      	movge	r3, #0
 8011b34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011b38:	f8c8 3000 	strge.w	r3, [r8]
 8011b3c:	4b9a      	ldr	r3, [pc, #616]	; (8011da8 <_dtoa_r+0x2d8>)
 8011b3e:	bfbc      	itt	lt
 8011b40:	2201      	movlt	r2, #1
 8011b42:	f8c8 2000 	strlt.w	r2, [r8]
 8011b46:	ea33 030b 	bics.w	r3, r3, fp
 8011b4a:	d11b      	bne.n	8011b84 <_dtoa_r+0xb4>
 8011b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b52:	6013      	str	r3, [r2, #0]
 8011b54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b58:	4333      	orrs	r3, r6
 8011b5a:	f000 8592 	beq.w	8012682 <_dtoa_r+0xbb2>
 8011b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b60:	b963      	cbnz	r3, 8011b7c <_dtoa_r+0xac>
 8011b62:	4b92      	ldr	r3, [pc, #584]	; (8011dac <_dtoa_r+0x2dc>)
 8011b64:	e022      	b.n	8011bac <_dtoa_r+0xdc>
 8011b66:	4b92      	ldr	r3, [pc, #584]	; (8011db0 <_dtoa_r+0x2e0>)
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	3308      	adds	r3, #8
 8011b6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b6e:	6013      	str	r3, [r2, #0]
 8011b70:	9801      	ldr	r0, [sp, #4]
 8011b72:	b013      	add	sp, #76	; 0x4c
 8011b74:	ecbd 8b04 	vpop	{d8-d9}
 8011b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7c:	4b8b      	ldr	r3, [pc, #556]	; (8011dac <_dtoa_r+0x2dc>)
 8011b7e:	9301      	str	r3, [sp, #4]
 8011b80:	3303      	adds	r3, #3
 8011b82:	e7f3      	b.n	8011b6c <_dtoa_r+0x9c>
 8011b84:	2200      	movs	r2, #0
 8011b86:	2300      	movs	r3, #0
 8011b88:	4650      	mov	r0, sl
 8011b8a:	4659      	mov	r1, fp
 8011b8c:	f7ee ffbc 	bl	8000b08 <__aeabi_dcmpeq>
 8011b90:	ec4b ab19 	vmov	d9, sl, fp
 8011b94:	4680      	mov	r8, r0
 8011b96:	b158      	cbz	r0, 8011bb0 <_dtoa_r+0xe0>
 8011b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	6013      	str	r3, [r2, #0]
 8011b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f000 856b 	beq.w	801267c <_dtoa_r+0xbac>
 8011ba6:	4883      	ldr	r0, [pc, #524]	; (8011db4 <_dtoa_r+0x2e4>)
 8011ba8:	6018      	str	r0, [r3, #0]
 8011baa:	1e43      	subs	r3, r0, #1
 8011bac:	9301      	str	r3, [sp, #4]
 8011bae:	e7df      	b.n	8011b70 <_dtoa_r+0xa0>
 8011bb0:	ec4b ab10 	vmov	d0, sl, fp
 8011bb4:	aa10      	add	r2, sp, #64	; 0x40
 8011bb6:	a911      	add	r1, sp, #68	; 0x44
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f001 f9fb 	bl	8012fb4 <__d2b>
 8011bbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011bc2:	ee08 0a10 	vmov	s16, r0
 8011bc6:	2d00      	cmp	r5, #0
 8011bc8:	f000 8084 	beq.w	8011cd4 <_dtoa_r+0x204>
 8011bcc:	ee19 3a90 	vmov	r3, s19
 8011bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011bd8:	4656      	mov	r6, sl
 8011bda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011be2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011be6:	4b74      	ldr	r3, [pc, #464]	; (8011db8 <_dtoa_r+0x2e8>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	4630      	mov	r0, r6
 8011bec:	4639      	mov	r1, r7
 8011bee:	f7ee fb6b 	bl	80002c8 <__aeabi_dsub>
 8011bf2:	a365      	add	r3, pc, #404	; (adr r3, 8011d88 <_dtoa_r+0x2b8>)
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	f7ee fd1e 	bl	8000638 <__aeabi_dmul>
 8011bfc:	a364      	add	r3, pc, #400	; (adr r3, 8011d90 <_dtoa_r+0x2c0>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	f7ee fb63 	bl	80002cc <__adddf3>
 8011c06:	4606      	mov	r6, r0
 8011c08:	4628      	mov	r0, r5
 8011c0a:	460f      	mov	r7, r1
 8011c0c:	f7ee fcaa 	bl	8000564 <__aeabi_i2d>
 8011c10:	a361      	add	r3, pc, #388	; (adr r3, 8011d98 <_dtoa_r+0x2c8>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	f7ee fd0f 	bl	8000638 <__aeabi_dmul>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	4630      	mov	r0, r6
 8011c20:	4639      	mov	r1, r7
 8011c22:	f7ee fb53 	bl	80002cc <__adddf3>
 8011c26:	4606      	mov	r6, r0
 8011c28:	460f      	mov	r7, r1
 8011c2a:	f7ee ffb5 	bl	8000b98 <__aeabi_d2iz>
 8011c2e:	2200      	movs	r2, #0
 8011c30:	9000      	str	r0, [sp, #0]
 8011c32:	2300      	movs	r3, #0
 8011c34:	4630      	mov	r0, r6
 8011c36:	4639      	mov	r1, r7
 8011c38:	f7ee ff70 	bl	8000b1c <__aeabi_dcmplt>
 8011c3c:	b150      	cbz	r0, 8011c54 <_dtoa_r+0x184>
 8011c3e:	9800      	ldr	r0, [sp, #0]
 8011c40:	f7ee fc90 	bl	8000564 <__aeabi_i2d>
 8011c44:	4632      	mov	r2, r6
 8011c46:	463b      	mov	r3, r7
 8011c48:	f7ee ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 8011c4c:	b910      	cbnz	r0, 8011c54 <_dtoa_r+0x184>
 8011c4e:	9b00      	ldr	r3, [sp, #0]
 8011c50:	3b01      	subs	r3, #1
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	9b00      	ldr	r3, [sp, #0]
 8011c56:	2b16      	cmp	r3, #22
 8011c58:	d85a      	bhi.n	8011d10 <_dtoa_r+0x240>
 8011c5a:	9a00      	ldr	r2, [sp, #0]
 8011c5c:	4b57      	ldr	r3, [pc, #348]	; (8011dbc <_dtoa_r+0x2ec>)
 8011c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c66:	ec51 0b19 	vmov	r0, r1, d9
 8011c6a:	f7ee ff57 	bl	8000b1c <__aeabi_dcmplt>
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d050      	beq.n	8011d14 <_dtoa_r+0x244>
 8011c72:	9b00      	ldr	r3, [sp, #0]
 8011c74:	3b01      	subs	r3, #1
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	2300      	movs	r3, #0
 8011c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c7e:	1b5d      	subs	r5, r3, r5
 8011c80:	1e6b      	subs	r3, r5, #1
 8011c82:	9305      	str	r3, [sp, #20]
 8011c84:	bf45      	ittet	mi
 8011c86:	f1c5 0301 	rsbmi	r3, r5, #1
 8011c8a:	9304      	strmi	r3, [sp, #16]
 8011c8c:	2300      	movpl	r3, #0
 8011c8e:	2300      	movmi	r3, #0
 8011c90:	bf4c      	ite	mi
 8011c92:	9305      	strmi	r3, [sp, #20]
 8011c94:	9304      	strpl	r3, [sp, #16]
 8011c96:	9b00      	ldr	r3, [sp, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	db3d      	blt.n	8011d18 <_dtoa_r+0x248>
 8011c9c:	9b05      	ldr	r3, [sp, #20]
 8011c9e:	9a00      	ldr	r2, [sp, #0]
 8011ca0:	920a      	str	r2, [sp, #40]	; 0x28
 8011ca2:	4413      	add	r3, r2
 8011ca4:	9305      	str	r3, [sp, #20]
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	9307      	str	r3, [sp, #28]
 8011caa:	9b06      	ldr	r3, [sp, #24]
 8011cac:	2b09      	cmp	r3, #9
 8011cae:	f200 8089 	bhi.w	8011dc4 <_dtoa_r+0x2f4>
 8011cb2:	2b05      	cmp	r3, #5
 8011cb4:	bfc4      	itt	gt
 8011cb6:	3b04      	subgt	r3, #4
 8011cb8:	9306      	strgt	r3, [sp, #24]
 8011cba:	9b06      	ldr	r3, [sp, #24]
 8011cbc:	f1a3 0302 	sub.w	r3, r3, #2
 8011cc0:	bfcc      	ite	gt
 8011cc2:	2500      	movgt	r5, #0
 8011cc4:	2501      	movle	r5, #1
 8011cc6:	2b03      	cmp	r3, #3
 8011cc8:	f200 8087 	bhi.w	8011dda <_dtoa_r+0x30a>
 8011ccc:	e8df f003 	tbb	[pc, r3]
 8011cd0:	59383a2d 	.word	0x59383a2d
 8011cd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011cd8:	441d      	add	r5, r3
 8011cda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011cde:	2b20      	cmp	r3, #32
 8011ce0:	bfc1      	itttt	gt
 8011ce2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011ce6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011cea:	fa0b f303 	lslgt.w	r3, fp, r3
 8011cee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011cf2:	bfda      	itte	le
 8011cf4:	f1c3 0320 	rsble	r3, r3, #32
 8011cf8:	fa06 f003 	lslle.w	r0, r6, r3
 8011cfc:	4318      	orrgt	r0, r3
 8011cfe:	f7ee fc21 	bl	8000544 <__aeabi_ui2d>
 8011d02:	2301      	movs	r3, #1
 8011d04:	4606      	mov	r6, r0
 8011d06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011d0a:	3d01      	subs	r5, #1
 8011d0c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d0e:	e76a      	b.n	8011be6 <_dtoa_r+0x116>
 8011d10:	2301      	movs	r3, #1
 8011d12:	e7b2      	b.n	8011c7a <_dtoa_r+0x1aa>
 8011d14:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d16:	e7b1      	b.n	8011c7c <_dtoa_r+0x1ac>
 8011d18:	9b04      	ldr	r3, [sp, #16]
 8011d1a:	9a00      	ldr	r2, [sp, #0]
 8011d1c:	1a9b      	subs	r3, r3, r2
 8011d1e:	9304      	str	r3, [sp, #16]
 8011d20:	4253      	negs	r3, r2
 8011d22:	9307      	str	r3, [sp, #28]
 8011d24:	2300      	movs	r3, #0
 8011d26:	930a      	str	r3, [sp, #40]	; 0x28
 8011d28:	e7bf      	b.n	8011caa <_dtoa_r+0x1da>
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	9308      	str	r3, [sp, #32]
 8011d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	dc55      	bgt.n	8011de0 <_dtoa_r+0x310>
 8011d34:	2301      	movs	r3, #1
 8011d36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d3e:	e00c      	b.n	8011d5a <_dtoa_r+0x28a>
 8011d40:	2301      	movs	r3, #1
 8011d42:	e7f3      	b.n	8011d2c <_dtoa_r+0x25c>
 8011d44:	2300      	movs	r3, #0
 8011d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d48:	9308      	str	r3, [sp, #32]
 8011d4a:	9b00      	ldr	r3, [sp, #0]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	9302      	str	r3, [sp, #8]
 8011d50:	3301      	adds	r3, #1
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	9303      	str	r3, [sp, #12]
 8011d56:	bfb8      	it	lt
 8011d58:	2301      	movlt	r3, #1
 8011d5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	6042      	str	r2, [r0, #4]
 8011d60:	2204      	movs	r2, #4
 8011d62:	f102 0614 	add.w	r6, r2, #20
 8011d66:	429e      	cmp	r6, r3
 8011d68:	6841      	ldr	r1, [r0, #4]
 8011d6a:	d93d      	bls.n	8011de8 <_dtoa_r+0x318>
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f000 fdf9 	bl	8012964 <_Balloc>
 8011d72:	9001      	str	r0, [sp, #4]
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d13b      	bne.n	8011df0 <_dtoa_r+0x320>
 8011d78:	4b11      	ldr	r3, [pc, #68]	; (8011dc0 <_dtoa_r+0x2f0>)
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d80:	e6c0      	b.n	8011b04 <_dtoa_r+0x34>
 8011d82:	2301      	movs	r3, #1
 8011d84:	e7df      	b.n	8011d46 <_dtoa_r+0x276>
 8011d86:	bf00      	nop
 8011d88:	636f4361 	.word	0x636f4361
 8011d8c:	3fd287a7 	.word	0x3fd287a7
 8011d90:	8b60c8b3 	.word	0x8b60c8b3
 8011d94:	3fc68a28 	.word	0x3fc68a28
 8011d98:	509f79fb 	.word	0x509f79fb
 8011d9c:	3fd34413 	.word	0x3fd34413
 8011da0:	0801545c 	.word	0x0801545c
 8011da4:	08015618 	.word	0x08015618
 8011da8:	7ff00000 	.word	0x7ff00000
 8011dac:	08015614 	.word	0x08015614
 8011db0:	0801560b 	.word	0x0801560b
 8011db4:	08015439 	.word	0x08015439
 8011db8:	3ff80000 	.word	0x3ff80000
 8011dbc:	08015708 	.word	0x08015708
 8011dc0:	08015673 	.word	0x08015673
 8011dc4:	2501      	movs	r5, #1
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	9306      	str	r3, [sp, #24]
 8011dca:	9508      	str	r5, [sp, #32]
 8011dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	2312      	movs	r3, #18
 8011dd8:	e7b0      	b.n	8011d3c <_dtoa_r+0x26c>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	9308      	str	r3, [sp, #32]
 8011dde:	e7f5      	b.n	8011dcc <_dtoa_r+0x2fc>
 8011de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011de6:	e7b8      	b.n	8011d5a <_dtoa_r+0x28a>
 8011de8:	3101      	adds	r1, #1
 8011dea:	6041      	str	r1, [r0, #4]
 8011dec:	0052      	lsls	r2, r2, #1
 8011dee:	e7b8      	b.n	8011d62 <_dtoa_r+0x292>
 8011df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011df2:	9a01      	ldr	r2, [sp, #4]
 8011df4:	601a      	str	r2, [r3, #0]
 8011df6:	9b03      	ldr	r3, [sp, #12]
 8011df8:	2b0e      	cmp	r3, #14
 8011dfa:	f200 809d 	bhi.w	8011f38 <_dtoa_r+0x468>
 8011dfe:	2d00      	cmp	r5, #0
 8011e00:	f000 809a 	beq.w	8011f38 <_dtoa_r+0x468>
 8011e04:	9b00      	ldr	r3, [sp, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	dd32      	ble.n	8011e70 <_dtoa_r+0x3a0>
 8011e0a:	4ab7      	ldr	r2, [pc, #732]	; (80120e8 <_dtoa_r+0x618>)
 8011e0c:	f003 030f 	and.w	r3, r3, #15
 8011e10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e18:	9b00      	ldr	r3, [sp, #0]
 8011e1a:	05d8      	lsls	r0, r3, #23
 8011e1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011e20:	d516      	bpl.n	8011e50 <_dtoa_r+0x380>
 8011e22:	4bb2      	ldr	r3, [pc, #712]	; (80120ec <_dtoa_r+0x61c>)
 8011e24:	ec51 0b19 	vmov	r0, r1, d9
 8011e28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e2c:	f7ee fd2e 	bl	800088c <__aeabi_ddiv>
 8011e30:	f007 070f 	and.w	r7, r7, #15
 8011e34:	4682      	mov	sl, r0
 8011e36:	468b      	mov	fp, r1
 8011e38:	2503      	movs	r5, #3
 8011e3a:	4eac      	ldr	r6, [pc, #688]	; (80120ec <_dtoa_r+0x61c>)
 8011e3c:	b957      	cbnz	r7, 8011e54 <_dtoa_r+0x384>
 8011e3e:	4642      	mov	r2, r8
 8011e40:	464b      	mov	r3, r9
 8011e42:	4650      	mov	r0, sl
 8011e44:	4659      	mov	r1, fp
 8011e46:	f7ee fd21 	bl	800088c <__aeabi_ddiv>
 8011e4a:	4682      	mov	sl, r0
 8011e4c:	468b      	mov	fp, r1
 8011e4e:	e028      	b.n	8011ea2 <_dtoa_r+0x3d2>
 8011e50:	2502      	movs	r5, #2
 8011e52:	e7f2      	b.n	8011e3a <_dtoa_r+0x36a>
 8011e54:	07f9      	lsls	r1, r7, #31
 8011e56:	d508      	bpl.n	8011e6a <_dtoa_r+0x39a>
 8011e58:	4640      	mov	r0, r8
 8011e5a:	4649      	mov	r1, r9
 8011e5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e60:	f7ee fbea 	bl	8000638 <__aeabi_dmul>
 8011e64:	3501      	adds	r5, #1
 8011e66:	4680      	mov	r8, r0
 8011e68:	4689      	mov	r9, r1
 8011e6a:	107f      	asrs	r7, r7, #1
 8011e6c:	3608      	adds	r6, #8
 8011e6e:	e7e5      	b.n	8011e3c <_dtoa_r+0x36c>
 8011e70:	f000 809b 	beq.w	8011faa <_dtoa_r+0x4da>
 8011e74:	9b00      	ldr	r3, [sp, #0]
 8011e76:	4f9d      	ldr	r7, [pc, #628]	; (80120ec <_dtoa_r+0x61c>)
 8011e78:	425e      	negs	r6, r3
 8011e7a:	4b9b      	ldr	r3, [pc, #620]	; (80120e8 <_dtoa_r+0x618>)
 8011e7c:	f006 020f 	and.w	r2, r6, #15
 8011e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e88:	ec51 0b19 	vmov	r0, r1, d9
 8011e8c:	f7ee fbd4 	bl	8000638 <__aeabi_dmul>
 8011e90:	1136      	asrs	r6, r6, #4
 8011e92:	4682      	mov	sl, r0
 8011e94:	468b      	mov	fp, r1
 8011e96:	2300      	movs	r3, #0
 8011e98:	2502      	movs	r5, #2
 8011e9a:	2e00      	cmp	r6, #0
 8011e9c:	d17a      	bne.n	8011f94 <_dtoa_r+0x4c4>
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d1d3      	bne.n	8011e4a <_dtoa_r+0x37a>
 8011ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f000 8082 	beq.w	8011fae <_dtoa_r+0x4de>
 8011eaa:	4b91      	ldr	r3, [pc, #580]	; (80120f0 <_dtoa_r+0x620>)
 8011eac:	2200      	movs	r2, #0
 8011eae:	4650      	mov	r0, sl
 8011eb0:	4659      	mov	r1, fp
 8011eb2:	f7ee fe33 	bl	8000b1c <__aeabi_dcmplt>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d079      	beq.n	8011fae <_dtoa_r+0x4de>
 8011eba:	9b03      	ldr	r3, [sp, #12]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d076      	beq.n	8011fae <_dtoa_r+0x4de>
 8011ec0:	9b02      	ldr	r3, [sp, #8]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	dd36      	ble.n	8011f34 <_dtoa_r+0x464>
 8011ec6:	9b00      	ldr	r3, [sp, #0]
 8011ec8:	4650      	mov	r0, sl
 8011eca:	4659      	mov	r1, fp
 8011ecc:	1e5f      	subs	r7, r3, #1
 8011ece:	2200      	movs	r2, #0
 8011ed0:	4b88      	ldr	r3, [pc, #544]	; (80120f4 <_dtoa_r+0x624>)
 8011ed2:	f7ee fbb1 	bl	8000638 <__aeabi_dmul>
 8011ed6:	9e02      	ldr	r6, [sp, #8]
 8011ed8:	4682      	mov	sl, r0
 8011eda:	468b      	mov	fp, r1
 8011edc:	3501      	adds	r5, #1
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f7ee fb40 	bl	8000564 <__aeabi_i2d>
 8011ee4:	4652      	mov	r2, sl
 8011ee6:	465b      	mov	r3, fp
 8011ee8:	f7ee fba6 	bl	8000638 <__aeabi_dmul>
 8011eec:	4b82      	ldr	r3, [pc, #520]	; (80120f8 <_dtoa_r+0x628>)
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f7ee f9ec 	bl	80002cc <__adddf3>
 8011ef4:	46d0      	mov	r8, sl
 8011ef6:	46d9      	mov	r9, fp
 8011ef8:	4682      	mov	sl, r0
 8011efa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011efe:	2e00      	cmp	r6, #0
 8011f00:	d158      	bne.n	8011fb4 <_dtoa_r+0x4e4>
 8011f02:	4b7e      	ldr	r3, [pc, #504]	; (80120fc <_dtoa_r+0x62c>)
 8011f04:	2200      	movs	r2, #0
 8011f06:	4640      	mov	r0, r8
 8011f08:	4649      	mov	r1, r9
 8011f0a:	f7ee f9dd 	bl	80002c8 <__aeabi_dsub>
 8011f0e:	4652      	mov	r2, sl
 8011f10:	465b      	mov	r3, fp
 8011f12:	4680      	mov	r8, r0
 8011f14:	4689      	mov	r9, r1
 8011f16:	f7ee fe1f 	bl	8000b58 <__aeabi_dcmpgt>
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	f040 8295 	bne.w	801244a <_dtoa_r+0x97a>
 8011f20:	4652      	mov	r2, sl
 8011f22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011f26:	4640      	mov	r0, r8
 8011f28:	4649      	mov	r1, r9
 8011f2a:	f7ee fdf7 	bl	8000b1c <__aeabi_dcmplt>
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	f040 8289 	bne.w	8012446 <_dtoa_r+0x976>
 8011f34:	ec5b ab19 	vmov	sl, fp, d9
 8011f38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f2c0 8148 	blt.w	80121d0 <_dtoa_r+0x700>
 8011f40:	9a00      	ldr	r2, [sp, #0]
 8011f42:	2a0e      	cmp	r2, #14
 8011f44:	f300 8144 	bgt.w	80121d0 <_dtoa_r+0x700>
 8011f48:	4b67      	ldr	r3, [pc, #412]	; (80120e8 <_dtoa_r+0x618>)
 8011f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f280 80d5 	bge.w	8012104 <_dtoa_r+0x634>
 8011f5a:	9b03      	ldr	r3, [sp, #12]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f300 80d1 	bgt.w	8012104 <_dtoa_r+0x634>
 8011f62:	f040 826f 	bne.w	8012444 <_dtoa_r+0x974>
 8011f66:	4b65      	ldr	r3, [pc, #404]	; (80120fc <_dtoa_r+0x62c>)
 8011f68:	2200      	movs	r2, #0
 8011f6a:	4640      	mov	r0, r8
 8011f6c:	4649      	mov	r1, r9
 8011f6e:	f7ee fb63 	bl	8000638 <__aeabi_dmul>
 8011f72:	4652      	mov	r2, sl
 8011f74:	465b      	mov	r3, fp
 8011f76:	f7ee fde5 	bl	8000b44 <__aeabi_dcmpge>
 8011f7a:	9e03      	ldr	r6, [sp, #12]
 8011f7c:	4637      	mov	r7, r6
 8011f7e:	2800      	cmp	r0, #0
 8011f80:	f040 8245 	bne.w	801240e <_dtoa_r+0x93e>
 8011f84:	9d01      	ldr	r5, [sp, #4]
 8011f86:	2331      	movs	r3, #49	; 0x31
 8011f88:	f805 3b01 	strb.w	r3, [r5], #1
 8011f8c:	9b00      	ldr	r3, [sp, #0]
 8011f8e:	3301      	adds	r3, #1
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	e240      	b.n	8012416 <_dtoa_r+0x946>
 8011f94:	07f2      	lsls	r2, r6, #31
 8011f96:	d505      	bpl.n	8011fa4 <_dtoa_r+0x4d4>
 8011f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f9c:	f7ee fb4c 	bl	8000638 <__aeabi_dmul>
 8011fa0:	3501      	adds	r5, #1
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	1076      	asrs	r6, r6, #1
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	e777      	b.n	8011e9a <_dtoa_r+0x3ca>
 8011faa:	2502      	movs	r5, #2
 8011fac:	e779      	b.n	8011ea2 <_dtoa_r+0x3d2>
 8011fae:	9f00      	ldr	r7, [sp, #0]
 8011fb0:	9e03      	ldr	r6, [sp, #12]
 8011fb2:	e794      	b.n	8011ede <_dtoa_r+0x40e>
 8011fb4:	9901      	ldr	r1, [sp, #4]
 8011fb6:	4b4c      	ldr	r3, [pc, #304]	; (80120e8 <_dtoa_r+0x618>)
 8011fb8:	4431      	add	r1, r6
 8011fba:	910d      	str	r1, [sp, #52]	; 0x34
 8011fbc:	9908      	ldr	r1, [sp, #32]
 8011fbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011fc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011fc6:	2900      	cmp	r1, #0
 8011fc8:	d043      	beq.n	8012052 <_dtoa_r+0x582>
 8011fca:	494d      	ldr	r1, [pc, #308]	; (8012100 <_dtoa_r+0x630>)
 8011fcc:	2000      	movs	r0, #0
 8011fce:	f7ee fc5d 	bl	800088c <__aeabi_ddiv>
 8011fd2:	4652      	mov	r2, sl
 8011fd4:	465b      	mov	r3, fp
 8011fd6:	f7ee f977 	bl	80002c8 <__aeabi_dsub>
 8011fda:	9d01      	ldr	r5, [sp, #4]
 8011fdc:	4682      	mov	sl, r0
 8011fde:	468b      	mov	fp, r1
 8011fe0:	4649      	mov	r1, r9
 8011fe2:	4640      	mov	r0, r8
 8011fe4:	f7ee fdd8 	bl	8000b98 <__aeabi_d2iz>
 8011fe8:	4606      	mov	r6, r0
 8011fea:	f7ee fabb 	bl	8000564 <__aeabi_i2d>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	4640      	mov	r0, r8
 8011ff4:	4649      	mov	r1, r9
 8011ff6:	f7ee f967 	bl	80002c8 <__aeabi_dsub>
 8011ffa:	3630      	adds	r6, #48	; 0x30
 8011ffc:	f805 6b01 	strb.w	r6, [r5], #1
 8012000:	4652      	mov	r2, sl
 8012002:	465b      	mov	r3, fp
 8012004:	4680      	mov	r8, r0
 8012006:	4689      	mov	r9, r1
 8012008:	f7ee fd88 	bl	8000b1c <__aeabi_dcmplt>
 801200c:	2800      	cmp	r0, #0
 801200e:	d163      	bne.n	80120d8 <_dtoa_r+0x608>
 8012010:	4642      	mov	r2, r8
 8012012:	464b      	mov	r3, r9
 8012014:	4936      	ldr	r1, [pc, #216]	; (80120f0 <_dtoa_r+0x620>)
 8012016:	2000      	movs	r0, #0
 8012018:	f7ee f956 	bl	80002c8 <__aeabi_dsub>
 801201c:	4652      	mov	r2, sl
 801201e:	465b      	mov	r3, fp
 8012020:	f7ee fd7c 	bl	8000b1c <__aeabi_dcmplt>
 8012024:	2800      	cmp	r0, #0
 8012026:	f040 80b5 	bne.w	8012194 <_dtoa_r+0x6c4>
 801202a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801202c:	429d      	cmp	r5, r3
 801202e:	d081      	beq.n	8011f34 <_dtoa_r+0x464>
 8012030:	4b30      	ldr	r3, [pc, #192]	; (80120f4 <_dtoa_r+0x624>)
 8012032:	2200      	movs	r2, #0
 8012034:	4650      	mov	r0, sl
 8012036:	4659      	mov	r1, fp
 8012038:	f7ee fafe 	bl	8000638 <__aeabi_dmul>
 801203c:	4b2d      	ldr	r3, [pc, #180]	; (80120f4 <_dtoa_r+0x624>)
 801203e:	4682      	mov	sl, r0
 8012040:	468b      	mov	fp, r1
 8012042:	4640      	mov	r0, r8
 8012044:	4649      	mov	r1, r9
 8012046:	2200      	movs	r2, #0
 8012048:	f7ee faf6 	bl	8000638 <__aeabi_dmul>
 801204c:	4680      	mov	r8, r0
 801204e:	4689      	mov	r9, r1
 8012050:	e7c6      	b.n	8011fe0 <_dtoa_r+0x510>
 8012052:	4650      	mov	r0, sl
 8012054:	4659      	mov	r1, fp
 8012056:	f7ee faef 	bl	8000638 <__aeabi_dmul>
 801205a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801205c:	9d01      	ldr	r5, [sp, #4]
 801205e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012060:	4682      	mov	sl, r0
 8012062:	468b      	mov	fp, r1
 8012064:	4649      	mov	r1, r9
 8012066:	4640      	mov	r0, r8
 8012068:	f7ee fd96 	bl	8000b98 <__aeabi_d2iz>
 801206c:	4606      	mov	r6, r0
 801206e:	f7ee fa79 	bl	8000564 <__aeabi_i2d>
 8012072:	3630      	adds	r6, #48	; 0x30
 8012074:	4602      	mov	r2, r0
 8012076:	460b      	mov	r3, r1
 8012078:	4640      	mov	r0, r8
 801207a:	4649      	mov	r1, r9
 801207c:	f7ee f924 	bl	80002c8 <__aeabi_dsub>
 8012080:	f805 6b01 	strb.w	r6, [r5], #1
 8012084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012086:	429d      	cmp	r5, r3
 8012088:	4680      	mov	r8, r0
 801208a:	4689      	mov	r9, r1
 801208c:	f04f 0200 	mov.w	r2, #0
 8012090:	d124      	bne.n	80120dc <_dtoa_r+0x60c>
 8012092:	4b1b      	ldr	r3, [pc, #108]	; (8012100 <_dtoa_r+0x630>)
 8012094:	4650      	mov	r0, sl
 8012096:	4659      	mov	r1, fp
 8012098:	f7ee f918 	bl	80002cc <__adddf3>
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	4640      	mov	r0, r8
 80120a2:	4649      	mov	r1, r9
 80120a4:	f7ee fd58 	bl	8000b58 <__aeabi_dcmpgt>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d173      	bne.n	8012194 <_dtoa_r+0x6c4>
 80120ac:	4652      	mov	r2, sl
 80120ae:	465b      	mov	r3, fp
 80120b0:	4913      	ldr	r1, [pc, #76]	; (8012100 <_dtoa_r+0x630>)
 80120b2:	2000      	movs	r0, #0
 80120b4:	f7ee f908 	bl	80002c8 <__aeabi_dsub>
 80120b8:	4602      	mov	r2, r0
 80120ba:	460b      	mov	r3, r1
 80120bc:	4640      	mov	r0, r8
 80120be:	4649      	mov	r1, r9
 80120c0:	f7ee fd2c 	bl	8000b1c <__aeabi_dcmplt>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	f43f af35 	beq.w	8011f34 <_dtoa_r+0x464>
 80120ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80120cc:	1e6b      	subs	r3, r5, #1
 80120ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80120d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80120d4:	2b30      	cmp	r3, #48	; 0x30
 80120d6:	d0f8      	beq.n	80120ca <_dtoa_r+0x5fa>
 80120d8:	9700      	str	r7, [sp, #0]
 80120da:	e049      	b.n	8012170 <_dtoa_r+0x6a0>
 80120dc:	4b05      	ldr	r3, [pc, #20]	; (80120f4 <_dtoa_r+0x624>)
 80120de:	f7ee faab 	bl	8000638 <__aeabi_dmul>
 80120e2:	4680      	mov	r8, r0
 80120e4:	4689      	mov	r9, r1
 80120e6:	e7bd      	b.n	8012064 <_dtoa_r+0x594>
 80120e8:	08015708 	.word	0x08015708
 80120ec:	080156e0 	.word	0x080156e0
 80120f0:	3ff00000 	.word	0x3ff00000
 80120f4:	40240000 	.word	0x40240000
 80120f8:	401c0000 	.word	0x401c0000
 80120fc:	40140000 	.word	0x40140000
 8012100:	3fe00000 	.word	0x3fe00000
 8012104:	9d01      	ldr	r5, [sp, #4]
 8012106:	4656      	mov	r6, sl
 8012108:	465f      	mov	r7, fp
 801210a:	4642      	mov	r2, r8
 801210c:	464b      	mov	r3, r9
 801210e:	4630      	mov	r0, r6
 8012110:	4639      	mov	r1, r7
 8012112:	f7ee fbbb 	bl	800088c <__aeabi_ddiv>
 8012116:	f7ee fd3f 	bl	8000b98 <__aeabi_d2iz>
 801211a:	4682      	mov	sl, r0
 801211c:	f7ee fa22 	bl	8000564 <__aeabi_i2d>
 8012120:	4642      	mov	r2, r8
 8012122:	464b      	mov	r3, r9
 8012124:	f7ee fa88 	bl	8000638 <__aeabi_dmul>
 8012128:	4602      	mov	r2, r0
 801212a:	460b      	mov	r3, r1
 801212c:	4630      	mov	r0, r6
 801212e:	4639      	mov	r1, r7
 8012130:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012134:	f7ee f8c8 	bl	80002c8 <__aeabi_dsub>
 8012138:	f805 6b01 	strb.w	r6, [r5], #1
 801213c:	9e01      	ldr	r6, [sp, #4]
 801213e:	9f03      	ldr	r7, [sp, #12]
 8012140:	1bae      	subs	r6, r5, r6
 8012142:	42b7      	cmp	r7, r6
 8012144:	4602      	mov	r2, r0
 8012146:	460b      	mov	r3, r1
 8012148:	d135      	bne.n	80121b6 <_dtoa_r+0x6e6>
 801214a:	f7ee f8bf 	bl	80002cc <__adddf3>
 801214e:	4642      	mov	r2, r8
 8012150:	464b      	mov	r3, r9
 8012152:	4606      	mov	r6, r0
 8012154:	460f      	mov	r7, r1
 8012156:	f7ee fcff 	bl	8000b58 <__aeabi_dcmpgt>
 801215a:	b9d0      	cbnz	r0, 8012192 <_dtoa_r+0x6c2>
 801215c:	4642      	mov	r2, r8
 801215e:	464b      	mov	r3, r9
 8012160:	4630      	mov	r0, r6
 8012162:	4639      	mov	r1, r7
 8012164:	f7ee fcd0 	bl	8000b08 <__aeabi_dcmpeq>
 8012168:	b110      	cbz	r0, 8012170 <_dtoa_r+0x6a0>
 801216a:	f01a 0f01 	tst.w	sl, #1
 801216e:	d110      	bne.n	8012192 <_dtoa_r+0x6c2>
 8012170:	4620      	mov	r0, r4
 8012172:	ee18 1a10 	vmov	r1, s16
 8012176:	f000 fc35 	bl	80129e4 <_Bfree>
 801217a:	2300      	movs	r3, #0
 801217c:	9800      	ldr	r0, [sp, #0]
 801217e:	702b      	strb	r3, [r5, #0]
 8012180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012182:	3001      	adds	r0, #1
 8012184:	6018      	str	r0, [r3, #0]
 8012186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012188:	2b00      	cmp	r3, #0
 801218a:	f43f acf1 	beq.w	8011b70 <_dtoa_r+0xa0>
 801218e:	601d      	str	r5, [r3, #0]
 8012190:	e4ee      	b.n	8011b70 <_dtoa_r+0xa0>
 8012192:	9f00      	ldr	r7, [sp, #0]
 8012194:	462b      	mov	r3, r5
 8012196:	461d      	mov	r5, r3
 8012198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801219c:	2a39      	cmp	r2, #57	; 0x39
 801219e:	d106      	bne.n	80121ae <_dtoa_r+0x6de>
 80121a0:	9a01      	ldr	r2, [sp, #4]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d1f7      	bne.n	8012196 <_dtoa_r+0x6c6>
 80121a6:	9901      	ldr	r1, [sp, #4]
 80121a8:	2230      	movs	r2, #48	; 0x30
 80121aa:	3701      	adds	r7, #1
 80121ac:	700a      	strb	r2, [r1, #0]
 80121ae:	781a      	ldrb	r2, [r3, #0]
 80121b0:	3201      	adds	r2, #1
 80121b2:	701a      	strb	r2, [r3, #0]
 80121b4:	e790      	b.n	80120d8 <_dtoa_r+0x608>
 80121b6:	4ba6      	ldr	r3, [pc, #664]	; (8012450 <_dtoa_r+0x980>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	f7ee fa3d 	bl	8000638 <__aeabi_dmul>
 80121be:	2200      	movs	r2, #0
 80121c0:	2300      	movs	r3, #0
 80121c2:	4606      	mov	r6, r0
 80121c4:	460f      	mov	r7, r1
 80121c6:	f7ee fc9f 	bl	8000b08 <__aeabi_dcmpeq>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	d09d      	beq.n	801210a <_dtoa_r+0x63a>
 80121ce:	e7cf      	b.n	8012170 <_dtoa_r+0x6a0>
 80121d0:	9a08      	ldr	r2, [sp, #32]
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	f000 80d7 	beq.w	8012386 <_dtoa_r+0x8b6>
 80121d8:	9a06      	ldr	r2, [sp, #24]
 80121da:	2a01      	cmp	r2, #1
 80121dc:	f300 80ba 	bgt.w	8012354 <_dtoa_r+0x884>
 80121e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121e2:	2a00      	cmp	r2, #0
 80121e4:	f000 80b2 	beq.w	801234c <_dtoa_r+0x87c>
 80121e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80121ec:	9e07      	ldr	r6, [sp, #28]
 80121ee:	9d04      	ldr	r5, [sp, #16]
 80121f0:	9a04      	ldr	r2, [sp, #16]
 80121f2:	441a      	add	r2, r3
 80121f4:	9204      	str	r2, [sp, #16]
 80121f6:	9a05      	ldr	r2, [sp, #20]
 80121f8:	2101      	movs	r1, #1
 80121fa:	441a      	add	r2, r3
 80121fc:	4620      	mov	r0, r4
 80121fe:	9205      	str	r2, [sp, #20]
 8012200:	f000 fca8 	bl	8012b54 <__i2b>
 8012204:	4607      	mov	r7, r0
 8012206:	2d00      	cmp	r5, #0
 8012208:	dd0c      	ble.n	8012224 <_dtoa_r+0x754>
 801220a:	9b05      	ldr	r3, [sp, #20]
 801220c:	2b00      	cmp	r3, #0
 801220e:	dd09      	ble.n	8012224 <_dtoa_r+0x754>
 8012210:	42ab      	cmp	r3, r5
 8012212:	9a04      	ldr	r2, [sp, #16]
 8012214:	bfa8      	it	ge
 8012216:	462b      	movge	r3, r5
 8012218:	1ad2      	subs	r2, r2, r3
 801221a:	9204      	str	r2, [sp, #16]
 801221c:	9a05      	ldr	r2, [sp, #20]
 801221e:	1aed      	subs	r5, r5, r3
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	9305      	str	r3, [sp, #20]
 8012224:	9b07      	ldr	r3, [sp, #28]
 8012226:	b31b      	cbz	r3, 8012270 <_dtoa_r+0x7a0>
 8012228:	9b08      	ldr	r3, [sp, #32]
 801222a:	2b00      	cmp	r3, #0
 801222c:	f000 80af 	beq.w	801238e <_dtoa_r+0x8be>
 8012230:	2e00      	cmp	r6, #0
 8012232:	dd13      	ble.n	801225c <_dtoa_r+0x78c>
 8012234:	4639      	mov	r1, r7
 8012236:	4632      	mov	r2, r6
 8012238:	4620      	mov	r0, r4
 801223a:	f000 fd4b 	bl	8012cd4 <__pow5mult>
 801223e:	ee18 2a10 	vmov	r2, s16
 8012242:	4601      	mov	r1, r0
 8012244:	4607      	mov	r7, r0
 8012246:	4620      	mov	r0, r4
 8012248:	f000 fc9a 	bl	8012b80 <__multiply>
 801224c:	ee18 1a10 	vmov	r1, s16
 8012250:	4680      	mov	r8, r0
 8012252:	4620      	mov	r0, r4
 8012254:	f000 fbc6 	bl	80129e4 <_Bfree>
 8012258:	ee08 8a10 	vmov	s16, r8
 801225c:	9b07      	ldr	r3, [sp, #28]
 801225e:	1b9a      	subs	r2, r3, r6
 8012260:	d006      	beq.n	8012270 <_dtoa_r+0x7a0>
 8012262:	ee18 1a10 	vmov	r1, s16
 8012266:	4620      	mov	r0, r4
 8012268:	f000 fd34 	bl	8012cd4 <__pow5mult>
 801226c:	ee08 0a10 	vmov	s16, r0
 8012270:	2101      	movs	r1, #1
 8012272:	4620      	mov	r0, r4
 8012274:	f000 fc6e 	bl	8012b54 <__i2b>
 8012278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801227a:	2b00      	cmp	r3, #0
 801227c:	4606      	mov	r6, r0
 801227e:	f340 8088 	ble.w	8012392 <_dtoa_r+0x8c2>
 8012282:	461a      	mov	r2, r3
 8012284:	4601      	mov	r1, r0
 8012286:	4620      	mov	r0, r4
 8012288:	f000 fd24 	bl	8012cd4 <__pow5mult>
 801228c:	9b06      	ldr	r3, [sp, #24]
 801228e:	2b01      	cmp	r3, #1
 8012290:	4606      	mov	r6, r0
 8012292:	f340 8081 	ble.w	8012398 <_dtoa_r+0x8c8>
 8012296:	f04f 0800 	mov.w	r8, #0
 801229a:	6933      	ldr	r3, [r6, #16]
 801229c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80122a0:	6918      	ldr	r0, [r3, #16]
 80122a2:	f000 fc07 	bl	8012ab4 <__hi0bits>
 80122a6:	f1c0 0020 	rsb	r0, r0, #32
 80122aa:	9b05      	ldr	r3, [sp, #20]
 80122ac:	4418      	add	r0, r3
 80122ae:	f010 001f 	ands.w	r0, r0, #31
 80122b2:	f000 8092 	beq.w	80123da <_dtoa_r+0x90a>
 80122b6:	f1c0 0320 	rsb	r3, r0, #32
 80122ba:	2b04      	cmp	r3, #4
 80122bc:	f340 808a 	ble.w	80123d4 <_dtoa_r+0x904>
 80122c0:	f1c0 001c 	rsb	r0, r0, #28
 80122c4:	9b04      	ldr	r3, [sp, #16]
 80122c6:	4403      	add	r3, r0
 80122c8:	9304      	str	r3, [sp, #16]
 80122ca:	9b05      	ldr	r3, [sp, #20]
 80122cc:	4403      	add	r3, r0
 80122ce:	4405      	add	r5, r0
 80122d0:	9305      	str	r3, [sp, #20]
 80122d2:	9b04      	ldr	r3, [sp, #16]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	dd07      	ble.n	80122e8 <_dtoa_r+0x818>
 80122d8:	ee18 1a10 	vmov	r1, s16
 80122dc:	461a      	mov	r2, r3
 80122de:	4620      	mov	r0, r4
 80122e0:	f000 fd52 	bl	8012d88 <__lshift>
 80122e4:	ee08 0a10 	vmov	s16, r0
 80122e8:	9b05      	ldr	r3, [sp, #20]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	dd05      	ble.n	80122fa <_dtoa_r+0x82a>
 80122ee:	4631      	mov	r1, r6
 80122f0:	461a      	mov	r2, r3
 80122f2:	4620      	mov	r0, r4
 80122f4:	f000 fd48 	bl	8012d88 <__lshift>
 80122f8:	4606      	mov	r6, r0
 80122fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d06e      	beq.n	80123de <_dtoa_r+0x90e>
 8012300:	ee18 0a10 	vmov	r0, s16
 8012304:	4631      	mov	r1, r6
 8012306:	f000 fdaf 	bl	8012e68 <__mcmp>
 801230a:	2800      	cmp	r0, #0
 801230c:	da67      	bge.n	80123de <_dtoa_r+0x90e>
 801230e:	9b00      	ldr	r3, [sp, #0]
 8012310:	3b01      	subs	r3, #1
 8012312:	ee18 1a10 	vmov	r1, s16
 8012316:	9300      	str	r3, [sp, #0]
 8012318:	220a      	movs	r2, #10
 801231a:	2300      	movs	r3, #0
 801231c:	4620      	mov	r0, r4
 801231e:	f000 fb83 	bl	8012a28 <__multadd>
 8012322:	9b08      	ldr	r3, [sp, #32]
 8012324:	ee08 0a10 	vmov	s16, r0
 8012328:	2b00      	cmp	r3, #0
 801232a:	f000 81b1 	beq.w	8012690 <_dtoa_r+0xbc0>
 801232e:	2300      	movs	r3, #0
 8012330:	4639      	mov	r1, r7
 8012332:	220a      	movs	r2, #10
 8012334:	4620      	mov	r0, r4
 8012336:	f000 fb77 	bl	8012a28 <__multadd>
 801233a:	9b02      	ldr	r3, [sp, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	4607      	mov	r7, r0
 8012340:	f300 808e 	bgt.w	8012460 <_dtoa_r+0x990>
 8012344:	9b06      	ldr	r3, [sp, #24]
 8012346:	2b02      	cmp	r3, #2
 8012348:	dc51      	bgt.n	80123ee <_dtoa_r+0x91e>
 801234a:	e089      	b.n	8012460 <_dtoa_r+0x990>
 801234c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801234e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012352:	e74b      	b.n	80121ec <_dtoa_r+0x71c>
 8012354:	9b03      	ldr	r3, [sp, #12]
 8012356:	1e5e      	subs	r6, r3, #1
 8012358:	9b07      	ldr	r3, [sp, #28]
 801235a:	42b3      	cmp	r3, r6
 801235c:	bfbf      	itttt	lt
 801235e:	9b07      	ldrlt	r3, [sp, #28]
 8012360:	9607      	strlt	r6, [sp, #28]
 8012362:	1af2      	sublt	r2, r6, r3
 8012364:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012366:	bfb6      	itet	lt
 8012368:	189b      	addlt	r3, r3, r2
 801236a:	1b9e      	subge	r6, r3, r6
 801236c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801236e:	9b03      	ldr	r3, [sp, #12]
 8012370:	bfb8      	it	lt
 8012372:	2600      	movlt	r6, #0
 8012374:	2b00      	cmp	r3, #0
 8012376:	bfb7      	itett	lt
 8012378:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801237c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012380:	1a9d      	sublt	r5, r3, r2
 8012382:	2300      	movlt	r3, #0
 8012384:	e734      	b.n	80121f0 <_dtoa_r+0x720>
 8012386:	9e07      	ldr	r6, [sp, #28]
 8012388:	9d04      	ldr	r5, [sp, #16]
 801238a:	9f08      	ldr	r7, [sp, #32]
 801238c:	e73b      	b.n	8012206 <_dtoa_r+0x736>
 801238e:	9a07      	ldr	r2, [sp, #28]
 8012390:	e767      	b.n	8012262 <_dtoa_r+0x792>
 8012392:	9b06      	ldr	r3, [sp, #24]
 8012394:	2b01      	cmp	r3, #1
 8012396:	dc18      	bgt.n	80123ca <_dtoa_r+0x8fa>
 8012398:	f1ba 0f00 	cmp.w	sl, #0
 801239c:	d115      	bne.n	80123ca <_dtoa_r+0x8fa>
 801239e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80123a2:	b993      	cbnz	r3, 80123ca <_dtoa_r+0x8fa>
 80123a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123a8:	0d1b      	lsrs	r3, r3, #20
 80123aa:	051b      	lsls	r3, r3, #20
 80123ac:	b183      	cbz	r3, 80123d0 <_dtoa_r+0x900>
 80123ae:	9b04      	ldr	r3, [sp, #16]
 80123b0:	3301      	adds	r3, #1
 80123b2:	9304      	str	r3, [sp, #16]
 80123b4:	9b05      	ldr	r3, [sp, #20]
 80123b6:	3301      	adds	r3, #1
 80123b8:	9305      	str	r3, [sp, #20]
 80123ba:	f04f 0801 	mov.w	r8, #1
 80123be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	f47f af6a 	bne.w	801229a <_dtoa_r+0x7ca>
 80123c6:	2001      	movs	r0, #1
 80123c8:	e76f      	b.n	80122aa <_dtoa_r+0x7da>
 80123ca:	f04f 0800 	mov.w	r8, #0
 80123ce:	e7f6      	b.n	80123be <_dtoa_r+0x8ee>
 80123d0:	4698      	mov	r8, r3
 80123d2:	e7f4      	b.n	80123be <_dtoa_r+0x8ee>
 80123d4:	f43f af7d 	beq.w	80122d2 <_dtoa_r+0x802>
 80123d8:	4618      	mov	r0, r3
 80123da:	301c      	adds	r0, #28
 80123dc:	e772      	b.n	80122c4 <_dtoa_r+0x7f4>
 80123de:	9b03      	ldr	r3, [sp, #12]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	dc37      	bgt.n	8012454 <_dtoa_r+0x984>
 80123e4:	9b06      	ldr	r3, [sp, #24]
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	dd34      	ble.n	8012454 <_dtoa_r+0x984>
 80123ea:	9b03      	ldr	r3, [sp, #12]
 80123ec:	9302      	str	r3, [sp, #8]
 80123ee:	9b02      	ldr	r3, [sp, #8]
 80123f0:	b96b      	cbnz	r3, 801240e <_dtoa_r+0x93e>
 80123f2:	4631      	mov	r1, r6
 80123f4:	2205      	movs	r2, #5
 80123f6:	4620      	mov	r0, r4
 80123f8:	f000 fb16 	bl	8012a28 <__multadd>
 80123fc:	4601      	mov	r1, r0
 80123fe:	4606      	mov	r6, r0
 8012400:	ee18 0a10 	vmov	r0, s16
 8012404:	f000 fd30 	bl	8012e68 <__mcmp>
 8012408:	2800      	cmp	r0, #0
 801240a:	f73f adbb 	bgt.w	8011f84 <_dtoa_r+0x4b4>
 801240e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012410:	9d01      	ldr	r5, [sp, #4]
 8012412:	43db      	mvns	r3, r3
 8012414:	9300      	str	r3, [sp, #0]
 8012416:	f04f 0800 	mov.w	r8, #0
 801241a:	4631      	mov	r1, r6
 801241c:	4620      	mov	r0, r4
 801241e:	f000 fae1 	bl	80129e4 <_Bfree>
 8012422:	2f00      	cmp	r7, #0
 8012424:	f43f aea4 	beq.w	8012170 <_dtoa_r+0x6a0>
 8012428:	f1b8 0f00 	cmp.w	r8, #0
 801242c:	d005      	beq.n	801243a <_dtoa_r+0x96a>
 801242e:	45b8      	cmp	r8, r7
 8012430:	d003      	beq.n	801243a <_dtoa_r+0x96a>
 8012432:	4641      	mov	r1, r8
 8012434:	4620      	mov	r0, r4
 8012436:	f000 fad5 	bl	80129e4 <_Bfree>
 801243a:	4639      	mov	r1, r7
 801243c:	4620      	mov	r0, r4
 801243e:	f000 fad1 	bl	80129e4 <_Bfree>
 8012442:	e695      	b.n	8012170 <_dtoa_r+0x6a0>
 8012444:	2600      	movs	r6, #0
 8012446:	4637      	mov	r7, r6
 8012448:	e7e1      	b.n	801240e <_dtoa_r+0x93e>
 801244a:	9700      	str	r7, [sp, #0]
 801244c:	4637      	mov	r7, r6
 801244e:	e599      	b.n	8011f84 <_dtoa_r+0x4b4>
 8012450:	40240000 	.word	0x40240000
 8012454:	9b08      	ldr	r3, [sp, #32]
 8012456:	2b00      	cmp	r3, #0
 8012458:	f000 80ca 	beq.w	80125f0 <_dtoa_r+0xb20>
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	9302      	str	r3, [sp, #8]
 8012460:	2d00      	cmp	r5, #0
 8012462:	dd05      	ble.n	8012470 <_dtoa_r+0x9a0>
 8012464:	4639      	mov	r1, r7
 8012466:	462a      	mov	r2, r5
 8012468:	4620      	mov	r0, r4
 801246a:	f000 fc8d 	bl	8012d88 <__lshift>
 801246e:	4607      	mov	r7, r0
 8012470:	f1b8 0f00 	cmp.w	r8, #0
 8012474:	d05b      	beq.n	801252e <_dtoa_r+0xa5e>
 8012476:	6879      	ldr	r1, [r7, #4]
 8012478:	4620      	mov	r0, r4
 801247a:	f000 fa73 	bl	8012964 <_Balloc>
 801247e:	4605      	mov	r5, r0
 8012480:	b928      	cbnz	r0, 801248e <_dtoa_r+0x9be>
 8012482:	4b87      	ldr	r3, [pc, #540]	; (80126a0 <_dtoa_r+0xbd0>)
 8012484:	4602      	mov	r2, r0
 8012486:	f240 21ea 	movw	r1, #746	; 0x2ea
 801248a:	f7ff bb3b 	b.w	8011b04 <_dtoa_r+0x34>
 801248e:	693a      	ldr	r2, [r7, #16]
 8012490:	3202      	adds	r2, #2
 8012492:	0092      	lsls	r2, r2, #2
 8012494:	f107 010c 	add.w	r1, r7, #12
 8012498:	300c      	adds	r0, #12
 801249a:	f7fe f9ef 	bl	801087c <memcpy>
 801249e:	2201      	movs	r2, #1
 80124a0:	4629      	mov	r1, r5
 80124a2:	4620      	mov	r0, r4
 80124a4:	f000 fc70 	bl	8012d88 <__lshift>
 80124a8:	9b01      	ldr	r3, [sp, #4]
 80124aa:	f103 0901 	add.w	r9, r3, #1
 80124ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80124b2:	4413      	add	r3, r2
 80124b4:	9305      	str	r3, [sp, #20]
 80124b6:	f00a 0301 	and.w	r3, sl, #1
 80124ba:	46b8      	mov	r8, r7
 80124bc:	9304      	str	r3, [sp, #16]
 80124be:	4607      	mov	r7, r0
 80124c0:	4631      	mov	r1, r6
 80124c2:	ee18 0a10 	vmov	r0, s16
 80124c6:	f7ff fa75 	bl	80119b4 <quorem>
 80124ca:	4641      	mov	r1, r8
 80124cc:	9002      	str	r0, [sp, #8]
 80124ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80124d2:	ee18 0a10 	vmov	r0, s16
 80124d6:	f000 fcc7 	bl	8012e68 <__mcmp>
 80124da:	463a      	mov	r2, r7
 80124dc:	9003      	str	r0, [sp, #12]
 80124de:	4631      	mov	r1, r6
 80124e0:	4620      	mov	r0, r4
 80124e2:	f000 fcdd 	bl	8012ea0 <__mdiff>
 80124e6:	68c2      	ldr	r2, [r0, #12]
 80124e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80124ec:	4605      	mov	r5, r0
 80124ee:	bb02      	cbnz	r2, 8012532 <_dtoa_r+0xa62>
 80124f0:	4601      	mov	r1, r0
 80124f2:	ee18 0a10 	vmov	r0, s16
 80124f6:	f000 fcb7 	bl	8012e68 <__mcmp>
 80124fa:	4602      	mov	r2, r0
 80124fc:	4629      	mov	r1, r5
 80124fe:	4620      	mov	r0, r4
 8012500:	9207      	str	r2, [sp, #28]
 8012502:	f000 fa6f 	bl	80129e4 <_Bfree>
 8012506:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801250a:	ea43 0102 	orr.w	r1, r3, r2
 801250e:	9b04      	ldr	r3, [sp, #16]
 8012510:	430b      	orrs	r3, r1
 8012512:	464d      	mov	r5, r9
 8012514:	d10f      	bne.n	8012536 <_dtoa_r+0xa66>
 8012516:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801251a:	d02a      	beq.n	8012572 <_dtoa_r+0xaa2>
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	2b00      	cmp	r3, #0
 8012520:	dd02      	ble.n	8012528 <_dtoa_r+0xa58>
 8012522:	9b02      	ldr	r3, [sp, #8]
 8012524:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012528:	f88b a000 	strb.w	sl, [fp]
 801252c:	e775      	b.n	801241a <_dtoa_r+0x94a>
 801252e:	4638      	mov	r0, r7
 8012530:	e7ba      	b.n	80124a8 <_dtoa_r+0x9d8>
 8012532:	2201      	movs	r2, #1
 8012534:	e7e2      	b.n	80124fc <_dtoa_r+0xa2c>
 8012536:	9b03      	ldr	r3, [sp, #12]
 8012538:	2b00      	cmp	r3, #0
 801253a:	db04      	blt.n	8012546 <_dtoa_r+0xa76>
 801253c:	9906      	ldr	r1, [sp, #24]
 801253e:	430b      	orrs	r3, r1
 8012540:	9904      	ldr	r1, [sp, #16]
 8012542:	430b      	orrs	r3, r1
 8012544:	d122      	bne.n	801258c <_dtoa_r+0xabc>
 8012546:	2a00      	cmp	r2, #0
 8012548:	ddee      	ble.n	8012528 <_dtoa_r+0xa58>
 801254a:	ee18 1a10 	vmov	r1, s16
 801254e:	2201      	movs	r2, #1
 8012550:	4620      	mov	r0, r4
 8012552:	f000 fc19 	bl	8012d88 <__lshift>
 8012556:	4631      	mov	r1, r6
 8012558:	ee08 0a10 	vmov	s16, r0
 801255c:	f000 fc84 	bl	8012e68 <__mcmp>
 8012560:	2800      	cmp	r0, #0
 8012562:	dc03      	bgt.n	801256c <_dtoa_r+0xa9c>
 8012564:	d1e0      	bne.n	8012528 <_dtoa_r+0xa58>
 8012566:	f01a 0f01 	tst.w	sl, #1
 801256a:	d0dd      	beq.n	8012528 <_dtoa_r+0xa58>
 801256c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012570:	d1d7      	bne.n	8012522 <_dtoa_r+0xa52>
 8012572:	2339      	movs	r3, #57	; 0x39
 8012574:	f88b 3000 	strb.w	r3, [fp]
 8012578:	462b      	mov	r3, r5
 801257a:	461d      	mov	r5, r3
 801257c:	3b01      	subs	r3, #1
 801257e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012582:	2a39      	cmp	r2, #57	; 0x39
 8012584:	d071      	beq.n	801266a <_dtoa_r+0xb9a>
 8012586:	3201      	adds	r2, #1
 8012588:	701a      	strb	r2, [r3, #0]
 801258a:	e746      	b.n	801241a <_dtoa_r+0x94a>
 801258c:	2a00      	cmp	r2, #0
 801258e:	dd07      	ble.n	80125a0 <_dtoa_r+0xad0>
 8012590:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012594:	d0ed      	beq.n	8012572 <_dtoa_r+0xaa2>
 8012596:	f10a 0301 	add.w	r3, sl, #1
 801259a:	f88b 3000 	strb.w	r3, [fp]
 801259e:	e73c      	b.n	801241a <_dtoa_r+0x94a>
 80125a0:	9b05      	ldr	r3, [sp, #20]
 80125a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80125a6:	4599      	cmp	r9, r3
 80125a8:	d047      	beq.n	801263a <_dtoa_r+0xb6a>
 80125aa:	ee18 1a10 	vmov	r1, s16
 80125ae:	2300      	movs	r3, #0
 80125b0:	220a      	movs	r2, #10
 80125b2:	4620      	mov	r0, r4
 80125b4:	f000 fa38 	bl	8012a28 <__multadd>
 80125b8:	45b8      	cmp	r8, r7
 80125ba:	ee08 0a10 	vmov	s16, r0
 80125be:	f04f 0300 	mov.w	r3, #0
 80125c2:	f04f 020a 	mov.w	r2, #10
 80125c6:	4641      	mov	r1, r8
 80125c8:	4620      	mov	r0, r4
 80125ca:	d106      	bne.n	80125da <_dtoa_r+0xb0a>
 80125cc:	f000 fa2c 	bl	8012a28 <__multadd>
 80125d0:	4680      	mov	r8, r0
 80125d2:	4607      	mov	r7, r0
 80125d4:	f109 0901 	add.w	r9, r9, #1
 80125d8:	e772      	b.n	80124c0 <_dtoa_r+0x9f0>
 80125da:	f000 fa25 	bl	8012a28 <__multadd>
 80125de:	4639      	mov	r1, r7
 80125e0:	4680      	mov	r8, r0
 80125e2:	2300      	movs	r3, #0
 80125e4:	220a      	movs	r2, #10
 80125e6:	4620      	mov	r0, r4
 80125e8:	f000 fa1e 	bl	8012a28 <__multadd>
 80125ec:	4607      	mov	r7, r0
 80125ee:	e7f1      	b.n	80125d4 <_dtoa_r+0xb04>
 80125f0:	9b03      	ldr	r3, [sp, #12]
 80125f2:	9302      	str	r3, [sp, #8]
 80125f4:	9d01      	ldr	r5, [sp, #4]
 80125f6:	ee18 0a10 	vmov	r0, s16
 80125fa:	4631      	mov	r1, r6
 80125fc:	f7ff f9da 	bl	80119b4 <quorem>
 8012600:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012604:	9b01      	ldr	r3, [sp, #4]
 8012606:	f805 ab01 	strb.w	sl, [r5], #1
 801260a:	1aea      	subs	r2, r5, r3
 801260c:	9b02      	ldr	r3, [sp, #8]
 801260e:	4293      	cmp	r3, r2
 8012610:	dd09      	ble.n	8012626 <_dtoa_r+0xb56>
 8012612:	ee18 1a10 	vmov	r1, s16
 8012616:	2300      	movs	r3, #0
 8012618:	220a      	movs	r2, #10
 801261a:	4620      	mov	r0, r4
 801261c:	f000 fa04 	bl	8012a28 <__multadd>
 8012620:	ee08 0a10 	vmov	s16, r0
 8012624:	e7e7      	b.n	80125f6 <_dtoa_r+0xb26>
 8012626:	9b02      	ldr	r3, [sp, #8]
 8012628:	2b00      	cmp	r3, #0
 801262a:	bfc8      	it	gt
 801262c:	461d      	movgt	r5, r3
 801262e:	9b01      	ldr	r3, [sp, #4]
 8012630:	bfd8      	it	le
 8012632:	2501      	movle	r5, #1
 8012634:	441d      	add	r5, r3
 8012636:	f04f 0800 	mov.w	r8, #0
 801263a:	ee18 1a10 	vmov	r1, s16
 801263e:	2201      	movs	r2, #1
 8012640:	4620      	mov	r0, r4
 8012642:	f000 fba1 	bl	8012d88 <__lshift>
 8012646:	4631      	mov	r1, r6
 8012648:	ee08 0a10 	vmov	s16, r0
 801264c:	f000 fc0c 	bl	8012e68 <__mcmp>
 8012650:	2800      	cmp	r0, #0
 8012652:	dc91      	bgt.n	8012578 <_dtoa_r+0xaa8>
 8012654:	d102      	bne.n	801265c <_dtoa_r+0xb8c>
 8012656:	f01a 0f01 	tst.w	sl, #1
 801265a:	d18d      	bne.n	8012578 <_dtoa_r+0xaa8>
 801265c:	462b      	mov	r3, r5
 801265e:	461d      	mov	r5, r3
 8012660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012664:	2a30      	cmp	r2, #48	; 0x30
 8012666:	d0fa      	beq.n	801265e <_dtoa_r+0xb8e>
 8012668:	e6d7      	b.n	801241a <_dtoa_r+0x94a>
 801266a:	9a01      	ldr	r2, [sp, #4]
 801266c:	429a      	cmp	r2, r3
 801266e:	d184      	bne.n	801257a <_dtoa_r+0xaaa>
 8012670:	9b00      	ldr	r3, [sp, #0]
 8012672:	3301      	adds	r3, #1
 8012674:	9300      	str	r3, [sp, #0]
 8012676:	2331      	movs	r3, #49	; 0x31
 8012678:	7013      	strb	r3, [r2, #0]
 801267a:	e6ce      	b.n	801241a <_dtoa_r+0x94a>
 801267c:	4b09      	ldr	r3, [pc, #36]	; (80126a4 <_dtoa_r+0xbd4>)
 801267e:	f7ff ba95 	b.w	8011bac <_dtoa_r+0xdc>
 8012682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012684:	2b00      	cmp	r3, #0
 8012686:	f47f aa6e 	bne.w	8011b66 <_dtoa_r+0x96>
 801268a:	4b07      	ldr	r3, [pc, #28]	; (80126a8 <_dtoa_r+0xbd8>)
 801268c:	f7ff ba8e 	b.w	8011bac <_dtoa_r+0xdc>
 8012690:	9b02      	ldr	r3, [sp, #8]
 8012692:	2b00      	cmp	r3, #0
 8012694:	dcae      	bgt.n	80125f4 <_dtoa_r+0xb24>
 8012696:	9b06      	ldr	r3, [sp, #24]
 8012698:	2b02      	cmp	r3, #2
 801269a:	f73f aea8 	bgt.w	80123ee <_dtoa_r+0x91e>
 801269e:	e7a9      	b.n	80125f4 <_dtoa_r+0xb24>
 80126a0:	08015673 	.word	0x08015673
 80126a4:	08015438 	.word	0x08015438
 80126a8:	0801560b 	.word	0x0801560b

080126ac <__sflush_r>:
 80126ac:	898a      	ldrh	r2, [r1, #12]
 80126ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126b2:	4605      	mov	r5, r0
 80126b4:	0710      	lsls	r0, r2, #28
 80126b6:	460c      	mov	r4, r1
 80126b8:	d458      	bmi.n	801276c <__sflush_r+0xc0>
 80126ba:	684b      	ldr	r3, [r1, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	dc05      	bgt.n	80126cc <__sflush_r+0x20>
 80126c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	dc02      	bgt.n	80126cc <__sflush_r+0x20>
 80126c6:	2000      	movs	r0, #0
 80126c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126ce:	2e00      	cmp	r6, #0
 80126d0:	d0f9      	beq.n	80126c6 <__sflush_r+0x1a>
 80126d2:	2300      	movs	r3, #0
 80126d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80126d8:	682f      	ldr	r7, [r5, #0]
 80126da:	602b      	str	r3, [r5, #0]
 80126dc:	d032      	beq.n	8012744 <__sflush_r+0x98>
 80126de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	075a      	lsls	r2, r3, #29
 80126e4:	d505      	bpl.n	80126f2 <__sflush_r+0x46>
 80126e6:	6863      	ldr	r3, [r4, #4]
 80126e8:	1ac0      	subs	r0, r0, r3
 80126ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80126ec:	b10b      	cbz	r3, 80126f2 <__sflush_r+0x46>
 80126ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80126f0:	1ac0      	subs	r0, r0, r3
 80126f2:	2300      	movs	r3, #0
 80126f4:	4602      	mov	r2, r0
 80126f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126f8:	6a21      	ldr	r1, [r4, #32]
 80126fa:	4628      	mov	r0, r5
 80126fc:	47b0      	blx	r6
 80126fe:	1c43      	adds	r3, r0, #1
 8012700:	89a3      	ldrh	r3, [r4, #12]
 8012702:	d106      	bne.n	8012712 <__sflush_r+0x66>
 8012704:	6829      	ldr	r1, [r5, #0]
 8012706:	291d      	cmp	r1, #29
 8012708:	d82c      	bhi.n	8012764 <__sflush_r+0xb8>
 801270a:	4a2a      	ldr	r2, [pc, #168]	; (80127b4 <__sflush_r+0x108>)
 801270c:	40ca      	lsrs	r2, r1
 801270e:	07d6      	lsls	r6, r2, #31
 8012710:	d528      	bpl.n	8012764 <__sflush_r+0xb8>
 8012712:	2200      	movs	r2, #0
 8012714:	6062      	str	r2, [r4, #4]
 8012716:	04d9      	lsls	r1, r3, #19
 8012718:	6922      	ldr	r2, [r4, #16]
 801271a:	6022      	str	r2, [r4, #0]
 801271c:	d504      	bpl.n	8012728 <__sflush_r+0x7c>
 801271e:	1c42      	adds	r2, r0, #1
 8012720:	d101      	bne.n	8012726 <__sflush_r+0x7a>
 8012722:	682b      	ldr	r3, [r5, #0]
 8012724:	b903      	cbnz	r3, 8012728 <__sflush_r+0x7c>
 8012726:	6560      	str	r0, [r4, #84]	; 0x54
 8012728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801272a:	602f      	str	r7, [r5, #0]
 801272c:	2900      	cmp	r1, #0
 801272e:	d0ca      	beq.n	80126c6 <__sflush_r+0x1a>
 8012730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012734:	4299      	cmp	r1, r3
 8012736:	d002      	beq.n	801273e <__sflush_r+0x92>
 8012738:	4628      	mov	r0, r5
 801273a:	f7fe f8cb 	bl	80108d4 <_free_r>
 801273e:	2000      	movs	r0, #0
 8012740:	6360      	str	r0, [r4, #52]	; 0x34
 8012742:	e7c1      	b.n	80126c8 <__sflush_r+0x1c>
 8012744:	6a21      	ldr	r1, [r4, #32]
 8012746:	2301      	movs	r3, #1
 8012748:	4628      	mov	r0, r5
 801274a:	47b0      	blx	r6
 801274c:	1c41      	adds	r1, r0, #1
 801274e:	d1c7      	bne.n	80126e0 <__sflush_r+0x34>
 8012750:	682b      	ldr	r3, [r5, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d0c4      	beq.n	80126e0 <__sflush_r+0x34>
 8012756:	2b1d      	cmp	r3, #29
 8012758:	d001      	beq.n	801275e <__sflush_r+0xb2>
 801275a:	2b16      	cmp	r3, #22
 801275c:	d101      	bne.n	8012762 <__sflush_r+0xb6>
 801275e:	602f      	str	r7, [r5, #0]
 8012760:	e7b1      	b.n	80126c6 <__sflush_r+0x1a>
 8012762:	89a3      	ldrh	r3, [r4, #12]
 8012764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012768:	81a3      	strh	r3, [r4, #12]
 801276a:	e7ad      	b.n	80126c8 <__sflush_r+0x1c>
 801276c:	690f      	ldr	r7, [r1, #16]
 801276e:	2f00      	cmp	r7, #0
 8012770:	d0a9      	beq.n	80126c6 <__sflush_r+0x1a>
 8012772:	0793      	lsls	r3, r2, #30
 8012774:	680e      	ldr	r6, [r1, #0]
 8012776:	bf08      	it	eq
 8012778:	694b      	ldreq	r3, [r1, #20]
 801277a:	600f      	str	r7, [r1, #0]
 801277c:	bf18      	it	ne
 801277e:	2300      	movne	r3, #0
 8012780:	eba6 0807 	sub.w	r8, r6, r7
 8012784:	608b      	str	r3, [r1, #8]
 8012786:	f1b8 0f00 	cmp.w	r8, #0
 801278a:	dd9c      	ble.n	80126c6 <__sflush_r+0x1a>
 801278c:	6a21      	ldr	r1, [r4, #32]
 801278e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012790:	4643      	mov	r3, r8
 8012792:	463a      	mov	r2, r7
 8012794:	4628      	mov	r0, r5
 8012796:	47b0      	blx	r6
 8012798:	2800      	cmp	r0, #0
 801279a:	dc06      	bgt.n	80127aa <__sflush_r+0xfe>
 801279c:	89a3      	ldrh	r3, [r4, #12]
 801279e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127a2:	81a3      	strh	r3, [r4, #12]
 80127a4:	f04f 30ff 	mov.w	r0, #4294967295
 80127a8:	e78e      	b.n	80126c8 <__sflush_r+0x1c>
 80127aa:	4407      	add	r7, r0
 80127ac:	eba8 0800 	sub.w	r8, r8, r0
 80127b0:	e7e9      	b.n	8012786 <__sflush_r+0xda>
 80127b2:	bf00      	nop
 80127b4:	20400001 	.word	0x20400001

080127b8 <_fflush_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	690b      	ldr	r3, [r1, #16]
 80127bc:	4605      	mov	r5, r0
 80127be:	460c      	mov	r4, r1
 80127c0:	b913      	cbnz	r3, 80127c8 <_fflush_r+0x10>
 80127c2:	2500      	movs	r5, #0
 80127c4:	4628      	mov	r0, r5
 80127c6:	bd38      	pop	{r3, r4, r5, pc}
 80127c8:	b118      	cbz	r0, 80127d2 <_fflush_r+0x1a>
 80127ca:	6983      	ldr	r3, [r0, #24]
 80127cc:	b90b      	cbnz	r3, 80127d2 <_fflush_r+0x1a>
 80127ce:	f7fd ff6f 	bl	80106b0 <__sinit>
 80127d2:	4b14      	ldr	r3, [pc, #80]	; (8012824 <_fflush_r+0x6c>)
 80127d4:	429c      	cmp	r4, r3
 80127d6:	d11b      	bne.n	8012810 <_fflush_r+0x58>
 80127d8:	686c      	ldr	r4, [r5, #4]
 80127da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d0ef      	beq.n	80127c2 <_fflush_r+0xa>
 80127e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127e4:	07d0      	lsls	r0, r2, #31
 80127e6:	d404      	bmi.n	80127f2 <_fflush_r+0x3a>
 80127e8:	0599      	lsls	r1, r3, #22
 80127ea:	d402      	bmi.n	80127f2 <_fflush_r+0x3a>
 80127ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127ee:	f7fe f822 	bl	8010836 <__retarget_lock_acquire_recursive>
 80127f2:	4628      	mov	r0, r5
 80127f4:	4621      	mov	r1, r4
 80127f6:	f7ff ff59 	bl	80126ac <__sflush_r>
 80127fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127fc:	07da      	lsls	r2, r3, #31
 80127fe:	4605      	mov	r5, r0
 8012800:	d4e0      	bmi.n	80127c4 <_fflush_r+0xc>
 8012802:	89a3      	ldrh	r3, [r4, #12]
 8012804:	059b      	lsls	r3, r3, #22
 8012806:	d4dd      	bmi.n	80127c4 <_fflush_r+0xc>
 8012808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801280a:	f7fe f815 	bl	8010838 <__retarget_lock_release_recursive>
 801280e:	e7d9      	b.n	80127c4 <_fflush_r+0xc>
 8012810:	4b05      	ldr	r3, [pc, #20]	; (8012828 <_fflush_r+0x70>)
 8012812:	429c      	cmp	r4, r3
 8012814:	d101      	bne.n	801281a <_fflush_r+0x62>
 8012816:	68ac      	ldr	r4, [r5, #8]
 8012818:	e7df      	b.n	80127da <_fflush_r+0x22>
 801281a:	4b04      	ldr	r3, [pc, #16]	; (801282c <_fflush_r+0x74>)
 801281c:	429c      	cmp	r4, r3
 801281e:	bf08      	it	eq
 8012820:	68ec      	ldreq	r4, [r5, #12]
 8012822:	e7da      	b.n	80127da <_fflush_r+0x22>
 8012824:	080153e4 	.word	0x080153e4
 8012828:	08015404 	.word	0x08015404
 801282c:	080153c4 	.word	0x080153c4

08012830 <fiprintf>:
 8012830:	b40e      	push	{r1, r2, r3}
 8012832:	b503      	push	{r0, r1, lr}
 8012834:	4601      	mov	r1, r0
 8012836:	ab03      	add	r3, sp, #12
 8012838:	4805      	ldr	r0, [pc, #20]	; (8012850 <fiprintf+0x20>)
 801283a:	f853 2b04 	ldr.w	r2, [r3], #4
 801283e:	6800      	ldr	r0, [r0, #0]
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	f000 fd99 	bl	8013378 <_vfiprintf_r>
 8012846:	b002      	add	sp, #8
 8012848:	f85d eb04 	ldr.w	lr, [sp], #4
 801284c:	b003      	add	sp, #12
 801284e:	4770      	bx	lr
 8012850:	20000204 	.word	0x20000204

08012854 <_localeconv_r>:
 8012854:	4800      	ldr	r0, [pc, #0]	; (8012858 <_localeconv_r+0x4>)
 8012856:	4770      	bx	lr
 8012858:	20000358 	.word	0x20000358

0801285c <_lseek_r>:
 801285c:	b538      	push	{r3, r4, r5, lr}
 801285e:	4d07      	ldr	r5, [pc, #28]	; (801287c <_lseek_r+0x20>)
 8012860:	4604      	mov	r4, r0
 8012862:	4608      	mov	r0, r1
 8012864:	4611      	mov	r1, r2
 8012866:	2200      	movs	r2, #0
 8012868:	602a      	str	r2, [r5, #0]
 801286a:	461a      	mov	r2, r3
 801286c:	f000 ffce 	bl	801380c <_lseek>
 8012870:	1c43      	adds	r3, r0, #1
 8012872:	d102      	bne.n	801287a <_lseek_r+0x1e>
 8012874:	682b      	ldr	r3, [r5, #0]
 8012876:	b103      	cbz	r3, 801287a <_lseek_r+0x1e>
 8012878:	6023      	str	r3, [r4, #0]
 801287a:	bd38      	pop	{r3, r4, r5, pc}
 801287c:	2000a9a4 	.word	0x2000a9a4

08012880 <__swhatbuf_r>:
 8012880:	b570      	push	{r4, r5, r6, lr}
 8012882:	460e      	mov	r6, r1
 8012884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012888:	2900      	cmp	r1, #0
 801288a:	b096      	sub	sp, #88	; 0x58
 801288c:	4614      	mov	r4, r2
 801288e:	461d      	mov	r5, r3
 8012890:	da08      	bge.n	80128a4 <__swhatbuf_r+0x24>
 8012892:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012896:	2200      	movs	r2, #0
 8012898:	602a      	str	r2, [r5, #0]
 801289a:	061a      	lsls	r2, r3, #24
 801289c:	d410      	bmi.n	80128c0 <__swhatbuf_r+0x40>
 801289e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128a2:	e00e      	b.n	80128c2 <__swhatbuf_r+0x42>
 80128a4:	466a      	mov	r2, sp
 80128a6:	f000 feb1 	bl	801360c <_fstat_r>
 80128aa:	2800      	cmp	r0, #0
 80128ac:	dbf1      	blt.n	8012892 <__swhatbuf_r+0x12>
 80128ae:	9a01      	ldr	r2, [sp, #4]
 80128b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80128b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80128b8:	425a      	negs	r2, r3
 80128ba:	415a      	adcs	r2, r3
 80128bc:	602a      	str	r2, [r5, #0]
 80128be:	e7ee      	b.n	801289e <__swhatbuf_r+0x1e>
 80128c0:	2340      	movs	r3, #64	; 0x40
 80128c2:	2000      	movs	r0, #0
 80128c4:	6023      	str	r3, [r4, #0]
 80128c6:	b016      	add	sp, #88	; 0x58
 80128c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080128cc <__smakebuf_r>:
 80128cc:	898b      	ldrh	r3, [r1, #12]
 80128ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128d0:	079d      	lsls	r5, r3, #30
 80128d2:	4606      	mov	r6, r0
 80128d4:	460c      	mov	r4, r1
 80128d6:	d507      	bpl.n	80128e8 <__smakebuf_r+0x1c>
 80128d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	6123      	str	r3, [r4, #16]
 80128e0:	2301      	movs	r3, #1
 80128e2:	6163      	str	r3, [r4, #20]
 80128e4:	b002      	add	sp, #8
 80128e6:	bd70      	pop	{r4, r5, r6, pc}
 80128e8:	ab01      	add	r3, sp, #4
 80128ea:	466a      	mov	r2, sp
 80128ec:	f7ff ffc8 	bl	8012880 <__swhatbuf_r>
 80128f0:	9900      	ldr	r1, [sp, #0]
 80128f2:	4605      	mov	r5, r0
 80128f4:	4630      	mov	r0, r6
 80128f6:	f7fe f859 	bl	80109ac <_malloc_r>
 80128fa:	b948      	cbnz	r0, 8012910 <__smakebuf_r+0x44>
 80128fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012900:	059a      	lsls	r2, r3, #22
 8012902:	d4ef      	bmi.n	80128e4 <__smakebuf_r+0x18>
 8012904:	f023 0303 	bic.w	r3, r3, #3
 8012908:	f043 0302 	orr.w	r3, r3, #2
 801290c:	81a3      	strh	r3, [r4, #12]
 801290e:	e7e3      	b.n	80128d8 <__smakebuf_r+0xc>
 8012910:	4b0d      	ldr	r3, [pc, #52]	; (8012948 <__smakebuf_r+0x7c>)
 8012912:	62b3      	str	r3, [r6, #40]	; 0x28
 8012914:	89a3      	ldrh	r3, [r4, #12]
 8012916:	6020      	str	r0, [r4, #0]
 8012918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801291c:	81a3      	strh	r3, [r4, #12]
 801291e:	9b00      	ldr	r3, [sp, #0]
 8012920:	6163      	str	r3, [r4, #20]
 8012922:	9b01      	ldr	r3, [sp, #4]
 8012924:	6120      	str	r0, [r4, #16]
 8012926:	b15b      	cbz	r3, 8012940 <__smakebuf_r+0x74>
 8012928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801292c:	4630      	mov	r0, r6
 801292e:	f000 fe7f 	bl	8013630 <_isatty_r>
 8012932:	b128      	cbz	r0, 8012940 <__smakebuf_r+0x74>
 8012934:	89a3      	ldrh	r3, [r4, #12]
 8012936:	f023 0303 	bic.w	r3, r3, #3
 801293a:	f043 0301 	orr.w	r3, r3, #1
 801293e:	81a3      	strh	r3, [r4, #12]
 8012940:	89a0      	ldrh	r0, [r4, #12]
 8012942:	4305      	orrs	r5, r0
 8012944:	81a5      	strh	r5, [r4, #12]
 8012946:	e7cd      	b.n	80128e4 <__smakebuf_r+0x18>
 8012948:	08010649 	.word	0x08010649

0801294c <__malloc_lock>:
 801294c:	4801      	ldr	r0, [pc, #4]	; (8012954 <__malloc_lock+0x8>)
 801294e:	f7fd bf72 	b.w	8010836 <__retarget_lock_acquire_recursive>
 8012952:	bf00      	nop
 8012954:	2000a998 	.word	0x2000a998

08012958 <__malloc_unlock>:
 8012958:	4801      	ldr	r0, [pc, #4]	; (8012960 <__malloc_unlock+0x8>)
 801295a:	f7fd bf6d 	b.w	8010838 <__retarget_lock_release_recursive>
 801295e:	bf00      	nop
 8012960:	2000a998 	.word	0x2000a998

08012964 <_Balloc>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012968:	4604      	mov	r4, r0
 801296a:	460d      	mov	r5, r1
 801296c:	b976      	cbnz	r6, 801298c <_Balloc+0x28>
 801296e:	2010      	movs	r0, #16
 8012970:	f7fd ff64 	bl	801083c <malloc>
 8012974:	4602      	mov	r2, r0
 8012976:	6260      	str	r0, [r4, #36]	; 0x24
 8012978:	b920      	cbnz	r0, 8012984 <_Balloc+0x20>
 801297a:	4b18      	ldr	r3, [pc, #96]	; (80129dc <_Balloc+0x78>)
 801297c:	4818      	ldr	r0, [pc, #96]	; (80129e0 <_Balloc+0x7c>)
 801297e:	2166      	movs	r1, #102	; 0x66
 8012980:	f7fe ffea 	bl	8011958 <__assert_func>
 8012984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012988:	6006      	str	r6, [r0, #0]
 801298a:	60c6      	str	r6, [r0, #12]
 801298c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801298e:	68f3      	ldr	r3, [r6, #12]
 8012990:	b183      	cbz	r3, 80129b4 <_Balloc+0x50>
 8012992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801299a:	b9b8      	cbnz	r0, 80129cc <_Balloc+0x68>
 801299c:	2101      	movs	r1, #1
 801299e:	fa01 f605 	lsl.w	r6, r1, r5
 80129a2:	1d72      	adds	r2, r6, #5
 80129a4:	0092      	lsls	r2, r2, #2
 80129a6:	4620      	mov	r0, r4
 80129a8:	f7fd ff7e 	bl	80108a8 <_calloc_r>
 80129ac:	b160      	cbz	r0, 80129c8 <_Balloc+0x64>
 80129ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80129b2:	e00e      	b.n	80129d2 <_Balloc+0x6e>
 80129b4:	2221      	movs	r2, #33	; 0x21
 80129b6:	2104      	movs	r1, #4
 80129b8:	4620      	mov	r0, r4
 80129ba:	f7fd ff75 	bl	80108a8 <_calloc_r>
 80129be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129c0:	60f0      	str	r0, [r6, #12]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d1e4      	bne.n	8012992 <_Balloc+0x2e>
 80129c8:	2000      	movs	r0, #0
 80129ca:	bd70      	pop	{r4, r5, r6, pc}
 80129cc:	6802      	ldr	r2, [r0, #0]
 80129ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80129d2:	2300      	movs	r3, #0
 80129d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80129d8:	e7f7      	b.n	80129ca <_Balloc+0x66>
 80129da:	bf00      	nop
 80129dc:	0801545c 	.word	0x0801545c
 80129e0:	08015684 	.word	0x08015684

080129e4 <_Bfree>:
 80129e4:	b570      	push	{r4, r5, r6, lr}
 80129e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80129e8:	4605      	mov	r5, r0
 80129ea:	460c      	mov	r4, r1
 80129ec:	b976      	cbnz	r6, 8012a0c <_Bfree+0x28>
 80129ee:	2010      	movs	r0, #16
 80129f0:	f7fd ff24 	bl	801083c <malloc>
 80129f4:	4602      	mov	r2, r0
 80129f6:	6268      	str	r0, [r5, #36]	; 0x24
 80129f8:	b920      	cbnz	r0, 8012a04 <_Bfree+0x20>
 80129fa:	4b09      	ldr	r3, [pc, #36]	; (8012a20 <_Bfree+0x3c>)
 80129fc:	4809      	ldr	r0, [pc, #36]	; (8012a24 <_Bfree+0x40>)
 80129fe:	218a      	movs	r1, #138	; 0x8a
 8012a00:	f7fe ffaa 	bl	8011958 <__assert_func>
 8012a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a08:	6006      	str	r6, [r0, #0]
 8012a0a:	60c6      	str	r6, [r0, #12]
 8012a0c:	b13c      	cbz	r4, 8012a1e <_Bfree+0x3a>
 8012a0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012a10:	6862      	ldr	r2, [r4, #4]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a18:	6021      	str	r1, [r4, #0]
 8012a1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012a1e:	bd70      	pop	{r4, r5, r6, pc}
 8012a20:	0801545c 	.word	0x0801545c
 8012a24:	08015684 	.word	0x08015684

08012a28 <__multadd>:
 8012a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2c:	690d      	ldr	r5, [r1, #16]
 8012a2e:	4607      	mov	r7, r0
 8012a30:	460c      	mov	r4, r1
 8012a32:	461e      	mov	r6, r3
 8012a34:	f101 0c14 	add.w	ip, r1, #20
 8012a38:	2000      	movs	r0, #0
 8012a3a:	f8dc 3000 	ldr.w	r3, [ip]
 8012a3e:	b299      	uxth	r1, r3
 8012a40:	fb02 6101 	mla	r1, r2, r1, r6
 8012a44:	0c1e      	lsrs	r6, r3, #16
 8012a46:	0c0b      	lsrs	r3, r1, #16
 8012a48:	fb02 3306 	mla	r3, r2, r6, r3
 8012a4c:	b289      	uxth	r1, r1
 8012a4e:	3001      	adds	r0, #1
 8012a50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012a54:	4285      	cmp	r5, r0
 8012a56:	f84c 1b04 	str.w	r1, [ip], #4
 8012a5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012a5e:	dcec      	bgt.n	8012a3a <__multadd+0x12>
 8012a60:	b30e      	cbz	r6, 8012aa6 <__multadd+0x7e>
 8012a62:	68a3      	ldr	r3, [r4, #8]
 8012a64:	42ab      	cmp	r3, r5
 8012a66:	dc19      	bgt.n	8012a9c <__multadd+0x74>
 8012a68:	6861      	ldr	r1, [r4, #4]
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	3101      	adds	r1, #1
 8012a6e:	f7ff ff79 	bl	8012964 <_Balloc>
 8012a72:	4680      	mov	r8, r0
 8012a74:	b928      	cbnz	r0, 8012a82 <__multadd+0x5a>
 8012a76:	4602      	mov	r2, r0
 8012a78:	4b0c      	ldr	r3, [pc, #48]	; (8012aac <__multadd+0x84>)
 8012a7a:	480d      	ldr	r0, [pc, #52]	; (8012ab0 <__multadd+0x88>)
 8012a7c:	21b5      	movs	r1, #181	; 0xb5
 8012a7e:	f7fe ff6b 	bl	8011958 <__assert_func>
 8012a82:	6922      	ldr	r2, [r4, #16]
 8012a84:	3202      	adds	r2, #2
 8012a86:	f104 010c 	add.w	r1, r4, #12
 8012a8a:	0092      	lsls	r2, r2, #2
 8012a8c:	300c      	adds	r0, #12
 8012a8e:	f7fd fef5 	bl	801087c <memcpy>
 8012a92:	4621      	mov	r1, r4
 8012a94:	4638      	mov	r0, r7
 8012a96:	f7ff ffa5 	bl	80129e4 <_Bfree>
 8012a9a:	4644      	mov	r4, r8
 8012a9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012aa0:	3501      	adds	r5, #1
 8012aa2:	615e      	str	r6, [r3, #20]
 8012aa4:	6125      	str	r5, [r4, #16]
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aac:	08015673 	.word	0x08015673
 8012ab0:	08015684 	.word	0x08015684

08012ab4 <__hi0bits>:
 8012ab4:	0c03      	lsrs	r3, r0, #16
 8012ab6:	041b      	lsls	r3, r3, #16
 8012ab8:	b9d3      	cbnz	r3, 8012af0 <__hi0bits+0x3c>
 8012aba:	0400      	lsls	r0, r0, #16
 8012abc:	2310      	movs	r3, #16
 8012abe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ac2:	bf04      	itt	eq
 8012ac4:	0200      	lsleq	r0, r0, #8
 8012ac6:	3308      	addeq	r3, #8
 8012ac8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012acc:	bf04      	itt	eq
 8012ace:	0100      	lsleq	r0, r0, #4
 8012ad0:	3304      	addeq	r3, #4
 8012ad2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ad6:	bf04      	itt	eq
 8012ad8:	0080      	lsleq	r0, r0, #2
 8012ada:	3302      	addeq	r3, #2
 8012adc:	2800      	cmp	r0, #0
 8012ade:	db05      	blt.n	8012aec <__hi0bits+0x38>
 8012ae0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ae4:	f103 0301 	add.w	r3, r3, #1
 8012ae8:	bf08      	it	eq
 8012aea:	2320      	moveq	r3, #32
 8012aec:	4618      	mov	r0, r3
 8012aee:	4770      	bx	lr
 8012af0:	2300      	movs	r3, #0
 8012af2:	e7e4      	b.n	8012abe <__hi0bits+0xa>

08012af4 <__lo0bits>:
 8012af4:	6803      	ldr	r3, [r0, #0]
 8012af6:	f013 0207 	ands.w	r2, r3, #7
 8012afa:	4601      	mov	r1, r0
 8012afc:	d00b      	beq.n	8012b16 <__lo0bits+0x22>
 8012afe:	07da      	lsls	r2, r3, #31
 8012b00:	d423      	bmi.n	8012b4a <__lo0bits+0x56>
 8012b02:	0798      	lsls	r0, r3, #30
 8012b04:	bf49      	itett	mi
 8012b06:	085b      	lsrmi	r3, r3, #1
 8012b08:	089b      	lsrpl	r3, r3, #2
 8012b0a:	2001      	movmi	r0, #1
 8012b0c:	600b      	strmi	r3, [r1, #0]
 8012b0e:	bf5c      	itt	pl
 8012b10:	600b      	strpl	r3, [r1, #0]
 8012b12:	2002      	movpl	r0, #2
 8012b14:	4770      	bx	lr
 8012b16:	b298      	uxth	r0, r3
 8012b18:	b9a8      	cbnz	r0, 8012b46 <__lo0bits+0x52>
 8012b1a:	0c1b      	lsrs	r3, r3, #16
 8012b1c:	2010      	movs	r0, #16
 8012b1e:	b2da      	uxtb	r2, r3
 8012b20:	b90a      	cbnz	r2, 8012b26 <__lo0bits+0x32>
 8012b22:	3008      	adds	r0, #8
 8012b24:	0a1b      	lsrs	r3, r3, #8
 8012b26:	071a      	lsls	r2, r3, #28
 8012b28:	bf04      	itt	eq
 8012b2a:	091b      	lsreq	r3, r3, #4
 8012b2c:	3004      	addeq	r0, #4
 8012b2e:	079a      	lsls	r2, r3, #30
 8012b30:	bf04      	itt	eq
 8012b32:	089b      	lsreq	r3, r3, #2
 8012b34:	3002      	addeq	r0, #2
 8012b36:	07da      	lsls	r2, r3, #31
 8012b38:	d403      	bmi.n	8012b42 <__lo0bits+0x4e>
 8012b3a:	085b      	lsrs	r3, r3, #1
 8012b3c:	f100 0001 	add.w	r0, r0, #1
 8012b40:	d005      	beq.n	8012b4e <__lo0bits+0x5a>
 8012b42:	600b      	str	r3, [r1, #0]
 8012b44:	4770      	bx	lr
 8012b46:	4610      	mov	r0, r2
 8012b48:	e7e9      	b.n	8012b1e <__lo0bits+0x2a>
 8012b4a:	2000      	movs	r0, #0
 8012b4c:	4770      	bx	lr
 8012b4e:	2020      	movs	r0, #32
 8012b50:	4770      	bx	lr
	...

08012b54 <__i2b>:
 8012b54:	b510      	push	{r4, lr}
 8012b56:	460c      	mov	r4, r1
 8012b58:	2101      	movs	r1, #1
 8012b5a:	f7ff ff03 	bl	8012964 <_Balloc>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	b928      	cbnz	r0, 8012b6e <__i2b+0x1a>
 8012b62:	4b05      	ldr	r3, [pc, #20]	; (8012b78 <__i2b+0x24>)
 8012b64:	4805      	ldr	r0, [pc, #20]	; (8012b7c <__i2b+0x28>)
 8012b66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012b6a:	f7fe fef5 	bl	8011958 <__assert_func>
 8012b6e:	2301      	movs	r3, #1
 8012b70:	6144      	str	r4, [r0, #20]
 8012b72:	6103      	str	r3, [r0, #16]
 8012b74:	bd10      	pop	{r4, pc}
 8012b76:	bf00      	nop
 8012b78:	08015673 	.word	0x08015673
 8012b7c:	08015684 	.word	0x08015684

08012b80 <__multiply>:
 8012b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b84:	4691      	mov	r9, r2
 8012b86:	690a      	ldr	r2, [r1, #16]
 8012b88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	bfb8      	it	lt
 8012b90:	460b      	movlt	r3, r1
 8012b92:	460c      	mov	r4, r1
 8012b94:	bfbc      	itt	lt
 8012b96:	464c      	movlt	r4, r9
 8012b98:	4699      	movlt	r9, r3
 8012b9a:	6927      	ldr	r7, [r4, #16]
 8012b9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012ba0:	68a3      	ldr	r3, [r4, #8]
 8012ba2:	6861      	ldr	r1, [r4, #4]
 8012ba4:	eb07 060a 	add.w	r6, r7, sl
 8012ba8:	42b3      	cmp	r3, r6
 8012baa:	b085      	sub	sp, #20
 8012bac:	bfb8      	it	lt
 8012bae:	3101      	addlt	r1, #1
 8012bb0:	f7ff fed8 	bl	8012964 <_Balloc>
 8012bb4:	b930      	cbnz	r0, 8012bc4 <__multiply+0x44>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	4b44      	ldr	r3, [pc, #272]	; (8012ccc <__multiply+0x14c>)
 8012bba:	4845      	ldr	r0, [pc, #276]	; (8012cd0 <__multiply+0x150>)
 8012bbc:	f240 115d 	movw	r1, #349	; 0x15d
 8012bc0:	f7fe feca 	bl	8011958 <__assert_func>
 8012bc4:	f100 0514 	add.w	r5, r0, #20
 8012bc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012bcc:	462b      	mov	r3, r5
 8012bce:	2200      	movs	r2, #0
 8012bd0:	4543      	cmp	r3, r8
 8012bd2:	d321      	bcc.n	8012c18 <__multiply+0x98>
 8012bd4:	f104 0314 	add.w	r3, r4, #20
 8012bd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012bdc:	f109 0314 	add.w	r3, r9, #20
 8012be0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012be4:	9202      	str	r2, [sp, #8]
 8012be6:	1b3a      	subs	r2, r7, r4
 8012be8:	3a15      	subs	r2, #21
 8012bea:	f022 0203 	bic.w	r2, r2, #3
 8012bee:	3204      	adds	r2, #4
 8012bf0:	f104 0115 	add.w	r1, r4, #21
 8012bf4:	428f      	cmp	r7, r1
 8012bf6:	bf38      	it	cc
 8012bf8:	2204      	movcc	r2, #4
 8012bfa:	9201      	str	r2, [sp, #4]
 8012bfc:	9a02      	ldr	r2, [sp, #8]
 8012bfe:	9303      	str	r3, [sp, #12]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d80c      	bhi.n	8012c1e <__multiply+0x9e>
 8012c04:	2e00      	cmp	r6, #0
 8012c06:	dd03      	ble.n	8012c10 <__multiply+0x90>
 8012c08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d05a      	beq.n	8012cc6 <__multiply+0x146>
 8012c10:	6106      	str	r6, [r0, #16]
 8012c12:	b005      	add	sp, #20
 8012c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c18:	f843 2b04 	str.w	r2, [r3], #4
 8012c1c:	e7d8      	b.n	8012bd0 <__multiply+0x50>
 8012c1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c22:	f1ba 0f00 	cmp.w	sl, #0
 8012c26:	d024      	beq.n	8012c72 <__multiply+0xf2>
 8012c28:	f104 0e14 	add.w	lr, r4, #20
 8012c2c:	46a9      	mov	r9, r5
 8012c2e:	f04f 0c00 	mov.w	ip, #0
 8012c32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c36:	f8d9 1000 	ldr.w	r1, [r9]
 8012c3a:	fa1f fb82 	uxth.w	fp, r2
 8012c3e:	b289      	uxth	r1, r1
 8012c40:	fb0a 110b 	mla	r1, sl, fp, r1
 8012c44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012c48:	f8d9 2000 	ldr.w	r2, [r9]
 8012c4c:	4461      	add	r1, ip
 8012c4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c52:	fb0a c20b 	mla	r2, sl, fp, ip
 8012c56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012c5a:	b289      	uxth	r1, r1
 8012c5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012c60:	4577      	cmp	r7, lr
 8012c62:	f849 1b04 	str.w	r1, [r9], #4
 8012c66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c6a:	d8e2      	bhi.n	8012c32 <__multiply+0xb2>
 8012c6c:	9a01      	ldr	r2, [sp, #4]
 8012c6e:	f845 c002 	str.w	ip, [r5, r2]
 8012c72:	9a03      	ldr	r2, [sp, #12]
 8012c74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c78:	3304      	adds	r3, #4
 8012c7a:	f1b9 0f00 	cmp.w	r9, #0
 8012c7e:	d020      	beq.n	8012cc2 <__multiply+0x142>
 8012c80:	6829      	ldr	r1, [r5, #0]
 8012c82:	f104 0c14 	add.w	ip, r4, #20
 8012c86:	46ae      	mov	lr, r5
 8012c88:	f04f 0a00 	mov.w	sl, #0
 8012c8c:	f8bc b000 	ldrh.w	fp, [ip]
 8012c90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012c94:	fb09 220b 	mla	r2, r9, fp, r2
 8012c98:	4492      	add	sl, r2
 8012c9a:	b289      	uxth	r1, r1
 8012c9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012ca0:	f84e 1b04 	str.w	r1, [lr], #4
 8012ca4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012ca8:	f8be 1000 	ldrh.w	r1, [lr]
 8012cac:	0c12      	lsrs	r2, r2, #16
 8012cae:	fb09 1102 	mla	r1, r9, r2, r1
 8012cb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012cb6:	4567      	cmp	r7, ip
 8012cb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012cbc:	d8e6      	bhi.n	8012c8c <__multiply+0x10c>
 8012cbe:	9a01      	ldr	r2, [sp, #4]
 8012cc0:	50a9      	str	r1, [r5, r2]
 8012cc2:	3504      	adds	r5, #4
 8012cc4:	e79a      	b.n	8012bfc <__multiply+0x7c>
 8012cc6:	3e01      	subs	r6, #1
 8012cc8:	e79c      	b.n	8012c04 <__multiply+0x84>
 8012cca:	bf00      	nop
 8012ccc:	08015673 	.word	0x08015673
 8012cd0:	08015684 	.word	0x08015684

08012cd4 <__pow5mult>:
 8012cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cd8:	4615      	mov	r5, r2
 8012cda:	f012 0203 	ands.w	r2, r2, #3
 8012cde:	4606      	mov	r6, r0
 8012ce0:	460f      	mov	r7, r1
 8012ce2:	d007      	beq.n	8012cf4 <__pow5mult+0x20>
 8012ce4:	4c25      	ldr	r4, [pc, #148]	; (8012d7c <__pow5mult+0xa8>)
 8012ce6:	3a01      	subs	r2, #1
 8012ce8:	2300      	movs	r3, #0
 8012cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012cee:	f7ff fe9b 	bl	8012a28 <__multadd>
 8012cf2:	4607      	mov	r7, r0
 8012cf4:	10ad      	asrs	r5, r5, #2
 8012cf6:	d03d      	beq.n	8012d74 <__pow5mult+0xa0>
 8012cf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012cfa:	b97c      	cbnz	r4, 8012d1c <__pow5mult+0x48>
 8012cfc:	2010      	movs	r0, #16
 8012cfe:	f7fd fd9d 	bl	801083c <malloc>
 8012d02:	4602      	mov	r2, r0
 8012d04:	6270      	str	r0, [r6, #36]	; 0x24
 8012d06:	b928      	cbnz	r0, 8012d14 <__pow5mult+0x40>
 8012d08:	4b1d      	ldr	r3, [pc, #116]	; (8012d80 <__pow5mult+0xac>)
 8012d0a:	481e      	ldr	r0, [pc, #120]	; (8012d84 <__pow5mult+0xb0>)
 8012d0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012d10:	f7fe fe22 	bl	8011958 <__assert_func>
 8012d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d18:	6004      	str	r4, [r0, #0]
 8012d1a:	60c4      	str	r4, [r0, #12]
 8012d1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d24:	b94c      	cbnz	r4, 8012d3a <__pow5mult+0x66>
 8012d26:	f240 2171 	movw	r1, #625	; 0x271
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	f7ff ff12 	bl	8012b54 <__i2b>
 8012d30:	2300      	movs	r3, #0
 8012d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d36:	4604      	mov	r4, r0
 8012d38:	6003      	str	r3, [r0, #0]
 8012d3a:	f04f 0900 	mov.w	r9, #0
 8012d3e:	07eb      	lsls	r3, r5, #31
 8012d40:	d50a      	bpl.n	8012d58 <__pow5mult+0x84>
 8012d42:	4639      	mov	r1, r7
 8012d44:	4622      	mov	r2, r4
 8012d46:	4630      	mov	r0, r6
 8012d48:	f7ff ff1a 	bl	8012b80 <__multiply>
 8012d4c:	4639      	mov	r1, r7
 8012d4e:	4680      	mov	r8, r0
 8012d50:	4630      	mov	r0, r6
 8012d52:	f7ff fe47 	bl	80129e4 <_Bfree>
 8012d56:	4647      	mov	r7, r8
 8012d58:	106d      	asrs	r5, r5, #1
 8012d5a:	d00b      	beq.n	8012d74 <__pow5mult+0xa0>
 8012d5c:	6820      	ldr	r0, [r4, #0]
 8012d5e:	b938      	cbnz	r0, 8012d70 <__pow5mult+0x9c>
 8012d60:	4622      	mov	r2, r4
 8012d62:	4621      	mov	r1, r4
 8012d64:	4630      	mov	r0, r6
 8012d66:	f7ff ff0b 	bl	8012b80 <__multiply>
 8012d6a:	6020      	str	r0, [r4, #0]
 8012d6c:	f8c0 9000 	str.w	r9, [r0]
 8012d70:	4604      	mov	r4, r0
 8012d72:	e7e4      	b.n	8012d3e <__pow5mult+0x6a>
 8012d74:	4638      	mov	r0, r7
 8012d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d7a:	bf00      	nop
 8012d7c:	080157d0 	.word	0x080157d0
 8012d80:	0801545c 	.word	0x0801545c
 8012d84:	08015684 	.word	0x08015684

08012d88 <__lshift>:
 8012d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	6849      	ldr	r1, [r1, #4]
 8012d90:	6923      	ldr	r3, [r4, #16]
 8012d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012d96:	68a3      	ldr	r3, [r4, #8]
 8012d98:	4607      	mov	r7, r0
 8012d9a:	4691      	mov	r9, r2
 8012d9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012da0:	f108 0601 	add.w	r6, r8, #1
 8012da4:	42b3      	cmp	r3, r6
 8012da6:	db0b      	blt.n	8012dc0 <__lshift+0x38>
 8012da8:	4638      	mov	r0, r7
 8012daa:	f7ff fddb 	bl	8012964 <_Balloc>
 8012dae:	4605      	mov	r5, r0
 8012db0:	b948      	cbnz	r0, 8012dc6 <__lshift+0x3e>
 8012db2:	4602      	mov	r2, r0
 8012db4:	4b2a      	ldr	r3, [pc, #168]	; (8012e60 <__lshift+0xd8>)
 8012db6:	482b      	ldr	r0, [pc, #172]	; (8012e64 <__lshift+0xdc>)
 8012db8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012dbc:	f7fe fdcc 	bl	8011958 <__assert_func>
 8012dc0:	3101      	adds	r1, #1
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	e7ee      	b.n	8012da4 <__lshift+0x1c>
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	f100 0114 	add.w	r1, r0, #20
 8012dcc:	f100 0210 	add.w	r2, r0, #16
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	4553      	cmp	r3, sl
 8012dd4:	db37      	blt.n	8012e46 <__lshift+0xbe>
 8012dd6:	6920      	ldr	r0, [r4, #16]
 8012dd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ddc:	f104 0314 	add.w	r3, r4, #20
 8012de0:	f019 091f 	ands.w	r9, r9, #31
 8012de4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012de8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012dec:	d02f      	beq.n	8012e4e <__lshift+0xc6>
 8012dee:	f1c9 0e20 	rsb	lr, r9, #32
 8012df2:	468a      	mov	sl, r1
 8012df4:	f04f 0c00 	mov.w	ip, #0
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	fa02 f209 	lsl.w	r2, r2, r9
 8012dfe:	ea42 020c 	orr.w	r2, r2, ip
 8012e02:	f84a 2b04 	str.w	r2, [sl], #4
 8012e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e0a:	4298      	cmp	r0, r3
 8012e0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012e10:	d8f2      	bhi.n	8012df8 <__lshift+0x70>
 8012e12:	1b03      	subs	r3, r0, r4
 8012e14:	3b15      	subs	r3, #21
 8012e16:	f023 0303 	bic.w	r3, r3, #3
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	f104 0215 	add.w	r2, r4, #21
 8012e20:	4290      	cmp	r0, r2
 8012e22:	bf38      	it	cc
 8012e24:	2304      	movcc	r3, #4
 8012e26:	f841 c003 	str.w	ip, [r1, r3]
 8012e2a:	f1bc 0f00 	cmp.w	ip, #0
 8012e2e:	d001      	beq.n	8012e34 <__lshift+0xac>
 8012e30:	f108 0602 	add.w	r6, r8, #2
 8012e34:	3e01      	subs	r6, #1
 8012e36:	4638      	mov	r0, r7
 8012e38:	612e      	str	r6, [r5, #16]
 8012e3a:	4621      	mov	r1, r4
 8012e3c:	f7ff fdd2 	bl	80129e4 <_Bfree>
 8012e40:	4628      	mov	r0, r5
 8012e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e4a:	3301      	adds	r3, #1
 8012e4c:	e7c1      	b.n	8012dd2 <__lshift+0x4a>
 8012e4e:	3904      	subs	r1, #4
 8012e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e58:	4298      	cmp	r0, r3
 8012e5a:	d8f9      	bhi.n	8012e50 <__lshift+0xc8>
 8012e5c:	e7ea      	b.n	8012e34 <__lshift+0xac>
 8012e5e:	bf00      	nop
 8012e60:	08015673 	.word	0x08015673
 8012e64:	08015684 	.word	0x08015684

08012e68 <__mcmp>:
 8012e68:	b530      	push	{r4, r5, lr}
 8012e6a:	6902      	ldr	r2, [r0, #16]
 8012e6c:	690c      	ldr	r4, [r1, #16]
 8012e6e:	1b12      	subs	r2, r2, r4
 8012e70:	d10e      	bne.n	8012e90 <__mcmp+0x28>
 8012e72:	f100 0314 	add.w	r3, r0, #20
 8012e76:	3114      	adds	r1, #20
 8012e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012e88:	42a5      	cmp	r5, r4
 8012e8a:	d003      	beq.n	8012e94 <__mcmp+0x2c>
 8012e8c:	d305      	bcc.n	8012e9a <__mcmp+0x32>
 8012e8e:	2201      	movs	r2, #1
 8012e90:	4610      	mov	r0, r2
 8012e92:	bd30      	pop	{r4, r5, pc}
 8012e94:	4283      	cmp	r3, r0
 8012e96:	d3f3      	bcc.n	8012e80 <__mcmp+0x18>
 8012e98:	e7fa      	b.n	8012e90 <__mcmp+0x28>
 8012e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9e:	e7f7      	b.n	8012e90 <__mcmp+0x28>

08012ea0 <__mdiff>:
 8012ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	460c      	mov	r4, r1
 8012ea6:	4606      	mov	r6, r0
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	4620      	mov	r0, r4
 8012eac:	4690      	mov	r8, r2
 8012eae:	f7ff ffdb 	bl	8012e68 <__mcmp>
 8012eb2:	1e05      	subs	r5, r0, #0
 8012eb4:	d110      	bne.n	8012ed8 <__mdiff+0x38>
 8012eb6:	4629      	mov	r1, r5
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f7ff fd53 	bl	8012964 <_Balloc>
 8012ebe:	b930      	cbnz	r0, 8012ece <__mdiff+0x2e>
 8012ec0:	4b3a      	ldr	r3, [pc, #232]	; (8012fac <__mdiff+0x10c>)
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	f240 2132 	movw	r1, #562	; 0x232
 8012ec8:	4839      	ldr	r0, [pc, #228]	; (8012fb0 <__mdiff+0x110>)
 8012eca:	f7fe fd45 	bl	8011958 <__assert_func>
 8012ece:	2301      	movs	r3, #1
 8012ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed8:	bfa4      	itt	ge
 8012eda:	4643      	movge	r3, r8
 8012edc:	46a0      	movge	r8, r4
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ee4:	bfa6      	itte	ge
 8012ee6:	461c      	movge	r4, r3
 8012ee8:	2500      	movge	r5, #0
 8012eea:	2501      	movlt	r5, #1
 8012eec:	f7ff fd3a 	bl	8012964 <_Balloc>
 8012ef0:	b920      	cbnz	r0, 8012efc <__mdiff+0x5c>
 8012ef2:	4b2e      	ldr	r3, [pc, #184]	; (8012fac <__mdiff+0x10c>)
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012efa:	e7e5      	b.n	8012ec8 <__mdiff+0x28>
 8012efc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012f00:	6926      	ldr	r6, [r4, #16]
 8012f02:	60c5      	str	r5, [r0, #12]
 8012f04:	f104 0914 	add.w	r9, r4, #20
 8012f08:	f108 0514 	add.w	r5, r8, #20
 8012f0c:	f100 0e14 	add.w	lr, r0, #20
 8012f10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012f14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012f18:	f108 0210 	add.w	r2, r8, #16
 8012f1c:	46f2      	mov	sl, lr
 8012f1e:	2100      	movs	r1, #0
 8012f20:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012f28:	fa1f f883 	uxth.w	r8, r3
 8012f2c:	fa11 f18b 	uxtah	r1, r1, fp
 8012f30:	0c1b      	lsrs	r3, r3, #16
 8012f32:	eba1 0808 	sub.w	r8, r1, r8
 8012f36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012f3e:	fa1f f888 	uxth.w	r8, r8
 8012f42:	1419      	asrs	r1, r3, #16
 8012f44:	454e      	cmp	r6, r9
 8012f46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012f4a:	f84a 3b04 	str.w	r3, [sl], #4
 8012f4e:	d8e7      	bhi.n	8012f20 <__mdiff+0x80>
 8012f50:	1b33      	subs	r3, r6, r4
 8012f52:	3b15      	subs	r3, #21
 8012f54:	f023 0303 	bic.w	r3, r3, #3
 8012f58:	3304      	adds	r3, #4
 8012f5a:	3415      	adds	r4, #21
 8012f5c:	42a6      	cmp	r6, r4
 8012f5e:	bf38      	it	cc
 8012f60:	2304      	movcc	r3, #4
 8012f62:	441d      	add	r5, r3
 8012f64:	4473      	add	r3, lr
 8012f66:	469e      	mov	lr, r3
 8012f68:	462e      	mov	r6, r5
 8012f6a:	4566      	cmp	r6, ip
 8012f6c:	d30e      	bcc.n	8012f8c <__mdiff+0xec>
 8012f6e:	f10c 0203 	add.w	r2, ip, #3
 8012f72:	1b52      	subs	r2, r2, r5
 8012f74:	f022 0203 	bic.w	r2, r2, #3
 8012f78:	3d03      	subs	r5, #3
 8012f7a:	45ac      	cmp	ip, r5
 8012f7c:	bf38      	it	cc
 8012f7e:	2200      	movcc	r2, #0
 8012f80:	441a      	add	r2, r3
 8012f82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012f86:	b17b      	cbz	r3, 8012fa8 <__mdiff+0x108>
 8012f88:	6107      	str	r7, [r0, #16]
 8012f8a:	e7a3      	b.n	8012ed4 <__mdiff+0x34>
 8012f8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8012f90:	fa11 f288 	uxtah	r2, r1, r8
 8012f94:	1414      	asrs	r4, r2, #16
 8012f96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012f9a:	b292      	uxth	r2, r2
 8012f9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012fa0:	f84e 2b04 	str.w	r2, [lr], #4
 8012fa4:	1421      	asrs	r1, r4, #16
 8012fa6:	e7e0      	b.n	8012f6a <__mdiff+0xca>
 8012fa8:	3f01      	subs	r7, #1
 8012faa:	e7ea      	b.n	8012f82 <__mdiff+0xe2>
 8012fac:	08015673 	.word	0x08015673
 8012fb0:	08015684 	.word	0x08015684

08012fb4 <__d2b>:
 8012fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012fb8:	4689      	mov	r9, r1
 8012fba:	2101      	movs	r1, #1
 8012fbc:	ec57 6b10 	vmov	r6, r7, d0
 8012fc0:	4690      	mov	r8, r2
 8012fc2:	f7ff fccf 	bl	8012964 <_Balloc>
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	b930      	cbnz	r0, 8012fd8 <__d2b+0x24>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	4b25      	ldr	r3, [pc, #148]	; (8013064 <__d2b+0xb0>)
 8012fce:	4826      	ldr	r0, [pc, #152]	; (8013068 <__d2b+0xb4>)
 8012fd0:	f240 310a 	movw	r1, #778	; 0x30a
 8012fd4:	f7fe fcc0 	bl	8011958 <__assert_func>
 8012fd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012fdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012fe0:	bb35      	cbnz	r5, 8013030 <__d2b+0x7c>
 8012fe2:	2e00      	cmp	r6, #0
 8012fe4:	9301      	str	r3, [sp, #4]
 8012fe6:	d028      	beq.n	801303a <__d2b+0x86>
 8012fe8:	4668      	mov	r0, sp
 8012fea:	9600      	str	r6, [sp, #0]
 8012fec:	f7ff fd82 	bl	8012af4 <__lo0bits>
 8012ff0:	9900      	ldr	r1, [sp, #0]
 8012ff2:	b300      	cbz	r0, 8013036 <__d2b+0x82>
 8012ff4:	9a01      	ldr	r2, [sp, #4]
 8012ff6:	f1c0 0320 	rsb	r3, r0, #32
 8012ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8012ffe:	430b      	orrs	r3, r1
 8013000:	40c2      	lsrs	r2, r0
 8013002:	6163      	str	r3, [r4, #20]
 8013004:	9201      	str	r2, [sp, #4]
 8013006:	9b01      	ldr	r3, [sp, #4]
 8013008:	61a3      	str	r3, [r4, #24]
 801300a:	2b00      	cmp	r3, #0
 801300c:	bf14      	ite	ne
 801300e:	2202      	movne	r2, #2
 8013010:	2201      	moveq	r2, #1
 8013012:	6122      	str	r2, [r4, #16]
 8013014:	b1d5      	cbz	r5, 801304c <__d2b+0x98>
 8013016:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801301a:	4405      	add	r5, r0
 801301c:	f8c9 5000 	str.w	r5, [r9]
 8013020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013024:	f8c8 0000 	str.w	r0, [r8]
 8013028:	4620      	mov	r0, r4
 801302a:	b003      	add	sp, #12
 801302c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013034:	e7d5      	b.n	8012fe2 <__d2b+0x2e>
 8013036:	6161      	str	r1, [r4, #20]
 8013038:	e7e5      	b.n	8013006 <__d2b+0x52>
 801303a:	a801      	add	r0, sp, #4
 801303c:	f7ff fd5a 	bl	8012af4 <__lo0bits>
 8013040:	9b01      	ldr	r3, [sp, #4]
 8013042:	6163      	str	r3, [r4, #20]
 8013044:	2201      	movs	r2, #1
 8013046:	6122      	str	r2, [r4, #16]
 8013048:	3020      	adds	r0, #32
 801304a:	e7e3      	b.n	8013014 <__d2b+0x60>
 801304c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013050:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013054:	f8c9 0000 	str.w	r0, [r9]
 8013058:	6918      	ldr	r0, [r3, #16]
 801305a:	f7ff fd2b 	bl	8012ab4 <__hi0bits>
 801305e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013062:	e7df      	b.n	8013024 <__d2b+0x70>
 8013064:	08015673 	.word	0x08015673
 8013068:	08015684 	.word	0x08015684

0801306c <__ssputs_r>:
 801306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013070:	688e      	ldr	r6, [r1, #8]
 8013072:	429e      	cmp	r6, r3
 8013074:	4682      	mov	sl, r0
 8013076:	460c      	mov	r4, r1
 8013078:	4690      	mov	r8, r2
 801307a:	461f      	mov	r7, r3
 801307c:	d838      	bhi.n	80130f0 <__ssputs_r+0x84>
 801307e:	898a      	ldrh	r2, [r1, #12]
 8013080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013084:	d032      	beq.n	80130ec <__ssputs_r+0x80>
 8013086:	6825      	ldr	r5, [r4, #0]
 8013088:	6909      	ldr	r1, [r1, #16]
 801308a:	eba5 0901 	sub.w	r9, r5, r1
 801308e:	6965      	ldr	r5, [r4, #20]
 8013090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013098:	3301      	adds	r3, #1
 801309a:	444b      	add	r3, r9
 801309c:	106d      	asrs	r5, r5, #1
 801309e:	429d      	cmp	r5, r3
 80130a0:	bf38      	it	cc
 80130a2:	461d      	movcc	r5, r3
 80130a4:	0553      	lsls	r3, r2, #21
 80130a6:	d531      	bpl.n	801310c <__ssputs_r+0xa0>
 80130a8:	4629      	mov	r1, r5
 80130aa:	f7fd fc7f 	bl	80109ac <_malloc_r>
 80130ae:	4606      	mov	r6, r0
 80130b0:	b950      	cbnz	r0, 80130c8 <__ssputs_r+0x5c>
 80130b2:	230c      	movs	r3, #12
 80130b4:	f8ca 3000 	str.w	r3, [sl]
 80130b8:	89a3      	ldrh	r3, [r4, #12]
 80130ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130be:	81a3      	strh	r3, [r4, #12]
 80130c0:	f04f 30ff 	mov.w	r0, #4294967295
 80130c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130c8:	6921      	ldr	r1, [r4, #16]
 80130ca:	464a      	mov	r2, r9
 80130cc:	f7fd fbd6 	bl	801087c <memcpy>
 80130d0:	89a3      	ldrh	r3, [r4, #12]
 80130d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80130d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130da:	81a3      	strh	r3, [r4, #12]
 80130dc:	6126      	str	r6, [r4, #16]
 80130de:	6165      	str	r5, [r4, #20]
 80130e0:	444e      	add	r6, r9
 80130e2:	eba5 0509 	sub.w	r5, r5, r9
 80130e6:	6026      	str	r6, [r4, #0]
 80130e8:	60a5      	str	r5, [r4, #8]
 80130ea:	463e      	mov	r6, r7
 80130ec:	42be      	cmp	r6, r7
 80130ee:	d900      	bls.n	80130f2 <__ssputs_r+0x86>
 80130f0:	463e      	mov	r6, r7
 80130f2:	6820      	ldr	r0, [r4, #0]
 80130f4:	4632      	mov	r2, r6
 80130f6:	4641      	mov	r1, r8
 80130f8:	f000 fabc 	bl	8013674 <memmove>
 80130fc:	68a3      	ldr	r3, [r4, #8]
 80130fe:	1b9b      	subs	r3, r3, r6
 8013100:	60a3      	str	r3, [r4, #8]
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	4433      	add	r3, r6
 8013106:	6023      	str	r3, [r4, #0]
 8013108:	2000      	movs	r0, #0
 801310a:	e7db      	b.n	80130c4 <__ssputs_r+0x58>
 801310c:	462a      	mov	r2, r5
 801310e:	f000 facb 	bl	80136a8 <_realloc_r>
 8013112:	4606      	mov	r6, r0
 8013114:	2800      	cmp	r0, #0
 8013116:	d1e1      	bne.n	80130dc <__ssputs_r+0x70>
 8013118:	6921      	ldr	r1, [r4, #16]
 801311a:	4650      	mov	r0, sl
 801311c:	f7fd fbda 	bl	80108d4 <_free_r>
 8013120:	e7c7      	b.n	80130b2 <__ssputs_r+0x46>
	...

08013124 <_svfiprintf_r>:
 8013124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013128:	4698      	mov	r8, r3
 801312a:	898b      	ldrh	r3, [r1, #12]
 801312c:	061b      	lsls	r3, r3, #24
 801312e:	b09d      	sub	sp, #116	; 0x74
 8013130:	4607      	mov	r7, r0
 8013132:	460d      	mov	r5, r1
 8013134:	4614      	mov	r4, r2
 8013136:	d50e      	bpl.n	8013156 <_svfiprintf_r+0x32>
 8013138:	690b      	ldr	r3, [r1, #16]
 801313a:	b963      	cbnz	r3, 8013156 <_svfiprintf_r+0x32>
 801313c:	2140      	movs	r1, #64	; 0x40
 801313e:	f7fd fc35 	bl	80109ac <_malloc_r>
 8013142:	6028      	str	r0, [r5, #0]
 8013144:	6128      	str	r0, [r5, #16]
 8013146:	b920      	cbnz	r0, 8013152 <_svfiprintf_r+0x2e>
 8013148:	230c      	movs	r3, #12
 801314a:	603b      	str	r3, [r7, #0]
 801314c:	f04f 30ff 	mov.w	r0, #4294967295
 8013150:	e0d1      	b.n	80132f6 <_svfiprintf_r+0x1d2>
 8013152:	2340      	movs	r3, #64	; 0x40
 8013154:	616b      	str	r3, [r5, #20]
 8013156:	2300      	movs	r3, #0
 8013158:	9309      	str	r3, [sp, #36]	; 0x24
 801315a:	2320      	movs	r3, #32
 801315c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013160:	f8cd 800c 	str.w	r8, [sp, #12]
 8013164:	2330      	movs	r3, #48	; 0x30
 8013166:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013310 <_svfiprintf_r+0x1ec>
 801316a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801316e:	f04f 0901 	mov.w	r9, #1
 8013172:	4623      	mov	r3, r4
 8013174:	469a      	mov	sl, r3
 8013176:	f813 2b01 	ldrb.w	r2, [r3], #1
 801317a:	b10a      	cbz	r2, 8013180 <_svfiprintf_r+0x5c>
 801317c:	2a25      	cmp	r2, #37	; 0x25
 801317e:	d1f9      	bne.n	8013174 <_svfiprintf_r+0x50>
 8013180:	ebba 0b04 	subs.w	fp, sl, r4
 8013184:	d00b      	beq.n	801319e <_svfiprintf_r+0x7a>
 8013186:	465b      	mov	r3, fp
 8013188:	4622      	mov	r2, r4
 801318a:	4629      	mov	r1, r5
 801318c:	4638      	mov	r0, r7
 801318e:	f7ff ff6d 	bl	801306c <__ssputs_r>
 8013192:	3001      	adds	r0, #1
 8013194:	f000 80aa 	beq.w	80132ec <_svfiprintf_r+0x1c8>
 8013198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801319a:	445a      	add	r2, fp
 801319c:	9209      	str	r2, [sp, #36]	; 0x24
 801319e:	f89a 3000 	ldrb.w	r3, [sl]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 80a2 	beq.w	80132ec <_svfiprintf_r+0x1c8>
 80131a8:	2300      	movs	r3, #0
 80131aa:	f04f 32ff 	mov.w	r2, #4294967295
 80131ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131b2:	f10a 0a01 	add.w	sl, sl, #1
 80131b6:	9304      	str	r3, [sp, #16]
 80131b8:	9307      	str	r3, [sp, #28]
 80131ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131be:	931a      	str	r3, [sp, #104]	; 0x68
 80131c0:	4654      	mov	r4, sl
 80131c2:	2205      	movs	r2, #5
 80131c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131c8:	4851      	ldr	r0, [pc, #324]	; (8013310 <_svfiprintf_r+0x1ec>)
 80131ca:	f7ed f829 	bl	8000220 <memchr>
 80131ce:	9a04      	ldr	r2, [sp, #16]
 80131d0:	b9d8      	cbnz	r0, 801320a <_svfiprintf_r+0xe6>
 80131d2:	06d0      	lsls	r0, r2, #27
 80131d4:	bf44      	itt	mi
 80131d6:	2320      	movmi	r3, #32
 80131d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131dc:	0711      	lsls	r1, r2, #28
 80131de:	bf44      	itt	mi
 80131e0:	232b      	movmi	r3, #43	; 0x2b
 80131e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131e6:	f89a 3000 	ldrb.w	r3, [sl]
 80131ea:	2b2a      	cmp	r3, #42	; 0x2a
 80131ec:	d015      	beq.n	801321a <_svfiprintf_r+0xf6>
 80131ee:	9a07      	ldr	r2, [sp, #28]
 80131f0:	4654      	mov	r4, sl
 80131f2:	2000      	movs	r0, #0
 80131f4:	f04f 0c0a 	mov.w	ip, #10
 80131f8:	4621      	mov	r1, r4
 80131fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131fe:	3b30      	subs	r3, #48	; 0x30
 8013200:	2b09      	cmp	r3, #9
 8013202:	d94e      	bls.n	80132a2 <_svfiprintf_r+0x17e>
 8013204:	b1b0      	cbz	r0, 8013234 <_svfiprintf_r+0x110>
 8013206:	9207      	str	r2, [sp, #28]
 8013208:	e014      	b.n	8013234 <_svfiprintf_r+0x110>
 801320a:	eba0 0308 	sub.w	r3, r0, r8
 801320e:	fa09 f303 	lsl.w	r3, r9, r3
 8013212:	4313      	orrs	r3, r2
 8013214:	9304      	str	r3, [sp, #16]
 8013216:	46a2      	mov	sl, r4
 8013218:	e7d2      	b.n	80131c0 <_svfiprintf_r+0x9c>
 801321a:	9b03      	ldr	r3, [sp, #12]
 801321c:	1d19      	adds	r1, r3, #4
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	9103      	str	r1, [sp, #12]
 8013222:	2b00      	cmp	r3, #0
 8013224:	bfbb      	ittet	lt
 8013226:	425b      	neglt	r3, r3
 8013228:	f042 0202 	orrlt.w	r2, r2, #2
 801322c:	9307      	strge	r3, [sp, #28]
 801322e:	9307      	strlt	r3, [sp, #28]
 8013230:	bfb8      	it	lt
 8013232:	9204      	strlt	r2, [sp, #16]
 8013234:	7823      	ldrb	r3, [r4, #0]
 8013236:	2b2e      	cmp	r3, #46	; 0x2e
 8013238:	d10c      	bne.n	8013254 <_svfiprintf_r+0x130>
 801323a:	7863      	ldrb	r3, [r4, #1]
 801323c:	2b2a      	cmp	r3, #42	; 0x2a
 801323e:	d135      	bne.n	80132ac <_svfiprintf_r+0x188>
 8013240:	9b03      	ldr	r3, [sp, #12]
 8013242:	1d1a      	adds	r2, r3, #4
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	9203      	str	r2, [sp, #12]
 8013248:	2b00      	cmp	r3, #0
 801324a:	bfb8      	it	lt
 801324c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013250:	3402      	adds	r4, #2
 8013252:	9305      	str	r3, [sp, #20]
 8013254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013320 <_svfiprintf_r+0x1fc>
 8013258:	7821      	ldrb	r1, [r4, #0]
 801325a:	2203      	movs	r2, #3
 801325c:	4650      	mov	r0, sl
 801325e:	f7ec ffdf 	bl	8000220 <memchr>
 8013262:	b140      	cbz	r0, 8013276 <_svfiprintf_r+0x152>
 8013264:	2340      	movs	r3, #64	; 0x40
 8013266:	eba0 000a 	sub.w	r0, r0, sl
 801326a:	fa03 f000 	lsl.w	r0, r3, r0
 801326e:	9b04      	ldr	r3, [sp, #16]
 8013270:	4303      	orrs	r3, r0
 8013272:	3401      	adds	r4, #1
 8013274:	9304      	str	r3, [sp, #16]
 8013276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801327a:	4826      	ldr	r0, [pc, #152]	; (8013314 <_svfiprintf_r+0x1f0>)
 801327c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013280:	2206      	movs	r2, #6
 8013282:	f7ec ffcd 	bl	8000220 <memchr>
 8013286:	2800      	cmp	r0, #0
 8013288:	d038      	beq.n	80132fc <_svfiprintf_r+0x1d8>
 801328a:	4b23      	ldr	r3, [pc, #140]	; (8013318 <_svfiprintf_r+0x1f4>)
 801328c:	bb1b      	cbnz	r3, 80132d6 <_svfiprintf_r+0x1b2>
 801328e:	9b03      	ldr	r3, [sp, #12]
 8013290:	3307      	adds	r3, #7
 8013292:	f023 0307 	bic.w	r3, r3, #7
 8013296:	3308      	adds	r3, #8
 8013298:	9303      	str	r3, [sp, #12]
 801329a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801329c:	4433      	add	r3, r6
 801329e:	9309      	str	r3, [sp, #36]	; 0x24
 80132a0:	e767      	b.n	8013172 <_svfiprintf_r+0x4e>
 80132a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80132a6:	460c      	mov	r4, r1
 80132a8:	2001      	movs	r0, #1
 80132aa:	e7a5      	b.n	80131f8 <_svfiprintf_r+0xd4>
 80132ac:	2300      	movs	r3, #0
 80132ae:	3401      	adds	r4, #1
 80132b0:	9305      	str	r3, [sp, #20]
 80132b2:	4619      	mov	r1, r3
 80132b4:	f04f 0c0a 	mov.w	ip, #10
 80132b8:	4620      	mov	r0, r4
 80132ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132be:	3a30      	subs	r2, #48	; 0x30
 80132c0:	2a09      	cmp	r2, #9
 80132c2:	d903      	bls.n	80132cc <_svfiprintf_r+0x1a8>
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d0c5      	beq.n	8013254 <_svfiprintf_r+0x130>
 80132c8:	9105      	str	r1, [sp, #20]
 80132ca:	e7c3      	b.n	8013254 <_svfiprintf_r+0x130>
 80132cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80132d0:	4604      	mov	r4, r0
 80132d2:	2301      	movs	r3, #1
 80132d4:	e7f0      	b.n	80132b8 <_svfiprintf_r+0x194>
 80132d6:	ab03      	add	r3, sp, #12
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	462a      	mov	r2, r5
 80132dc:	4b0f      	ldr	r3, [pc, #60]	; (801331c <_svfiprintf_r+0x1f8>)
 80132de:	a904      	add	r1, sp, #16
 80132e0:	4638      	mov	r0, r7
 80132e2:	f7fd fc77 	bl	8010bd4 <_printf_float>
 80132e6:	1c42      	adds	r2, r0, #1
 80132e8:	4606      	mov	r6, r0
 80132ea:	d1d6      	bne.n	801329a <_svfiprintf_r+0x176>
 80132ec:	89ab      	ldrh	r3, [r5, #12]
 80132ee:	065b      	lsls	r3, r3, #25
 80132f0:	f53f af2c 	bmi.w	801314c <_svfiprintf_r+0x28>
 80132f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132f6:	b01d      	add	sp, #116	; 0x74
 80132f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132fc:	ab03      	add	r3, sp, #12
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	462a      	mov	r2, r5
 8013302:	4b06      	ldr	r3, [pc, #24]	; (801331c <_svfiprintf_r+0x1f8>)
 8013304:	a904      	add	r1, sp, #16
 8013306:	4638      	mov	r0, r7
 8013308:	f7fd ff08 	bl	801111c <_printf_i>
 801330c:	e7eb      	b.n	80132e6 <_svfiprintf_r+0x1c2>
 801330e:	bf00      	nop
 8013310:	080157dc 	.word	0x080157dc
 8013314:	080157e6 	.word	0x080157e6
 8013318:	08010bd5 	.word	0x08010bd5
 801331c:	0801306d 	.word	0x0801306d
 8013320:	080157e2 	.word	0x080157e2

08013324 <__sfputc_r>:
 8013324:	6893      	ldr	r3, [r2, #8]
 8013326:	3b01      	subs	r3, #1
 8013328:	2b00      	cmp	r3, #0
 801332a:	b410      	push	{r4}
 801332c:	6093      	str	r3, [r2, #8]
 801332e:	da08      	bge.n	8013342 <__sfputc_r+0x1e>
 8013330:	6994      	ldr	r4, [r2, #24]
 8013332:	42a3      	cmp	r3, r4
 8013334:	db01      	blt.n	801333a <__sfputc_r+0x16>
 8013336:	290a      	cmp	r1, #10
 8013338:	d103      	bne.n	8013342 <__sfputc_r+0x1e>
 801333a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801333e:	f7fe ba39 	b.w	80117b4 <__swbuf_r>
 8013342:	6813      	ldr	r3, [r2, #0]
 8013344:	1c58      	adds	r0, r3, #1
 8013346:	6010      	str	r0, [r2, #0]
 8013348:	7019      	strb	r1, [r3, #0]
 801334a:	4608      	mov	r0, r1
 801334c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013350:	4770      	bx	lr

08013352 <__sfputs_r>:
 8013352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013354:	4606      	mov	r6, r0
 8013356:	460f      	mov	r7, r1
 8013358:	4614      	mov	r4, r2
 801335a:	18d5      	adds	r5, r2, r3
 801335c:	42ac      	cmp	r4, r5
 801335e:	d101      	bne.n	8013364 <__sfputs_r+0x12>
 8013360:	2000      	movs	r0, #0
 8013362:	e007      	b.n	8013374 <__sfputs_r+0x22>
 8013364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013368:	463a      	mov	r2, r7
 801336a:	4630      	mov	r0, r6
 801336c:	f7ff ffda 	bl	8013324 <__sfputc_r>
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	d1f3      	bne.n	801335c <__sfputs_r+0xa>
 8013374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013378 <_vfiprintf_r>:
 8013378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801337c:	460d      	mov	r5, r1
 801337e:	b09d      	sub	sp, #116	; 0x74
 8013380:	4614      	mov	r4, r2
 8013382:	4698      	mov	r8, r3
 8013384:	4606      	mov	r6, r0
 8013386:	b118      	cbz	r0, 8013390 <_vfiprintf_r+0x18>
 8013388:	6983      	ldr	r3, [r0, #24]
 801338a:	b90b      	cbnz	r3, 8013390 <_vfiprintf_r+0x18>
 801338c:	f7fd f990 	bl	80106b0 <__sinit>
 8013390:	4b89      	ldr	r3, [pc, #548]	; (80135b8 <_vfiprintf_r+0x240>)
 8013392:	429d      	cmp	r5, r3
 8013394:	d11b      	bne.n	80133ce <_vfiprintf_r+0x56>
 8013396:	6875      	ldr	r5, [r6, #4]
 8013398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801339a:	07d9      	lsls	r1, r3, #31
 801339c:	d405      	bmi.n	80133aa <_vfiprintf_r+0x32>
 801339e:	89ab      	ldrh	r3, [r5, #12]
 80133a0:	059a      	lsls	r2, r3, #22
 80133a2:	d402      	bmi.n	80133aa <_vfiprintf_r+0x32>
 80133a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133a6:	f7fd fa46 	bl	8010836 <__retarget_lock_acquire_recursive>
 80133aa:	89ab      	ldrh	r3, [r5, #12]
 80133ac:	071b      	lsls	r3, r3, #28
 80133ae:	d501      	bpl.n	80133b4 <_vfiprintf_r+0x3c>
 80133b0:	692b      	ldr	r3, [r5, #16]
 80133b2:	b9eb      	cbnz	r3, 80133f0 <_vfiprintf_r+0x78>
 80133b4:	4629      	mov	r1, r5
 80133b6:	4630      	mov	r0, r6
 80133b8:	f7fe fa60 	bl	801187c <__swsetup_r>
 80133bc:	b1c0      	cbz	r0, 80133f0 <_vfiprintf_r+0x78>
 80133be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133c0:	07dc      	lsls	r4, r3, #31
 80133c2:	d50e      	bpl.n	80133e2 <_vfiprintf_r+0x6a>
 80133c4:	f04f 30ff 	mov.w	r0, #4294967295
 80133c8:	b01d      	add	sp, #116	; 0x74
 80133ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ce:	4b7b      	ldr	r3, [pc, #492]	; (80135bc <_vfiprintf_r+0x244>)
 80133d0:	429d      	cmp	r5, r3
 80133d2:	d101      	bne.n	80133d8 <_vfiprintf_r+0x60>
 80133d4:	68b5      	ldr	r5, [r6, #8]
 80133d6:	e7df      	b.n	8013398 <_vfiprintf_r+0x20>
 80133d8:	4b79      	ldr	r3, [pc, #484]	; (80135c0 <_vfiprintf_r+0x248>)
 80133da:	429d      	cmp	r5, r3
 80133dc:	bf08      	it	eq
 80133de:	68f5      	ldreq	r5, [r6, #12]
 80133e0:	e7da      	b.n	8013398 <_vfiprintf_r+0x20>
 80133e2:	89ab      	ldrh	r3, [r5, #12]
 80133e4:	0598      	lsls	r0, r3, #22
 80133e6:	d4ed      	bmi.n	80133c4 <_vfiprintf_r+0x4c>
 80133e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133ea:	f7fd fa25 	bl	8010838 <__retarget_lock_release_recursive>
 80133ee:	e7e9      	b.n	80133c4 <_vfiprintf_r+0x4c>
 80133f0:	2300      	movs	r3, #0
 80133f2:	9309      	str	r3, [sp, #36]	; 0x24
 80133f4:	2320      	movs	r3, #32
 80133f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80133fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80133fe:	2330      	movs	r3, #48	; 0x30
 8013400:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80135c4 <_vfiprintf_r+0x24c>
 8013404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013408:	f04f 0901 	mov.w	r9, #1
 801340c:	4623      	mov	r3, r4
 801340e:	469a      	mov	sl, r3
 8013410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013414:	b10a      	cbz	r2, 801341a <_vfiprintf_r+0xa2>
 8013416:	2a25      	cmp	r2, #37	; 0x25
 8013418:	d1f9      	bne.n	801340e <_vfiprintf_r+0x96>
 801341a:	ebba 0b04 	subs.w	fp, sl, r4
 801341e:	d00b      	beq.n	8013438 <_vfiprintf_r+0xc0>
 8013420:	465b      	mov	r3, fp
 8013422:	4622      	mov	r2, r4
 8013424:	4629      	mov	r1, r5
 8013426:	4630      	mov	r0, r6
 8013428:	f7ff ff93 	bl	8013352 <__sfputs_r>
 801342c:	3001      	adds	r0, #1
 801342e:	f000 80aa 	beq.w	8013586 <_vfiprintf_r+0x20e>
 8013432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013434:	445a      	add	r2, fp
 8013436:	9209      	str	r2, [sp, #36]	; 0x24
 8013438:	f89a 3000 	ldrb.w	r3, [sl]
 801343c:	2b00      	cmp	r3, #0
 801343e:	f000 80a2 	beq.w	8013586 <_vfiprintf_r+0x20e>
 8013442:	2300      	movs	r3, #0
 8013444:	f04f 32ff 	mov.w	r2, #4294967295
 8013448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801344c:	f10a 0a01 	add.w	sl, sl, #1
 8013450:	9304      	str	r3, [sp, #16]
 8013452:	9307      	str	r3, [sp, #28]
 8013454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013458:	931a      	str	r3, [sp, #104]	; 0x68
 801345a:	4654      	mov	r4, sl
 801345c:	2205      	movs	r2, #5
 801345e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013462:	4858      	ldr	r0, [pc, #352]	; (80135c4 <_vfiprintf_r+0x24c>)
 8013464:	f7ec fedc 	bl	8000220 <memchr>
 8013468:	9a04      	ldr	r2, [sp, #16]
 801346a:	b9d8      	cbnz	r0, 80134a4 <_vfiprintf_r+0x12c>
 801346c:	06d1      	lsls	r1, r2, #27
 801346e:	bf44      	itt	mi
 8013470:	2320      	movmi	r3, #32
 8013472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013476:	0713      	lsls	r3, r2, #28
 8013478:	bf44      	itt	mi
 801347a:	232b      	movmi	r3, #43	; 0x2b
 801347c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013480:	f89a 3000 	ldrb.w	r3, [sl]
 8013484:	2b2a      	cmp	r3, #42	; 0x2a
 8013486:	d015      	beq.n	80134b4 <_vfiprintf_r+0x13c>
 8013488:	9a07      	ldr	r2, [sp, #28]
 801348a:	4654      	mov	r4, sl
 801348c:	2000      	movs	r0, #0
 801348e:	f04f 0c0a 	mov.w	ip, #10
 8013492:	4621      	mov	r1, r4
 8013494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013498:	3b30      	subs	r3, #48	; 0x30
 801349a:	2b09      	cmp	r3, #9
 801349c:	d94e      	bls.n	801353c <_vfiprintf_r+0x1c4>
 801349e:	b1b0      	cbz	r0, 80134ce <_vfiprintf_r+0x156>
 80134a0:	9207      	str	r2, [sp, #28]
 80134a2:	e014      	b.n	80134ce <_vfiprintf_r+0x156>
 80134a4:	eba0 0308 	sub.w	r3, r0, r8
 80134a8:	fa09 f303 	lsl.w	r3, r9, r3
 80134ac:	4313      	orrs	r3, r2
 80134ae:	9304      	str	r3, [sp, #16]
 80134b0:	46a2      	mov	sl, r4
 80134b2:	e7d2      	b.n	801345a <_vfiprintf_r+0xe2>
 80134b4:	9b03      	ldr	r3, [sp, #12]
 80134b6:	1d19      	adds	r1, r3, #4
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	9103      	str	r1, [sp, #12]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	bfbb      	ittet	lt
 80134c0:	425b      	neglt	r3, r3
 80134c2:	f042 0202 	orrlt.w	r2, r2, #2
 80134c6:	9307      	strge	r3, [sp, #28]
 80134c8:	9307      	strlt	r3, [sp, #28]
 80134ca:	bfb8      	it	lt
 80134cc:	9204      	strlt	r2, [sp, #16]
 80134ce:	7823      	ldrb	r3, [r4, #0]
 80134d0:	2b2e      	cmp	r3, #46	; 0x2e
 80134d2:	d10c      	bne.n	80134ee <_vfiprintf_r+0x176>
 80134d4:	7863      	ldrb	r3, [r4, #1]
 80134d6:	2b2a      	cmp	r3, #42	; 0x2a
 80134d8:	d135      	bne.n	8013546 <_vfiprintf_r+0x1ce>
 80134da:	9b03      	ldr	r3, [sp, #12]
 80134dc:	1d1a      	adds	r2, r3, #4
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	9203      	str	r2, [sp, #12]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	bfb8      	it	lt
 80134e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80134ea:	3402      	adds	r4, #2
 80134ec:	9305      	str	r3, [sp, #20]
 80134ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80135d4 <_vfiprintf_r+0x25c>
 80134f2:	7821      	ldrb	r1, [r4, #0]
 80134f4:	2203      	movs	r2, #3
 80134f6:	4650      	mov	r0, sl
 80134f8:	f7ec fe92 	bl	8000220 <memchr>
 80134fc:	b140      	cbz	r0, 8013510 <_vfiprintf_r+0x198>
 80134fe:	2340      	movs	r3, #64	; 0x40
 8013500:	eba0 000a 	sub.w	r0, r0, sl
 8013504:	fa03 f000 	lsl.w	r0, r3, r0
 8013508:	9b04      	ldr	r3, [sp, #16]
 801350a:	4303      	orrs	r3, r0
 801350c:	3401      	adds	r4, #1
 801350e:	9304      	str	r3, [sp, #16]
 8013510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013514:	482c      	ldr	r0, [pc, #176]	; (80135c8 <_vfiprintf_r+0x250>)
 8013516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801351a:	2206      	movs	r2, #6
 801351c:	f7ec fe80 	bl	8000220 <memchr>
 8013520:	2800      	cmp	r0, #0
 8013522:	d03f      	beq.n	80135a4 <_vfiprintf_r+0x22c>
 8013524:	4b29      	ldr	r3, [pc, #164]	; (80135cc <_vfiprintf_r+0x254>)
 8013526:	bb1b      	cbnz	r3, 8013570 <_vfiprintf_r+0x1f8>
 8013528:	9b03      	ldr	r3, [sp, #12]
 801352a:	3307      	adds	r3, #7
 801352c:	f023 0307 	bic.w	r3, r3, #7
 8013530:	3308      	adds	r3, #8
 8013532:	9303      	str	r3, [sp, #12]
 8013534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013536:	443b      	add	r3, r7
 8013538:	9309      	str	r3, [sp, #36]	; 0x24
 801353a:	e767      	b.n	801340c <_vfiprintf_r+0x94>
 801353c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013540:	460c      	mov	r4, r1
 8013542:	2001      	movs	r0, #1
 8013544:	e7a5      	b.n	8013492 <_vfiprintf_r+0x11a>
 8013546:	2300      	movs	r3, #0
 8013548:	3401      	adds	r4, #1
 801354a:	9305      	str	r3, [sp, #20]
 801354c:	4619      	mov	r1, r3
 801354e:	f04f 0c0a 	mov.w	ip, #10
 8013552:	4620      	mov	r0, r4
 8013554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013558:	3a30      	subs	r2, #48	; 0x30
 801355a:	2a09      	cmp	r2, #9
 801355c:	d903      	bls.n	8013566 <_vfiprintf_r+0x1ee>
 801355e:	2b00      	cmp	r3, #0
 8013560:	d0c5      	beq.n	80134ee <_vfiprintf_r+0x176>
 8013562:	9105      	str	r1, [sp, #20]
 8013564:	e7c3      	b.n	80134ee <_vfiprintf_r+0x176>
 8013566:	fb0c 2101 	mla	r1, ip, r1, r2
 801356a:	4604      	mov	r4, r0
 801356c:	2301      	movs	r3, #1
 801356e:	e7f0      	b.n	8013552 <_vfiprintf_r+0x1da>
 8013570:	ab03      	add	r3, sp, #12
 8013572:	9300      	str	r3, [sp, #0]
 8013574:	462a      	mov	r2, r5
 8013576:	4b16      	ldr	r3, [pc, #88]	; (80135d0 <_vfiprintf_r+0x258>)
 8013578:	a904      	add	r1, sp, #16
 801357a:	4630      	mov	r0, r6
 801357c:	f7fd fb2a 	bl	8010bd4 <_printf_float>
 8013580:	4607      	mov	r7, r0
 8013582:	1c78      	adds	r0, r7, #1
 8013584:	d1d6      	bne.n	8013534 <_vfiprintf_r+0x1bc>
 8013586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013588:	07d9      	lsls	r1, r3, #31
 801358a:	d405      	bmi.n	8013598 <_vfiprintf_r+0x220>
 801358c:	89ab      	ldrh	r3, [r5, #12]
 801358e:	059a      	lsls	r2, r3, #22
 8013590:	d402      	bmi.n	8013598 <_vfiprintf_r+0x220>
 8013592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013594:	f7fd f950 	bl	8010838 <__retarget_lock_release_recursive>
 8013598:	89ab      	ldrh	r3, [r5, #12]
 801359a:	065b      	lsls	r3, r3, #25
 801359c:	f53f af12 	bmi.w	80133c4 <_vfiprintf_r+0x4c>
 80135a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135a2:	e711      	b.n	80133c8 <_vfiprintf_r+0x50>
 80135a4:	ab03      	add	r3, sp, #12
 80135a6:	9300      	str	r3, [sp, #0]
 80135a8:	462a      	mov	r2, r5
 80135aa:	4b09      	ldr	r3, [pc, #36]	; (80135d0 <_vfiprintf_r+0x258>)
 80135ac:	a904      	add	r1, sp, #16
 80135ae:	4630      	mov	r0, r6
 80135b0:	f7fd fdb4 	bl	801111c <_printf_i>
 80135b4:	e7e4      	b.n	8013580 <_vfiprintf_r+0x208>
 80135b6:	bf00      	nop
 80135b8:	080153e4 	.word	0x080153e4
 80135bc:	08015404 	.word	0x08015404
 80135c0:	080153c4 	.word	0x080153c4
 80135c4:	080157dc 	.word	0x080157dc
 80135c8:	080157e6 	.word	0x080157e6
 80135cc:	08010bd5 	.word	0x08010bd5
 80135d0:	08013353 	.word	0x08013353
 80135d4:	080157e2 	.word	0x080157e2

080135d8 <_read_r>:
 80135d8:	b538      	push	{r3, r4, r5, lr}
 80135da:	4d07      	ldr	r5, [pc, #28]	; (80135f8 <_read_r+0x20>)
 80135dc:	4604      	mov	r4, r0
 80135de:	4608      	mov	r0, r1
 80135e0:	4611      	mov	r1, r2
 80135e2:	2200      	movs	r2, #0
 80135e4:	602a      	str	r2, [r5, #0]
 80135e6:	461a      	mov	r2, r3
 80135e8:	f000 f918 	bl	801381c <_read>
 80135ec:	1c43      	adds	r3, r0, #1
 80135ee:	d102      	bne.n	80135f6 <_read_r+0x1e>
 80135f0:	682b      	ldr	r3, [r5, #0]
 80135f2:	b103      	cbz	r3, 80135f6 <_read_r+0x1e>
 80135f4:	6023      	str	r3, [r4, #0]
 80135f6:	bd38      	pop	{r3, r4, r5, pc}
 80135f8:	2000a9a4 	.word	0x2000a9a4

080135fc <abort>:
 80135fc:	b508      	push	{r3, lr}
 80135fe:	2006      	movs	r0, #6
 8013600:	f000 f8aa 	bl	8013758 <raise>
 8013604:	2001      	movs	r0, #1
 8013606:	f000 f927 	bl	8013858 <_exit>
	...

0801360c <_fstat_r>:
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	4d07      	ldr	r5, [pc, #28]	; (801362c <_fstat_r+0x20>)
 8013610:	2300      	movs	r3, #0
 8013612:	4604      	mov	r4, r0
 8013614:	4608      	mov	r0, r1
 8013616:	4611      	mov	r1, r2
 8013618:	602b      	str	r3, [r5, #0]
 801361a:	f000 f8d7 	bl	80137cc <_fstat>
 801361e:	1c43      	adds	r3, r0, #1
 8013620:	d102      	bne.n	8013628 <_fstat_r+0x1c>
 8013622:	682b      	ldr	r3, [r5, #0]
 8013624:	b103      	cbz	r3, 8013628 <_fstat_r+0x1c>
 8013626:	6023      	str	r3, [r4, #0]
 8013628:	bd38      	pop	{r3, r4, r5, pc}
 801362a:	bf00      	nop
 801362c:	2000a9a4 	.word	0x2000a9a4

08013630 <_isatty_r>:
 8013630:	b538      	push	{r3, r4, r5, lr}
 8013632:	4d06      	ldr	r5, [pc, #24]	; (801364c <_isatty_r+0x1c>)
 8013634:	2300      	movs	r3, #0
 8013636:	4604      	mov	r4, r0
 8013638:	4608      	mov	r0, r1
 801363a:	602b      	str	r3, [r5, #0]
 801363c:	f000 f8d6 	bl	80137ec <_isatty>
 8013640:	1c43      	adds	r3, r0, #1
 8013642:	d102      	bne.n	801364a <_isatty_r+0x1a>
 8013644:	682b      	ldr	r3, [r5, #0]
 8013646:	b103      	cbz	r3, 801364a <_isatty_r+0x1a>
 8013648:	6023      	str	r3, [r4, #0]
 801364a:	bd38      	pop	{r3, r4, r5, pc}
 801364c:	2000a9a4 	.word	0x2000a9a4

08013650 <__ascii_mbtowc>:
 8013650:	b082      	sub	sp, #8
 8013652:	b901      	cbnz	r1, 8013656 <__ascii_mbtowc+0x6>
 8013654:	a901      	add	r1, sp, #4
 8013656:	b142      	cbz	r2, 801366a <__ascii_mbtowc+0x1a>
 8013658:	b14b      	cbz	r3, 801366e <__ascii_mbtowc+0x1e>
 801365a:	7813      	ldrb	r3, [r2, #0]
 801365c:	600b      	str	r3, [r1, #0]
 801365e:	7812      	ldrb	r2, [r2, #0]
 8013660:	1e10      	subs	r0, r2, #0
 8013662:	bf18      	it	ne
 8013664:	2001      	movne	r0, #1
 8013666:	b002      	add	sp, #8
 8013668:	4770      	bx	lr
 801366a:	4610      	mov	r0, r2
 801366c:	e7fb      	b.n	8013666 <__ascii_mbtowc+0x16>
 801366e:	f06f 0001 	mvn.w	r0, #1
 8013672:	e7f8      	b.n	8013666 <__ascii_mbtowc+0x16>

08013674 <memmove>:
 8013674:	4288      	cmp	r0, r1
 8013676:	b510      	push	{r4, lr}
 8013678:	eb01 0402 	add.w	r4, r1, r2
 801367c:	d902      	bls.n	8013684 <memmove+0x10>
 801367e:	4284      	cmp	r4, r0
 8013680:	4623      	mov	r3, r4
 8013682:	d807      	bhi.n	8013694 <memmove+0x20>
 8013684:	1e43      	subs	r3, r0, #1
 8013686:	42a1      	cmp	r1, r4
 8013688:	d008      	beq.n	801369c <memmove+0x28>
 801368a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801368e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013692:	e7f8      	b.n	8013686 <memmove+0x12>
 8013694:	4402      	add	r2, r0
 8013696:	4601      	mov	r1, r0
 8013698:	428a      	cmp	r2, r1
 801369a:	d100      	bne.n	801369e <memmove+0x2a>
 801369c:	bd10      	pop	{r4, pc}
 801369e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80136a6:	e7f7      	b.n	8013698 <memmove+0x24>

080136a8 <_realloc_r>:
 80136a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ac:	4680      	mov	r8, r0
 80136ae:	4614      	mov	r4, r2
 80136b0:	460e      	mov	r6, r1
 80136b2:	b921      	cbnz	r1, 80136be <_realloc_r+0x16>
 80136b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136b8:	4611      	mov	r1, r2
 80136ba:	f7fd b977 	b.w	80109ac <_malloc_r>
 80136be:	b92a      	cbnz	r2, 80136cc <_realloc_r+0x24>
 80136c0:	f7fd f908 	bl	80108d4 <_free_r>
 80136c4:	4625      	mov	r5, r4
 80136c6:	4628      	mov	r0, r5
 80136c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136cc:	f000 f86d 	bl	80137aa <_malloc_usable_size_r>
 80136d0:	4284      	cmp	r4, r0
 80136d2:	4607      	mov	r7, r0
 80136d4:	d802      	bhi.n	80136dc <_realloc_r+0x34>
 80136d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80136da:	d812      	bhi.n	8013702 <_realloc_r+0x5a>
 80136dc:	4621      	mov	r1, r4
 80136de:	4640      	mov	r0, r8
 80136e0:	f7fd f964 	bl	80109ac <_malloc_r>
 80136e4:	4605      	mov	r5, r0
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d0ed      	beq.n	80136c6 <_realloc_r+0x1e>
 80136ea:	42bc      	cmp	r4, r7
 80136ec:	4622      	mov	r2, r4
 80136ee:	4631      	mov	r1, r6
 80136f0:	bf28      	it	cs
 80136f2:	463a      	movcs	r2, r7
 80136f4:	f7fd f8c2 	bl	801087c <memcpy>
 80136f8:	4631      	mov	r1, r6
 80136fa:	4640      	mov	r0, r8
 80136fc:	f7fd f8ea 	bl	80108d4 <_free_r>
 8013700:	e7e1      	b.n	80136c6 <_realloc_r+0x1e>
 8013702:	4635      	mov	r5, r6
 8013704:	e7df      	b.n	80136c6 <_realloc_r+0x1e>

08013706 <_raise_r>:
 8013706:	291f      	cmp	r1, #31
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	4604      	mov	r4, r0
 801370c:	460d      	mov	r5, r1
 801370e:	d904      	bls.n	801371a <_raise_r+0x14>
 8013710:	2316      	movs	r3, #22
 8013712:	6003      	str	r3, [r0, #0]
 8013714:	f04f 30ff 	mov.w	r0, #4294967295
 8013718:	bd38      	pop	{r3, r4, r5, pc}
 801371a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801371c:	b112      	cbz	r2, 8013724 <_raise_r+0x1e>
 801371e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013722:	b94b      	cbnz	r3, 8013738 <_raise_r+0x32>
 8013724:	4620      	mov	r0, r4
 8013726:	f000 f831 	bl	801378c <_getpid_r>
 801372a:	462a      	mov	r2, r5
 801372c:	4601      	mov	r1, r0
 801372e:	4620      	mov	r0, r4
 8013730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013734:	f000 b818 	b.w	8013768 <_kill_r>
 8013738:	2b01      	cmp	r3, #1
 801373a:	d00a      	beq.n	8013752 <_raise_r+0x4c>
 801373c:	1c59      	adds	r1, r3, #1
 801373e:	d103      	bne.n	8013748 <_raise_r+0x42>
 8013740:	2316      	movs	r3, #22
 8013742:	6003      	str	r3, [r0, #0]
 8013744:	2001      	movs	r0, #1
 8013746:	e7e7      	b.n	8013718 <_raise_r+0x12>
 8013748:	2400      	movs	r4, #0
 801374a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801374e:	4628      	mov	r0, r5
 8013750:	4798      	blx	r3
 8013752:	2000      	movs	r0, #0
 8013754:	e7e0      	b.n	8013718 <_raise_r+0x12>
	...

08013758 <raise>:
 8013758:	4b02      	ldr	r3, [pc, #8]	; (8013764 <raise+0xc>)
 801375a:	4601      	mov	r1, r0
 801375c:	6818      	ldr	r0, [r3, #0]
 801375e:	f7ff bfd2 	b.w	8013706 <_raise_r>
 8013762:	bf00      	nop
 8013764:	20000204 	.word	0x20000204

08013768 <_kill_r>:
 8013768:	b538      	push	{r3, r4, r5, lr}
 801376a:	4d07      	ldr	r5, [pc, #28]	; (8013788 <_kill_r+0x20>)
 801376c:	2300      	movs	r3, #0
 801376e:	4604      	mov	r4, r0
 8013770:	4608      	mov	r0, r1
 8013772:	4611      	mov	r1, r2
 8013774:	602b      	str	r3, [r5, #0]
 8013776:	f000 f841 	bl	80137fc <_kill>
 801377a:	1c43      	adds	r3, r0, #1
 801377c:	d102      	bne.n	8013784 <_kill_r+0x1c>
 801377e:	682b      	ldr	r3, [r5, #0]
 8013780:	b103      	cbz	r3, 8013784 <_kill_r+0x1c>
 8013782:	6023      	str	r3, [r4, #0]
 8013784:	bd38      	pop	{r3, r4, r5, pc}
 8013786:	bf00      	nop
 8013788:	2000a9a4 	.word	0x2000a9a4

0801378c <_getpid_r>:
 801378c:	f000 b826 	b.w	80137dc <_getpid>

08013790 <__ascii_wctomb>:
 8013790:	b149      	cbz	r1, 80137a6 <__ascii_wctomb+0x16>
 8013792:	2aff      	cmp	r2, #255	; 0xff
 8013794:	bf85      	ittet	hi
 8013796:	238a      	movhi	r3, #138	; 0x8a
 8013798:	6003      	strhi	r3, [r0, #0]
 801379a:	700a      	strbls	r2, [r1, #0]
 801379c:	f04f 30ff 	movhi.w	r0, #4294967295
 80137a0:	bf98      	it	ls
 80137a2:	2001      	movls	r0, #1
 80137a4:	4770      	bx	lr
 80137a6:	4608      	mov	r0, r1
 80137a8:	4770      	bx	lr

080137aa <_malloc_usable_size_r>:
 80137aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137ae:	1f18      	subs	r0, r3, #4
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	bfbc      	itt	lt
 80137b4:	580b      	ldrlt	r3, [r1, r0]
 80137b6:	18c0      	addlt	r0, r0, r3
 80137b8:	4770      	bx	lr
	...

080137bc <_close>:
 80137bc:	4b02      	ldr	r3, [pc, #8]	; (80137c8 <_close+0xc>)
 80137be:	2258      	movs	r2, #88	; 0x58
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	f04f 30ff 	mov.w	r0, #4294967295
 80137c6:	4770      	bx	lr
 80137c8:	2000a9a4 	.word	0x2000a9a4

080137cc <_fstat>:
 80137cc:	4b02      	ldr	r3, [pc, #8]	; (80137d8 <_fstat+0xc>)
 80137ce:	2258      	movs	r2, #88	; 0x58
 80137d0:	601a      	str	r2, [r3, #0]
 80137d2:	f04f 30ff 	mov.w	r0, #4294967295
 80137d6:	4770      	bx	lr
 80137d8:	2000a9a4 	.word	0x2000a9a4

080137dc <_getpid>:
 80137dc:	4b02      	ldr	r3, [pc, #8]	; (80137e8 <_getpid+0xc>)
 80137de:	2258      	movs	r2, #88	; 0x58
 80137e0:	601a      	str	r2, [r3, #0]
 80137e2:	f04f 30ff 	mov.w	r0, #4294967295
 80137e6:	4770      	bx	lr
 80137e8:	2000a9a4 	.word	0x2000a9a4

080137ec <_isatty>:
 80137ec:	4b02      	ldr	r3, [pc, #8]	; (80137f8 <_isatty+0xc>)
 80137ee:	2258      	movs	r2, #88	; 0x58
 80137f0:	601a      	str	r2, [r3, #0]
 80137f2:	2000      	movs	r0, #0
 80137f4:	4770      	bx	lr
 80137f6:	bf00      	nop
 80137f8:	2000a9a4 	.word	0x2000a9a4

080137fc <_kill>:
 80137fc:	4b02      	ldr	r3, [pc, #8]	; (8013808 <_kill+0xc>)
 80137fe:	2258      	movs	r2, #88	; 0x58
 8013800:	601a      	str	r2, [r3, #0]
 8013802:	f04f 30ff 	mov.w	r0, #4294967295
 8013806:	4770      	bx	lr
 8013808:	2000a9a4 	.word	0x2000a9a4

0801380c <_lseek>:
 801380c:	4b02      	ldr	r3, [pc, #8]	; (8013818 <_lseek+0xc>)
 801380e:	2258      	movs	r2, #88	; 0x58
 8013810:	601a      	str	r2, [r3, #0]
 8013812:	f04f 30ff 	mov.w	r0, #4294967295
 8013816:	4770      	bx	lr
 8013818:	2000a9a4 	.word	0x2000a9a4

0801381c <_read>:
 801381c:	4b02      	ldr	r3, [pc, #8]	; (8013828 <_read+0xc>)
 801381e:	2258      	movs	r2, #88	; 0x58
 8013820:	601a      	str	r2, [r3, #0]
 8013822:	f04f 30ff 	mov.w	r0, #4294967295
 8013826:	4770      	bx	lr
 8013828:	2000a9a4 	.word	0x2000a9a4

0801382c <_sbrk>:
 801382c:	4a04      	ldr	r2, [pc, #16]	; (8013840 <_sbrk+0x14>)
 801382e:	6811      	ldr	r1, [r2, #0]
 8013830:	4603      	mov	r3, r0
 8013832:	b909      	cbnz	r1, 8013838 <_sbrk+0xc>
 8013834:	4903      	ldr	r1, [pc, #12]	; (8013844 <_sbrk+0x18>)
 8013836:	6011      	str	r1, [r2, #0]
 8013838:	6810      	ldr	r0, [r2, #0]
 801383a:	4403      	add	r3, r0
 801383c:	6013      	str	r3, [r2, #0]
 801383e:	4770      	bx	lr
 8013840:	2000a9a8 	.word	0x2000a9a8
 8013844:	2000a9b0 	.word	0x2000a9b0

08013848 <_write>:
 8013848:	4b02      	ldr	r3, [pc, #8]	; (8013854 <_write+0xc>)
 801384a:	2258      	movs	r2, #88	; 0x58
 801384c:	601a      	str	r2, [r3, #0]
 801384e:	f04f 30ff 	mov.w	r0, #4294967295
 8013852:	4770      	bx	lr
 8013854:	2000a9a4 	.word	0x2000a9a4

08013858 <_exit>:
 8013858:	e7fe      	b.n	8013858 <_exit>
	...

0801385c <_init>:
 801385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385e:	bf00      	nop
 8013860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013862:	bc08      	pop	{r3}
 8013864:	469e      	mov	lr, r3
 8013866:	4770      	bx	lr

08013868 <_fini>:
 8013868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801386a:	bf00      	nop
 801386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801386e:	bc08      	pop	{r3}
 8013870:	469e      	mov	lr, r3
 8013872:	4770      	bx	lr
