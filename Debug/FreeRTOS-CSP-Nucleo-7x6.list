
FreeRTOS-CSP-Nucleo-7x6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e440  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eb0  0800e610  0800e610  0001e610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104c0  080104c0  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  080104c0  080104c0  000204c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104c8  080104c8  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104c8  080104c8  000204c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104cc  080104cc  000204cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  080104d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cc0  20000248  08010718  00030248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008f08  08010718  00038f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028159  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065aa  00000000  00000000  000583d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0005e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  00060758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009729  00000000  00000000  00062330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029c33  00000000  00000000  0006ba59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104365  00000000  00000000  0009568c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001999f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b3c  00000000  00000000  00199a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001a2580  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001a264c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e5f8 	.word	0x0800e5f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800e5f8 	.word	0x0800e5f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <csp_conf_get_defaults+0x60>)
 8000efe:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <csp_conf_get_defaults+0x64>)
 8000f04:	609a      	str	r2, [r3, #8]
	conf->revision = "revision";
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <csp_conf_get_defaults+0x68>)
 8000f0a:	60da      	str	r2, [r3, #12]
	conf->conn_max = 6;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2206      	movs	r2, #6
 8000f10:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 6;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2206      	movs	r2, #6
 8000f16:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2219      	movs	r2, #25
 8000f1c:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2218      	movs	r2, #24
 8000f22:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2214      	movs	r2, #20
 8000f28:	751a      	strb	r2, [r3, #20]
	conf->buffers = 6;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2206      	movs	r2, #6
 8000f2e:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f36:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0800e610 	.word	0x0800e610
 8000f50:	0800e61c 	.word	0x0800e61c
 8000f54:	0800e624 	.word	0x0800e624

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09c      	sub	sp, #112	; 0x70
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fcc6 	bl	80018ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f8b5 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f9ab 	bl	80012c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f6a:	f000 f979 	bl	8001260 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000f6e:	f000 f917 	bl	80011a0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

	uint8_t address = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	csp_debug_level_t debug_level = CSP_INFO;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000f84:	e013      	b.n	8000fae <main+0x56>
		csp_debug_set_level(i, (i <= debug_level) ? true : false);
 8000f86:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f8a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	bf94      	ite	ls
 8000f92:	2301      	movls	r3, #1
 8000f94:	2300      	movhi	r3, #0
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 fbfe 	bl	80087a0 <csp_debug_set_level>
	for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 8000fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000fae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d9e7      	bls.n	8000f86 <main+0x2e>
	}
	csp_log_info("Initialising CSP");
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <main+0x138>)
 8000fb8:	789b      	ldrb	r3, [r3, #2]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <main+0x6e>
 8000fbe:	4935      	ldr	r1, [pc, #212]	; (8001094 <main+0x13c>)
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f007 fb83 	bl	80086cc <do_csp_debug>
	csp_conf_t csp_conf;
	csp_conf_get_defaults(&csp_conf);
 8000fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff8e 	bl	8000eec <csp_conf_get_defaults>
	csp_conf.address = address;
 8000fd0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000fd4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	int error = csp_init(&csp_conf);
 8000fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f007 fc8d 	bl	80088fc <csp_init>
 8000fe2:	66b8      	str	r0, [r7, #104]	; 0x68
	if (error != CSP_ERR_NONE) {
 8000fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <main+0xa4>
		csp_log_error("csp_init() failed, error: %d", error);
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <main+0x138>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <main+0xa4>
 8000ff2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ff4:	4928      	ldr	r1, [pc, #160]	; (8001098 <main+0x140>)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f007 fb68 	bl	80086cc <do_csp_debug>
	}
	/* Start router task with 1000 bytes of stack (priority is only supported on FreeRTOS) */
	csp_route_start_task(1000, 0);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001002:	f008 f983 	bl	800930c <csp_route_start_task>

	/* Add interface(s) */
	csp_iface_t CSP_IF_CAN = {
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00a fcd5 	bl	800b9be <memset>
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <main+0x144>)
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <main+0x148>)
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <main+0x14c>)
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	2340      	movs	r3, #64	; 0x40
 8001022:	833b      	strh	r3, [r7, #24]
			.driver_data = &hcan1,
			.nexthop = csp_can_tx,
			.mtu = 64,
	};

	csp_iface_t *can_iface = &CSP_IF_CAN;
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	607b      	str	r3, [r7, #4]

	error = csp_can_stm32_open_and_add_interface(CSP_IF_CAN.name, &can_iface);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1d3a      	adds	r2, r7, #4
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f008 fa3d 	bl	80094b0 <csp_can_stm32_open_and_add_interface>
 8001036:	66b8      	str	r0, [r7, #104]	; 0x68

	if (can_iface) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <main+0xf4>
		csp_rtable_set(CSP_DEFAULT_ROUTE, 0, can_iface, CSP_NO_VIA_ADDRESS);
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	23ff      	movs	r3, #255	; 0xff
 8001042:	2100      	movs	r1, #0
 8001044:	2020      	movs	r0, #32
 8001046:	f008 fbd1 	bl	80097ec <csp_rtable_set>
 800104a:	e003      	b.n	8001054 <main+0xfc>
	} else {
		server_address = address;
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <main+0x150>)
 800104e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001052:	7013      	strb	r3, [r2, #0]
	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001054:	f003 fa5e 	bl	8004514 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Default_Task */
  Default_TaskHandle = osThreadNew(Start_Default_Task, NULL, &Default_Task_attributes);
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <main+0x154>)
 800105a:	2100      	movs	r1, #0
 800105c:	4814      	ldr	r0, [pc, #80]	; (80010b0 <main+0x158>)
 800105e:	f003 fac3 	bl	80045e8 <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <main+0x15c>)
 8001066:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Send_Ping */
  CAN_Send_PingHandle = osThreadNew(Start_CAN_Send_Ping, NULL, &CAN_Send_Ping_attributes);
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <main+0x160>)
 800106a:	2100      	movs	r1, #0
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <main+0x164>)
 800106e:	f003 fabb 	bl	80045e8 <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <main+0x168>)
 8001076:	6013      	str	r3, [r2, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(Start_Blink, NULL, &Blink_attributes);
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <main+0x16c>)
 800107a:	2100      	movs	r1, #0
 800107c:	4812      	ldr	r0, [pc, #72]	; (80010c8 <main+0x170>)
 800107e:	f003 fab3 	bl	80045e8 <osThreadNew>
 8001082:	4603      	mov	r3, r0
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <main+0x174>)
 8001086:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001088:	f003 fa78 	bl	800457c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800108c:	e7fe      	b.n	800108c <main+0x134>
 800108e:	bf00      	nop
 8001090:	20000014 	.word	0x20000014
 8001094:	0800e658 	.word	0x0800e658
 8001098:	0800e66c 	.word	0x0800e66c
 800109c:	0800e68c 	.word	0x0800e68c
 80010a0:	20000264 	.word	0x20000264
 80010a4:	08009541 	.word	0x08009541
 80010a8:	20000000 	.word	0x20000000
 80010ac:	0800fff4 	.word	0x0800fff4
 80010b0:	080014c9 	.word	0x080014c9
 80010b4:	20000314 	.word	0x20000314
 80010b8:	08010018 	.word	0x08010018
 80010bc:	080014d9 	.word	0x080014d9
 80010c0:	20000318 	.word	0x20000318
 80010c4:	0801003c 	.word	0x0801003c
 80010c8:	08001539 	.word	0x08001539
 80010cc:	2000031c 	.word	0x2000031c

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	2230      	movs	r2, #48	; 0x30
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f00a fc6d 	bl	800b9be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010f4:	f001 f9da 	bl	80024ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <SystemClock_Config+0xc8>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <SystemClock_Config+0xc8>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <SystemClock_Config+0xc8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <SystemClock_Config+0xcc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <SystemClock_Config+0xcc>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <SystemClock_Config+0xcc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112c:	2301      	movs	r3, #1
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001130:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001144:	2348      	movs	r3, #72	; 0x48
 8001146:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800114c:	2303      	movs	r3, #3
 800114e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4618      	mov	r0, r3
 8001156:	f001 f9b9 	bl	80024cc <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001160:	f000 fa0c 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fc47 	bl	8002a14 <HAL_RCC_ClockConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800118c:	f000 f9f6 	bl	800157c <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	; 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011a6:	4a2c      	ldr	r2, [pc, #176]	; (8001258 <MX_CAN1_Init+0xb8>)
 80011a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011f0:	4818      	ldr	r0, [pc, #96]	; (8001254 <MX_CAN1_Init+0xb4>)
 80011f2:	f000 fba9 	bl	8001948 <HAL_CAN_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011fc:	f000 f9be 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	canfil.FilterBank = 0;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_CAN1_Init+0xbc>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_CAN1_Init+0xbc>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_CAN1_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_CAN1_Init+0xbc>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_CAN1_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_CAN1_Init+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MX_CAN1_Init+0xbc>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_CAN1_Init+0xbc>)
 800122c:	2201      	movs	r2, #1
 800122e:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = ENABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_CAN1_Init+0xbc>)
 8001232:	2201      	movs	r2, #1
 8001234:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 14;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_CAN1_Init+0xbc>)
 8001238:	220e      	movs	r2, #14
 800123a:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1,&canfil) != HAL_OK) //Initialize CAN Filter
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <MX_CAN1_Init+0xbc>)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_CAN1_Init+0xb4>)
 8001240:	f000 fc7e 	bl	8001b40 <HAL_CAN_ConfigFilter>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_CAN1_Init+0xae>
		Error_Handler();
 800124a:	f000 f997 	bl	800157c <Error_Handler>

  /* USER CODE END CAN1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000264 	.word	0x20000264
 8001258:	40006400 	.word	0x40006400
 800125c:	20000320 	.word	0x20000320

08001260 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_USART3_UART_Init+0x5c>)
 8001268:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART3_UART_Init+0x58>)
 80012a4:	f002 fcde 	bl	8003c64 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012ae:	f000 f965 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000028c 	.word	0x2000028c
 80012bc:	40004800 	.word	0x40004800

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a76      	ldr	r2, [pc, #472]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b74      	ldr	r3, [pc, #464]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a70      	ldr	r2, [pc, #448]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b6e      	ldr	r3, [pc, #440]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a6a      	ldr	r2, [pc, #424]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a64      	ldr	r2, [pc, #400]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a58      	ldr	r2, [pc, #352]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <MX_GPIO_Init+0x1f4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f244 0181 	movw	r1, #16513	; 0x4081
 800136c:	4852      	ldr	r0, [pc, #328]	; (80014b8 <MX_GPIO_Init+0x1f8>)
 800136e:	f001 f869 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2140      	movs	r1, #64	; 0x40
 8001376:	4851      	ldr	r0, [pc, #324]	; (80014bc <MX_GPIO_Init+0x1fc>)
 8001378:	f001 f864 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001382:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	484b      	ldr	r0, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x200>)
 8001394:	f000 feaa 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001398:	2332      	movs	r3, #50	; 0x32
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a8:	230b      	movs	r3, #11
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4843      	ldr	r0, [pc, #268]	; (80014c0 <MX_GPIO_Init+0x200>)
 80013b4:	f000 fe9a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013b8:	2386      	movs	r3, #134	; 0x86
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c8:	230b      	movs	r3, #11
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	483c      	ldr	r0, [pc, #240]	; (80014c4 <MX_GPIO_Init+0x204>)
 80013d4:	f000 fe8a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4831      	ldr	r0, [pc, #196]	; (80014b8 <MX_GPIO_Init+0x1f8>)
 80013f2:	f000 fe7b 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001408:	230b      	movs	r3, #11
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <MX_GPIO_Init+0x1f8>)
 8001414:	f000 fe6a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001418:	2340      	movs	r3, #64	; 0x40
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_GPIO_Init+0x1fc>)
 8001430:	f000 fe5c 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <MX_GPIO_Init+0x1fc>)
 8001448:	f000 fe50 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800144c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800145e:	230a      	movs	r3, #10
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0x204>)
 800146a:	f000 fe3f 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800146e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <MX_GPIO_Init+0x204>)
 8001484:	f000 fe32 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001488:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149a:	230b      	movs	r3, #11
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0x1fc>)
 80014a6:	f000 fe21 	bl	80020ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020000 	.word	0x40020000

080014c8 <Start_Default_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Default_Task */
void Start_Default_Task(void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	while (1) {
		osDelay(10);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f003 f92f 	bl	8004734 <osDelay>
 80014d6:	e7fb      	b.n	80014d0 <Start_Default_Task+0x8>

080014d8 <Start_CAN_Send_Ping>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CAN_Send_Ping */
void Start_CAN_Send_Ping(void *argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CAN_Send_Ping */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80014e0:	4812      	ldr	r0, [pc, #72]	; (800152c <Start_CAN_Send_Ping+0x54>)
 80014e2:	f000 fc0d 	bl	8001d00 <HAL_CAN_Start>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <Start_CAN_Send_Ping+0x18>
		Error_Handler();
 80014ec:	f000 f846 	bl	800157c <Error_Handler>
	}
	/* Infinite loop */
	while (1) {

		if (csp_ping(server_address, 1000, 50, CSP_SO_NONE) == -1) {
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <Start_CAN_Send_Ping+0x58>)
 80014f2:	7818      	ldrb	r0, [r3, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	2232      	movs	r2, #50	; 0x32
 80014f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014fc:	f007 ff32 	bl	8009364 <csp_ping>
 8001500:	4603      	mov	r3, r0
 8001502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001506:	d106      	bne.n	8001516 <Start_CAN_Send_Ping+0x3e>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <Start_CAN_Send_Ping+0x5c>)
 8001510:	f000 ff98 	bl	8002444 <HAL_GPIO_WritePin>
 8001514:	e005      	b.n	8001522 <Start_CAN_Send_Ping+0x4a>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <Start_CAN_Send_Ping+0x5c>)
 800151e:	f000 ff91 	bl	8002444 <HAL_GPIO_WritePin>
		}

		osDelay(200);
 8001522:	20c8      	movs	r0, #200	; 0xc8
 8001524:	f003 f906 	bl	8004734 <osDelay>
		if (csp_ping(server_address, 1000, 50, CSP_SO_NONE) == -1) {
 8001528:	e7e2      	b.n	80014f0 <Start_CAN_Send_Ping+0x18>
 800152a:	bf00      	nop
 800152c:	20000264 	.word	0x20000264
 8001530:	20000000 	.word	0x20000000
 8001534:	40020400 	.word	0x40020400

08001538 <Start_Blink>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Blink */
void Start_Blink(void *argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Blink */
	char* message;
	/* Infinite loop */
	while (1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	4804      	ldr	r0, [pc, #16]	; (8001554 <Start_Blink+0x1c>)
 8001544:	f000 ff97 	bl	8002476 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154c:	f003 f8f2 	bl	8004734 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001550:	e7f6      	b.n	8001540 <Start_Blink+0x8>
 8001552:	bf00      	nop
 8001554:	40020400 	.word	0x40020400

08001558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156a:	f000 f9cd 	bl	8001908 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40001000 	.word	0x40001000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	210f      	movs	r1, #15
 80015c2:	f06f 0001 	mvn.w	r0, #1
 80015c6:	f000 fd67 	bl	8002098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_CAN_MspInit+0xa0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d139      	bne.n	800166e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_CAN_MspInit+0xa4>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a1f      	ldr	r2, [pc, #124]	; (800167c <HAL_CAN_MspInit+0xa4>)
 8001600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_CAN_MspInit+0xa4>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_CAN_MspInit+0xa4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_CAN_MspInit+0xa4>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_CAN_MspInit+0xa4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800163c:	2309      	movs	r3, #9
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <HAL_CAN_MspInit+0xa8>)
 8001648:	f000 fd50 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800164c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800165e:	2309      	movs	r3, #9
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_CAN_MspInit+0xa8>)
 800166a:	f000 fd3f 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40006400 	.word	0x40006400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020400 	.word	0x40020400

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0aa      	sub	sp, #168	; 0xa8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2284      	movs	r2, #132	; 0x84
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00a f98a 	bl	800b9be <memset>
  if(huart->Instance==USART3)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d13c      	bne.n	800172e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 fbfe 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016ce:	f7ff ff55 	bl	800157c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_UART_MspInit+0xb8>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_UART_MspInit+0xb8>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_UART_MspInit+0xb8>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_UART_MspInit+0xb8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_UART_MspInit+0xb8>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_UART_MspInit+0xb8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800171c:	2307      	movs	r3, #7
 800171e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_UART_MspInit+0xbc>)
 800172a:	f000 fcdf 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	37a8      	adds	r7, #168	; 0xa8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004800 	.word	0x40004800
 800173c:	40023800 	.word	0x40023800
 8001740:	40020c00 	.word	0x40020c00

08001744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	; 0x38
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001754:	4b33      	ldr	r3, [pc, #204]	; (8001824 <HAL_InitTick+0xe0>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a32      	ldr	r2, [pc, #200]	; (8001824 <HAL_InitTick+0xe0>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_InitTick+0xe0>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fb72 	bl	8002e60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001786:	f001 fb43 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 800178a:	6378      	str	r0, [r7, #52]	; 0x34
 800178c:	e004      	b.n	8001798 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800178e:	f001 fb3f 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8001792:	4603      	mov	r3, r0
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <HAL_InitTick+0xe4>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	3b01      	subs	r3, #1
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_InitTick+0xe8>)
 80017a8:	4a21      	ldr	r2, [pc, #132]	; (8001830 <HAL_InitTick+0xec>)
 80017aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_InitTick+0xe8>)
 80017ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_InitTick+0xe8>)
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_InitTick+0xe8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_InitTick+0xe8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_InitTick+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017cc:	4817      	ldr	r0, [pc, #92]	; (800182c <HAL_InitTick+0xe8>)
 80017ce:	f001 ff69 	bl	80036a4 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80017d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11b      	bne.n	8001818 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017e0:	4812      	ldr	r0, [pc, #72]	; (800182c <HAL_InitTick+0xe8>)
 80017e2:	f001 ffc1 	bl	8003768 <HAL_TIM_Base_Start_IT>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f4:	2036      	movs	r0, #54	; 0x36
 80017f6:	f000 fc6b 	bl	80020d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d808      	bhi.n	8001812 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	2036      	movs	r0, #54	; 0x36
 8001806:	f000 fc47 	bl	8002098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_InitTick+0xf0>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e002      	b.n	8001818 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800181c:	4618      	mov	r0, r3
 800181e:	3738      	adds	r7, #56	; 0x38
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	431bde83 	.word	0x431bde83
 800182c:	20000348 	.word	0x20000348
 8001830:	40001000 	.word	0x40001000
 8001834:	20000008 	.word	0x20000008

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <TIM6_DAC_IRQHandler+0x10>)
 800186a:	f001 fff5 	bl	8003858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000348 	.word	0x20000348

08001878 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b8:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018c6:	f7ff ffd7 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f00a f843 	bl	800b954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fb43 	bl	8000f58 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80018e0:	080104d0 	.word	0x080104d0
  ldr r2, =_sbss
 80018e4:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80018e8:	20008f08 	.word	0x20008f08

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>

080018ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f000 fbc5 	bl	8002082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f8:	200f      	movs	r0, #15
 80018fa:	f7ff ff23 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fe:	f7ff fe43 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000000c 	.word	0x2000000c
 800192c:	20000394 	.word	0x20000394

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000394 	.word	0x20000394

08001948 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0ed      	b.n	8001b36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fe36 	bl	80015d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197c:	f7ff ffd8 	bl	8001930 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001982:	e012      	b.n	80019aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001984:	f7ff ffd4 	bl	8001930 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d90b      	bls.n	80019aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0c5      	b.n	8001b36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0e5      	beq.n	8001984 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0202 	bic.w	r2, r2, #2
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff ffb2 	bl	8001930 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019ce:	e012      	b.n	80019f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d0:	f7ff ffae 	bl	8001930 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d90b      	bls.n	80019f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2205      	movs	r2, #5
 80019ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e09f      	b.n	8001b36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e5      	bne.n	80019d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d108      	bne.n	8001a1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e007      	b.n	8001a2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7e5b      	ldrb	r3, [r3, #25]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e007      	b.n	8001a58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7e9b      	ldrb	r3, [r3, #26]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d108      	bne.n	8001a72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0220 	orr.w	r2, r2, #32
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0220 	bic.w	r2, r2, #32
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7edb      	ldrb	r3, [r3, #27]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0210 	bic.w	r2, r2, #16
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e007      	b.n	8001aac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0210 	orr.w	r2, r2, #16
 8001aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7f1b      	ldrb	r3, [r3, #28]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d108      	bne.n	8001ac6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0208 	orr.w	r2, r2, #8
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e007      	b.n	8001ad6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0208 	bic.w	r2, r2, #8
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7f5b      	ldrb	r3, [r3, #29]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d108      	bne.n	8001af0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0204 	orr.w	r2, r2, #4
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e007      	b.n	8001b00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	ea42 0103 	orr.w	r1, r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b58:	7cfb      	ldrb	r3, [r7, #19]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_ConfigFilter+0x26>
 8001b5e:	7cfb      	ldrb	r3, [r7, #19]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	f040 80be 	bne.w	8001ce2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b66:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <HAL_CAN_ConfigFilter+0x1bc>)
 8001b68:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	431a      	orrs	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	401a      	ands	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d123      	bne.n	8001c10 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3248      	adds	r2, #72	; 0x48
 8001bf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c06:	6979      	ldr	r1, [r7, #20]
 8001c08:	3348      	adds	r3, #72	; 0x48
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d122      	bne.n	8001c5e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3248      	adds	r2, #72	; 0x48
 8001c3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c54:	6979      	ldr	r1, [r7, #20]
 8001c56:	3348      	adds	r3, #72	; 0x48
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c78:	e007      	b.n	8001c8a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ca4:	e007      	b.n	8001cb6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cd4:	f023 0201 	bic.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e006      	b.n	8001cf0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
  }
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40006400 	.word	0x40006400

08001d00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d12e      	bne.n	8001d72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff fe00 	bl	8001930 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d32:	e012      	b.n	8001d5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d34:	f7ff fdfc 	bl	8001930 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b0a      	cmp	r3, #10
 8001d40:	d90b      	bls.n	8001d5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e012      	b.n	8001d80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e5      	bne.n	8001d34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e006      	b.n	8001d80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
  }
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d003      	beq.n	8001db4 <HAL_CAN_AddTxMessage+0x2c>
 8001dac:	7ffb      	ldrb	r3, [r7, #31]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	f040 80ad 	bne.w	8001f0e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8095 	beq.w	8001efe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	0e1b      	lsrs	r3, r3, #24
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dde:	2201      	movs	r2, #1
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	6809      	ldr	r1, [r1, #0]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3318      	adds	r3, #24
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e00f      	b.n	8001e2c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3318      	adds	r3, #24
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	440b      	add	r3, r1
 8001e2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3318      	adds	r3, #24
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	7d1b      	ldrb	r3, [r3, #20]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d111      	bne.n	8001e6c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3318      	adds	r3, #24
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	6811      	ldr	r1, [r2, #0]
 8001e5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3318      	adds	r3, #24
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	440b      	add	r3, r1
 8001e68:	3304      	adds	r3, #4
 8001e6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3307      	adds	r3, #7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	061a      	lsls	r2, r3, #24
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3306      	adds	r3, #6
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	041b      	lsls	r3, r3, #16
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3305      	adds	r3, #5
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	4313      	orrs	r3, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	3204      	adds	r2, #4
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	4610      	mov	r0, r2
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	ea43 0200 	orr.w	r2, r3, r0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ea2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3303      	adds	r3, #3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	061a      	lsls	r2, r3, #24
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	7812      	ldrb	r2, [r2, #0]
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	ea43 0200 	orr.w	r2, r3, r0
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ed8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6811      	ldr	r1, [r2, #0]
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	440b      	add	r3, r1
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e00e      	b.n	8001f1c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e006      	b.n	8001f1c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3724      	adds	r7, #36	; 0x24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <__NVIC_SetPriorityGrouping+0x40>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x40>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00
 8001f6c:	05fa0000 	.word	0x05fa0000

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0b      	blt.n	8001fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <__NVIC_EnableIRQ+0x38>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff4c 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020aa:	f7ff ff61 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f7ff ffb1 	bl	800201c <NVIC_EncodePriority>
 80020ba:	4602      	mov	r2, r0
 80020bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff80 	bl	8001fc8 <__NVIC_SetPriority>
}
 80020c8:	bf00      	nop
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff54 	bl	8001f8c <__NVIC_EnableIRQ>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e175      	b.n	80023f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8164 	bne.w	80023f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x56>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80be 	beq.w	80023f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_GPIO_Init+0x324>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a65      	ldr	r2, [pc, #404]	; (8002410 <HAL_GPIO_Init+0x324>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_GPIO_Init+0x324>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800228e:	4a61      	ldr	r2, [pc, #388]	; (8002414 <HAL_GPIO_Init+0x328>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a58      	ldr	r2, [pc, #352]	; (8002418 <HAL_GPIO_Init+0x32c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d037      	beq.n	800232a <HAL_GPIO_Init+0x23e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a57      	ldr	r2, [pc, #348]	; (800241c <HAL_GPIO_Init+0x330>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_GPIO_Init+0x23a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a56      	ldr	r2, [pc, #344]	; (8002420 <HAL_GPIO_Init+0x334>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02b      	beq.n	8002322 <HAL_GPIO_Init+0x236>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a55      	ldr	r2, [pc, #340]	; (8002424 <HAL_GPIO_Init+0x338>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d025      	beq.n	800231e <HAL_GPIO_Init+0x232>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a54      	ldr	r2, [pc, #336]	; (8002428 <HAL_GPIO_Init+0x33c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <HAL_GPIO_Init+0x22e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a53      	ldr	r2, [pc, #332]	; (800242c <HAL_GPIO_Init+0x340>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x22a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_GPIO_Init+0x344>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x226>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a51      	ldr	r2, [pc, #324]	; (8002434 <HAL_GPIO_Init+0x348>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x222>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a50      	ldr	r2, [pc, #320]	; (8002438 <HAL_GPIO_Init+0x34c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x21e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4f      	ldr	r2, [pc, #316]	; (800243c <HAL_GPIO_Init+0x350>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x21a>
 8002302:	2309      	movs	r3, #9
 8002304:	e012      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002306:	230a      	movs	r3, #10
 8002308:	e010      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230a:	2308      	movs	r3, #8
 800230c:	e00e      	b.n	800232c <HAL_GPIO_Init+0x240>
 800230e:	2307      	movs	r3, #7
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002312:	2306      	movs	r3, #6
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x240>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x240>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x240>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800233c:	4935      	ldr	r1, [pc, #212]	; (8002414 <HAL_GPIO_Init+0x328>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_GPIO_Init+0x354>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a34      	ldr	r2, [pc, #208]	; (8002440 <HAL_GPIO_Init+0x354>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <HAL_GPIO_Init+0x354>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a29      	ldr	r2, [pc, #164]	; (8002440 <HAL_GPIO_Init+0x354>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_GPIO_Init+0x354>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c2:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_GPIO_Init+0x354>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_GPIO_Init+0x354>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_GPIO_Init+0x354>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae86 	bls.w	800210c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40013800 	.word	0x40013800
 8002418:	40020000 	.word	0x40020000
 800241c:	40020400 	.word	0x40020400
 8002420:	40020800 	.word	0x40020800
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40021000 	.word	0x40021000
 800242c:	40021400 	.word	0x40021400
 8002430:	40021800 	.word	0x40021800
 8002434:	40021c00 	.word	0x40021c00
 8002438:	40022000 	.word	0x40022000
 800243c:	40022400 	.word	0x40022400
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	041a      	lsls	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43d9      	mvns	r1, r3
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e291      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8087 	beq.w	80025fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f0:	4b96      	ldr	r3, [pc, #600]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d00c      	beq.n	8002516 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fc:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d112      	bne.n	800252e <HAL_RCC_OscConfig+0x62>
 8002508:	4b90      	ldr	r3, [pc, #576]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002514:	d10b      	bne.n	800252e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	4b8d      	ldr	r3, [pc, #564]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d06c      	beq.n	80025fc <HAL_RCC_OscConfig+0x130>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d168      	bne.n	80025fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e26b      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x7a>
 8002538:	4b84      	ldr	r3, [pc, #528]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a83      	ldr	r2, [pc, #524]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e02e      	b.n	80025a4 <HAL_RCC_OscConfig+0xd8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x9c>
 800254e:	4b7f      	ldr	r3, [pc, #508]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7e      	ldr	r2, [pc, #504]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7b      	ldr	r2, [pc, #492]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xd8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0xc0>
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a75      	ldr	r2, [pc, #468]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a72      	ldr	r2, [pc, #456]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xd8>
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6b      	ldr	r2, [pc, #428]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f9c0 	bl	8001930 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff f9bc 	bl	8001930 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e21f      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe8>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff f9ac 	bl	8001930 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff f9a8 	bl	8001930 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e20b      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x110>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d069      	beq.n	80026de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260a:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b4d      	ldr	r3, [pc, #308]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x190>
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x17a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1df      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	493d      	ldr	r1, [pc, #244]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e040      	b.n	80026de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d023      	beq.n	80026ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a38      	ldr	r2, [pc, #224]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff f95e 	bl	8001930 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002678:	f7ff f95a 	bl	8001930 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1bd      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4929      	ldr	r1, [pc, #164]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
 80026aa:	e018      	b.n	80026de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7ff f93a 	bl	8001930 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff f936 	bl	8001930 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e199      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d038      	beq.n	800275c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7ff f917 	bl	8001930 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff f913 	bl	8001930 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e176      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x23a>
 8002724:	e01a      	b.n	800275c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7ff f8fd 	bl	8001930 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff f8f9 	bl	8001930 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d903      	bls.n	8002750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e15c      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
 800274c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b91      	ldr	r3, [pc, #580]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a4 	beq.w	80028b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a87      	ldr	r2, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7ff f8c1 	bl	8001930 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7ff f8bd 	bl	8001930 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e120      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x31a>
 80027d8:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a6e      	ldr	r2, [pc, #440]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_OscConfig+0x376>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x33c>
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a69      	ldr	r2, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a66      	ldr	r2, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x376>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x35e>
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a60      	ldr	r2, [pc, #384]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a5d      	ldr	r2, [pc, #372]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x376>
 800282a:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a5a      	ldr	r2, [pc, #360]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a57      	ldr	r2, [pc, #348]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7ff f871 	bl	8001930 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff f86d 	bl	8001930 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0ce      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	4b4b      	ldr	r3, [pc, #300]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x386>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7ff f85b 	bl	8001930 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff f857 	bl	8001930 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80a4 	beq.w	8002a04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d06b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d149      	bne.n	8002964 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a30      	ldr	r2, [pc, #192]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff f828 	bl	8001930 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7ff f824 	bl	8001930 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e087      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	019b      	lsls	r3, r3, #6
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	3b01      	subs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	4313      	orrs	r3, r2
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800292a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800292e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fff8 	bl	8001930 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fff4 	bl	8001930 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e057      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x478>
 8002962:	e04f      	b.n	8002a04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800296a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe ffde 	bl	8001930 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe ffda 	bl	8001930 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e03d      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_OscConfig+0x4cc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x4ac>
 8002996:	e035      	b.n	8002a04 <HAL_RCC_OscConfig+0x538>
 8002998:	40023800 	.word	0x40023800
 800299c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x544>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d028      	beq.n	8002a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d121      	bne.n	8002a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d11a      	bne.n	8002a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d8:	4293      	cmp	r3, r2
 80029da:	d111      	bne.n	8002a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	3b01      	subs	r3, #1
 80029ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 020f 	bic.w	r2, r3, #15
 8002a42:	4965      	ldr	r1, [pc, #404]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe ff12 	bl	8001930 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe ff0e 	bl	8001930 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e053      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d210      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1d4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fdbc 	bl	8001744 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08010060 	.word	0x08010060
 8002be4:	20000004 	.word	0x20000004
 8002be8:	20000008 	.word	0x20000008

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b094      	sub	sp, #80	; 0x50
 8002bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c04:	4b79      	ldr	r3, [pc, #484]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	f200 80e1 	bhi.w	8002dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x34>
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1e:	e0db      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c24:	e0db      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c2a:	e0d8      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c36:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d063      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
 8002c56:	2300      	movs	r3, #0
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c5e:	4622      	mov	r2, r4
 8002c60:	462b      	mov	r3, r5
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	0159      	lsls	r1, r3, #5
 8002c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c70:	0150      	lsls	r0, r2, #5
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4621      	mov	r1, r4
 8002c78:	1a51      	subs	r1, r2, r1
 8002c7a:	6139      	str	r1, [r7, #16]
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c90:	4659      	mov	r1, fp
 8002c92:	018b      	lsls	r3, r1, #6
 8002c94:	4651      	mov	r1, sl
 8002c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	018a      	lsls	r2, r1, #6
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbe:	4690      	mov	r8, r2
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	eb18 0303 	adds.w	r3, r8, r3
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	462b      	mov	r3, r5
 8002ccc:	eb49 0303 	adc.w	r3, r9, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	024b      	lsls	r3, r1, #9
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce8:	4621      	mov	r1, r4
 8002cea:	024a      	lsls	r2, r1, #9
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cfc:	f7fd ff74 	bl	8000be8 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d08:	e058      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	4611      	mov	r1, r2
 8002d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0159      	lsls	r1, r3, #5
 8002d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d36:	0150      	lsls	r0, r2, #5
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d42:	4649      	mov	r1, r9
 8002d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d60:	eb63 050b 	sbc.w	r5, r3, fp
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	00eb      	lsls	r3, r5, #3
 8002d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d72:	00e2      	lsls	r2, r4, #3
 8002d74:	4614      	mov	r4, r2
 8002d76:	461d      	mov	r5, r3
 8002d78:	4643      	mov	r3, r8
 8002d7a:	18e3      	adds	r3, r4, r3
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb45 0303 	adc.w	r3, r5, r3
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d92:	4629      	mov	r1, r5
 8002d94:	028b      	lsls	r3, r1, #10
 8002d96:	4621      	mov	r1, r4
 8002d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	028a      	lsls	r2, r1, #10
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da6:	2200      	movs	r2, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	61fa      	str	r2, [r7, #28]
 8002dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db0:	f7fd ff1a 	bl	8000be8 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3750      	adds	r7, #80	; 0x50
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	007a1200 	.word	0x007a1200

08002df8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e14:	f7ff fff0 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08010070 	.word	0x08010070

08002e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e3c:	f7ff ffdc 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0b5b      	lsrs	r3, r3, #13
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	08010070 	.word	0x08010070

08002e60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_RCC_GetClockConfig+0x5c>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_RCC_GetClockConfig+0x5c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_GetClockConfig+0x5c>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_GetClockConfig+0x5c>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <HAL_RCC_GetClockConfig+0x60>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 020f 	and.w	r2, r3, #15
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d012      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eec:	4b69      	ldr	r3, [pc, #420]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a68      	ldr	r2, [pc, #416]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef6:	6093      	str	r3, [r2, #8]
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	4964      	ldr	r1, [pc, #400]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d017      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	4959      	ldr	r1, [pc, #356]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d017      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f5a:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	494a      	ldr	r1, [pc, #296]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f78:	d101      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 808b 	beq.w	80030be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	4a39      	ldr	r2, [pc, #228]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb4:	4b37      	ldr	r3, [pc, #220]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fcc:	f7fe fcb0 	bl	8001930 <HAL_GetTick>
 8002fd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd4:	f7fe fcac 	bl	8001930 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e357      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d035      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d02e      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003010:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003030:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d114      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fc74 	bl	8001930 <HAL_GetTick>
 8003048:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe fc70 	bl	8001930 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e319      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ee      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307a:	d111      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800308a:	400b      	ands	r3, r1
 800308c:	4901      	ldr	r1, [pc, #4]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
 8003092:	e00b      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003094:	40023800 	.word	0x40023800
 8003098:	40007000 	.word	0x40007000
 800309c:	0ffffcff 	.word	0x0ffffcff
 80030a0:	4baa      	ldr	r3, [pc, #680]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4aa9      	ldr	r2, [pc, #676]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030aa:	6093      	str	r3, [r2, #8]
 80030ac:	4ba7      	ldr	r3, [pc, #668]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b8:	49a4      	ldr	r1, [pc, #656]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030ca:	4ba0      	ldr	r3, [pc, #640]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d0:	4a9e      	ldr	r2, [pc, #632]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030da:	4b9c      	ldr	r3, [pc, #624]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	4999      	ldr	r1, [pc, #612]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f8:	4b94      	ldr	r3, [pc, #592]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003106:	4991      	ldr	r1, [pc, #580]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800311a:	4b8c      	ldr	r3, [pc, #560]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003128:	4988      	ldr	r1, [pc, #544]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800313c:	4b83      	ldr	r3, [pc, #524]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314a:	4980      	ldr	r1, [pc, #512]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800315e:	4b7b      	ldr	r3, [pc, #492]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4977      	ldr	r1, [pc, #476]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003180:	4b72      	ldr	r3, [pc, #456]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	496f      	ldr	r1, [pc, #444]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031a2:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f023 020c 	bic.w	r2, r3, #12
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b0:	4966      	ldr	r1, [pc, #408]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031c4:	4b61      	ldr	r3, [pc, #388]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	495e      	ldr	r1, [pc, #376]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031e6:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	4955      	ldr	r1, [pc, #340]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	494d      	ldr	r1, [pc, #308]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800322a:	4b48      	ldr	r3, [pc, #288]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	4944      	ldr	r1, [pc, #272]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800324c:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	493c      	ldr	r1, [pc, #240]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800326e:	4b37      	ldr	r3, [pc, #220]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	4933      	ldr	r1, [pc, #204]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003290:	4b2e      	ldr	r3, [pc, #184]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329e:	492b      	ldr	r1, [pc, #172]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d011      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c0:	4922      	ldr	r1, [pc, #136]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	4912      	ldr	r1, [pc, #72]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003324:	4909      	ldr	r1, [pc, #36]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d006      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80d9 	beq.w	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a01      	ldr	r2, [pc, #4]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800334a:	e001      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800334c:	40023800 	.word	0x40023800
 8003350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003352:	f7fe faed 	bl	8001930 <HAL_GetTick>
 8003356:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003358:	e008      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800335a:	f7fe fae9 	bl	8001930 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e194      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800336c:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d021      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11d      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800339a:	4b61      	ldr	r3, [pc, #388]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	0e1b      	lsrs	r3, r3, #24
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	019a      	lsls	r2, r3, #6
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	061b      	lsls	r3, r3, #24
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	071b      	lsls	r3, r3, #28
 80033c0:	4957      	ldr	r1, [pc, #348]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02e      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f2:	d129      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033f4:	4b4a      	ldr	r3, [pc, #296]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003402:	4b47      	ldr	r3, [pc, #284]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003408:	0f1b      	lsrs	r3, r3, #28
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	019a      	lsls	r2, r3, #6
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	431a      	orrs	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	071b      	lsls	r3, r3, #28
 8003428:	493d      	ldr	r1, [pc, #244]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003430:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003436:	f023 021f 	bic.w	r2, r3, #31
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	3b01      	subs	r3, #1
 8003440:	4937      	ldr	r1, [pc, #220]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01d      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345a:	0e1b      	lsrs	r3, r3, #24
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003462:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003468:	0f1b      	lsrs	r3, r3, #28
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	019a      	lsls	r2, r3, #6
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	431a      	orrs	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	431a      	orrs	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	071b      	lsls	r3, r3, #28
 8003488:	4925      	ldr	r1, [pc, #148]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d011      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	019a      	lsls	r2, r3, #6
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	041b      	lsls	r3, r3, #16
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	071b      	lsls	r3, r3, #28
 80034b8:	4919      	ldr	r1, [pc, #100]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034cc:	f7fe fa30 	bl	8001930 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034d4:	f7fe fa2c 	bl	8001930 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0d7      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	f040 80cd 	bne.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003506:	f7fe fa13 	bl	8001930 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800350e:	f7fe fa0f 	bl	8001930 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b64      	cmp	r3, #100	; 0x64
 800351a:	d903      	bls.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0ba      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003520:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003524:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800352c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003530:	d0ed      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02e      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d12a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800355a:	4b51      	ldr	r3, [pc, #324]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003568:	4b4d      	ldr	r3, [pc, #308]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	0f1b      	lsrs	r3, r3, #28
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	019a      	lsls	r2, r3, #6
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	071b      	lsls	r3, r3, #28
 800358e:	4944      	ldr	r1, [pc, #272]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003596:	4b42      	ldr	r3, [pc, #264]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800359c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c4:	d11d      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c6:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	0e1b      	lsrs	r3, r3, #24
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	0f1b      	lsrs	r3, r3, #28
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	019a      	lsls	r2, r3, #6
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	071b      	lsls	r3, r3, #28
 80035fa:	4929      	ldr	r1, [pc, #164]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d028      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	0e1b      	lsrs	r3, r3, #24
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	019a      	lsls	r2, r3, #6
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	071b      	lsls	r3, r3, #28
 8003642:	4917      	ldr	r1, [pc, #92]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800364c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4911      	ldr	r1, [pc, #68]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fe f960 	bl	8001930 <HAL_GetTick>
 8003670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003674:	f7fe f95c 	bl	8001930 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e007      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003692:	d1ef      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e049      	b.n	800374a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f841 	bl	8003752 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f000 fa00 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d001      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e054      	b.n	800382a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a26      	ldr	r2, [pc, #152]	; (8003838 <HAL_TIM_Base_Start_IT+0xd0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037aa:	d01d      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_TIM_Base_Start_IT+0xd4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_TIM_Base_Start_IT+0xd8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_TIM_Base_Start_IT+0xe0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <HAL_TIM_Base_Start_IT+0xe4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0x80>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_TIM_Base_Start_IT+0xe8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d115      	bne.n	8003814 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_TIM_Base_Start_IT+0xec>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d015      	beq.n	8003826 <HAL_TIM_Base_Start_IT+0xbe>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d011      	beq.n	8003826 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003812:	e008      	b.n	8003826 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e000      	b.n	8003828 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010400 	.word	0x40010400
 800384c:	40014000 	.word	0x40014000
 8003850:	40001800 	.word	0x40001800
 8003854:	00010007 	.word	0x00010007

08003858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d122      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d11b      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0202 	mvn.w	r2, #2
 8003884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f905 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8f7 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f908 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d122      	bne.n	8003908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d11b      	bne.n	8003908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0204 	mvn.w	r2, #4
 80038d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8db 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80038f4:	e005      	b.n	8003902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8cd 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8de 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b08      	cmp	r3, #8
 8003914:	d122      	bne.n	800395c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d11b      	bne.n	800395c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0208 	mvn.w	r2, #8
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2204      	movs	r2, #4
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8b1 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8a3 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8b4 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b10      	cmp	r3, #16
 8003968:	d122      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b10      	cmp	r3, #16
 8003976:	d11b      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0210 	mvn.w	r2, #16
 8003980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2208      	movs	r2, #8
 8003986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f887 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f879 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f88a 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0201 	mvn.w	r2, #1
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fd fdbe 	bl	8001558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f91a 	bl	8003c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d10e      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d107      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f90d 	bl	8003c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d10e      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d107      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f838 	bl	8003ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d10e      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0220 	mvn.w	r2, #32
 8003a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f8cd 	bl	8003c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a40      	ldr	r2, [pc, #256]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d00f      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <TIM_Base_SetConfig+0x118>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3c      	ldr	r2, [pc, #240]	; (8003c04 <TIM_Base_SetConfig+0x11c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d007      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3b      	ldr	r2, [pc, #236]	; (8003c08 <TIM_Base_SetConfig+0x120>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a3a      	ldr	r2, [pc, #232]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d108      	bne.n	8003b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d027      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <TIM_Base_SetConfig+0x118>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d023      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <TIM_Base_SetConfig+0x11c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01f      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <TIM_Base_SetConfig+0x120>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d017      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <TIM_Base_SetConfig+0x128>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <TIM_Base_SetConfig+0x12c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00f      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <TIM_Base_SetConfig+0x130>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <TIM_Base_SetConfig+0x134>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <TIM_Base_SetConfig+0x138>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a23      	ldr	r2, [pc, #140]	; (8003c24 <TIM_Base_SetConfig+0x13c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0xf8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <TIM_Base_SetConfig+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d103      	bne.n	8003be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	615a      	str	r2, [r3, #20]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40010400 	.word	0x40010400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40001800 	.word	0x40001800
 8003c20:	40001c00 	.word	0x40001c00
 8003c24:	40002000 	.word	0x40002000

08003c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e040      	b.n	8003cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd fcfc 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	; 0x24
 8003c90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f82c 	bl	8003d00 <UART_SetConfig>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e022      	b.n	8003cf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa84 	bl	80041c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fb0b 	bl	800430c <UART_CheckIdleState>
 8003cf6:	4603      	mov	r3, r0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4ba6      	ldr	r3, [pc, #664]	; (8003fc4 <UART_SetConfig+0x2c4>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	6979      	ldr	r1, [r7, #20]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a94      	ldr	r2, [pc, #592]	; (8003fc8 <UART_SetConfig+0x2c8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d120      	bne.n	8003dbe <UART_SetConfig+0xbe>
 8003d7c:	4b93      	ldr	r3, [pc, #588]	; (8003fcc <UART_SetConfig+0x2cc>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d816      	bhi.n	8003db8 <UART_SetConfig+0xb8>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <UART_SetConfig+0x90>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003dad 	.word	0x08003dad
 8003d98:	08003da7 	.word	0x08003da7
 8003d9c:	08003db3 	.word	0x08003db3
 8003da0:	2301      	movs	r3, #1
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e150      	b.n	8004048 <UART_SetConfig+0x348>
 8003da6:	2302      	movs	r3, #2
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e14d      	b.n	8004048 <UART_SetConfig+0x348>
 8003dac:	2304      	movs	r3, #4
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e14a      	b.n	8004048 <UART_SetConfig+0x348>
 8003db2:	2308      	movs	r3, #8
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e147      	b.n	8004048 <UART_SetConfig+0x348>
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e144      	b.n	8004048 <UART_SetConfig+0x348>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a83      	ldr	r2, [pc, #524]	; (8003fd0 <UART_SetConfig+0x2d0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d132      	bne.n	8003e2e <UART_SetConfig+0x12e>
 8003dc8:	4b80      	ldr	r3, [pc, #512]	; (8003fcc <UART_SetConfig+0x2cc>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d828      	bhi.n	8003e28 <UART_SetConfig+0x128>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <UART_SetConfig+0xdc>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003e29 	.word	0x08003e29
 8003de4:	08003e29 	.word	0x08003e29
 8003de8:	08003e29 	.word	0x08003e29
 8003dec:	08003e1d 	.word	0x08003e1d
 8003df0:	08003e29 	.word	0x08003e29
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e17 	.word	0x08003e17
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e29 	.word	0x08003e29
 8003e0c:	08003e23 	.word	0x08003e23
 8003e10:	2300      	movs	r3, #0
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e118      	b.n	8004048 <UART_SetConfig+0x348>
 8003e16:	2302      	movs	r3, #2
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e115      	b.n	8004048 <UART_SetConfig+0x348>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e112      	b.n	8004048 <UART_SetConfig+0x348>
 8003e22:	2308      	movs	r3, #8
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e10f      	b.n	8004048 <UART_SetConfig+0x348>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e10c      	b.n	8004048 <UART_SetConfig+0x348>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a68      	ldr	r2, [pc, #416]	; (8003fd4 <UART_SetConfig+0x2d4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d120      	bne.n	8003e7a <UART_SetConfig+0x17a>
 8003e38:	4b64      	ldr	r3, [pc, #400]	; (8003fcc <UART_SetConfig+0x2cc>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e42:	2b30      	cmp	r3, #48	; 0x30
 8003e44:	d013      	beq.n	8003e6e <UART_SetConfig+0x16e>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d814      	bhi.n	8003e74 <UART_SetConfig+0x174>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d009      	beq.n	8003e62 <UART_SetConfig+0x162>
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d810      	bhi.n	8003e74 <UART_SetConfig+0x174>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <UART_SetConfig+0x15c>
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d006      	beq.n	8003e68 <UART_SetConfig+0x168>
 8003e5a:	e00b      	b.n	8003e74 <UART_SetConfig+0x174>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e0f2      	b.n	8004048 <UART_SetConfig+0x348>
 8003e62:	2302      	movs	r3, #2
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e0ef      	b.n	8004048 <UART_SetConfig+0x348>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e0ec      	b.n	8004048 <UART_SetConfig+0x348>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e0e9      	b.n	8004048 <UART_SetConfig+0x348>
 8003e74:	2310      	movs	r3, #16
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e0e6      	b.n	8004048 <UART_SetConfig+0x348>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a56      	ldr	r2, [pc, #344]	; (8003fd8 <UART_SetConfig+0x2d8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d120      	bne.n	8003ec6 <UART_SetConfig+0x1c6>
 8003e84:	4b51      	ldr	r3, [pc, #324]	; (8003fcc <UART_SetConfig+0x2cc>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e90:	d013      	beq.n	8003eba <UART_SetConfig+0x1ba>
 8003e92:	2bc0      	cmp	r3, #192	; 0xc0
 8003e94:	d814      	bhi.n	8003ec0 <UART_SetConfig+0x1c0>
 8003e96:	2b80      	cmp	r3, #128	; 0x80
 8003e98:	d009      	beq.n	8003eae <UART_SetConfig+0x1ae>
 8003e9a:	2b80      	cmp	r3, #128	; 0x80
 8003e9c:	d810      	bhi.n	8003ec0 <UART_SetConfig+0x1c0>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <UART_SetConfig+0x1a8>
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d006      	beq.n	8003eb4 <UART_SetConfig+0x1b4>
 8003ea6:	e00b      	b.n	8003ec0 <UART_SetConfig+0x1c0>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e0cc      	b.n	8004048 <UART_SetConfig+0x348>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e0c9      	b.n	8004048 <UART_SetConfig+0x348>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e0c6      	b.n	8004048 <UART_SetConfig+0x348>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e0c3      	b.n	8004048 <UART_SetConfig+0x348>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e0c0      	b.n	8004048 <UART_SetConfig+0x348>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <UART_SetConfig+0x2dc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d125      	bne.n	8003f1c <UART_SetConfig+0x21c>
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <UART_SetConfig+0x2cc>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ede:	d017      	beq.n	8003f10 <UART_SetConfig+0x210>
 8003ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee4:	d817      	bhi.n	8003f16 <UART_SetConfig+0x216>
 8003ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eea:	d00b      	beq.n	8003f04 <UART_SetConfig+0x204>
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef0:	d811      	bhi.n	8003f16 <UART_SetConfig+0x216>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <UART_SetConfig+0x1fe>
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d006      	beq.n	8003f0a <UART_SetConfig+0x20a>
 8003efc:	e00b      	b.n	8003f16 <UART_SetConfig+0x216>
 8003efe:	2300      	movs	r3, #0
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e0a1      	b.n	8004048 <UART_SetConfig+0x348>
 8003f04:	2302      	movs	r3, #2
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e09e      	b.n	8004048 <UART_SetConfig+0x348>
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e09b      	b.n	8004048 <UART_SetConfig+0x348>
 8003f10:	2308      	movs	r3, #8
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e098      	b.n	8004048 <UART_SetConfig+0x348>
 8003f16:	2310      	movs	r3, #16
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e095      	b.n	8004048 <UART_SetConfig+0x348>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <UART_SetConfig+0x2e0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d125      	bne.n	8003f72 <UART_SetConfig+0x272>
 8003f26:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <UART_SetConfig+0x2cc>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f34:	d017      	beq.n	8003f66 <UART_SetConfig+0x266>
 8003f36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3a:	d817      	bhi.n	8003f6c <UART_SetConfig+0x26c>
 8003f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f40:	d00b      	beq.n	8003f5a <UART_SetConfig+0x25a>
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d811      	bhi.n	8003f6c <UART_SetConfig+0x26c>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <UART_SetConfig+0x254>
 8003f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f50:	d006      	beq.n	8003f60 <UART_SetConfig+0x260>
 8003f52:	e00b      	b.n	8003f6c <UART_SetConfig+0x26c>
 8003f54:	2301      	movs	r3, #1
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e076      	b.n	8004048 <UART_SetConfig+0x348>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e073      	b.n	8004048 <UART_SetConfig+0x348>
 8003f60:	2304      	movs	r3, #4
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e070      	b.n	8004048 <UART_SetConfig+0x348>
 8003f66:	2308      	movs	r3, #8
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e06d      	b.n	8004048 <UART_SetConfig+0x348>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e06a      	b.n	8004048 <UART_SetConfig+0x348>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <UART_SetConfig+0x2e4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d138      	bne.n	8003fee <UART_SetConfig+0x2ee>
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <UART_SetConfig+0x2cc>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f8a:	d017      	beq.n	8003fbc <UART_SetConfig+0x2bc>
 8003f8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f90:	d82a      	bhi.n	8003fe8 <UART_SetConfig+0x2e8>
 8003f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f96:	d00b      	beq.n	8003fb0 <UART_SetConfig+0x2b0>
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	d824      	bhi.n	8003fe8 <UART_SetConfig+0x2e8>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <UART_SetConfig+0x2aa>
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	d006      	beq.n	8003fb6 <UART_SetConfig+0x2b6>
 8003fa8:	e01e      	b.n	8003fe8 <UART_SetConfig+0x2e8>
 8003faa:	2300      	movs	r3, #0
 8003fac:	77fb      	strb	r3, [r7, #31]
 8003fae:	e04b      	b.n	8004048 <UART_SetConfig+0x348>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e048      	b.n	8004048 <UART_SetConfig+0x348>
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e045      	b.n	8004048 <UART_SetConfig+0x348>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e042      	b.n	8004048 <UART_SetConfig+0x348>
 8003fc2:	bf00      	nop
 8003fc4:	efff69f3 	.word	0xefff69f3
 8003fc8:	40011000 	.word	0x40011000
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40004400 	.word	0x40004400
 8003fd4:	40004800 	.word	0x40004800
 8003fd8:	40004c00 	.word	0x40004c00
 8003fdc:	40005000 	.word	0x40005000
 8003fe0:	40011400 	.word	0x40011400
 8003fe4:	40007800 	.word	0x40007800
 8003fe8:	2310      	movs	r3, #16
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e02c      	b.n	8004048 <UART_SetConfig+0x348>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a72      	ldr	r2, [pc, #456]	; (80041bc <UART_SetConfig+0x4bc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d125      	bne.n	8004044 <UART_SetConfig+0x344>
 8003ff8:	4b71      	ldr	r3, [pc, #452]	; (80041c0 <UART_SetConfig+0x4c0>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004002:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004006:	d017      	beq.n	8004038 <UART_SetConfig+0x338>
 8004008:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800400c:	d817      	bhi.n	800403e <UART_SetConfig+0x33e>
 800400e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004012:	d00b      	beq.n	800402c <UART_SetConfig+0x32c>
 8004014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004018:	d811      	bhi.n	800403e <UART_SetConfig+0x33e>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <UART_SetConfig+0x326>
 800401e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004022:	d006      	beq.n	8004032 <UART_SetConfig+0x332>
 8004024:	e00b      	b.n	800403e <UART_SetConfig+0x33e>
 8004026:	2300      	movs	r3, #0
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e00d      	b.n	8004048 <UART_SetConfig+0x348>
 800402c:	2302      	movs	r3, #2
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e00a      	b.n	8004048 <UART_SetConfig+0x348>
 8004032:	2304      	movs	r3, #4
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e007      	b.n	8004048 <UART_SetConfig+0x348>
 8004038:	2308      	movs	r3, #8
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e004      	b.n	8004048 <UART_SetConfig+0x348>
 800403e:	2310      	movs	r3, #16
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e001      	b.n	8004048 <UART_SetConfig+0x348>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	d15b      	bne.n	800410a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d828      	bhi.n	80040aa <UART_SetConfig+0x3aa>
 8004058:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x360>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004085 	.word	0x08004085
 8004064:	0800408d 	.word	0x0800408d
 8004068:	08004095 	.word	0x08004095
 800406c:	080040ab 	.word	0x080040ab
 8004070:	0800409b 	.word	0x0800409b
 8004074:	080040ab 	.word	0x080040ab
 8004078:	080040ab 	.word	0x080040ab
 800407c:	080040ab 	.word	0x080040ab
 8004080:	080040a3 	.word	0x080040a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004084:	f7fe fec4 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8004088:	61b8      	str	r0, [r7, #24]
        break;
 800408a:	e013      	b.n	80040b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7fe fed4 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8004090:	61b8      	str	r0, [r7, #24]
        break;
 8004092:	e00f      	b.n	80040b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004094:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <UART_SetConfig+0x4c4>)
 8004096:	61bb      	str	r3, [r7, #24]
        break;
 8004098:	e00c      	b.n	80040b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409a:	f7fe fda7 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 800409e:	61b8      	str	r0, [r7, #24]
        break;
 80040a0:	e008      	b.n	80040b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a6:	61bb      	str	r3, [r7, #24]
        break;
 80040a8:	e004      	b.n	80040b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	77bb      	strb	r3, [r7, #30]
        break;
 80040b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d074      	beq.n	80041a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	005a      	lsls	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	441a      	add	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b0f      	cmp	r3, #15
 80040d4:	d916      	bls.n	8004104 <UART_SetConfig+0x404>
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040dc:	d212      	bcs.n	8004104 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f023 030f 	bic.w	r3, r3, #15
 80040e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	89fb      	ldrh	r3, [r7, #14]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	89fa      	ldrh	r2, [r7, #14]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	e04f      	b.n	80041a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	77bb      	strb	r3, [r7, #30]
 8004108:	e04c      	b.n	80041a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d828      	bhi.n	8004162 <UART_SetConfig+0x462>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x418>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004163 	.word	0x08004163
 8004128:	08004153 	.word	0x08004153
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
 8004138:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fe fe68 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8004140:	61b8      	str	r0, [r7, #24]
        break;
 8004142:	e013      	b.n	800416c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe fe78 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8004148:	61b8      	str	r0, [r7, #24]
        break;
 800414a:	e00f      	b.n	800416c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <UART_SetConfig+0x4c4>)
 800414e:	61bb      	str	r3, [r7, #24]
        break;
 8004150:	e00c      	b.n	800416c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fe fd4b 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8004156:	61b8      	str	r0, [r7, #24]
        break;
 8004158:	e008      	b.n	800416c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415e:	61bb      	str	r3, [r7, #24]
        break;
 8004160:	e004      	b.n	800416c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	77bb      	strb	r3, [r7, #30]
        break;
 800416a:	bf00      	nop
    }

    if (pclk != 0U)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	085a      	lsrs	r2, r3, #1
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	441a      	add	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b0f      	cmp	r3, #15
 800418a:	d909      	bls.n	80041a0 <UART_SetConfig+0x4a0>
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004192:	d205      	bcs.n	80041a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	e001      	b.n	80041a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40007c00 	.word	0x40007c00
 80041c0:	40023800 	.word	0x40023800
 80041c4:	00f42400 	.word	0x00f42400

080041c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01a      	beq.n	80042de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c6:	d10a      	bne.n	80042de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800431c:	f7fd fb08 	bl	8001930 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b08      	cmp	r3, #8
 800432e:	d10e      	bne.n	800434e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f81b 	bl	800437a <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e011      	b.n	8004372 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b09c      	sub	sp, #112	; 0x70
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438a:	e0a7      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	f000 80a3 	beq.w	80044dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fd facb 	bl	8001930 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <UART_WaitOnFlagUntilTimeout+0x32>
 80043a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d13f      	bne.n	800442c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043c0:	667b      	str	r3, [r7, #100]	; 0x64
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e6      	bne.n	80043ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	663b      	str	r3, [r7, #96]	; 0x60
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004400:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800440c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e5      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e068      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d050      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d148      	bne.n	80044dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004452:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
 8004474:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	613b      	str	r3, [r7, #16]
   return(result);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	66bb      	str	r3, [r7, #104]	; 0x68
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044a6:	623a      	str	r2, [r7, #32]
 80044a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e010      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	f43f af48 	beq.w	800438c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3770      	adds	r7, #112	; 0x70
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451a:	f3ef 8305 	mrs	r3, IPSR
 800451e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004520:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004526:	f3ef 8310 	mrs	r3, PRIMASK
 800452a:	607b      	str	r3, [r7, #4]
  return(result);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004532:	f3ef 8311 	mrs	r3, BASEPRI
 8004536:	603b      	str	r3, [r7, #0]
  return(result);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <osKernelInitialize+0x3a>
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <osKernelInitialize+0x64>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d103      	bne.n	800454e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004546:	f06f 0305 	mvn.w	r3, #5
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e00c      	b.n	8004568 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <osKernelInitialize+0x64>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d105      	bne.n	8004562 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <osKernelInitialize+0x64>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e002      	b.n	8004568 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004568:	68fb      	ldr	r3, [r7, #12]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000398 	.word	0x20000398

0800457c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004582:	f3ef 8305 	mrs	r3, IPSR
 8004586:	60bb      	str	r3, [r7, #8]
  return(result);
 8004588:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458e:	f3ef 8310 	mrs	r3, PRIMASK
 8004592:	607b      	str	r3, [r7, #4]
  return(result);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d105      	bne.n	80045a6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800459a:	f3ef 8311 	mrs	r3, BASEPRI
 800459e:	603b      	str	r3, [r7, #0]
  return(result);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <osKernelStart+0x3a>
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <osKernelStart+0x68>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d103      	bne.n	80045b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80045ae:	f06f 0305 	mvn.w	r3, #5
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e010      	b.n	80045d8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <osKernelStart+0x68>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d109      	bne.n	80045d2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045be:	f7ff ffa2 	bl	8004506 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <osKernelStart+0x68>)
 80045c4:	2202      	movs	r2, #2
 80045c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045c8:	f001 fb2e 	bl	8005c28 <vTaskStartScheduler>
      stat = osOK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e002      	b.n	80045d8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295
 80045d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000398 	.word	0x20000398

080045e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b090      	sub	sp, #64	; 0x40
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f8:	f3ef 8305 	mrs	r3, IPSR
 80045fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80045fe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 808f 	bne.w	8004724 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004606:	f3ef 8310 	mrs	r3, PRIMASK
 800460a:	61bb      	str	r3, [r7, #24]
  return(result);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004612:	f3ef 8311 	mrs	r3, BASEPRI
 8004616:	617b      	str	r3, [r7, #20]
  return(result);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <osThreadNew+0x3e>
 800461e:	4b44      	ldr	r3, [pc, #272]	; (8004730 <osThreadNew+0x148>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d07e      	beq.n	8004724 <osThreadNew+0x13c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d07b      	beq.n	8004724 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004630:	2318      	movs	r3, #24
 8004632:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d045      	beq.n	80046d0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <osThreadNew+0x6a>
        name = attr->name;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <osThreadNew+0x90>
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	2b38      	cmp	r3, #56	; 0x38
 800466a:	d805      	bhi.n	8004678 <osThreadNew+0x90>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <osThreadNew+0x94>
        return (NULL);
 8004678:	2300      	movs	r3, #0
 800467a:	e054      	b.n	8004726 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <osThreadNew+0xca>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2bbb      	cmp	r3, #187	; 0xbb
 800469a:	d90a      	bls.n	80046b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d006      	beq.n	80046b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <osThreadNew+0xca>
        mem = 1;
 80046ac:	2301      	movs	r3, #1
 80046ae:	623b      	str	r3, [r7, #32]
 80046b0:	e010      	b.n	80046d4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <osThreadNew+0xec>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <osThreadNew+0xec>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <osThreadNew+0xec>
          mem = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
 80046ce:	e001      	b.n	80046d4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d110      	bne.n	80046fc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046e2:	9202      	str	r2, [sp, #8]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f001 f8a3 	bl	800583c <xTaskCreateStatic>
 80046f6:	4603      	mov	r3, r0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	e013      	b.n	8004724 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d110      	bne.n	8004724 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	b29a      	uxth	r2, r3
 8004706:	f107 0310 	add.w	r3, r7, #16
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f001 f8f4 	bl	8005902 <xTaskCreate>
 800471a:	4603      	mov	r3, r0
 800471c:	2b01      	cmp	r3, #1
 800471e:	d001      	beq.n	8004724 <osThreadNew+0x13c>
          hTask = NULL;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004724:	693b      	ldr	r3, [r7, #16]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3730      	adds	r7, #48	; 0x30
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000398 	.word	0x20000398

08004734 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800473c:	f3ef 8305 	mrs	r3, IPSR
 8004740:	613b      	str	r3, [r7, #16]
  return(result);
 8004742:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004748:	f3ef 8310 	mrs	r3, PRIMASK
 800474c:	60fb      	str	r3, [r7, #12]
  return(result);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004754:	f3ef 8311 	mrs	r3, BASEPRI
 8004758:	60bb      	str	r3, [r7, #8]
  return(result);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <osDelay+0x3c>
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <osDelay+0x58>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d103      	bne.n	8004770 <osDelay+0x3c>
    stat = osErrorISR;
 8004768:	f06f 0305 	mvn.w	r3, #5
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e007      	b.n	8004780 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <osDelay+0x4c>
      vTaskDelay(ticks);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 fa1e 	bl	8005bbc <vTaskDelay>
    }
  }

  return (stat);
 8004780:	697b      	ldr	r3, [r7, #20]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000398 	.word	0x20000398

08004790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <vApplicationGetIdleTaskMemory+0x2c>)
 80047a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4a06      	ldr	r2, [pc, #24]	; (80047c0 <vApplicationGetIdleTaskMemory+0x30>)
 80047a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	2000039c 	.word	0x2000039c
 80047c0:	20000458 	.word	0x20000458

080047c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80047d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <vApplicationGetTimerTaskMemory+0x30>)
 80047da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000658 	.word	0x20000658
 80047f4:	20000714 	.word	0x20000714

080047f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f103 0208 	add.w	r2, r3, #8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f103 0208 	add.w	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f103 0208 	add.w	r2, r3, #8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d103      	bne.n	80048ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e00c      	b.n	80048d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3308      	adds	r3, #8
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e002      	b.n	80048c8 <vListInsert+0x2e>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d2f6      	bcs.n	80048c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6892      	ldr	r2, [r2, #8]
 8004922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6852      	ldr	r2, [r2, #4]
 800492c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d103      	bne.n	8004940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	1e5a      	subs	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10c      	bne.n	800498e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	b672      	cpsid	i
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	b662      	cpsie	i
 8004988:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800498e:	f002 fc0d 	bl	80071ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	441a      	add	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	3b01      	subs	r3, #1
 80049c0:	68f9      	ldr	r1, [r7, #12]
 80049c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	441a      	add	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	22ff      	movs	r2, #255	; 0xff
 80049d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	22ff      	movs	r2, #255	; 0xff
 80049da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d114      	bne.n	8004a0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01a      	beq.n	8004a22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3310      	adds	r3, #16
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 fbc1 	bl	8006178 <xTaskRemoveFromEventList>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <xQueueGenericReset+0xd0>)
 80049fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	e009      	b.n	8004a22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3310      	adds	r3, #16
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fef0 	bl	80047f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff feeb 	bl	80047f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a22:	f002 fbf7 	bl	8007214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a26:	2301      	movs	r3, #1
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08e      	sub	sp, #56	; 0x38
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10c      	bne.n	8004a62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	b672      	cpsid	i
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	b662      	cpsie	i
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10c      	bne.n	8004a82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	b672      	cpsid	i
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	b662      	cpsie	i
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <xQueueGenericCreateStatic+0x5a>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <xQueueGenericCreateStatic+0x5e>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <xQueueGenericCreateStatic+0x60>
 8004a92:	2300      	movs	r3, #0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	b672      	cpsid	i
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	b662      	cpsie	i
 8004aac:	623b      	str	r3, [r7, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <xQueueGenericCreateStatic+0x8a>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <xQueueGenericCreateStatic+0x8e>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <xQueueGenericCreateStatic+0x90>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10c      	bne.n	8004ae2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	b672      	cpsid	i
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	b662      	cpsie	i
 8004adc:	61fb      	str	r3, [r7, #28]
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ae2:	2350      	movs	r3, #80	; 0x50
 8004ae4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b50      	cmp	r3, #80	; 0x50
 8004aea:	d00c      	beq.n	8004b06 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	b672      	cpsid	i
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	b662      	cpsie	i
 8004b00:	61bb      	str	r3, [r7, #24]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f847 	bl	8004bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3730      	adds	r7, #48	; 0x30
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10c      	bne.n	8004b66 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	b672      	cpsid	i
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	b662      	cpsie	i
 8004b60:	613b      	str	r3, [r7, #16]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	e004      	b.n	8004b7c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3350      	adds	r3, #80	; 0x50
 8004b80:	4618      	mov	r0, r3
 8004b82:	f002 fc3f 	bl	8007404 <pvPortMalloc>
 8004b86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d011      	beq.n	8004bb2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	3350      	adds	r3, #80	; 0x50
 8004b96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ba0:	79fa      	ldrb	r2, [r7, #7]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f805 	bl	8004bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
	}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d103      	bne.n	8004bd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e002      	b.n	8004bde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bea:	2101      	movs	r1, #1
 8004bec:	69b8      	ldr	r0, [r7, #24]
 8004bee:	f7ff feb7 	bl	8004960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08e      	sub	sp, #56	; 0x38
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c12:	2300      	movs	r3, #0
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10c      	bne.n	8004c3a <xQueueGenericSend+0x36>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	b672      	cpsid	i
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	b662      	cpsie	i
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d103      	bne.n	8004c48 <xQueueGenericSend+0x44>
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <xQueueGenericSend+0x48>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <xQueueGenericSend+0x4a>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <xQueueGenericSend+0x68>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	b672      	cpsid	i
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	b662      	cpsie	i
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d103      	bne.n	8004c7a <xQueueGenericSend+0x76>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <xQueueGenericSend+0x7a>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <xQueueGenericSend+0x7c>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10c      	bne.n	8004c9e <xQueueGenericSend+0x9a>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	b672      	cpsid	i
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	b662      	cpsie	i
 8004c98:	623b      	str	r3, [r7, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c9e:	f001 fc35 	bl	800650c <xTaskGetSchedulerState>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <xQueueGenericSend+0xaa>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSend+0xae>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSend+0xb0>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10c      	bne.n	8004cd2 <xQueueGenericSend+0xce>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	b672      	cpsid	i
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	b662      	cpsie	i
 8004ccc:	61fb      	str	r3, [r7, #28]
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cd2:	f002 fa6b 	bl	80071ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <xQueueGenericSend+0xe4>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d129      	bne.n	8004d3c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cee:	f000 fc0c 	bl	800550a <prvCopyDataToQueue>
 8004cf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d010      	beq.n	8004d1e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	3324      	adds	r3, #36	; 0x24
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fa39 	bl	8006178 <xTaskRemoveFromEventList>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d0c:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <xQueueGenericSend+0x208>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	e00a      	b.n	8004d34 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d24:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <xQueueGenericSend+0x208>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d34:	f002 fa6e 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e063      	b.n	8004e04 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d42:	f002 fa67 	bl	8007214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e05c      	b.n	8004e04 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d50:	f107 0314 	add.w	r3, r7, #20
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 fa75 	bl	8006244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d5e:	f002 fa59 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d62:	f000 ffd5 	bl	8005d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d66:	f002 fa21 	bl	80071ac <vPortEnterCritical>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d103      	bne.n	8004d80 <xQueueGenericSend+0x17c>
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d103      	bne.n	8004d96 <xQueueGenericSend+0x192>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d96:	f002 fa3d 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d9a:	1d3a      	adds	r2, r7, #4
 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	4611      	mov	r1, r2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 fa64 	bl	8006270 <xTaskCheckForTimeOut>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d124      	bne.n	8004df8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004db0:	f000 fca3 	bl	80056fa <prvIsQueueFull>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d018      	beq.n	8004dec <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	3310      	adds	r3, #16
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 f984 	bl	80060d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dca:	f000 fc2e 	bl	800562a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dce:	f000 ffad 	bl	8005d2c <xTaskResumeAll>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f47f af7c 	bne.w	8004cd2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <xQueueGenericSend+0x208>)
 8004ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	e772      	b.n	8004cd2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dee:	f000 fc1c 	bl	800562a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004df2:	f000 ff9b 	bl	8005d2c <xTaskResumeAll>
 8004df6:	e76c      	b.n	8004cd2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dfa:	f000 fc16 	bl	800562a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dfe:	f000 ff95 	bl	8005d2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3738      	adds	r7, #56	; 0x38
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08e      	sub	sp, #56	; 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10c      	bne.n	8004e42 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	b672      	cpsid	i
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	b662      	cpsie	i
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <xQueueGenericSendFromISR+0x40>
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <xQueueGenericSendFromISR+0x44>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <xQueueGenericSendFromISR+0x46>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10c      	bne.n	8004e74 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	b672      	cpsid	i
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	b662      	cpsie	i
 8004e6e:	623b      	str	r3, [r7, #32]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d103      	bne.n	8004e82 <xQueueGenericSendFromISR+0x72>
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <xQueueGenericSendFromISR+0x76>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <xQueueGenericSendFromISR+0x78>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10c      	bne.n	8004ea6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	b672      	cpsid	i
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	b662      	cpsie	i
 8004ea0:	61fb      	str	r3, [r7, #28]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ea6:	f002 fa69 	bl	800737c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004eaa:	f3ef 8211 	mrs	r2, BASEPRI
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	b672      	cpsid	i
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	b662      	cpsie	i
 8004ec2:	61ba      	str	r2, [r7, #24]
 8004ec4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <xQueueGenericSendFromISR+0xcc>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d12c      	bne.n	8004f36 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eec:	f000 fb0d 	bl	800550a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ef0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d112      	bne.n	8004f20 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	3324      	adds	r3, #36	; 0x24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 f936 	bl	8006178 <xTaskRemoveFromEventList>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e007      	b.n	8004f30 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f24:	3301      	adds	r3, #1
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	b25a      	sxtb	r2, r3
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f30:	2301      	movs	r3, #1
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f34:	e001      	b.n	8004f3a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3738      	adds	r7, #56	; 0x38
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <xQueueReceive+0x34>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	b672      	cpsid	i
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	b662      	cpsie	i
 8004f7e:	623b      	str	r3, [r7, #32]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <xQueueReceive+0x42>
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <xQueueReceive+0x46>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueReceive+0x48>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <xQueueReceive+0x66>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	b672      	cpsid	i
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	b662      	cpsie	i
 8004fb0:	61fb      	str	r3, [r7, #28]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb6:	f001 faa9 	bl	800650c <xTaskGetSchedulerState>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d102      	bne.n	8004fc6 <xQueueReceive+0x76>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <xQueueReceive+0x7a>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <xQueueReceive+0x7c>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10c      	bne.n	8004fea <xQueueReceive+0x9a>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	b672      	cpsid	i
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	b662      	cpsie	i
 8004fe4:	61bb      	str	r3, [r7, #24]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fea:	f002 f8df 	bl	80071ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01f      	beq.n	800503a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffe:	f000 faee 	bl	80055de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00f      	beq.n	8005032 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	3310      	adds	r3, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f8ae 	bl	8006178 <xTaskRemoveFromEventList>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005022:	4b3d      	ldr	r3, [pc, #244]	; (8005118 <xQueueReceive+0x1c8>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005032:	f002 f8ef 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 8005036:	2301      	movs	r3, #1
 8005038:	e069      	b.n	800510e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005040:	f002 f8e8 	bl	8007214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005044:	2300      	movs	r3, #0
 8005046:	e062      	b.n	800510e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800504e:	f107 0310 	add.w	r3, r7, #16
 8005052:	4618      	mov	r0, r3
 8005054:	f001 f8f6 	bl	8006244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800505c:	f002 f8da 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005060:	f000 fe56 	bl	8005d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005064:	f002 f8a2 	bl	80071ac <vPortEnterCritical>
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d103      	bne.n	800507e <xQueueReceive+0x12e>
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005084:	b25b      	sxtb	r3, r3
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d103      	bne.n	8005094 <xQueueReceive+0x144>
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005094:	f002 f8be 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005098:	1d3a      	adds	r2, r7, #4
 800509a:	f107 0310 	add.w	r3, r7, #16
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f8e5 	bl	8006270 <xTaskCheckForTimeOut>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d123      	bne.n	80050f4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ae:	f000 fb0e 	bl	80056ce <prvIsQueueEmpty>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d017      	beq.n	80050e8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	3324      	adds	r3, #36	; 0x24
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 f805 	bl	80060d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c8:	f000 faaf 	bl	800562a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050cc:	f000 fe2e 	bl	8005d2c <xTaskResumeAll>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d189      	bne.n	8004fea <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <xQueueReceive+0x1c8>)
 80050d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	e780      	b.n	8004fea <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ea:	f000 fa9e 	bl	800562a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ee:	f000 fe1d 	bl	8005d2c <xTaskResumeAll>
 80050f2:	e77a      	b.n	8004fea <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f6:	f000 fa98 	bl	800562a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050fa:	f000 fe17 	bl	8005d2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005100:	f000 fae5 	bl	80056ce <prvIsQueueEmpty>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	f43f af6f 	beq.w	8004fea <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800510c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800510e:	4618      	mov	r0, r3
 8005110:	3730      	adds	r7, #48	; 0x30
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	; 0x38
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005126:	2300      	movs	r3, #0
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10c      	bne.n	8005152 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	b672      	cpsid	i
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	b662      	cpsie	i
 800514c:	623b      	str	r3, [r7, #32]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00c      	beq.n	8005174 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	b672      	cpsid	i
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	b662      	cpsie	i
 800516e:	61fb      	str	r3, [r7, #28]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005174:	f001 f9ca 	bl	800650c <xTaskGetSchedulerState>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <xQueueSemaphoreTake+0x68>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <xQueueSemaphoreTake+0x6c>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <xQueueSemaphoreTake+0x6e>
 8005188:	2300      	movs	r3, #0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10c      	bne.n	80051a8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	b672      	cpsid	i
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	b662      	cpsie	i
 80051a2:	61bb      	str	r3, [r7, #24]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a8:	f002 f800 	bl	80071ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d024      	beq.n	8005202 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80051c8:	f001 fb1e 	bl	8006808 <pvTaskIncrementMutexHeldCount>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00f      	beq.n	80051fa <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	3310      	adds	r3, #16
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 ffca 	bl	8006178 <xTaskRemoveFromEventList>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051ea:	4b55      	ldr	r3, [pc, #340]	; (8005340 <xQueueSemaphoreTake+0x224>)
 80051ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051fa:	f002 f80b 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 80051fe:	2301      	movs	r3, #1
 8005200:	e099      	b.n	8005336 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d113      	bne.n	8005230 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	b672      	cpsid	i
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	b662      	cpsie	i
 8005222:	617b      	str	r3, [r7, #20]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005228:	f001 fff4 	bl	8007214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800522c:	2300      	movs	r3, #0
 800522e:	e082      	b.n	8005336 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005236:	f107 030c 	add.w	r3, r7, #12
 800523a:	4618      	mov	r0, r3
 800523c:	f001 f802 	bl	8006244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005244:	f001 ffe6 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005248:	f000 fd62 	bl	8005d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800524c:	f001 ffae 	bl	80071ac <vPortEnterCritical>
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <xQueueSemaphoreTake+0x14a>
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800526c:	b25b      	sxtb	r3, r3
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d103      	bne.n	800527c <xQueueSemaphoreTake+0x160>
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800527c:	f001 ffca 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005280:	463a      	mov	r2, r7
 8005282:	f107 030c 	add.w	r3, r7, #12
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fff1 	bl	8006270 <xTaskCheckForTimeOut>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d132      	bne.n	80052fa <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005296:	f000 fa1a 	bl	80056ce <prvIsQueueEmpty>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d026      	beq.n	80052ee <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80052a8:	f001 ff80 	bl	80071ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f001 f949 	bl	8006548 <xTaskPriorityInherit>
 80052b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80052b8:	f001 ffac 	bl	8007214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	3324      	adds	r3, #36	; 0x24
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 ff03 	bl	80060d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052cc:	f000 f9ad 	bl	800562a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052d0:	f000 fd2c 	bl	8005d2c <xTaskResumeAll>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f47f af66 	bne.w	80051a8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80052dc:	4b18      	ldr	r3, [pc, #96]	; (8005340 <xQueueSemaphoreTake+0x224>)
 80052de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	e75c      	b.n	80051a8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80052ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052f0:	f000 f99b 	bl	800562a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052f4:	f000 fd1a 	bl	8005d2c <xTaskResumeAll>
 80052f8:	e756      	b.n	80051a8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80052fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052fc:	f000 f995 	bl	800562a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005300:	f000 fd14 	bl	8005d2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005306:	f000 f9e2 	bl	80056ce <prvIsQueueEmpty>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	f43f af4b 	beq.w	80051a8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005318:	f001 ff48 	bl	80071ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800531c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800531e:	f000 f8dc 	bl	80054da <prvGetDisinheritPriorityAfterTimeout>
 8005322:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800532a:	4618      	mov	r0, r3
 800532c:	f001 f9e6 	bl	80066fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005330:	f001 ff70 	bl	8007214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005336:	4618      	mov	r0, r3
 8005338:	3738      	adds	r7, #56	; 0x38
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10c      	bne.n	8005374 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	b672      	cpsid	i
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	b662      	cpsie	i
 800536e:	623b      	str	r3, [r7, #32]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <xQueueReceiveFromISR+0x3e>
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <xQueueReceiveFromISR+0x42>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <xQueueReceiveFromISR+0x44>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10c      	bne.n	80053a6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	b672      	cpsid	i
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	b662      	cpsie	i
 80053a0:	61fb      	str	r3, [r7, #28]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053a6:	f001 ffe9 	bl	800737c <vPortValidateInterruptPriority>
	__asm volatile
 80053aa:	f3ef 8211 	mrs	r2, BASEPRI
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	b672      	cpsid	i
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	b662      	cpsie	i
 80053c2:	61ba      	str	r2, [r7, #24]
 80053c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80053c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d02f      	beq.n	8005436 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053e4:	f000 f8fb 	bl	80055de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	1e5a      	subs	r2, r3, #1
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80053f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d112      	bne.n	8005420 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	3310      	adds	r3, #16
 8005406:	4618      	mov	r0, r3
 8005408:	f000 feb6 	bl	8006178 <xTaskRemoveFromEventList>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00e      	beq.n	8005430 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e007      	b.n	8005430 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005424:	3301      	adds	r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	b25a      	sxtb	r2, r3
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005430:	2301      	movs	r3, #1
 8005432:	637b      	str	r3, [r7, #52]	; 0x34
 8005434:	e001      	b.n	800543a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005436:	2300      	movs	r3, #0
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f383 8811 	msr	BASEPRI, r3
}
 8005444:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005448:	4618      	mov	r0, r3
 800544a:	3738      	adds	r7, #56	; 0x38
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	b672      	cpsid	i
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	b662      	cpsie	i
 8005472:	60bb      	str	r3, [r7, #8]
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005478:	f001 fe98 	bl	80071ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005482:	f001 fec7 	bl	8007214 <vPortExitCritical>

	return uxReturn;
 8005486:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <vQueueDelete+0x2c>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	b672      	cpsid	i
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	b662      	cpsie	i
 80054b6:	60bb      	str	r3, [r7, #8]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f95f 	bl	8005780 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f002 f863 	bl	8007598 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d006      	beq.n	80054f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e001      	b.n	80054fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80054fc:	68fb      	ldr	r3, [r7, #12]
	}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d14d      	bne.n	80055cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f001 f86f 	bl	8006618 <xTaskPriorityDisinherit>
 800553a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
 8005542:	e043      	b.n	80055cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d119      	bne.n	800557e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6858      	ldr	r0, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	461a      	mov	r2, r3
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	f006 fa24 	bl	800b9a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	441a      	add	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d32b      	bcc.n	80055cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	e026      	b.n	80055cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68d8      	ldr	r0, [r3, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	461a      	mov	r2, r3
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	f006 fa0a 	bl	800b9a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	425b      	negs	r3, r3
 8005598:	441a      	add	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d207      	bcs.n	80055ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	425b      	negs	r3, r3
 80055b4:	441a      	add	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d105      	bne.n	80055cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055d4:	697b      	ldr	r3, [r7, #20]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d018      	beq.n	8005622 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	d303      	bcc.n	8005612 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68d9      	ldr	r1, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	461a      	mov	r2, r3
 800561c:	6838      	ldr	r0, [r7, #0]
 800561e:	f006 f9c0 	bl	800b9a2 <memcpy>
	}
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005632:	f001 fdbb 	bl	80071ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800563c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800563e:	e011      	b.n	8005664 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d012      	beq.n	800566e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3324      	adds	r3, #36	; 0x24
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fd93 	bl	8006178 <xTaskRemoveFromEventList>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005658:	f000 fe70 	bl	800633c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	3b01      	subs	r3, #1
 8005660:	b2db      	uxtb	r3, r3
 8005662:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	dce9      	bgt.n	8005640 <prvUnlockQueue+0x16>
 800566c:	e000      	b.n	8005670 <prvUnlockQueue+0x46>
					break;
 800566e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	22ff      	movs	r2, #255	; 0xff
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005678:	f001 fdcc 	bl	8007214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800567c:	f001 fd96 	bl	80071ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005686:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005688:	e011      	b.n	80056ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d012      	beq.n	80056b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3310      	adds	r3, #16
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fd6e 	bl	8006178 <xTaskRemoveFromEventList>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056a2:	f000 fe4b 	bl	800633c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	dce9      	bgt.n	800568a <prvUnlockQueue+0x60>
 80056b6:	e000      	b.n	80056ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	22ff      	movs	r2, #255	; 0xff
 80056be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056c2:	f001 fda7 	bl	8007214 <vPortExitCritical>
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056d6:	f001 fd69 	bl	80071ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056e2:	2301      	movs	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e001      	b.n	80056ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056ec:	f001 fd92 	bl	8007214 <vPortExitCritical>

	return xReturn;
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005702:	f001 fd53 	bl	80071ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	429a      	cmp	r2, r3
 8005710:	d102      	bne.n	8005718 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005712:	2301      	movs	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e001      	b.n	800571c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800571c:	f001 fd7a 	bl	8007214 <vPortExitCritical>

	return xReturn;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e014      	b.n	8005766 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800573c:	4a0f      	ldr	r2, [pc, #60]	; (800577c <vQueueAddToRegistry+0x50>)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005748:	490c      	ldr	r1, [pc, #48]	; (800577c <vQueueAddToRegistry+0x50>)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005752:	4a0a      	ldr	r2, [pc, #40]	; (800577c <vQueueAddToRegistry+0x50>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4413      	add	r3, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800575e:	e006      	b.n	800576e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b07      	cmp	r3, #7
 800576a:	d9e7      	bls.n	800573c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000b14 	.word	0x20000b14

08005780 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e016      	b.n	80057bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <vQueueUnregisterQueue+0x50>)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d10b      	bne.n	80057b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <vQueueUnregisterQueue+0x50>)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2100      	movs	r1, #0
 80057a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <vQueueUnregisterQueue+0x50>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	2200      	movs	r2, #0
 80057b2:	605a      	str	r2, [r3, #4]
				break;
 80057b4:	e006      	b.n	80057c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b07      	cmp	r3, #7
 80057c0:	d9e5      	bls.n	800578e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000b14 	.word	0x20000b14

080057d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057e4:	f001 fce2 	bl	80071ac <vPortEnterCritical>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d103      	bne.n	80057fe <vQueueWaitForMessageRestricted+0x2a>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005804:	b25b      	sxtb	r3, r3
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d103      	bne.n	8005814 <vQueueWaitForMessageRestricted+0x40>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005814:	f001 fcfe 	bl	8007214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3324      	adds	r3, #36	; 0x24
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fc77 	bl	800611c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800582e:	6978      	ldr	r0, [r7, #20]
 8005830:	f7ff fefb 	bl	800562a <prvUnlockQueue>
	}
 8005834:	bf00      	nop
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af04      	add	r7, sp, #16
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10c      	bne.n	800586a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	b672      	cpsid	i
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	b662      	cpsie	i
 8005864:	623b      	str	r3, [r7, #32]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10c      	bne.n	800588a <xTaskCreateStatic+0x4e>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	b672      	cpsid	i
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	b662      	cpsie	i
 8005884:	61fb      	str	r3, [r7, #28]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800588a:	23bc      	movs	r3, #188	; 0xbc
 800588c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2bbc      	cmp	r3, #188	; 0xbc
 8005892:	d00c      	beq.n	80058ae <xTaskCreateStatic+0x72>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	b672      	cpsid	i
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	b662      	cpsie	i
 80058a8:	61bb      	str	r3, [r7, #24]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d01e      	beq.n	80058f4 <xTaskCreateStatic+0xb8>
 80058b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	2202      	movs	r2, #2
 80058ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ce:	2300      	movs	r3, #0
 80058d0:	9303      	str	r3, [sp, #12]
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	9302      	str	r3, [sp, #8]
 80058d6:	f107 0314 	add.w	r3, r7, #20
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f850 	bl	800598c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ee:	f000 f8f5 	bl	8005adc <prvAddNewTaskToReadyList>
 80058f2:	e001      	b.n	80058f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058f8:	697b      	ldr	r3, [r7, #20]
	}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005902:	b580      	push	{r7, lr}
 8005904:	b08c      	sub	sp, #48	; 0x30
 8005906:	af04      	add	r7, sp, #16
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4618      	mov	r0, r3
 8005918:	f001 fd74 	bl	8007404 <pvPortMalloc>
 800591c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00e      	beq.n	8005942 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005924:	20bc      	movs	r0, #188	; 0xbc
 8005926:	f001 fd6d 	bl	8007404 <pvPortMalloc>
 800592a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
 8005938:	e005      	b.n	8005946 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800593a:	6978      	ldr	r0, [r7, #20]
 800593c:	f001 fe2c 	bl	8007598 <vPortFree>
 8005940:	e001      	b.n	8005946 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d017      	beq.n	800597c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	2300      	movs	r3, #0
 8005958:	9303      	str	r3, [sp, #12]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	9302      	str	r3, [sp, #8]
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f80e 	bl	800598c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005970:	69f8      	ldr	r0, [r7, #28]
 8005972:	f000 f8b3 	bl	8005adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005976:	2301      	movs	r3, #1
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e002      	b.n	8005982 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295
 8005980:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005982:	69bb      	ldr	r3, [r7, #24]
	}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	461a      	mov	r2, r3
 80059a4:	21a5      	movs	r1, #165	; 0xa5
 80059a6:	f006 f80a 	bl	800b9be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80059b4:	440b      	add	r3, r1
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f023 0307 	bic.w	r3, r3, #7
 80059c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00c      	beq.n	80059e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	b672      	cpsid	i
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	b662      	cpsie	i
 80059e2:	617b      	str	r3, [r7, #20]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01f      	beq.n	8005a2e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	e012      	b.n	8005a1a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4413      	add	r3, r2
 80059fa:	7819      	ldrb	r1, [r3, #0]
 80059fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	3334      	adds	r3, #52	; 0x34
 8005a04:	460a      	mov	r2, r1
 8005a06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	3301      	adds	r3, #1
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b0f      	cmp	r3, #15
 8005a1e:	d9e9      	bls.n	80059f4 <prvInitialiseNewTask+0x68>
 8005a20:	e000      	b.n	8005a24 <prvInitialiseNewTask+0x98>
			{
				break;
 8005a22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a2c:	e003      	b.n	8005a36 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	2b37      	cmp	r3, #55	; 0x37
 8005a3a:	d901      	bls.n	8005a40 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a3c:	2337      	movs	r3, #55	; 0x37
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	2200      	movs	r2, #0
 8005a50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	3304      	adds	r3, #4
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe feee 	bl	8004838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	3318      	adds	r3, #24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fee9 	bl	8004838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	3354      	adds	r3, #84	; 0x54
 8005a90:	2260      	movs	r2, #96	; 0x60
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f005 ff92 	bl	800b9be <memset>
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	4a0c      	ldr	r2, [pc, #48]	; (8005ad0 <prvInitialiseNewTask+0x144>)
 8005a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	4a0c      	ldr	r2, [pc, #48]	; (8005ad4 <prvInitialiseNewTask+0x148>)
 8005aa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	4a0b      	ldr	r2, [pc, #44]	; (8005ad8 <prvInitialiseNewTask+0x14c>)
 8005aaa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	69b8      	ldr	r0, [r7, #24]
 8005ab2:	f001 fa6d 	bl	8006f90 <pxPortInitialiseStack>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac8:	bf00      	nop
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	080100a8 	.word	0x080100a8
 8005ad4:	080100c8 	.word	0x080100c8
 8005ad8:	08010088 	.word	0x08010088

08005adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ae4:	f001 fb62 	bl	80071ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ae8:	4b2d      	ldr	r3, [pc, #180]	; (8005ba0 <prvAddNewTaskToReadyList+0xc4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <prvAddNewTaskToReadyList+0xc4>)
 8005af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005af2:	4b2c      	ldr	r3, [pc, #176]	; (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005afa:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b00:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <prvAddNewTaskToReadyList+0xc4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d110      	bne.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b08:	f000 fc3c 	bl	8006384 <prvInitialiseTaskLists>
 8005b0c:	e00d      	b.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b0e:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <prvAddNewTaskToReadyList+0xcc>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b16:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d802      	bhi.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b24:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b2a:	4b20      	ldr	r3, [pc, #128]	; (8005bac <prvAddNewTaskToReadyList+0xd0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <prvAddNewTaskToReadyList+0xd0>)
 8005b32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b34:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <prvAddNewTaskToReadyList+0xd0>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <prvAddNewTaskToReadyList+0xd4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d903      	bls.n	8005b50 <prvAddNewTaskToReadyList+0x74>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <prvAddNewTaskToReadyList+0xd4>)
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <prvAddNewTaskToReadyList+0xd8>)
 8005b5e:	441a      	add	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7fe fe73 	bl	8004852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b6c:	f001 fb52 	bl	8007214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b70:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <prvAddNewTaskToReadyList+0xcc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d207      	bcs.n	8005b96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b86:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <prvAddNewTaskToReadyList+0xdc>)
 8005b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20001028 	.word	0x20001028
 8005ba4:	20000b54 	.word	0x20000b54
 8005ba8:	20001034 	.word	0x20001034
 8005bac:	20001044 	.word	0x20001044
 8005bb0:	20001030 	.word	0x20001030
 8005bb4:	20000b58 	.word	0x20000b58
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d019      	beq.n	8005c02 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <vTaskDelay+0x64>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00c      	beq.n	8005bf0 <vTaskDelay+0x34>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	b672      	cpsid	i
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	b662      	cpsie	i
 8005bea:	60bb      	str	r3, [r7, #8]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005bf0:	f000 f88e 	bl	8005d10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fe1a 	bl	8006830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bfc:	f000 f896 	bl	8005d2c <xTaskResumeAll>
 8005c00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <vTaskDelay+0x68>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20001050 	.word	0x20001050
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c36:	463a      	mov	r2, r7
 8005c38:	1d39      	adds	r1, r7, #4
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fda6 	bl	8004790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	9202      	str	r2, [sp, #8]
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	460a      	mov	r2, r1
 8005c56:	4926      	ldr	r1, [pc, #152]	; (8005cf0 <vTaskStartScheduler+0xc8>)
 8005c58:	4826      	ldr	r0, [pc, #152]	; (8005cf4 <vTaskStartScheduler+0xcc>)
 8005c5a:	f7ff fdef 	bl	800583c <xTaskCreateStatic>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4a25      	ldr	r2, [pc, #148]	; (8005cf8 <vTaskStartScheduler+0xd0>)
 8005c62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c64:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <vTaskStartScheduler+0xd0>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e001      	b.n	8005c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d102      	bne.n	8005c82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c7c:	f000 fe2c 	bl	80068d8 <xTimerCreateTimerTask>
 8005c80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d11d      	bne.n	8005cc4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	b672      	cpsid	i
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	b662      	cpsie	i
 8005c9c:	613b      	str	r3, [r7, #16]
}
 8005c9e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ca0:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <vTaskStartScheduler+0xd4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3354      	adds	r3, #84	; 0x54
 8005ca6:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <vTaskStartScheduler+0xd8>)
 8005ca8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <vTaskStartScheduler+0xdc>)
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cb2:	4b15      	ldr	r3, [pc, #84]	; (8005d08 <vTaskStartScheduler+0xe0>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cb8:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <vTaskStartScheduler+0xe4>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cbe:	f001 f9f7 	bl	80070b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cc2:	e010      	b.n	8005ce6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d10c      	bne.n	8005ce6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	b672      	cpsid	i
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	b662      	cpsie	i
 8005ce0:	60fb      	str	r3, [r7, #12]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <vTaskStartScheduler+0xbc>
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	0800e698 	.word	0x0800e698
 8005cf4:	08006355 	.word	0x08006355
 8005cf8:	2000104c 	.word	0x2000104c
 8005cfc:	20000b54 	.word	0x20000b54
 8005d00:	20000078 	.word	0x20000078
 8005d04:	20001048 	.word	0x20001048
 8005d08:	20001034 	.word	0x20001034
 8005d0c:	2000102c 	.word	0x2000102c

08005d10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <vTaskSuspendAll+0x18>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	4a03      	ldr	r2, [pc, #12]	; (8005d28 <vTaskSuspendAll+0x18>)
 8005d1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20001050 	.word	0x20001050

08005d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d3a:	4b43      	ldr	r3, [pc, #268]	; (8005e48 <xTaskResumeAll+0x11c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10c      	bne.n	8005d5c <xTaskResumeAll+0x30>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	b672      	cpsid	i
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	b662      	cpsie	i
 8005d56:	603b      	str	r3, [r7, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d5c:	f001 fa26 	bl	80071ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <xTaskResumeAll+0x11c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4a38      	ldr	r2, [pc, #224]	; (8005e48 <xTaskResumeAll+0x11c>)
 8005d68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d6a:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <xTaskResumeAll+0x11c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d162      	bne.n	8005e38 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d72:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <xTaskResumeAll+0x120>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d05e      	beq.n	8005e38 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d7a:	e02f      	b.n	8005ddc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7c:	4b34      	ldr	r3, [pc, #208]	; (8005e50 <xTaskResumeAll+0x124>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3318      	adds	r3, #24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe fdbf 	bl	800490c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fdba 	bl	800490c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <xTaskResumeAll+0x128>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d903      	bls.n	8005dac <xTaskResumeAll+0x80>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	4a2a      	ldr	r2, [pc, #168]	; (8005e54 <xTaskResumeAll+0x128>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4a27      	ldr	r2, [pc, #156]	; (8005e58 <xTaskResumeAll+0x12c>)
 8005dba:	441a      	add	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f7fe fd45 	bl	8004852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <xTaskResumeAll+0x130>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005dd6:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <xTaskResumeAll+0x134>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <xTaskResumeAll+0x124>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1cb      	bne.n	8005d7c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dea:	f000 fb6f 	bl	80064cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005dee:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <xTaskResumeAll+0x138>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dfa:	f000 f847 	bl	8005e8c <xTaskIncrementTick>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005e04:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <xTaskResumeAll+0x134>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f1      	bne.n	8005dfa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <xTaskResumeAll+0x138>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <xTaskResumeAll+0x134>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e28:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <xTaskResumeAll+0x13c>)
 8005e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e38:	f001 f9ec 	bl	8007214 <vPortExitCritical>

	return xAlreadyYielded;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20001050 	.word	0x20001050
 8005e4c:	20001028 	.word	0x20001028
 8005e50:	20000fe8 	.word	0x20000fe8
 8005e54:	20001030 	.word	0x20001030
 8005e58:	20000b58 	.word	0x20000b58
 8005e5c:	20000b54 	.word	0x20000b54
 8005e60:	2000103c 	.word	0x2000103c
 8005e64:	20001038 	.word	0x20001038
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <xTaskGetTickCount+0x1c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e78:	687b      	ldr	r3, [r7, #4]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	2000102c 	.word	0x2000102c

08005e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e96:	4b50      	ldr	r3, [pc, #320]	; (8005fd8 <xTaskIncrementTick+0x14c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 808b 	bne.w	8005fb6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ea0:	4b4e      	ldr	r3, [pc, #312]	; (8005fdc <xTaskIncrementTick+0x150>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ea8:	4a4c      	ldr	r2, [pc, #304]	; (8005fdc <xTaskIncrementTick+0x150>)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d122      	bne.n	8005efa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005eb4:	4b4a      	ldr	r3, [pc, #296]	; (8005fe0 <xTaskIncrementTick+0x154>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	b672      	cpsid	i
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	b662      	cpsie	i
 8005ed2:	603b      	str	r3, [r7, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xTaskIncrementTick+0x4a>
 8005ed8:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <xTaskIncrementTick+0x154>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <xTaskIncrementTick+0x158>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3f      	ldr	r2, [pc, #252]	; (8005fe0 <xTaskIncrementTick+0x154>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4a3f      	ldr	r2, [pc, #252]	; (8005fe4 <xTaskIncrementTick+0x158>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b3e      	ldr	r3, [pc, #248]	; (8005fe8 <xTaskIncrementTick+0x15c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	4a3d      	ldr	r2, [pc, #244]	; (8005fe8 <xTaskIncrementTick+0x15c>)
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	f000 fae9 	bl	80064cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005efa:	4b3c      	ldr	r3, [pc, #240]	; (8005fec <xTaskIncrementTick+0x160>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d349      	bcc.n	8005f98 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <xTaskIncrementTick+0x154>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0e:	4b37      	ldr	r3, [pc, #220]	; (8005fec <xTaskIncrementTick+0x160>)
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	601a      	str	r2, [r3, #0]
					break;
 8005f16:	e03f      	b.n	8005f98 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f18:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <xTaskIncrementTick+0x154>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d203      	bcs.n	8005f38 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f30:	4a2e      	ldr	r2, [pc, #184]	; (8005fec <xTaskIncrementTick+0x160>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f36:	e02f      	b.n	8005f98 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe fce5 	bl	800490c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fcdc 	bl	800490c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <xTaskIncrementTick+0x164>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d903      	bls.n	8005f68 <xTaskIncrementTick+0xdc>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <xTaskIncrementTick+0x164>)
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <xTaskIncrementTick+0x168>)
 8005f76:	441a      	add	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fe fc67 	bl	8004852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <xTaskIncrementTick+0x16c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d3b8      	bcc.n	8005f04 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f96:	e7b5      	b.n	8005f04 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f98:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <xTaskIncrementTick+0x16c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9e:	4915      	ldr	r1, [pc, #84]	; (8005ff4 <xTaskIncrementTick+0x168>)
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d907      	bls.n	8005fc0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e004      	b.n	8005fc0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <xTaskIncrementTick+0x170>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	4a0f      	ldr	r2, [pc, #60]	; (8005ffc <xTaskIncrementTick+0x170>)
 8005fbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <xTaskIncrementTick+0x174>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fcc:	697b      	ldr	r3, [r7, #20]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20001050 	.word	0x20001050
 8005fdc:	2000102c 	.word	0x2000102c
 8005fe0:	20000fe0 	.word	0x20000fe0
 8005fe4:	20000fe4 	.word	0x20000fe4
 8005fe8:	20001040 	.word	0x20001040
 8005fec:	20001048 	.word	0x20001048
 8005ff0:	20001030 	.word	0x20001030
 8005ff4:	20000b58 	.word	0x20000b58
 8005ff8:	20000b54 	.word	0x20000b54
 8005ffc:	20001038 	.word	0x20001038
 8006000:	2000103c 	.word	0x2000103c

08006004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800600a:	4b2b      	ldr	r3, [pc, #172]	; (80060b8 <vTaskSwitchContext+0xb4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006012:	4b2a      	ldr	r3, [pc, #168]	; (80060bc <vTaskSwitchContext+0xb8>)
 8006014:	2201      	movs	r2, #1
 8006016:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006018:	e048      	b.n	80060ac <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800601a:	4b28      	ldr	r3, [pc, #160]	; (80060bc <vTaskSwitchContext+0xb8>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <vTaskSwitchContext+0xbc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	e012      	b.n	800604e <vTaskSwitchContext+0x4a>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10c      	bne.n	8006048 <vTaskSwitchContext+0x44>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	b672      	cpsid	i
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	b662      	cpsie	i
 8006042:	607b      	str	r3, [r7, #4]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <vTaskSwitchContext+0x42>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3b01      	subs	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	491d      	ldr	r1, [pc, #116]	; (80060c4 <vTaskSwitchContext+0xc0>)
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0e2      	beq.n	8006028 <vTaskSwitchContext+0x24>
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <vTaskSwitchContext+0xc0>)
 800606e:	4413      	add	r3, r2
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	3308      	adds	r3, #8
 8006084:	429a      	cmp	r2, r3
 8006086:	d104      	bne.n	8006092 <vTaskSwitchContext+0x8e>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4a0b      	ldr	r2, [pc, #44]	; (80060c8 <vTaskSwitchContext+0xc4>)
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <vTaskSwitchContext+0xbc>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <vTaskSwitchContext+0xc4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3354      	adds	r3, #84	; 0x54
 80060a8:	4a08      	ldr	r2, [pc, #32]	; (80060cc <vTaskSwitchContext+0xc8>)
 80060aa:	6013      	str	r3, [r2, #0]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	20001050 	.word	0x20001050
 80060bc:	2000103c 	.word	0x2000103c
 80060c0:	20001030 	.word	0x20001030
 80060c4:	20000b58 	.word	0x20000b58
 80060c8:	20000b54 	.word	0x20000b54
 80060cc:	20000078 	.word	0x20000078

080060d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10c      	bne.n	80060fa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	b672      	cpsid	i
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	b662      	cpsie	i
 80060f4:	60fb      	str	r3, [r7, #12]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <vTaskPlaceOnEventList+0x48>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3318      	adds	r3, #24
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fe fbc9 	bl	800489a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006108:	2101      	movs	r1, #1
 800610a:	6838      	ldr	r0, [r7, #0]
 800610c:	f000 fb90 	bl	8006830 <prvAddCurrentTaskToDelayedList>
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000b54 	.word	0x20000b54

0800611c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	b672      	cpsid	i
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	b662      	cpsie	i
 8006142:	617b      	str	r3, [r7, #20]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <vTaskPlaceOnEventListRestricted+0x58>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3318      	adds	r3, #24
 800614e:	4619      	mov	r1, r3
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7fe fb7e 	bl	8004852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800615c:	f04f 33ff 	mov.w	r3, #4294967295
 8006160:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	68b8      	ldr	r0, [r7, #8]
 8006166:	f000 fb63 	bl	8006830 <prvAddCurrentTaskToDelayedList>
	}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000b54 	.word	0x20000b54

08006178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	b672      	cpsid	i
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	b662      	cpsie	i
 80061a2:	60fb      	str	r3, [r7, #12]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	3318      	adds	r3, #24
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fbad 	bl	800490c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <xTaskRemoveFromEventList+0xb4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11d      	bne.n	80061f6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	3304      	adds	r3, #4
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fba4 	bl	800490c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <xTaskRemoveFromEventList+0xb8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d903      	bls.n	80061d8 <xTaskRemoveFromEventList+0x60>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a16      	ldr	r2, [pc, #88]	; (8006230 <xTaskRemoveFromEventList+0xb8>)
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4a13      	ldr	r2, [pc, #76]	; (8006234 <xTaskRemoveFromEventList+0xbc>)
 80061e6:	441a      	add	r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe fb2f 	bl	8004852 <vListInsertEnd>
 80061f4:	e005      	b.n	8006202 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3318      	adds	r3, #24
 80061fa:	4619      	mov	r1, r3
 80061fc:	480e      	ldr	r0, [pc, #56]	; (8006238 <xTaskRemoveFromEventList+0xc0>)
 80061fe:	f7fe fb28 	bl	8004852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	4b0d      	ldr	r3, [pc, #52]	; (800623c <xTaskRemoveFromEventList+0xc4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	429a      	cmp	r2, r3
 800620e:	d905      	bls.n	800621c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <xTaskRemoveFromEventList+0xc8>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e001      	b.n	8006220 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006220:	697b      	ldr	r3, [r7, #20]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20001050 	.word	0x20001050
 8006230:	20001030 	.word	0x20001030
 8006234:	20000b58 	.word	0x20000b58
 8006238:	20000fe8 	.word	0x20000fe8
 800623c:	20000b54 	.word	0x20000b54
 8006240:	2000103c 	.word	0x2000103c

08006244 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800624c:	4b06      	ldr	r3, [pc, #24]	; (8006268 <vTaskInternalSetTimeOutState+0x24>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <vTaskInternalSetTimeOutState+0x28>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	605a      	str	r2, [r3, #4]
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20001040 	.word	0x20001040
 800626c:	2000102c 	.word	0x2000102c

08006270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10c      	bne.n	800629a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	b672      	cpsid	i
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	b662      	cpsie	i
 8006294:	613b      	str	r3, [r7, #16]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10c      	bne.n	80062ba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	b672      	cpsid	i
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	b662      	cpsie	i
 80062b4:	60fb      	str	r3, [r7, #12]
}
 80062b6:	bf00      	nop
 80062b8:	e7fe      	b.n	80062b8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80062ba:	f000 ff77 	bl	80071ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062be:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <xTaskCheckForTimeOut+0xc4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d102      	bne.n	80062de <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062d8:	2300      	movs	r3, #0
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	e023      	b.n	8006326 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <xTaskCheckForTimeOut+0xc8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d007      	beq.n	80062fa <xTaskCheckForTimeOut+0x8a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d302      	bcc.n	80062fa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	e015      	b.n	8006326 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	429a      	cmp	r2, r3
 8006302:	d20b      	bcs.n	800631c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ff97 	bl	8006244 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e004      	b.n	8006326 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006322:	2301      	movs	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006326:	f000 ff75 	bl	8007214 <vPortExitCritical>

	return xReturn;
 800632a:	69fb      	ldr	r3, [r7, #28]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	2000102c 	.word	0x2000102c
 8006338:	20001040 	.word	0x20001040

0800633c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006340:	4b03      	ldr	r3, [pc, #12]	; (8006350 <vTaskMissedYield+0x14>)
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]
}
 8006346:	bf00      	nop
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	2000103c 	.word	0x2000103c

08006354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800635c:	f000 f852 	bl	8006404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <prvIdleTask+0x28>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d9f9      	bls.n	800635c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <prvIdleTask+0x2c>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006378:	e7f0      	b.n	800635c <prvIdleTask+0x8>
 800637a:	bf00      	nop
 800637c:	20000b58 	.word	0x20000b58
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800638a:	2300      	movs	r3, #0
 800638c:	607b      	str	r3, [r7, #4]
 800638e:	e00c      	b.n	80063aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4a12      	ldr	r2, [pc, #72]	; (80063e4 <prvInitialiseTaskLists+0x60>)
 800639c:	4413      	add	r3, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fa2a 	bl	80047f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3301      	adds	r3, #1
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b37      	cmp	r3, #55	; 0x37
 80063ae:	d9ef      	bls.n	8006390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063b0:	480d      	ldr	r0, [pc, #52]	; (80063e8 <prvInitialiseTaskLists+0x64>)
 80063b2:	f7fe fa21 	bl	80047f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063b6:	480d      	ldr	r0, [pc, #52]	; (80063ec <prvInitialiseTaskLists+0x68>)
 80063b8:	f7fe fa1e 	bl	80047f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063bc:	480c      	ldr	r0, [pc, #48]	; (80063f0 <prvInitialiseTaskLists+0x6c>)
 80063be:	f7fe fa1b 	bl	80047f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063c2:	480c      	ldr	r0, [pc, #48]	; (80063f4 <prvInitialiseTaskLists+0x70>)
 80063c4:	f7fe fa18 	bl	80047f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063c8:	480b      	ldr	r0, [pc, #44]	; (80063f8 <prvInitialiseTaskLists+0x74>)
 80063ca:	f7fe fa15 	bl	80047f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <prvInitialiseTaskLists+0x78>)
 80063d0:	4a05      	ldr	r2, [pc, #20]	; (80063e8 <prvInitialiseTaskLists+0x64>)
 80063d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <prvInitialiseTaskLists+0x7c>)
 80063d6:	4a05      	ldr	r2, [pc, #20]	; (80063ec <prvInitialiseTaskLists+0x68>)
 80063d8:	601a      	str	r2, [r3, #0]
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000b58 	.word	0x20000b58
 80063e8:	20000fb8 	.word	0x20000fb8
 80063ec:	20000fcc 	.word	0x20000fcc
 80063f0:	20000fe8 	.word	0x20000fe8
 80063f4:	20000ffc 	.word	0x20000ffc
 80063f8:	20001014 	.word	0x20001014
 80063fc:	20000fe0 	.word	0x20000fe0
 8006400:	20000fe4 	.word	0x20000fe4

08006404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800640a:	e019      	b.n	8006440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800640c:	f000 fece 	bl	80071ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <prvCheckTasksWaitingTermination+0x50>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3304      	adds	r3, #4
 800641c:	4618      	mov	r0, r3
 800641e:	f7fe fa75 	bl	800490c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006422:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <prvCheckTasksWaitingTermination+0x54>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3b01      	subs	r3, #1
 8006428:	4a0b      	ldr	r2, [pc, #44]	; (8006458 <prvCheckTasksWaitingTermination+0x54>)
 800642a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <prvCheckTasksWaitingTermination+0x58>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3b01      	subs	r3, #1
 8006432:	4a0a      	ldr	r2, [pc, #40]	; (800645c <prvCheckTasksWaitingTermination+0x58>)
 8006434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006436:	f000 feed 	bl	8007214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f810 	bl	8006460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <prvCheckTasksWaitingTermination+0x58>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e1      	bne.n	800640c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000ffc 	.word	0x20000ffc
 8006458:	20001028 	.word	0x20001028
 800645c:	20001010 	.word	0x20001010

08006460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3354      	adds	r3, #84	; 0x54
 800646c:	4618      	mov	r0, r3
 800646e:	f006 f8cb 	bl	800c608 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006478:	2b00      	cmp	r3, #0
 800647a:	d108      	bne.n	800648e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	4618      	mov	r0, r3
 8006482:	f001 f889 	bl	8007598 <vPortFree>
				vPortFree( pxTCB );
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 f886 	bl	8007598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800648c:	e01a      	b.n	80064c4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006494:	2b01      	cmp	r3, #1
 8006496:	d103      	bne.n	80064a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 f87d 	bl	8007598 <vPortFree>
	}
 800649e:	e011      	b.n	80064c4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d00c      	beq.n	80064c4 <prvDeleteTCB+0x64>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	b672      	cpsid	i
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	b662      	cpsie	i
 80064be:	60fb      	str	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <prvDeleteTCB+0x62>
	}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <prvResetNextTaskUnblockTime+0x38>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <prvResetNextTaskUnblockTime+0x3c>)
 80064de:	f04f 32ff 	mov.w	r2, #4294967295
 80064e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064e4:	e008      	b.n	80064f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e6:	4b07      	ldr	r3, [pc, #28]	; (8006504 <prvResetNextTaskUnblockTime+0x38>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4a04      	ldr	r2, [pc, #16]	; (8006508 <prvResetNextTaskUnblockTime+0x3c>)
 80064f6:	6013      	str	r3, [r2, #0]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	20000fe0 	.word	0x20000fe0
 8006508:	20001048 	.word	0x20001048

0800650c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <xTaskGetSchedulerState+0x34>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d102      	bne.n	8006520 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800651a:	2301      	movs	r3, #1
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	e008      	b.n	8006532 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <xTaskGetSchedulerState+0x38>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006528:	2302      	movs	r3, #2
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	e001      	b.n	8006532 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006532:	687b      	ldr	r3, [r7, #4]
	}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	20001034 	.word	0x20001034
 8006544:	20001050 	.word	0x20001050

08006548 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d051      	beq.n	8006602 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	4b2a      	ldr	r3, [pc, #168]	; (800660c <xTaskPriorityInherit+0xc4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	429a      	cmp	r2, r3
 800656a:	d241      	bcs.n	80065f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	db06      	blt.n	8006582 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006574:	4b25      	ldr	r3, [pc, #148]	; (800660c <xTaskPriorityInherit+0xc4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6959      	ldr	r1, [r3, #20]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <xTaskPriorityInherit+0xc8>)
 8006594:	4413      	add	r3, r2
 8006596:	4299      	cmp	r1, r3
 8006598:	d122      	bne.n	80065e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3304      	adds	r3, #4
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe f9b4 	bl	800490c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065a4:	4b19      	ldr	r3, [pc, #100]	; (800660c <xTaskPriorityInherit+0xc4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	4b18      	ldr	r3, [pc, #96]	; (8006614 <xTaskPriorityInherit+0xcc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d903      	bls.n	80065c2 <xTaskPriorityInherit+0x7a>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a15      	ldr	r2, [pc, #84]	; (8006614 <xTaskPriorityInherit+0xcc>)
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <xTaskPriorityInherit+0xc8>)
 80065d0:	441a      	add	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f7fe f93a 	bl	8004852 <vListInsertEnd>
 80065de:	e004      	b.n	80065ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <xTaskPriorityInherit+0xc4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80065ea:	2301      	movs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e008      	b.n	8006602 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <xTaskPriorityInherit+0xc4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d201      	bcs.n	8006602 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80065fe:	2301      	movs	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006602:	68fb      	ldr	r3, [r7, #12]
	}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20000b54 	.word	0x20000b54
 8006610:	20000b58 	.word	0x20000b58
 8006614:	20001030 	.word	0x20001030

08006618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d05a      	beq.n	80066e4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800662e:	4b30      	ldr	r3, [pc, #192]	; (80066f0 <xTaskPriorityDisinherit+0xd8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	429a      	cmp	r2, r3
 8006636:	d00c      	beq.n	8006652 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	b672      	cpsid	i
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	b662      	cpsie	i
 800664c:	60fb      	str	r3, [r7, #12]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10c      	bne.n	8006674 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	b672      	cpsid	i
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	b662      	cpsie	i
 800666e:	60bb      	str	r3, [r7, #8]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	1e5a      	subs	r2, r3, #1
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	429a      	cmp	r2, r3
 8006688:	d02c      	beq.n	80066e4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668e:	2b00      	cmp	r3, #0
 8006690:	d128      	bne.n	80066e4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3304      	adds	r3, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe f938 	bl	800490c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <xTaskPriorityDisinherit+0xdc>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d903      	bls.n	80066c4 <xTaskPriorityDisinherit+0xac>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <xTaskPriorityDisinherit+0xdc>)
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <xTaskPriorityDisinherit+0xe0>)
 80066d2:	441a      	add	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fe f8b9 	bl	8004852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066e4:	697b      	ldr	r3, [r7, #20]
	}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000b54 	.word	0x20000b54
 80066f4:	20001030 	.word	0x20001030
 80066f8:	20000b58 	.word	0x20000b58

080066fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800670a:	2301      	movs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d06e      	beq.n	80067f2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10c      	bne.n	8006736 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d902      	bls.n	8006746 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e002      	b.n	800674c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	429a      	cmp	r2, r3
 8006754:	d04d      	beq.n	80067f2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	429a      	cmp	r2, r3
 800675e:	d148      	bne.n	80067f2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006760:	4b26      	ldr	r3, [pc, #152]	; (80067fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	429a      	cmp	r2, r3
 8006768:	d10c      	bne.n	8006784 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	b672      	cpsid	i
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	b662      	cpsie	i
 800677e:	60bb      	str	r3, [r7, #8]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	db04      	blt.n	80067a2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	6959      	ldr	r1, [r3, #20]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a13      	ldr	r2, [pc, #76]	; (8006800 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80067b2:	4413      	add	r3, r2
 80067b4:	4299      	cmp	r1, r3
 80067b6:	d11c      	bne.n	80067f2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe f8a5 	bl	800490c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c6:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d903      	bls.n	80067d6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4a07      	ldr	r2, [pc, #28]	; (8006800 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80067e4:	441a      	add	r2, r3
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4619      	mov	r1, r3
 80067ec:	4610      	mov	r0, r2
 80067ee:	f7fe f830 	bl	8004852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067f2:	bf00      	nop
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000b54 	.word	0x20000b54
 8006800:	20000b58 	.word	0x20000b58
 8006804:	20001030 	.word	0x20001030

08006808 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <pvTaskIncrementMutexHeldCount+0x24>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <pvTaskIncrementMutexHeldCount+0x24>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800681a:	3201      	adds	r2, #1
 800681c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800681e:	4b03      	ldr	r3, [pc, #12]	; (800682c <pvTaskIncrementMutexHeldCount+0x24>)
 8006820:	681b      	ldr	r3, [r3, #0]
	}
 8006822:	4618      	mov	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	20000b54 	.word	0x20000b54

08006830 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800683a:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006840:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe f860 	bl	800490c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d10a      	bne.n	800686a <prvAddCurrentTaskToDelayedList+0x3a>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3304      	adds	r3, #4
 8006860:	4619      	mov	r1, r3
 8006862:	4819      	ldr	r0, [pc, #100]	; (80068c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006864:	f7fd fff5 	bl	8004852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006868:	e026      	b.n	80068b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4413      	add	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006872:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	429a      	cmp	r2, r3
 8006880:	d209      	bcs.n	8006896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3304      	adds	r3, #4
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f7fe f803 	bl	800489a <vListInsert>
}
 8006894:	e010      	b.n	80068b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006896:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f7fd fff9 	bl	800489a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d202      	bcs.n	80068b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068b2:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	2000102c 	.word	0x2000102c
 80068c4:	20000b54 	.word	0x20000b54
 80068c8:	20001014 	.word	0x20001014
 80068cc:	20000fe4 	.word	0x20000fe4
 80068d0:	20000fe0 	.word	0x20000fe0
 80068d4:	20001048 	.word	0x20001048

080068d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068e2:	f000 fb15 	bl	8006f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <xTimerCreateTimerTask+0x84>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d021      	beq.n	8006932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068f6:	1d3a      	adds	r2, r7, #4
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd ff5f 	bl	80047c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	9202      	str	r2, [sp, #8]
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	2302      	movs	r3, #2
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	2300      	movs	r3, #0
 8006916:	460a      	mov	r2, r1
 8006918:	4911      	ldr	r1, [pc, #68]	; (8006960 <xTimerCreateTimerTask+0x88>)
 800691a:	4812      	ldr	r0, [pc, #72]	; (8006964 <xTimerCreateTimerTask+0x8c>)
 800691c:	f7fe ff8e 	bl	800583c <xTaskCreateStatic>
 8006920:	4603      	mov	r3, r0
 8006922:	4a11      	ldr	r2, [pc, #68]	; (8006968 <xTimerCreateTimerTask+0x90>)
 8006924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <xTimerCreateTimerTask+0x90>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800692e:	2301      	movs	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10c      	bne.n	8006952 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	b672      	cpsid	i
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	b662      	cpsie	i
 800694c:	613b      	str	r3, [r7, #16]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006952:	697b      	ldr	r3, [r7, #20]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20001084 	.word	0x20001084
 8006960:	0800e6a0 	.word	0x0800e6a0
 8006964:	08006aa9 	.word	0x08006aa9
 8006968:	20001088 	.word	0x20001088

0800696c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	; 0x28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10c      	bne.n	800699e <xTimerGenericCommand+0x32>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	b672      	cpsid	i
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	b662      	cpsie	i
 8006998:	623b      	str	r3, [r7, #32]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <xTimerGenericCommand+0x9c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d02a      	beq.n	80069fc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b05      	cmp	r3, #5
 80069b6:	dc18      	bgt.n	80069ea <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069b8:	f7ff fda8 	bl	800650c <xTaskGetSchedulerState>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d109      	bne.n	80069d6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <xTimerGenericCommand+0x9c>)
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f107 0110 	add.w	r1, r7, #16
 80069ca:	2300      	movs	r3, #0
 80069cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ce:	f7fe f919 	bl	8004c04 <xQueueGenericSend>
 80069d2:	6278      	str	r0, [r7, #36]	; 0x24
 80069d4:	e012      	b.n	80069fc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069d6:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <xTimerGenericCommand+0x9c>)
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	f107 0110 	add.w	r1, r7, #16
 80069de:	2300      	movs	r3, #0
 80069e0:	2200      	movs	r2, #0
 80069e2:	f7fe f90f 	bl	8004c04 <xQueueGenericSend>
 80069e6:	6278      	str	r0, [r7, #36]	; 0x24
 80069e8:	e008      	b.n	80069fc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <xTimerGenericCommand+0x9c>)
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	f107 0110 	add.w	r1, r7, #16
 80069f2:	2300      	movs	r3, #0
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	f7fe fa0b 	bl	8004e10 <xQueueGenericSendFromISR>
 80069fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3728      	adds	r7, #40	; 0x28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20001084 	.word	0x20001084

08006a0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a16:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <prvProcessExpiredTimer+0x98>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fd ff71 	bl	800490c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d024      	beq.n	8006a82 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	699a      	ldr	r2, [r3, #24]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	18d1      	adds	r1, r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	6978      	ldr	r0, [r7, #20]
 8006a46:	f000 f8d3 	bl	8006bf0 <prvInsertTimerInActiveList>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d021      	beq.n	8006a94 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a50:	2300      	movs	r3, #0
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	2100      	movs	r1, #0
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f7ff ff86 	bl	800696c <xTimerGenericCommand>
 8006a60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d115      	bne.n	8006a94 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	b672      	cpsid	i
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	b662      	cpsie	i
 8006a7c:	60fb      	str	r3, [r7, #12]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a88:	f023 0301 	bic.w	r3, r3, #1
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	6978      	ldr	r0, [r7, #20]
 8006a9a:	4798      	blx	r3
}
 8006a9c:	bf00      	nop
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	2000107c 	.word	0x2000107c

08006aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ab0:	f107 0308 	add.w	r3, r7, #8
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 f857 	bl	8006b68 <prvGetNextExpireTime>
 8006aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f803 	bl	8006acc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ac6:	f000 f8d5 	bl	8006c74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006aca:	e7f1      	b.n	8006ab0 <prvTimerTask+0x8>

08006acc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ad6:	f7ff f91b 	bl	8005d10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f866 	bl	8006bb0 <prvSampleTimeNow>
 8006ae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d130      	bne.n	8006b4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <prvProcessTimerOrBlockTask+0x3c>
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d806      	bhi.n	8006b08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006afa:	f7ff f917 	bl	8005d2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ff83 	bl	8006a0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b06:	e024      	b.n	8006b52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <prvProcessTimerOrBlockTask+0x90>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <prvProcessTimerOrBlockTask+0x50>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <prvProcessTimerOrBlockTask+0x52>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <prvProcessTimerOrBlockTask+0x94>)
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f7fe fe51 	bl	80057d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b32:	f7ff f8fb 	bl	8005d2c <xTaskResumeAll>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <prvProcessTimerOrBlockTask+0x98>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
}
 8006b4c:	e001      	b.n	8006b52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b4e:	f7ff f8ed 	bl	8005d2c <xTaskResumeAll>
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001080 	.word	0x20001080
 8006b60:	20001084 	.word	0x20001084
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <prvGetNextExpireTime+0x44>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <prvGetNextExpireTime+0x16>
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	e000      	b.n	8006b80 <prvGetNextExpireTime+0x18>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d105      	bne.n	8006b98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b8c:	4b07      	ldr	r3, [pc, #28]	; (8006bac <prvGetNextExpireTime+0x44>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e001      	b.n	8006b9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	2000107c 	.word	0x2000107c

08006bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bb8:	f7ff f958 	bl	8005e6c <xTaskGetTickCount>
 8006bbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <prvSampleTimeNow+0x3c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d205      	bcs.n	8006bd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bc8:	f000 f93c 	bl	8006e44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e002      	b.n	8006bda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bda:	4a04      	ldr	r2, [pc, #16]	; (8006bec <prvSampleTimeNow+0x3c>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006be0:	68fb      	ldr	r3, [r7, #12]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	2000108c 	.word	0x2000108c

08006bf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d812      	bhi.n	8006c3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d302      	bcc.n	8006c2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e01b      	b.n	8006c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <prvInsertTimerInActiveList+0x7c>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3304      	adds	r3, #4
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7fd fe30 	bl	800489a <vListInsert>
 8006c3a:	e012      	b.n	8006c62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d206      	bcs.n	8006c52 <prvInsertTimerInActiveList+0x62>
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d302      	bcc.n	8006c52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	e007      	b.n	8006c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <prvInsertTimerInActiveList+0x80>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f7fd fe1c 	bl	800489a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c62:	697b      	ldr	r3, [r7, #20]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20001080 	.word	0x20001080
 8006c70:	2000107c 	.word	0x2000107c

08006c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08e      	sub	sp, #56	; 0x38
 8006c78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c7a:	e0d0      	b.n	8006e1e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da1a      	bge.n	8006cb8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	3304      	adds	r3, #4
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10c      	bne.n	8006ca8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	b672      	cpsid	i
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	b662      	cpsie	i
 8006ca2:	61fb      	str	r3, [r7, #28]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cae:	6850      	ldr	r0, [r2, #4]
 8006cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb2:	6892      	ldr	r2, [r2, #8]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f2c0 80ae 	blt.w	8006e1c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fd fe1b 	bl	800490c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cd6:	463b      	mov	r3, r7
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff ff69 	bl	8006bb0 <prvSampleTimeNow>
 8006cde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b09      	cmp	r3, #9
 8006ce4:	f200 809b 	bhi.w	8006e1e <prvProcessReceivedCommands+0x1aa>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <prvProcessReceivedCommands+0x7c>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d19 	.word	0x08006d19
 8006cfc:	08006d91 	.word	0x08006d91
 8006d00:	08006da5 	.word	0x08006da5
 8006d04:	08006df3 	.word	0x08006df3
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d19 	.word	0x08006d19
 8006d10:	08006d91 	.word	0x08006d91
 8006d14:	08006da5 	.word	0x08006da5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d1e:	f043 0301 	orr.w	r3, r3, #1
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	18d1      	adds	r1, r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d38:	f7ff ff5a 	bl	8006bf0 <prvInsertTimerInActiveList>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d06d      	beq.n	8006e1e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d062      	beq.n	8006e1e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	441a      	add	r2, r3
 8006d60:	2300      	movs	r3, #0
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6a:	f7ff fdff 	bl	800696c <xTimerGenericCommand>
 8006d6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d153      	bne.n	8006e1e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	b672      	cpsid	i
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	b662      	cpsie	i
 8006d8a:	61bb      	str	r3, [r7, #24]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006da2:	e03c      	b.n	8006e1e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10c      	bne.n	8006dde <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	b672      	cpsid	i
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	b662      	cpsie	i
 8006dd8:	617b      	str	r3, [r7, #20]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	18d1      	adds	r1, r2, r3
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dec:	f7ff ff00 	bl	8006bf0 <prvInsertTimerInActiveList>
					break;
 8006df0:	e015      	b.n	8006e1e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e02:	f000 fbc9 	bl	8007598 <vPortFree>
 8006e06:	e00a      	b.n	8006e1e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e1a:	e000      	b.n	8006e1e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e1e:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <prvProcessReceivedCommands+0x1cc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	1d39      	adds	r1, r7, #4
 8006e24:	2200      	movs	r2, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe f892 	bl	8004f50 <xQueueReceive>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f47f af24 	bne.w	8006c7c <prvProcessReceivedCommands+0x8>
	}
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	3730      	adds	r7, #48	; 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20001084 	.word	0x20001084

08006e44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e4a:	e04a      	b.n	8006ee2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e4c:	4b2e      	ldr	r3, [pc, #184]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e56:	4b2c      	ldr	r3, [pc, #176]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fd fd51 	bl	800490c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d030      	beq.n	8006ee2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4413      	add	r3, r2
 8006e88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d90e      	bls.n	8006eb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e9e:	4b1a      	ldr	r3, [pc, #104]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fd fcf6 	bl	800489a <vListInsert>
 8006eae:	e018      	b.n	8006ee2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff fd56 	bl	800696c <xTimerGenericCommand>
 8006ec0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10c      	bne.n	8006ee2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	b672      	cpsid	i
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	b662      	cpsie	i
 8006edc:	603b      	str	r3, [r7, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1af      	bne.n	8006e4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <prvSwitchTimerLists+0xc8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006ef8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <prvSwitchTimerLists+0xc8>)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	2000107c 	.word	0x2000107c
 8006f0c:	20001080 	.word	0x20001080

08006f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f16:	f000 f949 	bl	80071ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f1a:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d120      	bne.n	8006f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f22:	4814      	ldr	r0, [pc, #80]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f24:	f7fd fc68 	bl	80047f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f28:	4813      	ldr	r0, [pc, #76]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f2a:	f7fd fc65 	bl	80047f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <prvCheckForValidListAndQueue+0x6c>)
 8006f30:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <prvCheckForValidListAndQueue+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <prvCheckForValidListAndQueue+0x70>)
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <prvCheckForValidListAndQueue+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4b11      	ldr	r3, [pc, #68]	; (8006f84 <prvCheckForValidListAndQueue+0x74>)
 8006f40:	4a11      	ldr	r2, [pc, #68]	; (8006f88 <prvCheckForValidListAndQueue+0x78>)
 8006f42:	2110      	movs	r1, #16
 8006f44:	200a      	movs	r0, #10
 8006f46:	f7fd fd75 	bl	8004a34 <xQueueGenericCreateStatic>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	490b      	ldr	r1, [pc, #44]	; (8006f8c <prvCheckForValidListAndQueue+0x7c>)
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fbe4 	bl	800572c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f64:	f000 f956 	bl	8007214 <vPortExitCritical>
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001084 	.word	0x20001084
 8006f74:	20001054 	.word	0x20001054
 8006f78:	20001068 	.word	0x20001068
 8006f7c:	2000107c 	.word	0x2000107c
 8006f80:	20001080 	.word	0x20001080
 8006f84:	20001130 	.word	0x20001130
 8006f88:	20001090 	.word	0x20001090
 8006f8c:	0800e6a8 	.word	0x0800e6a8

08006f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b04      	subs	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc0:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <pxPortInitialiseStack+0x64>)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b14      	subs	r3, #20
 8006fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f06f 0202 	mvn.w	r2, #2
 8006fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3b20      	subs	r3, #32
 8006fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	08006ff9 	.word	0x08006ff9

08006ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007002:	4b14      	ldr	r3, [pc, #80]	; (8007054 <prvTaskExitError+0x5c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d00c      	beq.n	8007026 <prvTaskExitError+0x2e>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <prvTaskExitError+0x2c>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	b672      	cpsid	i
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	b662      	cpsie	i
 800703a:	60bb      	str	r3, [r7, #8]
}
 800703c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800703e:	bf00      	nop
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0fc      	beq.n	8007040 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20000010 	.word	0x20000010
	...

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	4770      	bx	lr
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst2>:
 8007080:	20000b54 	.word	0x20000b54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <prvPortStartFirstTask+0x24>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8814 	msr	CONTROL, r0
 800709a:	b662      	cpsie	i
 800709c:	b661      	cpsie	f
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	df00      	svc	0
 80070a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070aa:	bf00      	nop
 80070ac:	e000ed08 	.word	0xe000ed08

080070b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070b6:	4b37      	ldr	r3, [pc, #220]	; (8007194 <xPortStartScheduler+0xe4>)
 80070b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	22ff      	movs	r2, #255	; 0xff
 80070c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <xPortStartScheduler+0xe8>)
 80070dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070de:	4b2f      	ldr	r3, [pc, #188]	; (800719c <xPortStartScheduler+0xec>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070e4:	e009      	b.n	80070fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80070e6:	4b2d      	ldr	r3, [pc, #180]	; (800719c <xPortStartScheduler+0xec>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	4a2b      	ldr	r2, [pc, #172]	; (800719c <xPortStartScheduler+0xec>)
 80070ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d0ef      	beq.n	80070e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007106:	4b25      	ldr	r3, [pc, #148]	; (800719c <xPortStartScheduler+0xec>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1c3 0307 	rsb	r3, r3, #7
 800710e:	2b04      	cmp	r3, #4
 8007110:	d00c      	beq.n	800712c <xPortStartScheduler+0x7c>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	b672      	cpsid	i
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	b662      	cpsie	i
 8007126:	60bb      	str	r3, [r7, #8]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <xPortStartScheduler+0xec>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	4a1a      	ldr	r2, [pc, #104]	; (800719c <xPortStartScheduler+0xec>)
 8007134:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007136:	4b19      	ldr	r3, [pc, #100]	; (800719c <xPortStartScheduler+0xec>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800713e:	4a17      	ldr	r2, [pc, #92]	; (800719c <xPortStartScheduler+0xec>)
 8007140:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	b2da      	uxtb	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <xPortStartScheduler+0xf0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <xPortStartScheduler+0xf0>)
 8007150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007154:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007156:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <xPortStartScheduler+0xf0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a11      	ldr	r2, [pc, #68]	; (80071a0 <xPortStartScheduler+0xf0>)
 800715c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007160:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007162:	f000 f8dd 	bl	8007320 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <xPortStartScheduler+0xf4>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800716c:	f000 f8fc 	bl	8007368 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <xPortStartScheduler+0xf8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <xPortStartScheduler+0xf8>)
 8007176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800717a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800717c:	f7ff ff84 	bl	8007088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007180:	f7fe ff40 	bl	8006004 <vTaskSwitchContext>
	prvTaskExitError();
 8007184:	f7ff ff38 	bl	8006ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	e000e400 	.word	0xe000e400
 8007198:	20001180 	.word	0x20001180
 800719c:	20001184 	.word	0x20001184
 80071a0:	e000ed20 	.word	0xe000ed20
 80071a4:	20000010 	.word	0x20000010
 80071a8:	e000ef34 	.word	0xe000ef34

080071ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	607b      	str	r3, [r7, #4]
}
 80071c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <vPortEnterCritical+0x60>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	4a0e      	ldr	r2, [pc, #56]	; (800720c <vPortEnterCritical+0x60>)
 80071d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <vPortEnterCritical+0x60>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d111      	bne.n	8007200 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071dc:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <vPortEnterCritical+0x64>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00c      	beq.n	8007200 <vPortEnterCritical+0x54>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	b672      	cpsid	i
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	b662      	cpsie	i
 80071fa:	603b      	str	r3, [r7, #0]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <vPortEnterCritical+0x52>
	}
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20000010 	.word	0x20000010
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800721a:	4b13      	ldr	r3, [pc, #76]	; (8007268 <vPortExitCritical+0x54>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10c      	bne.n	800723c <vPortExitCritical+0x28>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	b672      	cpsid	i
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	b662      	cpsie	i
 8007236:	607b      	str	r3, [r7, #4]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800723c:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <vPortExitCritical+0x54>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3b01      	subs	r3, #1
 8007242:	4a09      	ldr	r2, [pc, #36]	; (8007268 <vPortExitCritical+0x54>)
 8007244:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007246:	4b08      	ldr	r3, [pc, #32]	; (8007268 <vPortExitCritical+0x54>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d105      	bne.n	800725a <vPortExitCritical+0x46>
 800724e:	2300      	movs	r3, #0
 8007250:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f383 8811 	msr	BASEPRI, r3
}
 8007258:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000010 	.word	0x20000010
 800726c:	00000000 	.word	0x00000000

08007270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007270:	f3ef 8009 	mrs	r0, PSP
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <pxCurrentTCBConst>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f01e 0f10 	tst.w	lr, #16
 8007280:	bf08      	it	eq
 8007282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	6010      	str	r0, [r2, #0]
 800728c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007294:	b672      	cpsid	i
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	b662      	cpsie	i
 80072a4:	f7fe feae 	bl	8006004 <vTaskSwitchContext>
 80072a8:	f04f 0000 	mov.w	r0, #0
 80072ac:	f380 8811 	msr	BASEPRI, r0
 80072b0:	bc09      	pop	{r0, r3}
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	6808      	ldr	r0, [r1, #0]
 80072b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ba:	f01e 0f10 	tst.w	lr, #16
 80072be:	bf08      	it	eq
 80072c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072c4:	f380 8809 	msr	PSP, r0
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <pxCurrentTCBConst>:
 80072d0:	20000b54 	.word	0x20000b54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop

080072d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	b672      	cpsid	i
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	b662      	cpsie	i
 80072f2:	607b      	str	r3, [r7, #4]
}
 80072f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072f6:	f7fe fdc9 	bl	8005e8c <xTaskIncrementTick>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <SysTick_Handler+0x44>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f383 8811 	msr	BASEPRI, r3
}
 8007312:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <vPortSetupTimerInterrupt+0x34>)
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <vPortSetupTimerInterrupt+0x38>)
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007330:	4b0a      	ldr	r3, [pc, #40]	; (800735c <vPortSetupTimerInterrupt+0x3c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a0a      	ldr	r2, [pc, #40]	; (8007360 <vPortSetupTimerInterrupt+0x40>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	099b      	lsrs	r3, r3, #6
 800733c:	4a09      	ldr	r2, [pc, #36]	; (8007364 <vPortSetupTimerInterrupt+0x44>)
 800733e:	3b01      	subs	r3, #1
 8007340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <vPortSetupTimerInterrupt+0x34>)
 8007344:	2207      	movs	r2, #7
 8007346:	601a      	str	r2, [r3, #0]
}
 8007348:	bf00      	nop
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	e000e010 	.word	0xe000e010
 8007358:	e000e018 	.word	0xe000e018
 800735c:	20000004 	.word	0x20000004
 8007360:	10624dd3 	.word	0x10624dd3
 8007364:	e000e014 	.word	0xe000e014

08007368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007368:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007378 <vPortEnableVFP+0x10>
 800736c:	6801      	ldr	r1, [r0, #0]
 800736e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007372:	6001      	str	r1, [r0, #0]
 8007374:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007376:	bf00      	nop
 8007378:	e000ed88 	.word	0xe000ed88

0800737c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007382:	f3ef 8305 	mrs	r3, IPSR
 8007386:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b0f      	cmp	r3, #15
 800738c:	d916      	bls.n	80073bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800738e:	4a19      	ldr	r2, [pc, #100]	; (80073f4 <vPortValidateInterruptPriority+0x78>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007398:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <vPortValidateInterruptPriority+0x7c>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	7afa      	ldrb	r2, [r7, #11]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d20c      	bcs.n	80073bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	b672      	cpsid	i
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	b662      	cpsie	i
 80073b6:	607b      	str	r3, [r7, #4]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <vPortValidateInterruptPriority+0x80>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073c4:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <vPortValidateInterruptPriority+0x84>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d90c      	bls.n	80073e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	603b      	str	r3, [r7, #0]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <vPortValidateInterruptPriority+0x68>
	}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	e000e3f0 	.word	0xe000e3f0
 80073f8:	20001180 	.word	0x20001180
 80073fc:	e000ed0c 	.word	0xe000ed0c
 8007400:	20001184 	.word	0x20001184

08007404 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800740c:	2300      	movs	r3, #0
 800740e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007410:	f7fe fc7e 	bl	8005d10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007414:	4b5b      	ldr	r3, [pc, #364]	; (8007584 <pvPortMalloc+0x180>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800741c:	f000 f91a 	bl	8007654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007420:	4b59      	ldr	r3, [pc, #356]	; (8007588 <pvPortMalloc+0x184>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	f040 8092 	bne.w	8007552 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01f      	beq.n	8007474 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007434:	2208      	movs	r2, #8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	2b00      	cmp	r3, #0
 8007444:	d016      	beq.n	8007474 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f023 0307 	bic.w	r3, r3, #7
 800744c:	3308      	adds	r3, #8
 800744e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <pvPortMalloc+0x70>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	b672      	cpsid	i
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	b662      	cpsie	i
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d06b      	beq.n	8007552 <pvPortMalloc+0x14e>
 800747a:	4b44      	ldr	r3, [pc, #272]	; (800758c <pvPortMalloc+0x188>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d866      	bhi.n	8007552 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007484:	4b42      	ldr	r3, [pc, #264]	; (8007590 <pvPortMalloc+0x18c>)
 8007486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007488:	4b41      	ldr	r3, [pc, #260]	; (8007590 <pvPortMalloc+0x18c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800748e:	e004      	b.n	800749a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d903      	bls.n	80074ac <pvPortMalloc+0xa8>
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f1      	bne.n	8007490 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074ac:	4b35      	ldr	r3, [pc, #212]	; (8007584 <pvPortMalloc+0x180>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d04d      	beq.n	8007552 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2208      	movs	r2, #8
 80074bc:	4413      	add	r3, r2
 80074be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1ad2      	subs	r2, r2, r3
 80074d0:	2308      	movs	r3, #8
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d921      	bls.n	800751c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <pvPortMalloc+0x100>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	b672      	cpsid	i
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	b662      	cpsie	i
 80074fe:	613b      	str	r3, [r7, #16]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 f8fe 	bl	8007718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800751c:	4b1b      	ldr	r3, [pc, #108]	; (800758c <pvPortMalloc+0x188>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a19      	ldr	r2, [pc, #100]	; (800758c <pvPortMalloc+0x188>)
 8007528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752a:	4b18      	ldr	r3, [pc, #96]	; (800758c <pvPortMalloc+0x188>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <pvPortMalloc+0x190>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d203      	bcs.n	800753e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007536:	4b15      	ldr	r3, [pc, #84]	; (800758c <pvPortMalloc+0x188>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a16      	ldr	r2, [pc, #88]	; (8007594 <pvPortMalloc+0x190>)
 800753c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b11      	ldr	r3, [pc, #68]	; (8007588 <pvPortMalloc+0x184>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007552:	f7fe fbeb 	bl	8005d2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00c      	beq.n	800757a <pvPortMalloc+0x176>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <pvPortMalloc+0x174>
	return pvReturn;
 800757a:	69fb      	ldr	r3, [r7, #28]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3728      	adds	r7, #40	; 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20008e90 	.word	0x20008e90
 8007588:	20008e9c 	.word	0x20008e9c
 800758c:	20008e94 	.word	0x20008e94
 8007590:	20008e88 	.word	0x20008e88
 8007594:	20008e98 	.word	0x20008e98

08007598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d04c      	beq.n	8007644 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075aa:	2308      	movs	r3, #8
 80075ac:	425b      	negs	r3, r3
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4413      	add	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	4b23      	ldr	r3, [pc, #140]	; (800764c <vPortFree+0xb4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10c      	bne.n	80075e0 <vPortFree+0x48>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	b672      	cpsid	i
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	b662      	cpsie	i
 80075da:	60fb      	str	r3, [r7, #12]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00c      	beq.n	8007602 <vPortFree+0x6a>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	b672      	cpsid	i
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	b662      	cpsie	i
 80075fc:	60bb      	str	r3, [r7, #8]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	4b11      	ldr	r3, [pc, #68]	; (800764c <vPortFree+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d019      	beq.n	8007644 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d115      	bne.n	8007644 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <vPortFree+0xb4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	43db      	mvns	r3, r3
 8007622:	401a      	ands	r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007628:	f7fe fb72 	bl	8005d10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b07      	ldr	r3, [pc, #28]	; (8007650 <vPortFree+0xb8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4413      	add	r3, r2
 8007636:	4a06      	ldr	r2, [pc, #24]	; (8007650 <vPortFree+0xb8>)
 8007638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f000 f86c 	bl	8007718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007640:	f7fe fb74 	bl	8005d2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007644:	bf00      	nop
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20008e9c 	.word	0x20008e9c
 8007650:	20008e94 	.word	0x20008e94

08007654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800765a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800765e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007660:	4b27      	ldr	r3, [pc, #156]	; (8007700 <prvHeapInit+0xac>)
 8007662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3307      	adds	r3, #7
 8007672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <prvHeapInit+0xac>)
 8007684:	4413      	add	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800768c:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <prvHeapInit+0xb0>)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007692:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <prvHeapInit+0xb0>)
 8007694:	2200      	movs	r2, #0
 8007696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076a0:	2208      	movs	r2, #8
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <prvHeapInit+0xb4>)
 80076b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <prvHeapInit+0xb4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2200      	movs	r2, #0
 80076bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <prvHeapInit+0xb4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076d4:	4b0c      	ldr	r3, [pc, #48]	; (8007708 <prvHeapInit+0xb4>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4a0a      	ldr	r2, [pc, #40]	; (800770c <prvHeapInit+0xb8>)
 80076e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4a09      	ldr	r2, [pc, #36]	; (8007710 <prvHeapInit+0xbc>)
 80076ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <prvHeapInit+0xc0>)
 80076ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20001188 	.word	0x20001188
 8007704:	20008e88 	.word	0x20008e88
 8007708:	20008e90 	.word	0x20008e90
 800770c:	20008e98 	.word	0x20008e98
 8007710:	20008e94 	.word	0x20008e94
 8007714:	20008e9c 	.word	0x20008e9c

08007718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <prvInsertBlockIntoFreeList+0xac>)
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e002      	b.n	800772c <prvInsertBlockIntoFreeList+0x14>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d8f7      	bhi.n	8007726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	4413      	add	r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d108      	bne.n	800775a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d118      	bne.n	80077a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d00d      	beq.n	8007796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	e008      	b.n	80077a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e003      	b.n	80077a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d002      	beq.n	80077b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20008e88 	.word	0x20008e88
 80077c8:	20008e90 	.word	0x20008e90

080077cc <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 80077d2:	f000 f9bd 	bl	8007b50 <csp_get_s>
 80077d6:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 80077d8:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <csp_get_uptime_s+0x2c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 80077e0:	4a05      	ldr	r2, [pc, #20]	; (80077f8 <csp_get_uptime_s+0x2c>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 80077e6:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <csp_get_uptime_s+0x2c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	1ad3      	subs	r3, r2, r3
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20008ea0 	.word	0x20008ea0

080077fc <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff fdfd 	bl	8007404 <pvPortMalloc>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 8007828:	6838      	ldr	r0, [r7, #0]
 800782a:	f7ff ffe7 	bl	80077fc <csp_malloc>
 800782e:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <csp_calloc+0x2c>
		memset(ptr, 0, size);
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	2100      	movs	r1, #0
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f004 f8bf 	bl	800b9be <memset>
	}
	return ptr;
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <csp_free>:

void csp_free(void *ptr) {
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff fea0 	bl	8007598 <vPortFree>
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7fd f961 	bl	8004b38 <xQueueGenericCreate>
 8007876:	4603      	mov	r3, r0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7fd fe01 	bl	8005490 <vQueueDelete>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 80078a8:	2300      	movs	r3, #0
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7fd f9a8 	bl	8004c04 <xQueueGenericSend>
 80078b4:	4603      	mov	r3, r0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 80078ca:	2300      	movs	r3, #0
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7fd fa9d 	bl	8004e10 <xQueueGenericSendFromISR>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7fd fb2a 	bl	8004f50 <xQueueReceive>
 80078fc:	4603      	mov	r3, r0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7fd fd14 	bl	8005344 <xQueueReceiveFromISR>
 800791c:	4603      	mov	r3, r0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fd fd8e 	bl	8005450 <uxQueueMessagesWaiting>
 8007934:	4603      	mov	r3, r0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <csp_bin_sem_create>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
	return csp_bin_sem_post(mutex);
}

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 8007946:	2203      	movs	r2, #3
 8007948:	2100      	movs	r1, #0
 800794a:	2001      	movs	r0, #1
 800794c:	f7fd f8f4 	bl	8004b38 <xQueueGenericCreate>
 8007950:	4602      	mov	r2, r0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d006      	beq.n	800796c <csp_bin_sem_create+0x2e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	2200      	movs	r2, #0
 8007966:	2100      	movs	r1, #0
 8007968:	f7fd f94c 	bl	8004c04 <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 800796c:	2301      	movs	r3, #1
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <csp_bin_sem_remove>:

int csp_bin_sem_remove(csp_bin_sem_handle_t * sem) {
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
	if ((sem != NULL) && (*sem != NULL)) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <csp_bin_sem_remove+0x20>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <csp_bin_sem_remove+0x20>
		vSemaphoreDelete(*sem);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4618      	mov	r0, r3
 8007992:	f7fd fd7d 	bl	8005490 <vQueueDelete>
	}
	return CSP_SEMAPHORE_OK;
 8007996:	2301      	movs	r3, #1
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <csp_bin_sem_wait>:

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 80079aa:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <csp_bin_sem_wait+0x44>)
 80079ac:	799b      	ldrb	r3, [r3, #6]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <csp_bin_sem_wait+0x1c>
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	490c      	ldr	r1, [pc, #48]	; (80079e8 <csp_bin_sem_wait+0x48>)
 80079b6:	2006      	movs	r0, #6
 80079b8:	f000 fe88 	bl	80086cc <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fd fba7 	bl	800511c <xQueueSemaphoreTake>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000014 	.word	0x20000014
 80079e8:	0800e6b0 	.word	0x0800e6b0

080079ec <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 80079f4:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <csp_bin_sem_post+0x3c>)
 80079f6:	799b      	ldrb	r3, [r3, #6]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <csp_bin_sem_post+0x1a>
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	490b      	ldr	r1, [pc, #44]	; (8007a2c <csp_bin_sem_post+0x40>)
 8007a00:	2006      	movs	r0, #6
 8007a02:	f000 fe63 	bl	80086cc <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2100      	movs	r1, #0
 8007a10:	f7fd f8f8 	bl	8004c04 <xQueueGenericSend>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000014 	.word	0x20000014
 8007a2c:	0800e6bc 	.word	0x0800e6bc

08007a30 <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	3b01      	subs	r3, #1
 8007a42:	2b07      	cmp	r3, #7
 8007a44:	d82a      	bhi.n	8007a9c <csp_sys_set_color+0x6c>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <csp_sys_set_color+0x1c>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a6d 	.word	0x08007a6d
 8007a50:	08007a73 	.word	0x08007a73
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a7f 	.word	0x08007a7f
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8b 	.word	0x08007a8b
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	08007a97 	.word	0x08007a97
		case COLOR_BLACK:
			color_code = 30; break;
 8007a6c:	231e      	movs	r3, #30
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e017      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 8007a72:	231f      	movs	r3, #31
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e014      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 8007a78:	2320      	movs	r3, #32
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e011      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 8007a7e:	2321      	movs	r3, #33	; 0x21
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	e00e      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 8007a84:	2322      	movs	r3, #34	; 0x22
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e00b      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 8007a8a:	2323      	movs	r3, #35	; 0x23
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e008      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 8007a90:	2324      	movs	r3, #36	; 0x24
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	e005      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 8007a96:	2325      	movs	r3, #37	; 0x25
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	e002      	b.n	8007aa2 <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007aa8:	2b40      	cmp	r3, #64	; 0x40
 8007aaa:	d013      	beq.n	8007ad4 <csp_sys_set_color+0xa4>
 8007aac:	2b40      	cmp	r3, #64	; 0x40
 8007aae:	dc14      	bgt.n	8007ada <csp_sys_set_color+0xaa>
 8007ab0:	2b30      	cmp	r3, #48	; 0x30
 8007ab2:	d00c      	beq.n	8007ace <csp_sys_set_color+0x9e>
 8007ab4:	2b30      	cmp	r3, #48	; 0x30
 8007ab6:	dc10      	bgt.n	8007ada <csp_sys_set_color+0xaa>
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	d002      	beq.n	8007ac2 <csp_sys_set_color+0x92>
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	d003      	beq.n	8007ac8 <csp_sys_set_color+0x98>
 8007ac0:	e00b      	b.n	8007ada <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]
 8007ac6:	e00b      	b.n	8007ae0 <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	60bb      	str	r3, [r7, #8]
 8007acc:	e008      	b.n	8007ae0 <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	e005      	b.n	8007ae0 <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	60bb      	str	r3, [r7, #8]
 8007ad8:	e002      	b.n	8007ae0 <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	4803      	ldr	r0, [pc, #12]	; (8007af4 <csp_sys_set_color+0xc4>)
 8007ae6:	f004 fc87 	bl	800c3f8 <iprintf>
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	0800e6c8 	.word	0x0800e6c8

08007af8 <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f107 0310 	add.w	r3, r7, #16
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7fd fef2 	bl	8005902 <xTaskCreate>
 8007b1e:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d002      	beq.n	8007b2c <csp_thread_create+0x34>
		return CSP_ERR_NOMEM;
 8007b26:	f04f 33ff 	mov.w	r3, #4294967295
 8007b2a:	e006      	b.n	8007b3a <csp_thread_create+0x42>
	}
	if (return_handle) {
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <csp_thread_create+0x40>
		*return_handle = handle;
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 8007b42:	b580      	push	{r7, lr}
 8007b44:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8007b46:	f7fe f991 	bl	8005e6c <xTaskGetTickCount>
 8007b4a:	4603      	mov	r3, r0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <csp_get_s>:

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
}

uint32_t csp_get_s(void) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 8007b54:	f7fe f98a 	bl	8005e6c <xTaskGetTickCount>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	4a03      	ldr	r2, [pc, #12]	; (8007b68 <csp_get_s+0x18>)
 8007b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b60:	099b      	lsrs	r3, r3, #6
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	10624dd3 	.word	0x10624dd3

08007b6c <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 8007b72:	f000 f9a5 	bl	8007ec0 <csp_buffer_size>
 8007b76:	4603      	mov	r3, r0
 8007b78:	330b      	adds	r3, #11
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 8007b80:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <csp_buffer_init+0xa4>)
 8007b82:	8adb      	ldrh	r3, [r3, #22]
 8007b84:	461a      	mov	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fe35 	bl	80077fc <csp_malloc>
 8007b92:	4603      	mov	r3, r0
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <csp_buffer_init+0xa8>)
 8007b96:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 8007b98:	4b1e      	ldr	r3, [pc, #120]	; (8007c14 <csp_buffer_init+0xa8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d030      	beq.n	8007c02 <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 8007ba0:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <csp_buffer_init+0xa4>)
 8007ba2:	8adb      	ldrh	r3, [r3, #22]
 8007ba4:	2104      	movs	r1, #4
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fe5a 	bl	8007860 <csp_queue_create>
 8007bac:	4603      	mov	r3, r0
 8007bae:	4a1a      	ldr	r2, [pc, #104]	; (8007c18 <csp_buffer_init+0xac>)
 8007bb0:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 8007bb2:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <csp_buffer_init+0xac>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d01f      	beq.n	8007bfa <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e014      	b.n	8007bea <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 8007bc0:	4b14      	ldr	r3, [pc, #80]	; (8007c14 <csp_buffer_init+0xa8>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 8007bd6:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <csp_buffer_init+0xac>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	1d39      	adds	r1, r7, #4
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fe59 	bl	8007896 <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3301      	adds	r3, #1
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <csp_buffer_init+0xa4>)
 8007bec:	8adb      	ldrh	r3, [r3, #22]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d3e4      	bcc.n	8007bc0 <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e006      	b.n	8007c08 <csp_buffer_init+0x9c>
		goto fail_queue;
 8007bfa:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 8007bfc:	f000 f80e 	bl	8007c1c <csp_buffer_free_resources>
 8007c00:	e000      	b.n	8007c04 <csp_buffer_init+0x98>
		goto fail_malloc;
 8007c02:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295

}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20008ec8 	.word	0x20008ec8
 8007c14:	20008ea8 	.word	0x20008ea8
 8007c18:	20008ea4 	.word	0x20008ea4

08007c1c <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <csp_buffer_free_resources+0x30>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 8007c28:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <csp_buffer_free_resources+0x30>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff fe27 	bl	8007880 <csp_queue_remove>
		csp_buffers = NULL;
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <csp_buffer_free_resources+0x30>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <csp_buffer_free_resources+0x34>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fe04 	bl	800784a <csp_free>
	csp_buffer_pool = NULL;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <csp_buffer_free_resources+0x34>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

}
 8007c48:	bf00      	nop
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20008ea4 	.word	0x20008ea4
 8007c50:	20008ea8 	.word	0x20008ea8

08007c54 <csp_buffer_get>:
	buffer->refcount = 1;
	return buffer->skbf_data;

}

void *csp_buffer_get(size_t _data_size) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 8007c5c:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <csp_buffer_get+0xa8>)
 8007c5e:	8b1b      	ldrh	r3, [r3, #24]
 8007c60:	461a      	mov	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d90c      	bls.n	8007c82 <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <csp_buffer_get+0xac>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d006      	beq.n	8007c7e <csp_buffer_get+0x2a>
 8007c70:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <csp_buffer_get+0xa8>)
 8007c72:	8b1b      	ldrh	r3, [r3, #24]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	4923      	ldr	r1, [pc, #140]	; (8007d04 <csp_buffer_get+0xb0>)
 8007c78:	2000      	movs	r0, #0
 8007c7a:	f000 fd27 	bl	80086cc <do_csp_debug>
		return NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e037      	b.n	8007cf2 <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 8007c86:	4b20      	ldr	r3, [pc, #128]	; (8007d08 <csp_buffer_get+0xb4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f107 010c 	add.w	r1, r7, #12
 8007c8e:	2200      	movs	r2, #0
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff fe25 	bl	80078e0 <csp_queue_dequeue>
	if (buffer == NULL) {
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 8007c9c:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <csp_buffer_get+0xac>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <csp_buffer_get+0x58>
 8007ca4:	4919      	ldr	r1, [pc, #100]	; (8007d0c <csp_buffer_get+0xb8>)
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	f000 fd10 	bl	80086cc <do_csp_debug>
		return NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e020      	b.n	8007cf2 <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d00c      	beq.n	8007cd4 <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <csp_buffer_get+0xac>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d006      	beq.n	8007cd0 <csp_buffer_get+0x7c>
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4911      	ldr	r1, [pc, #68]	; (8007d10 <csp_buffer_get+0xbc>)
 8007cca:	2000      	movs	r0, #0
 8007ccc:	f000 fcfe 	bl	80086cc <do_csp_debug>
		return NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e00e      	b.n	8007cf2 <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <csp_buffer_get+0xac>)
 8007cd6:	78db      	ldrb	r3, [r3, #3]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <csp_buffer_get+0x94>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	490c      	ldr	r1, [pc, #48]	; (8007d14 <csp_buffer_get+0xc0>)
 8007ce2:	2003      	movs	r0, #3
 8007ce4:	f000 fcf2 	bl	80086cc <do_csp_debug>

	buffer->refcount = 1;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3308      	adds	r3, #8
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20008ec8 	.word	0x20008ec8
 8007d00:	20000014 	.word	0x20000014
 8007d04:	0800e6d4 	.word	0x0800e6d4
 8007d08:	20008ea4 	.word	0x20008ea4
 8007d0c:	0800e710 	.word	0x0800e710
 8007d10:	0800e724 	.word	0x0800e724
 8007d14:	0800e748 	.word	0x0800e748

08007d18 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d023      	beq.n	8007d6e <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3b08      	subs	r3, #8
 8007d2a:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11d      	bne.n	8007d72 <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d11a      	bne.n	8007d76 <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d018      	beq.n	8007d7a <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	3a01      	subs	r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d113      	bne.n	8007d7e <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <csp_buffer_free_isr+0x70>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f107 0208 	add.w	r2, r7, #8
 8007d62:	f107 010c 	add.w	r1, r7, #12
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fda9 	bl	80078be <csp_queue_enqueue_isr>
 8007d6c:	e008      	b.n	8007d80 <csp_buffer_free_isr+0x68>
		return;
 8007d6e:	bf00      	nop
 8007d70:	e006      	b.n	8007d80 <csp_buffer_free_isr+0x68>
		return;
 8007d72:	bf00      	nop
 8007d74:	e004      	b.n	8007d80 <csp_buffer_free_isr+0x68>
		return;
 8007d76:	bf00      	nop
 8007d78:	e002      	b.n	8007d80 <csp_buffer_free_isr+0x68>
		return;
 8007d7a:	bf00      	nop
 8007d7c:	e000      	b.n	8007d80 <csp_buffer_free_isr+0x68>
		return;
 8007d7e:	bf00      	nop

}
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20008ea4 	.word	0x20008ea4

08007d8c <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d055      	beq.n	8007e46 <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3b08      	subs	r3, #8
 8007d9e:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 8007daa:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <csp_buffer_free+0xd4>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d04b      	beq.n	8007e4a <csp_buffer_free+0xbe>
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	492b      	ldr	r1, [pc, #172]	; (8007e64 <csp_buffer_free+0xd8>)
 8007db6:	2000      	movs	r0, #0
 8007db8:	f000 fc88 	bl	80086cc <do_csp_debug>
		return;
 8007dbc:	e045      	b.n	8007e4a <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d009      	beq.n	8007ddc <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 8007dc8:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <csp_buffer_free+0xd4>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d03e      	beq.n	8007e4e <csp_buffer_free+0xc2>
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4925      	ldr	r1, [pc, #148]	; (8007e68 <csp_buffer_free+0xdc>)
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f000 fc79 	bl	80086cc <do_csp_debug>
		return;
 8007dda:	e038      	b.n	8007e4e <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 8007de4:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <csp_buffer_free+0xd4>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d032      	beq.n	8007e52 <csp_buffer_free+0xc6>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	461a      	mov	r2, r3
 8007df0:	491e      	ldr	r1, [pc, #120]	; (8007e6c <csp_buffer_free+0xe0>)
 8007df2:	2000      	movs	r0, #0
 8007df4:	f000 fc6a 	bl	80086cc <do_csp_debug>
		return;
 8007df8:	e02b      	b.n	8007e52 <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 8007e08:	4b15      	ldr	r3, [pc, #84]	; (8007e60 <csp_buffer_free+0xd4>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d022      	beq.n	8007e56 <csp_buffer_free+0xca>
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4916      	ldr	r1, [pc, #88]	; (8007e70 <csp_buffer_free+0xe4>)
 8007e18:	2000      	movs	r0, #0
 8007e1a:	f000 fc57 	bl	80086cc <do_csp_debug>
		return;
 8007e1e:	e01a      	b.n	8007e56 <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 8007e20:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <csp_buffer_free+0xd4>)
 8007e22:	78db      	ldrb	r3, [r3, #3]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <csp_buffer_free+0xa8>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4911      	ldr	r1, [pc, #68]	; (8007e74 <csp_buffer_free+0xe8>)
 8007e2e:	2003      	movs	r0, #3
 8007e30:	f000 fc4c 	bl	80086cc <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 8007e34:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <csp_buffer_free+0xec>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f107 010c 	add.w	r1, r7, #12
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff fd29 	bl	8007896 <csp_queue_enqueue>
 8007e44:	e008      	b.n	8007e58 <csp_buffer_free+0xcc>
		return;
 8007e46:	bf00      	nop
 8007e48:	e006      	b.n	8007e58 <csp_buffer_free+0xcc>
		return;
 8007e4a:	bf00      	nop
 8007e4c:	e004      	b.n	8007e58 <csp_buffer_free+0xcc>
		return;
 8007e4e:	bf00      	nop
 8007e50:	e002      	b.n	8007e58 <csp_buffer_free+0xcc>
		return;
 8007e52:	bf00      	nop
 8007e54:	e000      	b.n	8007e58 <csp_buffer_free+0xcc>
		return;
 8007e56:	bf00      	nop

}
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000014 	.word	0x20000014
 8007e64:	0800e750 	.word	0x0800e750
 8007e68:	0800e778 	.word	0x0800e778
 8007e6c:	0800e79c 	.word	0x0800e79c
 8007e70:	0800e7bc 	.word	0x0800e7bc
 8007e74:	0800e7e0 	.word	0x0800e7e0
 8007e78:	20008ea4 	.word	0x20008ea4

08007e7c <csp_buffer_clone>:

void *csp_buffer_clone(void *buffer) {
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]

	csp_packet_t *packet = (csp_packet_t *) buffer;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60fb      	str	r3, [r7, #12]
	if (!packet) {
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <csp_buffer_clone+0x16>
		return NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e011      	b.n	8007eb6 <csp_buffer_clone+0x3a>
	}

	csp_packet_t *clone = csp_buffer_get(packet->length);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	895b      	ldrh	r3, [r3, #10]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fedc 	bl	8007c54 <csp_buffer_get>
 8007e9c:	60b8      	str	r0, [r7, #8]
	if (clone) {
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d007      	beq.n	8007eb4 <csp_buffer_clone+0x38>
		memcpy(clone, packet, csp_buffer_size());
 8007ea4:	f000 f80c 	bl	8007ec0 <csp_buffer_size>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	68f9      	ldr	r1, [r7, #12]
 8007eae:	68b8      	ldr	r0, [r7, #8]
 8007eb0:	f003 fd77 	bl	800b9a2 <memcpy>
	}

	return clone;
 8007eb4:	68bb      	ldr	r3, [r7, #8]

}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 8007ec4:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <csp_buffer_size+0x14>)
 8007ec6:	8b1b      	ldrh	r3, [r3, #24]
 8007ec8:	3310      	adds	r3, #16
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	20008ec8 	.word	0x20008ec8

08007ed8 <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 8007ed8:	b480      	push	{r7}
 8007eda:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 8007edc:	4b03      	ldr	r3, [pc, #12]	; (8007eec <csp_buffer_data_size+0x14>)
 8007ede:	8b1b      	ldrh	r3, [r3, #24]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20008ec8 	.word	0x20008ec8

08007ef0 <csp_conn_check_timeouts>:
static uint8_t sport;

/* Source port lock */
static csp_bin_sem_handle_t sport_lock;

void csp_conn_check_timeouts(void) {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
#if (CSP_USE_RDP)
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
 8007efa:	e022      	b.n	8007f42 <csp_conn_check_timeouts+0x52>
		if (arr_conn[i].state == CONN_OPEN) {
 8007efc:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <csp_conn_check_timeouts+0x68>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2154      	movs	r1, #84	; 0x54
 8007f04:	fb01 f303 	mul.w	r3, r1, r3
 8007f08:	4413      	add	r3, r2
 8007f0a:	785b      	ldrb	r3, [r3, #1]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d115      	bne.n	8007f3c <csp_conn_check_timeouts+0x4c>
			if (arr_conn[i].idin.flags & CSP_FRDP) {
 8007f10:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <csp_conn_check_timeouts+0x68>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2154      	movs	r1, #84	; 0x54
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	791b      	ldrb	r3, [r3, #4]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d009      	beq.n	8007f3c <csp_conn_check_timeouts+0x4c>
				csp_rdp_check_timeouts(&arr_conn[i]);
 8007f28:	4b0b      	ldr	r3, [pc, #44]	; (8007f58 <csp_conn_check_timeouts+0x68>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2154      	movs	r1, #84	; 0x54
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f002 fb0e 	bl	800a558 <csp_rdp_check_timeouts>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	607b      	str	r3, [r7, #4]
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <csp_conn_check_timeouts+0x6c>)
 8007f44:	7c1b      	ldrb	r3, [r3, #16]
 8007f46:	461a      	mov	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	dbd6      	blt.n	8007efc <csp_conn_check_timeouts+0xc>
			}
		}
	}
#endif
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20008eac 	.word	0x20008eac
 8007f5c:	20008ec8 	.word	0x20008ec8

08007f60 <csp_conn_get_rxq>:

int csp_conn_get_rxq(int prio) {
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 8007f68:	2300      	movs	r3, #0
#endif

}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
	...

08007f78 <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]

	if (!conn)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 8007f88:	f06f 0301 	mvn.w	r3, #1
 8007f8c:	e039      	b.n	8008002 <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	7bdb      	ldrb	r3, [r3, #15]
 8007f98:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff ffde 	bl	8007f60 <csp_conn_get_rxq>
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	e001      	b.n	8007fac <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4639      	mov	r1, r7
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fc6a 	bl	8007896 <csp_queue_enqueue>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d01b      	beq.n	8008000 <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <csp_conn_enqueue_packet+0x94>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d014      	beq.n	8007ffa <csp_conn_enqueue_packet+0x82>
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3302      	adds	r3, #2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	685c      	ldr	r4, [r3, #4]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff fc9c 	bl	8007926 <csp_queue_size>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4907      	ldr	r1, [pc, #28]	; (8008010 <csp_conn_enqueue_packet+0x98>)
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f000 fb69 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffe:	e000      	b.n	8008002 <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	bd90      	pop	{r4, r7, pc}
 800800a:	bf00      	nop
 800800c:	20000014 	.word	0x20000014
 8008010:	0800e7ec 	.word	0x0800e7ec

08008014 <csp_conn_init>:

int csp_conn_init(void) {
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 800801a:	4b55      	ldr	r3, [pc, #340]	; (8008170 <csp_conn_init+0x15c>)
 800801c:	7c1b      	ldrb	r3, [r3, #16]
 800801e:	2154      	movs	r1, #84	; 0x54
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fbf7 	bl	8007814 <csp_calloc>
 8008026:	4603      	mov	r3, r0
 8008028:	4a52      	ldr	r2, [pc, #328]	; (8008174 <csp_conn_init+0x160>)
 800802a:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 800802c:	4b51      	ldr	r3, [pc, #324]	; (8008174 <csp_conn_init+0x160>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10d      	bne.n	8008050 <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 8008034:	4b50      	ldr	r3, [pc, #320]	; (8008178 <csp_conn_init+0x164>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <csp_conn_init+0x36>
 800803c:	4b4c      	ldr	r3, [pc, #304]	; (8008170 <csp_conn_init+0x15c>)
 800803e:	7c1b      	ldrb	r3, [r3, #16]
 8008040:	461a      	mov	r2, r3
 8008042:	494e      	ldr	r1, [pc, #312]	; (800817c <csp_conn_init+0x168>)
 8008044:	2000      	movs	r0, #0
 8008046:	f000 fb41 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800804a:	f04f 33ff 	mov.w	r3, #4294967295
 800804e:	e08b      	b.n	8008168 <csp_conn_init+0x154>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 8008050:	484b      	ldr	r0, [pc, #300]	; (8008180 <csp_conn_init+0x16c>)
 8008052:	f7ff fc74 	bl	800793e <csp_bin_sem_create>
 8008056:	4603      	mov	r3, r0
 8008058:	2b01      	cmp	r3, #1
 800805a:	d00a      	beq.n	8008072 <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 800805c:	4b46      	ldr	r3, [pc, #280]	; (8008178 <csp_conn_init+0x164>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <csp_conn_init+0x58>
 8008064:	4947      	ldr	r1, [pc, #284]	; (8008184 <csp_conn_init+0x170>)
 8008066:	2000      	movs	r0, #0
 8008068:	f000 fb30 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800806c:	f04f 33ff 	mov.w	r3, #4294967295
 8008070:	e07a      	b.n	8008168 <csp_conn_init+0x154>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 8008072:	f7ff fd66 	bl	8007b42 <csp_get_ms>
 8008076:	4603      	mov	r3, r0
 8008078:	4618      	mov	r0, r3
 800807a:	f004 fa4b 	bl	800c514 <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 800807e:	f004 fa77 	bl	800c570 <rand>
 8008082:	4602      	mov	r2, r0
 8008084:	4b3a      	ldr	r3, [pc, #232]	; (8008170 <csp_conn_init+0x15c>)
 8008086:	7cdb      	ldrb	r3, [r3, #19]
 8008088:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800808c:	fb92 f1f3 	sdiv	r1, r2, r3
 8008090:	fb01 f303 	mul.w	r3, r1, r3
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	b2da      	uxtb	r2, r3
 8008098:	4b35      	ldr	r3, [pc, #212]	; (8008170 <csp_conn_init+0x15c>)
 800809a:	7cdb      	ldrb	r3, [r3, #19]
 800809c:	4413      	add	r3, r2
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	3301      	adds	r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	4b38      	ldr	r3, [pc, #224]	; (8008188 <csp_conn_init+0x174>)
 80080a6:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 80080a8:	4838      	ldr	r0, [pc, #224]	; (800818c <csp_conn_init+0x178>)
 80080aa:	f7ff fc48 	bl	800793e <csp_bin_sem_create>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d00a      	beq.n	80080ca <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 80080b4:	4b30      	ldr	r3, [pc, #192]	; (8008178 <csp_conn_init+0x164>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <csp_conn_init+0xb0>
 80080bc:	4934      	ldr	r1, [pc, #208]	; (8008190 <csp_conn_init+0x17c>)
 80080be:	2000      	movs	r0, #0
 80080c0:	f000 fb04 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295
 80080c8:	e04e      	b.n	8008168 <csp_conn_init+0x154>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e044      	b.n	800815a <csp_conn_init+0x146>
		csp_conn_t * conn = &arr_conn[i];
 80080d0:	4b28      	ldr	r3, [pc, #160]	; (8008174 <csp_conn_init+0x160>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2154      	movs	r1, #84	; 0x54
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	4413      	add	r3, r2
 80080de:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80080e0:	2300      	movs	r3, #0
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	e022      	b.n	800812c <csp_conn_init+0x118>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 80080e6:	4b22      	ldr	r3, [pc, #136]	; (8008170 <csp_conn_init+0x15c>)
 80080e8:	7c5b      	ldrb	r3, [r3, #17]
 80080ea:	2104      	movs	r1, #4
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff fbb7 	bl	8007860 <csp_queue_create>
 80080f2:	4601      	mov	r1, r0
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	3302      	adds	r3, #2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	3302      	adds	r3, #2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <csp_conn_init+0x112>
				csp_log_error("rx_queue = csp_queue_create() failed");
 8008110:	4b19      	ldr	r3, [pc, #100]	; (8008178 <csp_conn_init+0x164>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <csp_conn_init+0x10c>
 8008118:	491e      	ldr	r1, [pc, #120]	; (8008194 <csp_conn_init+0x180>)
 800811a:	2000      	movs	r0, #0
 800811c:	f000 fad6 	bl	80086cc <do_csp_debug>
				return CSP_ERR_NOMEM;
 8008120:	f04f 33ff 	mov.w	r3, #4294967295
 8008124:	e020      	b.n	8008168 <csp_conn_init+0x154>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	3301      	adds	r3, #1
 800812a:	60bb      	str	r3, [r7, #8]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	ddd9      	ble.n	80080e6 <csp_conn_init+0xd2>
			return CSP_ERR_NOMEM;
		}
#endif

#if (CSP_USE_RDP)
		if (csp_rdp_init(conn) != CSP_ERR_NONE) {
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f003 f99c 	bl	800b470 <csp_rdp_init>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <csp_conn_init+0x140>
			csp_log_error("csp_rdp_allocate(conn) failed");
 800813e:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <csp_conn_init+0x164>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <csp_conn_init+0x13a>
 8008146:	4914      	ldr	r1, [pc, #80]	; (8008198 <csp_conn_init+0x184>)
 8008148:	2000      	movs	r0, #0
 800814a:	f000 fabf 	bl	80086cc <do_csp_debug>
			return CSP_ERR_NOMEM;
 800814e:	f04f 33ff 	mov.w	r3, #4294967295
 8008152:	e009      	b.n	8008168 <csp_conn_init+0x154>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <csp_conn_init+0x15c>)
 800815c:	7c1b      	ldrb	r3, [r3, #16]
 800815e:	461a      	mov	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4293      	cmp	r3, r2
 8008164:	dbb4      	blt.n	80080d0 <csp_conn_init+0xbc>
		}
#endif
	}

	return CSP_ERR_NONE;
 8008166:	2300      	movs	r3, #0

}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20008ec8 	.word	0x20008ec8
 8008174:	20008eac 	.word	0x20008eac
 8008178:	20000014 	.word	0x20000014
 800817c:	0800e80c 	.word	0x0800e80c
 8008180:	20008eb0 	.word	0x20008eb0
 8008184:	0800e834 	.word	0x0800e834
 8008188:	20008eb4 	.word	0x20008eb4
 800818c:	20008eb8 	.word	0x20008eb8
 8008190:	0800e85c 	.word	0x0800e85c
 8008194:	0800e884 	.word	0x0800e884
 8008198:	0800e8ac 	.word	0x0800e8ac

0800819c <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	4013      	ands	r3, r2
 80081ac:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	e01b      	b.n	80081ec <csp_conn_find+0x50>
		csp_conn_t * conn = &arr_conn[i];
 80081b4:	4b14      	ldr	r3, [pc, #80]	; (8008208 <csp_conn_find+0x6c>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2154      	movs	r1, #84	; 0x54
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d10c      	bne.n	80081e6 <csp_conn_find+0x4a>
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d108      	bne.n	80081e6 <csp_conn_find+0x4a>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	4013      	ands	r3, r2
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d101      	bne.n	80081e6 <csp_conn_find+0x4a>
			return conn;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	e009      	b.n	80081fa <csp_conn_find+0x5e>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	4b07      	ldr	r3, [pc, #28]	; (800820c <csp_conn_find+0x70>)
 80081ee:	7c1b      	ldrb	r3, [r3, #16]
 80081f0:	461a      	mov	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4293      	cmp	r3, r2
 80081f6:	dbdd      	blt.n	80081b4 <csp_conn_find+0x18>
		}
	}

	return NULL;
 80081f8:	2300      	movs	r3, #0

}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20008eac 	.word	0x20008eac
 800820c:	20008ec8 	.word	0x20008ec8

08008210 <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	e018      	b.n	8008250 <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff fdb0 	bl	8007d8c <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3302      	adds	r3, #2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	2200      	movs	r2, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fb4e 	bl	80078e0 <csp_queue_dequeue>
 8008244:	4603      	mov	r3, r0
 8008246:	2b01      	cmp	r3, #1
 8008248:	d0e9      	beq.n	800821e <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3301      	adds	r3, #1
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	ddea      	ble.n	800822c <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 8008256:	2300      	movs	r3, #0

}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800826a:	f04f 31ff 	mov.w	r1, #4294967295
 800826e:	4837      	ldr	r0, [pc, #220]	; (800834c <csp_conn_allocate+0xec>)
 8008270:	f7ff fb96 	bl	80079a0 <csp_bin_sem_wait>
 8008274:	4603      	mov	r3, r0
 8008276:	2b01      	cmp	r3, #1
 8008278:	d009      	beq.n	800828e <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 800827a:	4b35      	ldr	r3, [pc, #212]	; (8008350 <csp_conn_allocate+0xf0>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <csp_conn_allocate+0x2a>
 8008282:	4934      	ldr	r1, [pc, #208]	; (8008354 <csp_conn_allocate+0xf4>)
 8008284:	2000      	movs	r0, #0
 8008286:	f000 fa21 	bl	80086cc <do_csp_debug>
		return NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	e05a      	b.n	8008344 <csp_conn_allocate+0xe4>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 8008292:	4b31      	ldr	r3, [pc, #196]	; (8008358 <csp_conn_allocate+0xf8>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e018      	b.n	80082d0 <csp_conn_allocate+0x70>
		i = (i + 1) % csp_conf.conn_max;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3301      	adds	r3, #1
 80082a2:	4a2e      	ldr	r2, [pc, #184]	; (800835c <csp_conn_allocate+0xfc>)
 80082a4:	7c12      	ldrb	r2, [r2, #16]
 80082a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80082aa:	fb01 f202 	mul.w	r2, r1, r2
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 80082b2:	4b2b      	ldr	r3, [pc, #172]	; (8008360 <csp_conn_allocate+0x100>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2154      	movs	r1, #84	; 0x54
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	4413      	add	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <csp_conn_allocate+0x7e>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	4b22      	ldr	r3, [pc, #136]	; (800835c <csp_conn_allocate+0xfc>)
 80082d2:	7c1b      	ldrb	r3, [r3, #16]
 80082d4:	461a      	mov	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4293      	cmp	r3, r2
 80082da:	dbe0      	blt.n	800829e <csp_conn_allocate+0x3e>
 80082dc:	e000      	b.n	80082e0 <csp_conn_allocate+0x80>
			break;
 80082de:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01a      	beq.n	800831c <csp_conn_allocate+0xbc>
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d116      	bne.n	800831c <csp_conn_allocate+0xbc>
		conn->idin.ext = 0;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2200      	movs	r2, #0
 80082f2:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2200      	movs	r2, #0
 80082f8:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2200      	movs	r2, #0
 80082fe:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	615a      	str	r2, [r3, #20]
		conn->type = type;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	79fa      	ldrb	r2, [r7, #7]
 800830a:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2201      	movs	r2, #1
 8008310:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	4b10      	ldr	r3, [pc, #64]	; (8008358 <csp_conn_allocate+0xf8>)
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	e001      	b.n	8008320 <csp_conn_allocate+0xc0>
	} else {
		// no free connections
		conn = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 8008320:	480a      	ldr	r0, [pc, #40]	; (800834c <csp_conn_allocate+0xec>)
 8008322:	f7ff fb63 	bl	80079ec <csp_bin_sem_post>

	if (conn == NULL) {
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <csp_conn_allocate+0xe2>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 800832c:	4b08      	ldr	r3, [pc, #32]	; (8008350 <csp_conn_allocate+0xf0>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d006      	beq.n	8008342 <csp_conn_allocate+0xe2>
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <csp_conn_allocate+0xfc>)
 8008336:	7c1b      	ldrb	r3, [r3, #16]
 8008338:	461a      	mov	r2, r3
 800833a:	490a      	ldr	r1, [pc, #40]	; (8008364 <csp_conn_allocate+0x104>)
 800833c:	2000      	movs	r0, #0
 800833e:	f000 f9c5 	bl	80086cc <do_csp_debug>
	}

	return conn;
 8008342:	697b      	ldr	r3, [r7, #20]

}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20008eb0 	.word	0x20008eb0
 8008350:	20000014 	.word	0x20000014
 8008354:	0800e8cc 	.word	0x0800e8cc
 8008358:	20008ebc 	.word	0x20008ebc
 800835c:	20008ec8 	.word	0x20008ec8
 8008360:	20008eac 	.word	0x20008eac
 8008364:	0800e8e8 	.word	0x0800e8e8

08008368 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 8008372:	2000      	movs	r0, #0
 8008374:	f7ff ff74 	bl	8008260 <csp_conn_allocate>
 8008378:	60f8      	str	r0, [r7, #12]

	if (conn) {
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00d      	beq.n	800839c <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 800838c:	f7ff fbd9 	bl	8007b42 <csp_get_ms>
 8008390:	4602      	mov	r2, r0
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff ff3a 	bl	8008210 <csp_conn_flush_rx_queue>
	}

	return conn;
 800839c:	68fb      	ldr	r3, [r7, #12]

}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <csp_close>:

int csp_close(csp_conn_t * conn) {
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 80083ae:	2101      	movs	r1, #1
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f805 	bl	80083c0 <csp_conn_close>
 80083b6:	4603      	mov	r3, r0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e060      	b.n	8008498 <csp_conn_close+0xd8>
	}

	if (conn->state == CONN_CLOSED) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 80083de:	4b30      	ldr	r3, [pc, #192]	; (80084a0 <csp_conn_close+0xe0>)
 80083e0:	795b      	ldrb	r3, [r3, #5]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <csp_conn_close+0x2e>
 80083e6:	492f      	ldr	r1, [pc, #188]	; (80084a4 <csp_conn_close+0xe4>)
 80083e8:	2005      	movs	r0, #5
 80083ea:	f000 f96f 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NONE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e052      	b.n	8008498 <csp_conn_close+0xd8>
	}

#if (CSP_USE_RDP)
	/* Ensure RDP knows this connection is closing */
	if ((conn->idin.flags & CSP_FRDP) || (conn->idout.flags & CSP_FRDP)) {
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d105      	bne.n	800840a <csp_conn_close+0x4a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7a1b      	ldrb	r3, [r3, #8]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <csp_conn_close+0x60>
		if (csp_rdp_close(conn, closed_by) == CSP_ERR_AGAIN) {
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f003 f8b2 	bl	800b578 <csp_rdp_close>
 8008414:	4603      	mov	r3, r0
 8008416:	f113 0f0c 	cmn.w	r3, #12
 800841a:	d101      	bne.n	8008420 <csp_conn_close+0x60>
			return CSP_ERR_NONE;
 800841c:	2300      	movs	r3, #0
 800841e:	e03b      	b.n	8008498 <csp_conn_close+0xd8>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 8008420:	f04f 31ff 	mov.w	r1, #4294967295
 8008424:	4820      	ldr	r0, [pc, #128]	; (80084a8 <csp_conn_close+0xe8>)
 8008426:	f7ff fabb 	bl	80079a0 <csp_bin_sem_wait>
 800842a:	4603      	mov	r3, r0
 800842c:	2b01      	cmp	r3, #1
 800842e:	d00a      	beq.n	8008446 <csp_conn_close+0x86>
		csp_log_error("Failed to lock conn array");
 8008430:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <csp_conn_close+0xe0>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <csp_conn_close+0x80>
 8008438:	491c      	ldr	r1, [pc, #112]	; (80084ac <csp_conn_close+0xec>)
 800843a:	2000      	movs	r0, #0
 800843c:	f000 f946 	bl	80086cc <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 8008440:	f06f 0302 	mvn.w	r3, #2
 8008444:	e028      	b.n	8008498 <csp_conn_close+0xd8>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff fedf 	bl	8008210 <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d011      	beq.n	800847e <csp_conn_close+0xbe>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d10d      	bne.n	800847e <csp_conn_close+0xbe>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f403 5388 	and.w	r3, r3, #4352	; 0x1100
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <csp_conn_close+0xbe>
		csp_queue_remove(conn->socket);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fa04 	bl	8007880 <csp_queue_remove>
		conn->socket = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]
        }

	/* Reset RDP state */
#if (CSP_USE_RDP)
	if (conn->idin.flags & CSP_FRDP) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <csp_conn_close+0xd0>
		csp_rdp_flush_all(conn);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 ff8a 	bl	800a3a4 <csp_rdp_flush_all>
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 8008490:	4805      	ldr	r0, [pc, #20]	; (80084a8 <csp_conn_close+0xe8>)
 8008492:	f7ff faab 	bl	80079ec <csp_bin_sem_post>

	return CSP_ERR_NONE;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000014 	.word	0x20000014
 80084a4:	0800e904 	.word	0x0800e904
 80084a8:	20008eb0 	.word	0x20008eb0
 80084ac:	0800e8cc 	.word	0x0800e8cc

080084b0 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint8_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4603      	mov	r3, r0
 80084ba:	71fb      	strb	r3, [r7, #7]
 80084bc:	460b      	mov	r3, r1
 80084be:	71bb      	strb	r3, [r7, #6]
 80084c0:	4613      	mov	r3, r2
 80084c2:	717b      	strb	r3, [r7, #5]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 80084c4:	4b7a      	ldr	r3, [pc, #488]	; (80086b0 <csp_connect+0x200>)
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	6a3a      	ldr	r2, [r7, #32]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	623b      	str	r3, [r7, #32]

	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	f362 1387 	bfi	r3, r2, #6, #2
 80084dc:	73fb      	strb	r3, [r7, #15]
	incoming_id.dst = csp_conf.address;
 80084de:	4b74      	ldr	r3, [pc, #464]	; (80086b0 <csp_connect+0x200>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 031f 	and.w	r3, r3, #31
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	f362 1308 	bfi	r3, r2, #4, #5
 80084ee:	81fb      	strh	r3, [r7, #14]
	incoming_id.src = dest;
 80084f0:	79bb      	ldrb	r3, [r7, #6]
 80084f2:	f003 031f 	and.w	r3, r3, #31
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	f362 0345 	bfi	r3, r2, #1, #5
 80084fe:	73fb      	strb	r3, [r7, #15]
	incoming_id.sport = dport;
 8008500:	797b      	ldrb	r3, [r7, #5]
 8008502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008506:	b2da      	uxtb	r2, r3
 8008508:	7b7b      	ldrb	r3, [r7, #13]
 800850a:	f362 0305 	bfi	r3, r2, #0, #6
 800850e:	737b      	strb	r3, [r7, #13]
	incoming_id.flags = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	733b      	strb	r3, [r7, #12]
	outgoing_id.pri = prio;
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	b2da      	uxtb	r2, r3
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	f362 1387 	bfi	r3, r2, #6, #2
 8008522:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dst = dest;
 8008524:	79bb      	ldrb	r3, [r7, #6]
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	b2da      	uxtb	r2, r3
 800852c:	897b      	ldrh	r3, [r7, #10]
 800852e:	f362 1308 	bfi	r3, r2, #4, #5
 8008532:	817b      	strh	r3, [r7, #10]
	outgoing_id.src = csp_conf.address;
 8008534:	4b5e      	ldr	r3, [pc, #376]	; (80086b0 <csp_connect+0x200>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	b2da      	uxtb	r2, r3
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	f362 0345 	bfi	r3, r2, #1, #5
 8008544:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dport = dport;
 8008546:	797b      	ldrb	r3, [r7, #5]
 8008548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800854c:	b2da      	uxtb	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f362 3393 	bfi	r3, r2, #14, #6
 8008554:	60bb      	str	r3, [r7, #8]
	outgoing_id.flags = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	723b      	strb	r3, [r7, #8]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <csp_connect+0xbc>
		opts &= ~CSP_O_CRC32;
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800856a:	623b      	str	r3, [r7, #32]
	}

	if (opts & CSP_O_RDP) {
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <csp_connect+0xda>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
 8008576:	7b3b      	ldrb	r3, [r7, #12]
 8008578:	f043 0302 	orr.w	r3, r3, #2
 800857c:	b2db      	uxtb	r3, r3
 800857e:	733b      	strb	r3, [r7, #12]
		outgoing_id.flags |= CSP_FRDP;
 8008580:	7a3b      	ldrb	r3, [r7, #8]
 8008582:	f043 0302 	orr.w	r3, r3, #2
 8008586:	b2db      	uxtb	r3, r3
 8008588:	723b      	strb	r3, [r7, #8]
		csp_log_error("Attempt to create RDP connection, but CSP was compiled without RDP support");
		return NULL;
#endif
	}

	if (opts & CSP_O_HMAC) {
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d009      	beq.n	80085a8 <csp_connect+0xf8>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_log_error("Attempt to create HMAC authenticated connection, but CSP was compiled without HMAC support");
 8008594:	4b47      	ldr	r3, [pc, #284]	; (80086b4 <csp_connect+0x204>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <csp_connect+0xf4>
 800859c:	4946      	ldr	r1, [pc, #280]	; (80086b8 <csp_connect+0x208>)
 800859e:	2000      	movs	r0, #0
 80085a0:	f000 f894 	bl	80086cc <do_csp_debug>
		return NULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e07f      	b.n	80086a8 <csp_connect+0x1f8>
#endif
	}

	if (opts & CSP_O_XTEA) {
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	f003 0310 	and.w	r3, r3, #16
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d009      	beq.n	80085c6 <csp_connect+0x116>
#if (CSP_USE_XTEA)
		outgoing_id.flags |= CSP_FXTEA;
		incoming_id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted connection, but CSP was compiled without XTEA support");
 80085b2:	4b40      	ldr	r3, [pc, #256]	; (80086b4 <csp_connect+0x204>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <csp_connect+0x112>
 80085ba:	4940      	ldr	r1, [pc, #256]	; (80086bc <csp_connect+0x20c>)
 80085bc:	2000      	movs	r0, #0
 80085be:	f000 f885 	bl	80086cc <do_csp_debug>
		return NULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e070      	b.n	80086a8 <csp_connect+0x1f8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d009      	beq.n	80085e4 <csp_connect+0x134>
#if (CSP_USE_CRC32)
		outgoing_id.flags |= CSP_FCRC32;
		incoming_id.flags |= CSP_FCRC32;
#else
		csp_log_error("Attempt to create CRC32 validated connection, but CSP was compiled without CRC32 support");
 80085d0:	4b38      	ldr	r3, [pc, #224]	; (80086b4 <csp_connect+0x204>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <csp_connect+0x130>
 80085d8:	4939      	ldr	r1, [pc, #228]	; (80086c0 <csp_connect+0x210>)
 80085da:	2000      	movs	r0, #0
 80085dc:	f000 f876 	bl	80086cc <do_csp_debug>
		return NULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e061      	b.n	80086a8 <csp_connect+0x1f8>
#endif
	}

	/* Find an unused ephemeral port */
	csp_conn_t * conn = NULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]

	/* Wait for sport lock - note that csp_conn_new(..) is called inside the lock! */
	if (csp_bin_sem_wait(&sport_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 80085e8:	f04f 31ff 	mov.w	r1, #4294967295
 80085ec:	4835      	ldr	r0, [pc, #212]	; (80086c4 <csp_connect+0x214>)
 80085ee:	f7ff f9d7 	bl	80079a0 <csp_bin_sem_wait>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d001      	beq.n	80085fc <csp_connect+0x14c>
		return NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e055      	b.n	80086a8 <csp_connect+0x1f8>
	}

	const uint8_t start = sport;
 80085fc:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <csp_connect+0x218>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	74fb      	strb	r3, [r7, #19]
	while (++sport != start) {
 8008602:	e02a      	b.n	800865a <csp_connect+0x1aa>
		if (sport > CSP_ID_PORT_MAX)
 8008604:	4b30      	ldr	r3, [pc, #192]	; (80086c8 <csp_connect+0x218>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b3f      	cmp	r3, #63	; 0x3f
 800860a:	d905      	bls.n	8008618 <csp_connect+0x168>
			sport = csp_conf.port_max_bind + 1;
 800860c:	4b28      	ldr	r3, [pc, #160]	; (80086b0 <csp_connect+0x200>)
 800860e:	7cdb      	ldrb	r3, [r3, #19]
 8008610:	3301      	adds	r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	4b2c      	ldr	r3, [pc, #176]	; (80086c8 <csp_connect+0x218>)
 8008616:	701a      	strb	r2, [r3, #0]

		outgoing_id.sport = sport;
 8008618:	4b2b      	ldr	r3, [pc, #172]	; (80086c8 <csp_connect+0x218>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008620:	b2da      	uxtb	r2, r3
 8008622:	7a7b      	ldrb	r3, [r7, #9]
 8008624:	f362 0305 	bfi	r3, r2, #0, #6
 8008628:	727b      	strb	r3, [r7, #9]
		incoming_id.dport = sport;
 800862a:	4b27      	ldr	r3, [pc, #156]	; (80086c8 <csp_connect+0x218>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008632:	b2da      	uxtb	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f362 3393 	bfi	r3, r2, #14, #6
 800863a:	60fb      	str	r3, [r7, #12]

		/* Match on destination port of _incoming_ identifier */
		if (csp_conn_find(incoming_id.ext, CSP_ID_DPORT_MASK) == NULL) {
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f44f 217c 	mov.w	r1, #1032192	; 0xfc000
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fdaa 	bl	800819c <csp_conn_find>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <csp_connect+0x1aa>
			/* Break - we found an unused ephemeral port
                           allocate connection while locked to mark port in use */
			conn = csp_conn_new(incoming_id, outgoing_id);
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff fe89 	bl	8008368 <csp_conn_new>
 8008656:	6178      	str	r0, [r7, #20]
			break;
 8008658:	e00a      	b.n	8008670 <csp_connect+0x1c0>
	while (++sport != start) {
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <csp_connect+0x218>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	b2da      	uxtb	r2, r3
 8008662:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <csp_connect+0x218>)
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <csp_connect+0x218>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	7cfa      	ldrb	r2, [r7, #19]
 800866c:	429a      	cmp	r2, r3
 800866e:	d1c9      	bne.n	8008604 <csp_connect+0x154>
		}
	}

	/* Post sport lock */
	csp_bin_sem_post(&sport_lock);
 8008670:	4814      	ldr	r0, [pc, #80]	; (80086c4 <csp_connect+0x214>)
 8008672:	f7ff f9bb 	bl	80079ec <csp_bin_sem_post>

	if (conn == NULL) {
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <csp_connect+0x1d0>
		return NULL;
 800867c:	2300      	movs	r3, #0
 800867e:	e013      	b.n	80086a8 <csp_connect+0x1f8>
	}

	/* Set connection options */
	conn->opts = opts;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	6a3a      	ldr	r2, [r7, #32]
 8008684:	619a      	str	r2, [r3, #24]

#if (CSP_USE_RDP)
	/* Call Transport Layer connect */
	if (outgoing_id.flags & CSP_FRDP) {
 8008686:	7a3b      	ldrb	r3, [r7, #8]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <csp_connect+0x1f6>
		/* If the transport layer has failed to connect
		 * deallocate connection structure again and return NULL */
		if (csp_rdp_connect(conn) != CSP_ERR_NONE) {
 8008690:	6978      	ldr	r0, [r7, #20]
 8008692:	f002 fce9 	bl	800b068 <csp_rdp_connect>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <csp_connect+0x1f6>
			csp_close(conn);
 800869c:	6978      	ldr	r0, [r7, #20]
 800869e:	f7ff fe82 	bl	80083a6 <csp_close>
			return NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	e000      	b.n	80086a8 <csp_connect+0x1f8>
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 80086a6:	697b      	ldr	r3, [r7, #20]

}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20008ec8 	.word	0x20008ec8
 80086b4:	20000014 	.word	0x20000014
 80086b8:	0800e918 	.word	0x0800e918
 80086bc:	0800e974 	.word	0x0800e974
 80086c0:	0800e9cc 	.word	0x0800e9cc
 80086c4:	20008eb8 	.word	0x20008eb8
 80086c8:	20008eb4 	.word	0x20008eb4

080086cc <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 80086cc:	b40e      	push	{r1, r2, r3}
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	4603      	mov	r3, r0
 80086d6:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 80086d8:	23f0      	movs	r3, #240	; 0xf0
 80086da:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	2b06      	cmp	r3, #6
 80086e0:	d84f      	bhi.n	8008782 <do_csp_debug+0xb6>
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	4a2b      	ldr	r2, [pc, #172]	; (8008794 <do_csp_debug+0xc8>)
 80086e6:	5cd3      	ldrb	r3, [r2, r3]
 80086e8:	f083 0301 	eor.w	r3, r3, #1
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d147      	bne.n	8008782 <do_csp_debug+0xb6>
		return;

	switch(level) {
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	2b06      	cmp	r3, #6
 80086f6:	d846      	bhi.n	8008786 <do_csp_debug+0xba>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <do_csp_debug+0x34>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008723 	.word	0x08008723
 8008704:	08008729 	.word	0x08008729
 8008708:	0800871d 	.word	0x0800871d
 800870c:	0800872f 	.word	0x0800872f
 8008710:	08008735 	.word	0x08008735
 8008714:	0800873b 	.word	0x0800873b
 8008718:	08008741 	.word	0x08008741
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 800871c:	2313      	movs	r3, #19
 800871e:	60fb      	str	r3, [r7, #12]
		break;
 8008720:	e011      	b.n	8008746 <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 8008722:	2312      	movs	r3, #18
 8008724:	60fb      	str	r3, [r7, #12]
		break;
 8008726:	e00e      	b.n	8008746 <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 8008728:	2314      	movs	r3, #20
 800872a:	60fb      	str	r3, [r7, #12]
		break;
 800872c:	e00b      	b.n	8008746 <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 800872e:	2306      	movs	r3, #6
 8008730:	60fb      	str	r3, [r7, #12]
		break;
 8008732:	e008      	b.n	8008746 <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 8008734:	2303      	movs	r3, #3
 8008736:	60fb      	str	r3, [r7, #12]
		break;
 8008738:	e005      	b.n	8008746 <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 800873a:	2305      	movs	r3, #5
 800873c:	60fb      	str	r3, [r7, #12]
		break;
 800873e:	e002      	b.n	8008746 <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 8008740:	2307      	movs	r3, #7
 8008742:	60fb      	str	r3, [r7, #12]
		break;
 8008744:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 8008746:	f107 0320 	add.w	r3, r7, #32
 800874a:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 800874c:	4b12      	ldr	r3, [pc, #72]	; (8008798 <do_csp_debug+0xcc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 8008754:	4b10      	ldr	r3, [pc, #64]	; (8008798 <do_csp_debug+0xcc>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	79f8      	ldrb	r0, [r7, #7]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	69f9      	ldr	r1, [r7, #28]
 800875e:	4798      	blx	r3
 8008760:	e012      	b.n	8008788 <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff f962 	bl	8007a30 <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	69f8      	ldr	r0, [r7, #28]
 8008770:	f004 f830 	bl	800c7d4 <viprintf>
#endif
		printf("\r\n");
 8008774:	4809      	ldr	r0, [pc, #36]	; (800879c <do_csp_debug+0xd0>)
 8008776:	f003 fec5 	bl	800c504 <puts>
		csp_sys_set_color(COLOR_RESET);
 800877a:	20f0      	movs	r0, #240	; 0xf0
 800877c:	f7ff f958 	bl	8007a30 <csp_sys_set_color>
 8008780:	e002      	b.n	8008788 <do_csp_debug+0xbc>
		return;
 8008782:	bf00      	nop
 8008784:	e000      	b.n	8008788 <do_csp_debug+0xbc>
		return;
 8008786:	bf00      	nop
	}

	va_end(args);
}
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008790:	b003      	add	sp, #12
 8008792:	4770      	bx	lr
 8008794:	20000014 	.word	0x20000014
 8008798:	20008ec0 	.word	0x20008ec0
 800879c:	0800ea7c 	.word	0x0800ea7c

080087a0 <csp_debug_set_level>:

void csp_debug_set_level(csp_debug_level_t level, bool value) {
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	460a      	mov	r2, r1
 80087aa:	71fb      	strb	r3, [r7, #7]
 80087ac:	4613      	mov	r3, r2
 80087ae:	71bb      	strb	r3, [r7, #6]

	if (level <= CSP_LOCK) {
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b06      	cmp	r3, #6
 80087b4:	d803      	bhi.n	80087be <csp_debug_set_level+0x1e>
		csp_debug_level_enabled[level] = value;
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	4904      	ldr	r1, [pc, #16]	; (80087cc <csp_debug_set_level+0x2c>)
 80087ba:	79ba      	ldrb	r2, [r7, #6]
 80087bc:	54ca      	strb	r2, [r1, r3]
	}
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	20000014 	.word	0x20000014

080087d0 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	0a1b      	lsrs	r3, r3, #8
 80087de:	b29b      	uxth	r3, r3
 80087e0:	b21a      	sxth	r2, r3
			((h16 & 0x00ff) << 8));
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	021b      	lsls	r3, r3, #8
	return (((h16 & 0xff00) >> 8) |
 80087e6:	b21b      	sxth	r3, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b21b      	sxth	r3, r3
 80087ec:	b29b      	uxth	r3, r3
#endif
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	4603      	mov	r3, r0
 8008802:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff ffe2 	bl	80087d0 <csp_hton16>
 800880c:	4603      	mov	r3, r0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 8008826:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			((h32 & 0x000000ff) << 24) |
 8008830:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	0a1b      	lsrs	r3, r3, #8
 8008836:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			((h32 & 0x0000ff00) <<  8) |
 800883a:	4313      	orrs	r3, r2
#endif
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ffe0 	bl	8008816 <csp_hton32>
 8008856:	4603      	mov	r3, r0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <csp_iflist_add+0x70>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d103      	bne.n	800887e <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 8008876:	4a16      	ldr	r2, [pc, #88]	; (80088d0 <csp_iflist_add+0x70>)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	e022      	b.n	80088c4 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <csp_iflist_add+0x70>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	e016      	b.n	80088b8 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d00a      	beq.n	80088a8 <csp_iflist_add+0x48>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	220a      	movs	r2, #10
 800889c:	4619      	mov	r1, r3
 800889e:	f003 ff63 	bl	800c768 <strncasecmp>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d102      	bne.n	80088ae <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 80088a8:	f06f 0306 	mvn.w	r3, #6
 80088ac:	e00b      	b.n	80088c6 <csp_iflist_add+0x66>
			}
			last = i;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b6:	60bb      	str	r3, [r7, #8]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e5      	bne.n	800888a <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	return CSP_ERR_NONE;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20008ec4 	.word	0x20008ec4

080088d4 <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	71fb      	strb	r3, [r7, #7]
 80088e0:	4613      	mov	r3, r2
 80088e2:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 80088e4:	79bb      	ldrb	r3, [r7, #6]
 80088e6:	79f8      	ldrb	r0, [r7, #7]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	2105      	movs	r1, #5
 80088ec:	f000 ff7e 	bl	80097ec <csp_rtable_set>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 8008904:	f7fe ff62 	bl	80077cc <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 8008908:	2220      	movs	r2, #32
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	481b      	ldr	r0, [pc, #108]	; (800897c <csp_init+0x80>)
 800890e:	f003 f848 	bl	800b9a2 <memcpy>

	int ret = csp_buffer_init();
 8008912:	f7ff f92b 	bl	8007b6c <csp_buffer_init>
 8008916:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <csp_init+0x26>
		return ret;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	e027      	b.n	8008972 <csp_init+0x76>
	}

	ret = csp_conn_init();
 8008922:	f7ff fb77 	bl	8008014 <csp_conn_init>
 8008926:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <csp_init+0x36>
		return ret;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	e01f      	b.n	8008972 <csp_init+0x76>
	}

	ret = csp_port_init();
 8008932:	f000 f9d1 	bl	8008cd8 <csp_port_init>
 8008936:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <csp_init+0x46>
		return ret;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	e017      	b.n	8008972 <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 8008942:	f000 f9e3 	bl	8008d0c <csp_qfifo_init>
 8008946:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <csp_init+0x56>
		return ret;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	e00f      	b.n	8008972 <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 8008952:	480b      	ldr	r0, [pc, #44]	; (8008980 <csp_init+0x84>)
 8008954:	f7ff ff84 	bl	8008860 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8008958:	4b08      	ldr	r3, [pc, #32]	; (800897c <csp_init+0x80>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	22ff      	movs	r2, #255	; 0xff
 800895e:	4908      	ldr	r1, [pc, #32]	; (8008980 <csp_init+0x84>)
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff ffb7 	bl	80088d4 <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8008966:	22ff      	movs	r2, #255	; 0xff
 8008968:	4905      	ldr	r1, [pc, #20]	; (8008980 <csp_init+0x84>)
 800896a:	2020      	movs	r0, #32
 800896c:	f7ff ffb2 	bl	80088d4 <csp_route_set>

	return CSP_ERR_NONE;
 8008970:	2300      	movs	r3, #0

}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20008ec8 	.word	0x20008ec8
 8008980:	2000001c 	.word	0x2000001c

08008984 <csp_read>:

	return NULL;

}

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <csp_read+0x1c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	785b      	ldrb	r3, [r3, #1]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d001      	beq.n	80089a4 <csp_read+0x20>
		return NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	e02b      	b.n	80089fc <csp_read+0x78>
	}

#if (CSP_USE_RDP)
        // RDP: timeout can either be 0 (for no hang poll/check) or minimum the "connection timeout"
        if (timeout && (conn->idin.flags & CSP_FRDP) && (timeout < conn->rdp.conn_timeout)) {
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <csp_read+0x42>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	791b      	ldrb	r3, [r3, #4]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d007      	beq.n	80089c6 <csp_read+0x42>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d202      	bcs.n	80089c6 <csp_read+0x42>
            timeout = conn->rdp.conn_timeout;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	603b      	str	r3, [r7, #0]
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f107 010c 	add.w	r1, r7, #12
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe ff85 	bl	80078e0 <csp_queue_dequeue>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d001      	beq.n	80089e0 <csp_read+0x5c>
		return NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	e00d      	b.n	80089fc <csp_read+0x78>
	}
#endif

#if (CSP_USE_RDP)
	/* Packet read could trigger ACK transmission */
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	791b      	ldrb	r3, [r3, #4]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d006      	beq.n	80089fa <csp_read+0x76>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <csp_read+0x76>
		csp_rdp_check_ack(conn);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 fd51 	bl	800a49c <csp_rdp_check_ack>
	}
#endif

	return packet;
 80089fa:	68fb      	ldr	r3, [r7, #12]

}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 8008a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a06:	b08f      	sub	sp, #60	; 0x3c
 8008a08:	af08      	add	r7, sp, #32
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d109      	bne.n	8008a2c <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 8008a18:	4b66      	ldr	r3, [pc, #408]	; (8008bb4 <csp_send_direct+0x1b0>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80c0 	beq.w	8008ba2 <csp_send_direct+0x19e>
 8008a22:	4965      	ldr	r1, [pc, #404]	; (8008bb8 <csp_send_direct+0x1b4>)
 8008a24:	2000      	movs	r0, #0
 8008a26:	f7ff fe51 	bl	80086cc <do_csp_debug>
		goto err;
 8008a2a:	e0ba      	b.n	8008ba2 <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10f      	bne.n	8008a52 <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 8008a32:	4b60      	ldr	r3, [pc, #384]	; (8008bb4 <csp_send_direct+0x1b0>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80b5 	beq.w	8008ba6 <csp_send_direct+0x1a2>
 8008a3c:	89fb      	ldrh	r3, [r7, #14]
 8008a3e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	495c      	ldr	r1, [pc, #368]	; (8008bbc <csp_send_direct+0x1b8>)
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	f7ff fe3e 	bl	80086cc <do_csp_debug>
		goto err;
 8008a50:	e0a9      	b.n	8008ba6 <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 8008a58:	4b56      	ldr	r3, [pc, #344]	; (8008bb4 <csp_send_direct+0x1b0>)
 8008a5a:	791b      	ldrb	r3, [r3, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d037      	beq.n	8008ad0 <csp_send_direct+0xcc>
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	469c      	mov	ip, r3
 8008a6a:	89fb      	ldrh	r3, [r7, #14]
 8008a6c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	469e      	mov	lr, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	7b7b      	ldrb	r3, [r7, #13]
 8008a80:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	4618      	mov	r0, r3
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	461c      	mov	r4, r3
 8008a92:	7b3b      	ldrb	r3, [r7, #12]
 8008a94:	461d      	mov	r5, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	895b      	ldrh	r3, [r3, #10]
 8008a9a:	461e      	mov	r6, r3
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	7912      	ldrb	r2, [r2, #4]
 8008aa4:	2aff      	cmp	r2, #255	; 0xff
 8008aa6:	d002      	beq.n	8008aae <csp_send_direct+0xaa>
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7912      	ldrb	r2, [r2, #4]
 8008aac:	e003      	b.n	8008ab6 <csp_send_direct+0xb2>
 8008aae:	89fa      	ldrh	r2, [r7, #14]
 8008ab0:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8008ab4:	b2d2      	uxtb	r2, r2
 8008ab6:	9206      	str	r2, [sp, #24]
 8008ab8:	9305      	str	r3, [sp, #20]
 8008aba:	9604      	str	r6, [sp, #16]
 8008abc:	9503      	str	r5, [sp, #12]
 8008abe:	9402      	str	r4, [sp, #8]
 8008ac0:	9001      	str	r0, [sp, #4]
 8008ac2:	9100      	str	r1, [sp, #0]
 8008ac4:	4673      	mov	r3, lr
 8008ac6:	4662      	mov	r2, ip
 8008ac8:	493d      	ldr	r1, [pc, #244]	; (8008bc0 <csp_send_direct+0x1bc>)
 8008aca:	2004      	movs	r0, #4
 8008acc:	f7ff fdfe 	bl	80086cc <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4b38      	ldr	r3, [pc, #224]	; (8008bc4 <csp_send_direct+0x1c0>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d12d      	bne.n	8008b44 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 8008ae8:	7b3b      	ldrb	r3, [r7, #12]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8008af2:	4b30      	ldr	r3, [pc, #192]	; (8008bb4 <csp_send_direct+0x1b0>)
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d046      	beq.n	8008b88 <csp_send_direct+0x184>
 8008afa:	4933      	ldr	r1, [pc, #204]	; (8008bc8 <csp_send_direct+0x1c4>)
 8008afc:	2001      	movs	r0, #1
 8008afe:	f7ff fde5 	bl	80086cc <do_csp_debug>
			goto tx_err;
 8008b02:	e041      	b.n	8008b88 <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 8008b04:	7b3b      	ldrb	r3, [r7, #12]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00c      	beq.n	8008b28 <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 8008b0e:	4b29      	ldr	r3, [pc, #164]	; (8008bb4 <csp_send_direct+0x1b0>)
 8008b10:	785b      	ldrb	r3, [r3, #1]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <csp_send_direct+0x11a>
 8008b16:	492d      	ldr	r1, [pc, #180]	; (8008bcc <csp_send_direct+0x1c8>)
 8008b18:	2001      	movs	r0, #1
 8008b1a:	f7ff fdd7 	bl	80086cc <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 8008b1e:	7b3b      	ldrb	r3, [r7, #12]
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 8008b28:	7b3b      	ldrb	r3, [r7, #12]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d008      	beq.n	8008b44 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8008b32:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <csp_send_direct+0x1b0>)
 8008b34:	785b      	ldrb	r3, [r3, #1]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d028      	beq.n	8008b8c <csp_send_direct+0x188>
 8008b3a:	4925      	ldr	r1, [pc, #148]	; (8008bd0 <csp_send_direct+0x1cc>)
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	f7ff fdc5 	bl	80086cc <do_csp_debug>
			goto tx_err;
 8008b42:	e023      	b.n	8008b8c <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	895b      	ldrh	r3, [r3, #10]
 8008b48:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	8a1b      	ldrh	r3, [r3, #16]
 8008b4e:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 8008b50:	8a3b      	ldrh	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <csp_send_direct+0x15a>
 8008b56:	8a7a      	ldrh	r2, [r7, #18]
 8008b58:	8a3b      	ldrh	r3, [r7, #16]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d818      	bhi.n	8008b90 <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	4798      	blx	r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d112      	bne.n	8008b94 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b7c:	8a7b      	ldrh	r3, [r7, #18]
 8008b7e:	441a      	add	r2, r3
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30
	return CSP_ERR_NONE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	e011      	b.n	8008bac <csp_send_direct+0x1a8>
			goto tx_err;
 8008b88:	bf00      	nop
 8008b8a:	e004      	b.n	8008b96 <csp_send_direct+0x192>
			goto tx_err;
 8008b8c:	bf00      	nop
 8008b8e:	e002      	b.n	8008b96 <csp_send_direct+0x192>
		goto tx_err;
 8008b90:	bf00      	nop
 8008b92:	e000      	b.n	8008b96 <csp_send_direct+0x192>
		goto tx_err;
 8008b94:	bf00      	nop

tx_err:
	ifout->tx_error++;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	61da      	str	r2, [r3, #28]
 8008ba0:	e002      	b.n	8008ba8 <csp_send_direct+0x1a4>
		goto err;
 8008ba2:	bf00      	nop
 8008ba4:	e000      	b.n	8008ba8 <csp_send_direct+0x1a4>
		goto err;
 8008ba6:	bf00      	nop
err:
	return CSP_ERR_TX;
 8008ba8:	f06f 0309 	mvn.w	r3, #9

}
 8008bac:	4618      	mov	r0, r3
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb4:	20000014 	.word	0x20000014
 8008bb8:	0800eba4 	.word	0x0800eba4
 8008bbc:	0800ebcc 	.word	0x0800ebcc
 8008bc0:	0800ebec 	.word	0x0800ebec
 8008bc4:	20008ec8 	.word	0x20008ec8
 8008bc8:	0800ec30 	.word	0x0800ec30
 8008bcc:	0800ec90 	.word	0x0800ec90
 8008bd0:	0800ecf8 	.word	0x0800ecf8

08008bd4 <csp_send>:

int csp_send(csp_conn_t * conn, csp_packet_t * packet, uint32_t timeout) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]

	if ((conn == NULL) || (packet == NULL) || (conn->state != CONN_OPEN)) {
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d006      	beq.n	8008bf4 <csp_send+0x20>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <csp_send+0x20>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	785b      	ldrb	r3, [r3, #1]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d009      	beq.n	8008c08 <csp_send+0x34>
		csp_log_error("Invalid call to csp_send");
 8008bf4:	4b19      	ldr	r3, [pc, #100]	; (8008c5c <csp_send+0x88>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <csp_send+0x30>
 8008bfc:	4918      	ldr	r1, [pc, #96]	; (8008c60 <csp_send+0x8c>)
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f7ff fd64 	bl	80086cc <do_csp_debug>
		return 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e024      	b.n	8008c52 <csp_send+0x7e>
	}

#if (CSP_USE_RDP)
	if (conn->idout.flags & CSP_FRDP) {
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	7a1b      	ldrb	r3, [r3, #8]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <csp_send+0x52>
		if (csp_rdp_send(conn, packet) != CSP_ERR_NONE) {
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f002 fb08 	bl	800b22c <csp_rdp_send>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <csp_send+0x52>
			return 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	e015      	b.n	8008c52 <csp_send+0x7e>
		}
	}
#endif

	int ret = csp_send_direct(conn->idout, packet, csp_rtable_find_route(conn->idout.dst), timeout);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	895b      	ldrh	r3, [r3, #10]
 8008c2a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fe7d 	bl	8009930 <csp_rtable_find_route>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	6880      	ldr	r0, [r0, #8]
 8008c40:	f7ff fee0 	bl	8008a04 <csp_send_direct>
 8008c44:	6178      	str	r0, [r7, #20]

	return (ret == CSP_ERR_NONE) ? 1 : 0;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bf0c      	ite	eq
 8008c4c:	2301      	moveq	r3, #1
 8008c4e:	2300      	movne	r3, #0
 8008c50:	b2db      	uxtb	r3, r3

}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000014 	.word	0x20000014
 8008c60:	0800ed5c 	.word	0x0800ed5c

08008c64 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 8008c6c:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <csp_port_get_socket+0x6c>)
 8008c6e:	7cdb      	ldrb	r3, [r3, #19]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d901      	bls.n	8008c7c <csp_port_get_socket+0x18>
		return NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e022      	b.n	8008cc2 <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 8008c7c:	4b15      	ldr	r3, [pc, #84]	; (8008cd4 <csp_port_get_socket+0x70>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4413      	add	r3, r2
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d106      	bne.n	8008c9a <csp_port_get_socket+0x36>
		return ports[port].socket;
 8008c8c:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <csp_port_get_socket+0x70>)
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	4413      	add	r3, r2
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	e013      	b.n	8008cc2 <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 8008c9a:	4b0e      	ldr	r3, [pc, #56]	; (8008cd4 <csp_port_get_socket+0x70>)
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <csp_port_get_socket+0x6c>)
 8008ca0:	7cdb      	ldrb	r3, [r3, #19]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d108      	bne.n	8008cc0 <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 8008cae:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <csp_port_get_socket+0x70>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <csp_port_get_socket+0x6c>)
 8008cb4:	7cdb      	ldrb	r3, [r3, #19]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4413      	add	r3, r2
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	e000      	b.n	8008cc2 <csp_port_get_socket+0x5e>
	}

	return NULL;
 8008cc0:	2300      	movs	r3, #0

}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20008ec8 	.word	0x20008ec8
 8008cd4:	20008ee8 	.word	0x20008ee8

08008cd8 <csp_port_init>:

int csp_port_init(void) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <csp_port_init+0x2c>)
 8008cde:	7cdb      	ldrb	r3, [r3, #19]
 8008ce0:	3302      	adds	r3, #2
 8008ce2:	2108      	movs	r1, #8
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fe fd95 	bl	8007814 <csp_calloc>
 8008cea:	4603      	mov	r3, r0
 8008cec:	4a06      	ldr	r2, [pc, #24]	; (8008d08 <csp_port_init+0x30>)
 8008cee:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <csp_port_init+0x30>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 8008cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfc:	e000      	b.n	8008d00 <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 8008cfe:	2300      	movs	r3, #0

}
 8008d00:	4618      	mov	r0, r3
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20008ec8 	.word	0x20008ec8
 8008d08:	20008ee8 	.word	0x20008ee8

08008d0c <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8008d12:	2300      	movs	r3, #0
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	e01c      	b.n	8008d52 <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 8008d18:	4a12      	ldr	r2, [pc, #72]	; (8008d64 <csp_qfifo_init+0x58>)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d113      	bne.n	8008d4c <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <csp_qfifo_init+0x5c>)
 8008d26:	7c9b      	ldrb	r3, [r3, #18]
 8008d28:	2108      	movs	r1, #8
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fd98 	bl	8007860 <csp_queue_create>
 8008d30:	4602      	mov	r2, r0
 8008d32:	490c      	ldr	r1, [pc, #48]	; (8008d64 <csp_qfifo_init+0x58>)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <csp_qfifo_init+0x58>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d102      	bne.n	8008d4c <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 8008d46:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4a:	e006      	b.n	8008d5a <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	607b      	str	r3, [r7, #4]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dddf      	ble.n	8008d18 <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8008d58:	2300      	movs	r3, #0

}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20008eec 	.word	0x20008eec
 8008d68:	20008ec8 	.word	0x20008ec8

08008d6c <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 8008d74:	4b08      	ldr	r3, [pc, #32]	; (8008d98 <csp_qfifo_read+0x2c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2264      	movs	r2, #100	; 0x64
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fdaf 	bl	80078e0 <csp_queue_dequeue>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d002      	beq.n	8008d8e <csp_qfifo_read+0x22>
		return CSP_ERR_TIMEDOUT;
 8008d88:	f06f 0302 	mvn.w	r3, #2
 8008d8c:	e000      	b.n	8008d90 <csp_qfifo_read+0x24>
#endif

	return CSP_ERR_NONE;
 8008d8e:	2300      	movs	r3, #0

}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20008eec 	.word	0x20008eec

08008d9c <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d15f      	bne.n	8008e74 <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 8008db4:	4b31      	ldr	r3, [pc, #196]	; (8008e7c <csp_qfifo_write+0xe0>)
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d05b      	beq.n	8008e74 <csp_qfifo_write+0xd8>
 8008dbc:	4930      	ldr	r1, [pc, #192]	; (8008e80 <csp_qfifo_write+0xe4>)
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	f7ff fc84 	bl	80086cc <do_csp_debug>
		}
		return;
 8008dc4:	e056      	b.n	8008e74 <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d115      	bne.n	8008df8 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d107      	bne.n	8008de2 <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <csp_qfifo_write+0xe0>)
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <csp_qfifo_write+0x46>
 8008dda:	492a      	ldr	r1, [pc, #168]	; (8008e84 <csp_qfifo_write+0xe8>)
 8008ddc:	2001      	movs	r0, #1
 8008dde:	f7ff fc75 	bl	80086cc <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7fe ffcf 	bl	8007d8c <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 8008dee:	e042      	b.n	8008e76 <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7fe ff91 	bl	8007d18 <csp_buffer_free_isr>
		return;
 8008df6:	e03e      	b.n	8008e76 <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 8008e0a:	4a1f      	ldr	r2, [pc, #124]	; (8008e88 <csp_qfifo_write+0xec>)
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e12:	f107 0110 	add.w	r1, r7, #16
 8008e16:	2200      	movs	r2, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fd3c 	bl	8007896 <csp_queue_enqueue>
 8008e1e:	61f8      	str	r0, [r7, #28]
 8008e20:	e00a      	b.n	8008e38 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 8008e22:	4a19      	ldr	r2, [pc, #100]	; (8008e88 <csp_qfifo_write+0xec>)
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e2a:	f107 0110 	add.w	r1, r7, #16
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe fd44 	bl	80078be <csp_queue_enqueue_isr>
 8008e36:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d01b      	beq.n	8008e76 <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d107      	bne.n	8008e54 <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 8008e44:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <csp_qfifo_write+0xe0>)
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <csp_qfifo_write+0xb8>
 8008e4c:	490f      	ldr	r1, [pc, #60]	; (8008e8c <csp_qfifo_write+0xf0>)
 8008e4e:	2001      	movs	r0, #1
 8008e50:	f7ff fc3c 	bl	80086cc <do_csp_debug>
		}
		iface->drop++;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	625a      	str	r2, [r3, #36]	; 0x24
		if (pxTaskWoken == NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d103      	bne.n	8008e6c <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7fe ff91 	bl	8007d8c <csp_buffer_free>
 8008e6a:	e004      	b.n	8008e76 <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7fe ff53 	bl	8007d18 <csp_buffer_free_isr>
 8008e72:	e000      	b.n	8008e76 <csp_qfifo_write+0xda>
		return;
 8008e74:	bf00      	nop
	}

}
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20000014 	.word	0x20000014
 8008e80:	0800eed0 	.word	0x0800eed0
 8008e84:	0800eef8 	.word	0x0800eef8
 8008e88:	20008eec 	.word	0x20008eec
 8008e8c:	0800ef24 	.word	0x0800ef24

08008e90 <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	7b1b      	ldrb	r3, [r3, #12]
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00f      	beq.n	8008ec6 <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8008ea6:	4b15      	ldr	r3, [pc, #84]	; (8008efc <csp_route_check_options+0x6c>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <csp_route_check_options+0x26>
 8008eae:	4914      	ldr	r1, [pc, #80]	; (8008f00 <csp_route_check_options+0x70>)
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f7ff fc0b 	bl	80086cc <do_csp_debug>
		iface->autherr++;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 8008ec0:	f06f 0304 	mvn.w	r3, #4
 8008ec4:	e016      	b.n	8008ef4 <csp_route_check_options+0x64>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	7b1b      	ldrb	r3, [r3, #12]
 8008eca:	f003 0308 	and.w	r3, r3, #8
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00f      	beq.n	8008ef2 <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <csp_route_check_options+0x6c>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <csp_route_check_options+0x52>
 8008eda:	490a      	ldr	r1, [pc, #40]	; (8008f04 <csp_route_check_options+0x74>)
 8008edc:	2000      	movs	r0, #0
 8008ede:	f7ff fbf5 	bl	80086cc <do_csp_debug>
		iface->autherr++;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 8008eec:	f06f 0304 	mvn.w	r3, #4
 8008ef0:	e000      	b.n	8008ef4 <csp_route_check_options+0x64>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
		iface->rx_error++;
		return CSP_ERR_NOTSUP;
	}
#endif
	return CSP_ERR_NONE;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000014 	.word	0x20000014
 8008f00:	0800ef58 	.word	0x0800ef58
 8008f04:	0800efb8 	.word	0x0800efb8

08008f08 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7b1b      	ldrb	r3, [r3, #12]
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01a      	beq.n	8008f56 <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	895b      	ldrh	r3, [r3, #10]
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d80f      	bhi.n	8008f48 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 8008f28:	4b21      	ldr	r3, [pc, #132]	; (8008fb0 <csp_route_security_check+0xa8>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <csp_route_security_check+0x30>
 8008f30:	4920      	ldr	r1, [pc, #128]	; (8008fb4 <csp_route_security_check+0xac>)
 8008f32:	2000      	movs	r0, #0
 8008f34:	f7ff fbca 	bl	80086cc <do_csp_debug>
			iface->rx_error++;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 8008f42:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8008f46:	e02f      	b.n	8008fa8 <csp_route_security_check+0xa0>
		}
		packet->length -= sizeof(uint32_t);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	895b      	ldrh	r3, [r3, #10]
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	815a      	strh	r2, [r3, #10]
 8008f54:	e00c      	b.n	8008f70 <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <csp_route_security_check+0xa8>)
 8008f62:	785b      	ldrb	r3, [r3, #1]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <csp_route_security_check+0x68>
 8008f68:	4913      	ldr	r1, [pc, #76]	; (8008fb8 <csp_route_security_check+0xb0>)
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	f7ff fbae 	bl	80086cc <do_csp_debug>
	}
#endif

#if (CSP_USE_RDP)
	/* RDP packet */
	if (!(packet->id.flags & CSP_FRDP)) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7b1b      	ldrb	r3, [r3, #12]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d114      	bne.n	8008fa6 <csp_route_security_check+0x9e>
		if (security_opts & CSP_SO_RDPREQ) {
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00f      	beq.n	8008fa6 <csp_route_security_check+0x9e>
			csp_log_warn("Received packet without RDP header. Discarding packet");
 8008f86:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <csp_route_security_check+0xa8>)
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <csp_route_security_check+0x8e>
 8008f8e:	490b      	ldr	r1, [pc, #44]	; (8008fbc <csp_route_security_check+0xb4>)
 8008f90:	2001      	movs	r0, #1
 8008f92:	f7ff fb9b 	bl	80086cc <do_csp_debug>
			iface->rx_error++;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	621a      	str	r2, [r3, #32]
			return CSP_ERR_INVAL;
 8008fa0:	f06f 0301 	mvn.w	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <csp_route_security_check+0xa0>
		}
	}
#endif

	return CSP_ERR_NONE;
 8008fa6:	2300      	movs	r3, #0

}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000014 	.word	0x20000014
 8008fb4:	0800f010 	.word	0x0800f010
 8008fb8:	0800f03c 	.word	0x0800f03c
 8008fbc:	0800f098 	.word	0x0800f098

08008fc0 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 8008fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fc2:	b091      	sub	sp, #68	; 0x44
 8008fc4:	af06      	add	r7, sp, #24
 8008fc6:	6078      	str	r0, [r7, #4]
	csp_conn_t * conn;
	csp_socket_t * socket;

#if (CSP_USE_RDP)
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
 8008fc8:	f7fe ff92 	bl	8007ef0 <csp_conn_check_timeouts>
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 8008fcc:	f107 0310 	add.w	r3, r7, #16
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7ff fecb 	bl	8008d6c <csp_qfifo_read>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <csp_route_work+0x22>
		return CSP_ERR_TIMEDOUT;
 8008fdc:	f06f 0302 	mvn.w	r3, #2
 8008fe0:	e187      	b.n	80092f2 <csp_route_work+0x332>
	}

	packet = input.packet;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	60fb      	str	r3, [r7, #12]
	if (packet == NULL) {
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <csp_route_work+0x32>
		return CSP_ERR_TIMEDOUT;
 8008fec:	f06f 0302 	mvn.w	r3, #2
 8008ff0:	e17f      	b.n	80092f2 <csp_route_work+0x332>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 8008ff2:	4ba3      	ldr	r3, [pc, #652]	; (8009280 <csp_route_work+0x2c0>)
 8008ff4:	791b      	ldrb	r3, [r3, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d031      	beq.n	800905e <csp_route_work+0x9e>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	7bdb      	ldrb	r3, [r3, #15]
 8008ffe:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009002:	b2db      	uxtb	r3, r3
 8009004:	461e      	mov	r6, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	89db      	ldrh	r3, [r3, #14]
 800900a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800900e:	b2db      	uxtb	r3, r3
 8009010:	469c      	mov	ip, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800901a:	b2db      	uxtb	r3, r3
 800901c:	461a      	mov	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	7b5b      	ldrb	r3, [r3, #13]
 8009022:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8009026:	b2db      	uxtb	r3, r3
 8009028:	4619      	mov	r1, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	7bdb      	ldrb	r3, [r3, #15]
 800902e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4618      	mov	r0, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	7b1b      	ldrb	r3, [r3, #12]
 800903a:	461c      	mov	r4, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	895b      	ldrh	r3, [r3, #10]
 8009040:	461d      	mov	r5, r3
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	9305      	str	r3, [sp, #20]
 8009048:	9504      	str	r5, [sp, #16]
 800904a:	9403      	str	r4, [sp, #12]
 800904c:	9002      	str	r0, [sp, #8]
 800904e:	9101      	str	r1, [sp, #4]
 8009050:	9200      	str	r2, [sp, #0]
 8009052:	4663      	mov	r3, ip
 8009054:	4632      	mov	r2, r6
 8009056:	498b      	ldr	r1, [pc, #556]	; (8009284 <csp_route_work+0x2c4>)
 8009058:	2004      	movs	r0, #4
 800905a:	f7ff fb37 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	3201      	adds	r2, #1
 8009064:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	895b      	ldrh	r3, [r3, #10]
 800906e:	4619      	mov	r1, r3
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	440a      	add	r2, r1
 8009074:	635a      	str	r2, [r3, #52]	; 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	89db      	ldrh	r3, [r3, #14]
 800907a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800907e:	b2db      	uxtb	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	4b81      	ldr	r3, [pc, #516]	; (8009288 <csp_route_work+0x2c8>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d03a      	beq.n	8009100 <csp_route_work+0x140>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	89db      	ldrh	r3, [r3, #14]
 800908e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009092:	b29b      	uxth	r3, r3
 8009094:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8009098:	d032      	beq.n	8009100 <csp_route_work+0x140>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	89db      	ldrh	r3, [r3, #14]
 800909e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 fc43 	bl	8009930 <csp_rtable_find_route>
 80090aa:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <csp_route_work+0x104>
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d109      	bne.n	80090d0 <csp_route_work+0x110>
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	7c9b      	ldrb	r3, [r3, #18]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d105      	bne.n	80090d0 <csp_route_work+0x110>
			csp_buffer_free(packet);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe fe60 	bl	8007d8c <csp_buffer_free>
			return CSP_ERR_NONE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	e110      	b.n	80092f2 <csp_route_work+0x332>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	68f9      	ldr	r1, [r7, #12]
 80090d4:	2300      	movs	r3, #0
 80090d6:	6a3a      	ldr	r2, [r7, #32]
 80090d8:	68c0      	ldr	r0, [r0, #12]
 80090da:	f7ff fc93 	bl	8008a04 <csp_send_direct>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00b      	beq.n	80090fc <csp_route_work+0x13c>
			csp_log_warn("Router failed to send");
 80090e4:	4b66      	ldr	r3, [pc, #408]	; (8009280 <csp_route_work+0x2c0>)
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <csp_route_work+0x134>
 80090ec:	4967      	ldr	r1, [pc, #412]	; (800928c <csp_route_work+0x2cc>)
 80090ee:	2001      	movs	r0, #1
 80090f0:	f7ff faec 	bl	80086cc <do_csp_debug>
			csp_buffer_free(packet);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fe48 	bl	8007d8c <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e0f8      	b.n	80092f2 <csp_route_work+0x332>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fec2 	bl	8008e90 <csp_route_check_options>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <csp_route_work+0x15e>
		csp_buffer_free(packet);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fe39 	bl	8007d8c <csp_buffer_free>
		return CSP_ERR_NONE;
 800911a:	2300      	movs	r3, #0
 800911c:	e0e9      	b.n	80092f2 <csp_route_work+0x332>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff fd9b 	bl	8008c64 <csp_port_get_socket>
 800912e:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d030      	beq.n	8009198 <csp_route_work+0x1d8>
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913e:	2b00      	cmp	r3, #0
 8009140:	d02a      	beq.n	8009198 <csp_route_work+0x1d8>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	6939      	ldr	r1, [r7, #16]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff fedc 	bl	8008f08 <csp_route_security_check>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	da05      	bge.n	8009162 <csp_route_work+0x1a2>
			csp_buffer_free(packet);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe fe17 	bl	8007d8c <csp_buffer_free>
			return CSP_ERR_NONE;
 800915e:	2300      	movs	r3, #0
 8009160:	e0c7      	b.n	80092f2 <csp_route_work+0x332>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f107 010c 	add.w	r1, r7, #12
 800916a:	2200      	movs	r2, #0
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fb92 	bl	8007896 <csp_queue_enqueue>
 8009172:	4603      	mov	r3, r0
 8009174:	2b01      	cmp	r3, #1
 8009176:	d00d      	beq.n	8009194 <csp_route_work+0x1d4>
			csp_log_error("Conn-less socket queue full");
 8009178:	4b41      	ldr	r3, [pc, #260]	; (8009280 <csp_route_work+0x2c0>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <csp_route_work+0x1c8>
 8009180:	4943      	ldr	r1, [pc, #268]	; (8009290 <csp_route_work+0x2d0>)
 8009182:	2000      	movs	r0, #0
 8009184:	f7ff faa2 	bl	80086cc <do_csp_debug>
			csp_buffer_free(packet);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fdfe 	bl	8007d8c <csp_buffer_free>
			return CSP_ERR_NONE;
 8009190:	2300      	movs	r3, #0
 8009192:	e0ae      	b.n	80092f2 <csp_route_work+0x332>
		}
		return CSP_ERR_NONE;
 8009194:	2300      	movs	r3, #0
 8009196:	e0ac      	b.n	80092f2 <csp_route_work+0x332>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	493d      	ldr	r1, [pc, #244]	; (8009294 <csp_route_work+0x2d4>)
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fffc 	bl	800819c <csp_conn_find>
 80091a4:	6278      	str	r0, [r7, #36]	; 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d177      	bne.n	800929c <csp_route_work+0x2dc>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d105      	bne.n	80091be <csp_route_work+0x1fe>
			csp_buffer_free(packet);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fde9 	bl	8007d8c <csp_buffer_free>
			return CSP_ERR_NONE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	e099      	b.n	80092f2 <csp_route_work+0x332>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	6939      	ldr	r1, [r7, #16]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff fe9e 	bl	8008f08 <csp_route_security_check>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da05      	bge.n	80091de <csp_route_work+0x21e>
			csp_buffer_free(packet);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fdd9 	bl	8007d8c <csp_buffer_free>
			return CSP_ERR_NONE;
 80091da:	2300      	movs	r3, #0
 80091dc:	e089      	b.n	80092f2 <csp_route_work+0x332>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	7bdb      	ldrb	r3, [r3, #15]
 80091e2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	f362 1387 	bfi	r3, r2, #6, #2
 80091ee:	72fb      	strb	r3, [r7, #11]
		idout.src   = csp_conf.address;
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <csp_route_work+0x2c8>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 031f 	and.w	r3, r3, #31
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	7afb      	ldrb	r3, [r7, #11]
 80091fc:	f362 0345 	bfi	r3, r2, #1, #5
 8009200:	72fb      	strb	r3, [r7, #11]

		idout.dst   = packet->id.src;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	7bdb      	ldrb	r3, [r3, #15]
 8009206:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800920a:	b2da      	uxtb	r2, r3
 800920c:	897b      	ldrh	r3, [r7, #10]
 800920e:	f362 1308 	bfi	r3, r2, #4, #5
 8009212:	817b      	strh	r3, [r7, #10]
		idout.dport = packet->id.sport;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	7b5b      	ldrb	r3, [r3, #13]
 8009218:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800921c:	b2da      	uxtb	r2, r3
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f362 3393 	bfi	r3, r2, #14, #6
 8009224:	60bb      	str	r3, [r7, #8]
		idout.sport = packet->id.dport;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800922e:	b2da      	uxtb	r2, r3
 8009230:	7a7b      	ldrb	r3, [r7, #9]
 8009232:	f362 0305 	bfi	r3, r2, #0, #6
 8009236:	727b      	strb	r3, [r7, #9]
		idout.flags = packet->id.flags;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	7b1b      	ldrb	r3, [r3, #12]
 800923c:	723b      	strb	r3, [r7, #8]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	68d8      	ldr	r0, [r3, #12]
 8009244:	f7ff f890 	bl	8008368 <csp_conn_new>
 8009248:	6278      	str	r0, [r7, #36]	; 0x24

		if (!conn) {
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10d      	bne.n	800926c <csp_route_work+0x2ac>
			csp_log_error("No more connections available");
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <csp_route_work+0x2c0>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <csp_route_work+0x2a0>
 8009258:	490f      	ldr	r1, [pc, #60]	; (8009298 <csp_route_work+0x2d8>)
 800925a:	2000      	movs	r0, #0
 800925c:	f7ff fa36 	bl	80086cc <do_csp_debug>
			csp_buffer_free(packet);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fd92 	bl	8007d8c <csp_buffer_free>
			return CSP_ERR_NONE;
 8009268:	2300      	movs	r3, #0
 800926a:	e042      	b.n	80092f2 <csp_route_work+0x332>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	619a      	str	r2, [r3, #24]
 800927c:	e01e      	b.n	80092bc <csp_route_work+0x2fc>
 800927e:	bf00      	nop
 8009280:	20000014 	.word	0x20000014
 8009284:	0800f0d0 	.word	0x0800f0d0
 8009288:	20008ec8 	.word	0x20008ec8
 800928c:	0800f110 	.word	0x0800f110
 8009290:	0800f128 	.word	0x0800f128
 8009294:	3fffff00 	.word	0x3fffff00
 8009298:	0800f144 	.word	0x0800f144

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	6939      	ldr	r1, [r7, #16]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fe2f 	bl	8008f08 <csp_route_security_check>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da05      	bge.n	80092bc <csp_route_work+0x2fc>
			csp_buffer_free(packet);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fd6a 	bl	8007d8c <csp_buffer_free>
			return CSP_ERR_NONE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e01a      	b.n	80092f2 <csp_route_work+0x332>

	}

#if (CSP_USE_RDP)
	/* Pass packet to RDP module */
	if (packet->id.flags & CSP_FRDP) {
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	7b1b      	ldrb	r3, [r3, #12]
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00e      	beq.n	80092e6 <csp_route_work+0x326>
		bool close_connection = csp_rdp_new_packet(conn, packet);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ce:	f001 fa71 	bl	800a7b4 <csp_rdp_new_packet>
 80092d2:	4603      	mov	r3, r0
 80092d4:	76fb      	strb	r3, [r7, #27]
		if (close_connection) {
 80092d6:	7efb      	ldrb	r3, [r7, #27]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <csp_route_work+0x322>
			csp_close(conn);
 80092dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092de:	f7ff f862 	bl	80083a6 <csp_close>
		}
		return CSP_ERR_NONE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e005      	b.n	80092f2 <csp_route_work+0x332>
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ec:	f002 f9f4 	bl	800b6d8 <csp_udp_new_packet>
	return CSP_ERR_NONE;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	372c      	adds	r7, #44	; 0x2c
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fa:	bf00      	nop

080092fc <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 8009304:	2064      	movs	r0, #100	; 0x64
 8009306:	f7ff fe5b 	bl	8008fc0 <csp_route_work>
 800930a:	e7fb      	b.n	8009304 <csp_task_router+0x8>

0800930c <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af02      	add	r7, sp, #8
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 8009316:	2300      	movs	r3, #0
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	2300      	movs	r3, #0
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	490c      	ldr	r1, [pc, #48]	; (8009354 <csp_route_start_task+0x48>)
 8009324:	480c      	ldr	r0, [pc, #48]	; (8009358 <csp_route_start_task+0x4c>)
 8009326:	f7fe fbe7 	bl	8007af8 <csp_thread_create>
 800932a:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 8009332:	4b0a      	ldr	r3, [pc, #40]	; (800935c <csp_route_start_task+0x50>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <csp_route_start_task+0x38>
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4908      	ldr	r1, [pc, #32]	; (8009360 <csp_route_start_task+0x54>)
 800933e:	2000      	movs	r0, #0
 8009340:	f7ff f9c4 	bl	80086cc <do_csp_debug>
		return ret;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	e000      	b.n	800934a <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 8009348:	2300      	movs	r3, #0

}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	0800f164 	.word	0x0800f164
 8009358:	080092fd 	.word	0x080092fd
 800935c:	20000014 	.word	0x20000014
 8009360:	0800f168 	.word	0x0800f168

08009364 <csp_ping>:

#include <csp/csp_cmp.h>
#include <csp/csp_endian.h>
#include <csp/arch/csp_time.h>

int csp_ping(uint8_t node, uint32_t timeout, unsigned int size, uint8_t conn_options) {
 8009364:	b580      	push	{r7, lr}
 8009366:	b08c      	sub	sp, #48	; 0x30
 8009368:	af02      	add	r7, sp, #8
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	461a      	mov	r2, r3
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
 8009374:	4613      	mov	r3, r2
 8009376:	73bb      	strb	r3, [r7, #14]

	unsigned int i;
	uint32_t start, time, status = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	623b      	str	r3, [r7, #32]

	/* Counter */
	start = csp_get_ms();
 800937c:	f7fe fbe1 	bl	8007b42 <csp_get_ms>
 8009380:	61b8      	str	r0, [r7, #24]

	/* Open connection */
	csp_conn_t * conn = csp_connect(CSP_PRIO_NORM, node, CSP_PING, timeout, conn_options);
 8009382:	7bbb      	ldrb	r3, [r7, #14]
 8009384:	7bf9      	ldrb	r1, [r7, #15]
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2201      	movs	r2, #1
 800938c:	2002      	movs	r0, #2
 800938e:	f7ff f88f 	bl	80084b0 <csp_connect>
 8009392:	6178      	str	r0, [r7, #20]
	if (conn == NULL)
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <csp_ping+0x3c>
		return -1;
 800939a:	f04f 33ff 	mov.w	r3, #4294967295
 800939e:	e05d      	b.n	800945c <csp_ping+0xf8>

	/* Prepare data */
	csp_packet_t * packet = csp_buffer_get(size);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7fe fc57 	bl	8007c54 <csp_buffer_get>
 80093a6:	61f8      	str	r0, [r7, #28]
	if (packet == NULL)
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d03c      	beq.n	8009428 <csp_ping+0xc4>
		goto out;

	/* Set data to increasing numbers */
	packet->length = size;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	815a      	strh	r2, [r3, #10]
	for (i = 0; i < size; i++)
 80093b6:	2300      	movs	r3, #0
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
 80093ba:	e00a      	b.n	80093d2 <csp_ping+0x6e>
		packet->data[i] = i;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	b2d9      	uxtb	r1, r3
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	4413      	add	r3, r2
 80093c6:	3310      	adds	r3, #16
 80093c8:	460a      	mov	r2, r1
 80093ca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	3301      	adds	r3, #1
 80093d0:	627b      	str	r3, [r7, #36]	; 0x24
 80093d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d3f0      	bcc.n	80093bc <csp_ping+0x58>

	/* Try to send frame */
	if (!csp_send(conn, packet, 0))
 80093da:	2200      	movs	r2, #0
 80093dc:	69f9      	ldr	r1, [r7, #28]
 80093de:	6978      	ldr	r0, [r7, #20]
 80093e0:	f7ff fbf8 	bl	8008bd4 <csp_send>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d020      	beq.n	800942c <csp_ping+0xc8>
		goto out;

	/* Read incoming frame */
	packet = csp_read(conn, timeout);
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	6978      	ldr	r0, [r7, #20]
 80093ee:	f7ff fac9 	bl	8008984 <csp_read>
 80093f2:	61f8      	str	r0, [r7, #28]
	if (packet == NULL)
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01a      	beq.n	8009430 <csp_ping+0xcc>
		goto out;

	/* Ensure that the data was actually echoed */
	for (i = 0; i < size; i++) {
 80093fa:	2300      	movs	r3, #0
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
 80093fe:	e00c      	b.n	800941a <csp_ping+0xb6>
		if (packet->data[i] != i % (0xff + 1)) {
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	4413      	add	r3, r2
 8009406:	3310      	adds	r3, #16
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	b2db      	uxtb	r3, r3
 8009410:	429a      	cmp	r2, r3
 8009412:	d10f      	bne.n	8009434 <csp_ping+0xd0>
	for (i = 0; i < size; i++) {
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	3301      	adds	r3, #1
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	429a      	cmp	r2, r3
 8009420:	d3ee      	bcc.n	8009400 <csp_ping+0x9c>
			goto out;
		}
	}
	status = 1;
 8009422:	2301      	movs	r3, #1
 8009424:	623b      	str	r3, [r7, #32]
 8009426:	e006      	b.n	8009436 <csp_ping+0xd2>
		goto out;
 8009428:	bf00      	nop
 800942a:	e004      	b.n	8009436 <csp_ping+0xd2>
		goto out;
 800942c:	bf00      	nop
 800942e:	e002      	b.n	8009436 <csp_ping+0xd2>
		goto out;
 8009430:	bf00      	nop
 8009432:	e000      	b.n	8009436 <csp_ping+0xd2>
			goto out;
 8009434:	bf00      	nop

out:
	/* Clean up */
	csp_buffer_free(packet);
 8009436:	69f8      	ldr	r0, [r7, #28]
 8009438:	f7fe fca8 	bl	8007d8c <csp_buffer_free>
	csp_close(conn);
 800943c:	6978      	ldr	r0, [r7, #20]
 800943e:	f7fe ffb2 	bl	80083a6 <csp_close>

	/* We have a reply */
	time = (csp_get_ms() - start);
 8009442:	f7fe fb7e 	bl	8007b42 <csp_get_ms>
 8009446:	4602      	mov	r2, r0
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	613b      	str	r3, [r7, #16]

	if (status) {
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <csp_ping+0xf4>
		return time;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	e001      	b.n	800945c <csp_ping+0xf8>
	}

	return -1;
 8009458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800945c:	4618      	mov	r0, r3
 800945e:	3728      	adds	r7, #40	; 0x28
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <csp_can_tx_frame>:
	csp_iface_t iface;
	csp_can_interface_data_t ifdata;
	pthread_t rx_thread;
} can_context_t;

static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b08c      	sub	sp, #48	; 0x30
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	70fb      	strb	r3, [r7, #3]
	if (dlc > 8) {
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	2b08      	cmp	r3, #8
 8009476:	d902      	bls.n	800947e <csp_can_tx_frame+0x1a>
		return CSP_ERR_INVAL;
 8009478:	f06f 0301 	mvn.w	r3, #1
 800947c:	e013      	b.n	80094a6 <csp_can_tx_frame+0x42>
	}

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dlc;
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.IDE = CAN_ID_EXT;
 8009482:	2304      	movs	r3, #4
 8009484:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8009486:	2300      	movs	r3, #0
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.ExtId = id;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	61fb      	str	r3, [r7, #28]
	txHeader.TransmitGlobalTime = DISABLE;
 800948e:	2300      	movs	r3, #0
 8009490:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t canMailBox;
	HAL_CAN_AddTxMessage((CAN_HandleTypeDef *)driver_data, &txHeader, data, &canMailBox);
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	f107 0118 	add.w	r1, r7, #24
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7f8 fc72 	bl	8001d88 <HAL_CAN_AddTxMessage>

	return CSP_ERR_NONE;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3730      	adds	r7, #48	; 0x30
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <csp_can_stm32_open_and_add_interface>:

int csp_can_stm32_open_and_add_interface(const char *ifname, csp_iface_t **return_iface) {
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	if (ifname == NULL) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <csp_can_stm32_open_and_add_interface+0x14>
		ifname = CSP_IF_CAN_DEFAULT_NAME;
 80094c0:	4b1d      	ldr	r3, [pc, #116]	; (8009538 <csp_can_stm32_open_and_add_interface+0x88>)
 80094c2:	607b      	str	r3, [r7, #4]
	}

	can_context_t *ctx = calloc(1, sizeof(*ctx));
 80094c4:	2158      	movs	r1, #88	; 0x58
 80094c6:	2001      	movs	r0, #1
 80094c8:	f002 f946 	bl	800b758 <calloc>
 80094cc:	4603      	mov	r3, r0
 80094ce:	60fb      	str	r3, [r7, #12]
	if (ctx == NULL) {
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d102      	bne.n	80094dc <csp_can_stm32_open_and_add_interface+0x2c>
		return CSP_ERR_NOMEM;
 80094d6:	f04f 33ff 	mov.w	r3, #4294967295
 80094da:	e029      	b.n	8009530 <csp_can_stm32_open_and_add_interface+0x80>
	}

	strncpy(ctx->name, ifname, sizeof(ctx->name) - 1);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	220a      	movs	r2, #10
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f003 f962 	bl	800c7ac <strncpy>
	ctx->iface.name = ctx->name;
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	60da      	str	r2, [r3, #12]
	ctx->iface.interface_data = &ctx->ifdata;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	611a      	str	r2, [r3, #16]
	ctx->iface.driver_data = (*return_iface)->driver_data;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	615a      	str	r2, [r3, #20]
	ctx->ifdata.tx_func = csp_can_tx_frame;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4a0d      	ldr	r2, [pc, #52]	; (800953c <csp_can_stm32_open_and_add_interface+0x8c>)
 8009506:	651a      	str	r2, [r3, #80]	; 0x50

	int res = csp_can_add_interface(&ctx->iface);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	330c      	adds	r3, #12
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f911 	bl	8009734 <csp_can_add_interface>
 8009512:	60b8      	str	r0, [r7, #8]
	if (res != CSP_ERR_NONE) {
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <csp_can_stm32_open_and_add_interface+0x6e>
		return res;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	e008      	b.n	8009530 <csp_can_stm32_open_and_add_interface+0x80>
	}

	if (return_iface) {
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <csp_can_stm32_open_and_add_interface+0x7e>
		*return_iface = &ctx->iface;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f103 020c 	add.w	r2, r3, #12
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	601a      	str	r2, [r3, #0]
	}

	return CSP_ERR_NONE;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	0800f190 	.word	0x0800f190
 800953c:	08009465 	.word	0x08009465

08009540 <csp_can_tx>:
	}

	return CSP_ERR_NONE;
}

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet) {
 8009540:	b590      	push	{r4, r7, lr}
 8009542:	b08f      	sub	sp, #60	; 0x3c
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
	csp_iface_t * iface = ifroute->iface;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	633b      	str	r3, [r7, #48]	; 0x30
	csp_can_interface_data_t * ifdata = iface->interface_data;
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	1c59      	adds	r1, r3, #1
 800955c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955e:	6011      	str	r1, [r2, #0]
 8009560:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
	if (packet->length > MAX_CAN_DATA_SIZE) {
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	895b      	ldrh	r3, [r3, #10]
 8009566:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800956a:	4293      	cmp	r3, r2
 800956c:	d902      	bls.n	8009574 <csp_can_tx+0x34>
		return CSP_ERR_TX;
 800956e:	f06f 0309 	mvn.w	r3, #9
 8009572:	e0db      	b.n	800972c <csp_can_tx+0x1ec>
	}

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	791b      	ldrb	r3, [r3, #4]
 8009578:	2bff      	cmp	r3, #255	; 0xff
 800957a:	d002      	beq.n	8009582 <csp_can_tx+0x42>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	791b      	ldrb	r3, [r3, #4]
 8009580:	e004      	b.n	800958c <csp_can_tx+0x4c>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	89db      	ldrh	r3, [r3, #14]
 8009586:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	7bdb      	ldrb	r3, [r3, #15]
 8009594:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009598:	b2db      	uxtb	r3, r3
 800959a:	061a      	lsls	r2, r3, #24
			CFP_MAKE_DST(dest) |
 800959c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095a0:	04db      	lsls	r3, r3, #19
 80095a2:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 80095a6:	431a      	orrs	r2, r3
			CFP_MAKE_ID(ident) |
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095ae:	431a      	orrs	r2, r3
			CFP_MAKE_TYPE(CFP_BEGIN) |
			CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	895b      	ldrh	r3, [r3, #10]
 80095b4:	3305      	adds	r3, #5
 80095b6:	08db      	lsrs	r3, r3, #3
 80095b8:	029b      	lsls	r3, r3, #10
 80095ba:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 80095be:	4313      	orrs	r3, r2
 80095c0:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 80095c2:	2302      	movs	r3, #2
 80095c4:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	895a      	ldrh	r2, [r3, #10]
 80095ca:	7ffb      	ldrb	r3, [r7, #31]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d803      	bhi.n	80095da <csp_can_tx+0x9a>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	895b      	ldrh	r3, [r3, #10]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	e000      	b.n	80095dc <csp_can_tx+0x9c>
 80095da:	7ffb      	ldrb	r3, [r7, #31]
 80095dc:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff f917 	bl	8008816 <csp_hton32>
 80095e8:	4603      	mov	r3, r0
 80095ea:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	895b      	ldrh	r3, [r3, #10]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff f8ed 	bl	80087d0 <csp_hton16>
 80095f6:	4603      	mov	r3, r0
 80095f8:	827b      	strh	r3, [r7, #18]
 80095fa:	697b      	ldr	r3, [r7, #20]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 80095fc:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 80095fe:	f107 0308 	add.w	r3, r7, #8
 8009602:	3304      	adds	r3, #4
 8009604:	8a7a      	ldrh	r2, [r7, #18]
 8009606:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 8009608:	f107 0308 	add.w	r3, r7, #8
 800960c:	3306      	adds	r3, #6
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	f102 0110 	add.w	r1, r2, #16
 8009614:	7fba      	ldrb	r2, [r7, #30]
 8009616:	4618      	mov	r0, r3
 8009618:	f002 f9c3 	bl	800b9a2 <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 800961c:	7fbb      	ldrb	r3, [r7, #30]
 800961e:	86fb      	strh	r3, [r7, #54]	; 0x36

	const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	6898      	ldr	r0, [r3, #8]
 800962a:	7fbb      	ldrb	r3, [r7, #30]
 800962c:	3306      	adds	r3, #6
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f107 0208 	add.w	r2, r7, #8
 8009634:	69bc      	ldr	r4, [r7, #24]
 8009636:	6a39      	ldr	r1, [r7, #32]
 8009638:	47a0      	blx	r4
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d06c      	beq.n	800971a <csp_can_tx+0x1da>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 800964a:	f06f 030a 	mvn.w	r3, #10
 800964e:	e06d      	b.n	800972c <csp_can_tx+0x1ec>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		while ( ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME0) != CAN_TSR_TME0) &&
 8009650:	bf00      	nop
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800965e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009662:	d011      	beq.n	8009688 <csp_can_tx+0x148>
				    ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME1) != CAN_TSR_TME1) &&
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
		while ( ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME0) != CAN_TSR_TME0) &&
 8009670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009674:	d008      	beq.n	8009688 <csp_can_tx+0x148>
				    ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME2) != CAN_TSR_TME2) ) {
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
				    ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME1) != CAN_TSR_TME1) &&
 8009682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009686:	d1e4      	bne.n	8009652 <csp_can_tx+0x112>
			;
		}


		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	895b      	ldrh	r3, [r3, #10]
 800968c:	461a      	mov	r2, r3
 800968e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b08      	cmp	r3, #8
 8009694:	bfa8      	it	ge
 8009696:	2308      	movge	r3, #8
 8009698:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	7bdb      	ldrb	r3, [r3, #15]
 800969e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	061a      	lsls	r2, r3, #24
				CFP_MAKE_DST(dest) |
 80096a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096aa:	04db      	lsls	r3, r3, #19
 80096ac:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 80096b0:	431a      	orrs	r2, r3
				CFP_MAKE_ID(ident) |
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
				CFP_MAKE_DST(dest) |
 80096b8:	431a      	orrs	r2, r3
				CFP_MAKE_TYPE(CFP_MORE) |
				CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	895b      	ldrh	r3, [r3, #10]
 80096be:	4619      	mov	r1, r3
 80096c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096c2:	1ac9      	subs	r1, r1, r3
 80096c4:	7fbb      	ldrb	r3, [r7, #30]
 80096c6:	1acb      	subs	r3, r1, r3
 80096c8:	3307      	adds	r3, #7
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da00      	bge.n	80096d0 <csp_can_tx+0x190>
 80096ce:	3307      	adds	r3, #7
 80096d0:	10db      	asrs	r3, r3, #3
 80096d2:	029b      	lsls	r3, r3, #10
 80096d4:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
				CFP_MAKE_TYPE(CFP_MORE) |
 80096d8:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 80096da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096de:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 80096e0:	7fbb      	ldrb	r3, [r7, #30]
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096e6:	4413      	add	r3, r2
 80096e8:	86fb      	strh	r3, [r7, #54]	; 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	6898      	ldr	r0, [r3, #8]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	f103 0210 	add.w	r2, r3, #16
 80096f4:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80096f6:	7fbb      	ldrb	r3, [r7, #30]
 80096f8:	1acb      	subs	r3, r1, r3
 80096fa:	441a      	add	r2, r3
 80096fc:	7fbb      	ldrb	r3, [r7, #30]
 80096fe:	69bc      	ldr	r4, [r7, #24]
 8009700:	6a39      	ldr	r1, [r7, #32]
 8009702:	47a0      	blx	r4
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d007      	beq.n	800971a <csp_can_tx+0x1da>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009712:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 8009714:	f06f 030a 	mvn.w	r3, #10
 8009718:	e008      	b.n	800972c <csp_can_tx+0x1ec>
	while (tx_count < packet->length) {
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	895b      	ldrh	r3, [r3, #10]
 800971e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009720:	429a      	cmp	r2, r3
 8009722:	d395      	bcc.n	8009650 <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 8009724:	6838      	ldr	r0, [r7, #0]
 8009726:	f7fe fb31 	bl	8007d8c <csp_buffer_free>

	return CSP_ERR_NONE;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	373c      	adds	r7, #60	; 0x3c
 8009730:	46bd      	mov	sp, r7
 8009732:	bd90      	pop	{r4, r7, pc}

08009734 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <csp_can_add_interface+0x1e>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <csp_can_add_interface+0x1e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 8009752:	f06f 0301 	mvn.w	r3, #1
 8009756:	e021      	b.n	800979c <csp_can_add_interface+0x68>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 8009766:	f06f 0301 	mvn.w	r3, #1
 800976a:	e017      	b.n	800979c <csp_can_add_interface+0x68>
	}

	if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	8a1b      	ldrh	r3, [r3, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <csp_can_add_interface+0x4c>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	8a1b      	ldrh	r3, [r3, #16]
 8009778:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800977c:	4293      	cmp	r3, r2
 800977e:	d903      	bls.n	8009788 <csp_can_add_interface+0x54>
		iface->mtu = MAX_CAN_DATA_SIZE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f240 72fa 	movw	r2, #2042	; 0x7fa
 8009786:	821a      	strh	r2, [r3, #16]
	}

	ifdata->cfp_frame_id = 0;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a04      	ldr	r2, [pc, #16]	; (80097a4 <csp_can_add_interface+0x70>)
 8009792:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff f863 	bl	8008860 <csp_iflist_add>
 800979a:	4603      	mov	r3, r0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	08009541 	.word	0x08009541

080097a8 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	89db      	ldrh	r3, [r3, #14]
 80097b6:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <csp_lo_tx+0x3c>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d004      	beq.n	80097d0 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 80097c6:	6838      	ldr	r0, [r7, #0]
 80097c8:	f7fe fae0 	bl	8007d8c <csp_buffer_free>
		return CSP_ERR_NONE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	e005      	b.n	80097dc <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 80097d0:	2200      	movs	r2, #0
 80097d2:	4905      	ldr	r1, [pc, #20]	; (80097e8 <csp_lo_tx+0x40>)
 80097d4:	6838      	ldr	r0, [r7, #0]
 80097d6:	f7ff fae1 	bl	8008d9c <csp_qfifo_write>

	return CSP_ERR_NONE;
 80097da:	2300      	movs	r3, #0

}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20008ec8 	.word	0x20008ec8
 80097e8:	2000001c 	.word	0x2000001c

080097ec <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af04      	add	r7, sp, #16
 80097f2:	603a      	str	r2, [r7, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
 80097fa:	460b      	mov	r3, r1
 80097fc:	71bb      	strb	r3, [r7, #6]
 80097fe:	4613      	mov	r3, r2
 8009800:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	2b20      	cmp	r3, #32
 8009806:	d103      	bne.n	8009810 <csp_rtable_set+0x24>
		netmask = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	71bb      	strb	r3, [r7, #6]
		address = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b1f      	cmp	r3, #31
 8009814:	d902      	bls.n	800981c <csp_rtable_set+0x30>
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	2bff      	cmp	r3, #255	; 0xff
 800981a:	d105      	bne.n	8009828 <csp_rtable_set+0x3c>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <csp_rtable_set+0x3c>
 8009822:	79bb      	ldrb	r3, [r7, #6]
 8009824:	2b05      	cmp	r3, #5
 8009826:	d91b      	bls.n	8009860 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 8009828:	4b13      	ldr	r3, [pc, #76]	; (8009878 <csp_rtable_set+0x8c>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d014      	beq.n	800985a <csp_rtable_set+0x6e>
 8009830:	79f8      	ldrb	r0, [r7, #7]
 8009832:	79ba      	ldrb	r2, [r7, #6]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d002      	beq.n	8009840 <csp_rtable_set+0x54>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	e000      	b.n	8009842 <csp_rtable_set+0x56>
 8009840:	4b0e      	ldr	r3, [pc, #56]	; (800987c <csp_rtable_set+0x90>)
 8009842:	7979      	ldrb	r1, [r7, #5]
 8009844:	9103      	str	r1, [sp, #12]
 8009846:	9302      	str	r3, [sp, #8]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	9200      	str	r2, [sp, #0]
 800984e:	4603      	mov	r3, r0
 8009850:	4a0b      	ldr	r2, [pc, #44]	; (8009880 <csp_rtable_set+0x94>)
 8009852:	490c      	ldr	r1, [pc, #48]	; (8009884 <csp_rtable_set+0x98>)
 8009854:	2000      	movs	r0, #0
 8009856:	f7fe ff39 	bl	80086cc <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 800985a:	f06f 0301 	mvn.w	r3, #1
 800985e:	e006      	b.n	800986e <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 8009860:	797b      	ldrb	r3, [r7, #5]
 8009862:	79b9      	ldrb	r1, [r7, #6]
 8009864:	79f8      	ldrb	r0, [r7, #7]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	f000 f878 	bl	800995c <csp_rtable_set_internal>
 800986c:	4603      	mov	r3, r0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20000014 	.word	0x20000014
 800987c:	0800f20c 	.word	0x0800f20c
 8009880:	08010078 	.word	0x08010078
 8009884:	0800f210 	.word	0x0800f210

08009888 <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	71fb      	strb	r3, [r7, #7]
 8009892:	460b      	mov	r3, r1
 8009894:	71bb      	strb	r3, [r7, #6]
 8009896:	4613      	mov	r3, r2
 8009898:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 80098a2:	4b22      	ldr	r3, [pc, #136]	; (800992c <csp_rtable_find+0xa4>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]
	while(i) {
 80098a8:	e036      	b.n	8009918 <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	7a1b      	ldrb	r3, [r3, #8]
 80098ae:	79fa      	ldrb	r2, [r7, #7]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d107      	bne.n	80098c4 <csp_rtable_find+0x3c>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	7a5b      	ldrb	r3, [r3, #9]
 80098b8:	79ba      	ldrb	r2, [r7, #6]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d102      	bne.n	80098c4 <csp_rtable_find+0x3c>
			best_result = i;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	617b      	str	r3, [r7, #20]
			break;
 80098c2:	e02c      	b.n	800991e <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 80098c4:	797b      	ldrb	r3, [r7, #5]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d123      	bne.n	8009912 <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	7a5b      	ldrb	r3, [r3, #9]
 80098ce:	f1c3 0305 	rsb	r3, r3, #5
 80098d2:	2201      	movs	r2, #1
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	3b01      	subs	r3, #1
 80098dc:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	43db      	mvns	r3, r3
 80098e2:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	7a1a      	ldrb	r2, [r3, #8]
 80098e8:	7abb      	ldrb	r3, [r7, #10]
 80098ea:	4013      	ands	r3, r2
 80098ec:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 80098ee:	79fa      	ldrb	r2, [r7, #7]
 80098f0:	7abb      	ldrb	r3, [r7, #10]
 80098f2:	4013      	ands	r3, r2
 80098f4:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 80098f6:	7a7a      	ldrb	r2, [r7, #9]
 80098f8:	7a3b      	ldrb	r3, [r7, #8]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d109      	bne.n	8009912 <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	7a5b      	ldrb	r3, [r3, #9]
 8009902:	7cfa      	ldrb	r2, [r7, #19]
 8009904:	429a      	cmp	r2, r3
 8009906:	d804      	bhi.n	8009912 <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	7a5b      	ldrb	r3, [r3, #9]
 8009910:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	60fb      	str	r3, [r7, #12]
	while(i) {
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1c5      	bne.n	80098aa <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 800991e:	697b      	ldr	r3, [r7, #20]

}
 8009920:	4618      	mov	r0, r3
 8009922:	371c      	adds	r7, #28
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	20008ef0 	.word	0x20008ef0

08009930 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	2200      	movs	r2, #0
 800993e:	2105      	movs	r1, #5
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff ffa1 	bl	8009888 <csp_rtable_find>
 8009946:	60f8      	str	r0, [r7, #12]
    if (entry) {
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <csp_rtable_find_route+0x22>
	return &entry->route;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	e000      	b.n	8009954 <csp_rtable_find_route+0x24>
    }
    return NULL;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	603a      	str	r2, [r7, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	4603      	mov	r3, r0
 8009968:	71fb      	strb	r3, [r7, #7]
 800996a:	460b      	mov	r3, r1
 800996c:	71bb      	strb	r3, [r7, #6]
 800996e:	4613      	mov	r3, r2
 8009970:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 8009972:	79b9      	ldrb	r1, [r7, #6]
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2201      	movs	r2, #1
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff ff85 	bl	8009888 <csp_rtable_find>
 800997e:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d122      	bne.n	80099cc <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 8009986:	2010      	movs	r0, #16
 8009988:	f7fd ff38 	bl	80077fc <csp_malloc>
 800998c:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 8009994:	f04f 33ff 	mov.w	r3, #4294967295
 8009998:	e025      	b.n	80099e6 <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 80099a0:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <csp_rtable_set_internal+0x94>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d103      	bne.n	80099b0 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 80099a8:	4a11      	ldr	r2, [pc, #68]	; (80099f0 <csp_rtable_set_internal+0x94>)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	e00d      	b.n	80099cc <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <csp_rtable_set_internal+0x94>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 80099b6:	e002      	b.n	80099be <csp_rtable_set_internal+0x62>
				i = i->next;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1f8      	bne.n	80099b8 <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	79fa      	ldrb	r2, [r7, #7]
 80099d0:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	79ba      	ldrb	r2, [r7, #6]
 80099d6:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	797a      	ldrb	r2, [r7, #5]
 80099e2:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20008ef0 	.word	0x20008ef0

080099f4 <csp_rdp_header_add>:
/**
 * RDP Headers:
 * The following functions are helper functions that handles the extra RDP
 * information that needs to be appended to all data packets.
 */
static rdp_header_t * csp_rdp_header_add(csp_packet_t * packet) {
 80099f4:	b590      	push	{r4, r7, lr}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	rdp_header_t * header;
	if ((packet->length + sizeof(*header)) > csp_buffer_data_size()) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	895b      	ldrh	r3, [r3, #10]
 8009a00:	1d5c      	adds	r4, r3, #5
 8009a02:	f7fe fa69 	bl	8007ed8 <csp_buffer_data_size>
 8009a06:	4603      	mov	r3, r0
 8009a08:	429c      	cmp	r4, r3
 8009a0a:	d901      	bls.n	8009a10 <csp_rdp_header_add+0x1c>
		return NULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e011      	b.n	8009a34 <csp_rdp_header_add+0x40>
	}
	header = (rdp_header_t *) &packet->data[packet->length];
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	895b      	ldrh	r3, [r3, #10]
 8009a14:	3310      	adds	r3, #16
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	4413      	add	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
	packet->length += sizeof(*header);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	895b      	ldrh	r3, [r3, #10]
 8009a20:	3305      	adds	r3, #5
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	815a      	strh	r2, [r3, #10]
	memset(header, 0, sizeof(*header));
 8009a28:	2205      	movs	r2, #5
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f001 ffc6 	bl	800b9be <memset>
	return header;
 8009a32:	68fb      	ldr	r3, [r7, #12]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd90      	pop	{r4, r7, pc}

08009a3c <csp_rdp_header_remove>:

static rdp_header_t * csp_rdp_header_remove(csp_packet_t * packet) {
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	rdp_header_t * header = (rdp_header_t *) &packet->data[packet->length - sizeof(*header)];
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	895b      	ldrh	r3, [r3, #10]
 8009a48:	3b05      	subs	r3, #5
 8009a4a:	3310      	adds	r3, #16
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]
	packet->length -= sizeof(*header);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	895b      	ldrh	r3, [r3, #10]
 8009a56:	3b05      	subs	r3, #5
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	815a      	strh	r2, [r3, #10]
	return header;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <csp_rdp_header_ref>:

static rdp_header_t * csp_rdp_header_ref(csp_packet_t * packet) {
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	rdp_header_t * header = (rdp_header_t *) &packet->data[packet->length - sizeof(*header)];
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	895b      	ldrh	r3, [r3, #10]
 8009a78:	3b05      	subs	r3, #5
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4413      	add	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]
	return header;
 8009a82:	68fb      	ldr	r3, [r7, #12]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <csp_rdp_seq_between>:

/* Functions for comparing wrapping sequence numbers and timestamps */

/* Return 1 if seq is between start and end (both inclusive) */
static inline int csp_rdp_seq_between(uint16_t seq, uint16_t start, uint16_t end) {
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	80fb      	strh	r3, [r7, #6]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	80bb      	strh	r3, [r7, #4]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(end - start) >= (uint16_t)(seq - start);
 8009aa2:	887a      	ldrh	r2, [r7, #2]
 8009aa4:	88bb      	ldrh	r3, [r7, #4]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	88f9      	ldrh	r1, [r7, #6]
 8009aac:	88bb      	ldrh	r3, [r7, #4]
 8009aae:	1acb      	subs	r3, r1, r3
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	bf2c      	ite	cs
 8009ab6:	2301      	movcs	r3, #1
 8009ab8:	2300      	movcc	r3, #0
 8009aba:	b2db      	uxtb	r3, r3
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <csp_rdp_seq_before>:

/* Return 1 if seq is before cmp */
static inline int csp_rdp_seq_before(uint16_t seq, uint16_t cmp) {
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	460a      	mov	r2, r1
 8009ad2:	80fb      	strh	r3, [r7, #6]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	80bb      	strh	r3, [r7, #4]
	return (int16_t)(seq - cmp) < 0;
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	88bb      	ldrh	r3, [r7, #4]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	b21b      	sxth	r3, r3
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	0bdb      	lsrs	r3, r3, #15
 8009ae6:	b2db      	uxtb	r3, r3
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <csp_rdp_seq_after>:

/* Return 1 if seq is after cmp */
static inline int csp_rdp_seq_after(uint16_t seq, uint16_t cmp) {
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	460a      	mov	r2, r1
 8009afe:	80fb      	strh	r3, [r7, #6]
 8009b00:	4613      	mov	r3, r2
 8009b02:	80bb      	strh	r3, [r7, #4]
	return csp_rdp_seq_before(cmp, seq);
 8009b04:	88fa      	ldrh	r2, [r7, #6]
 8009b06:	88bb      	ldrh	r3, [r7, #4]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7ff ffdc 	bl	8009ac8 <csp_rdp_seq_before>
 8009b10:	4603      	mov	r3, r0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <csp_rdp_time_before>:
//static inline int csp_rdp_time_between(uint32_t time, uint32_t start, uint32_t end) {
//	return (uint32_t)(end - start) >= (uint32_t)(time - start);
//}

/* Return 1 if time is before cmp */
static inline int csp_rdp_time_before(uint32_t time, uint32_t cmp) {
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
	return (int32_t)(time - cmp) < 0;
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	0fdb      	lsrs	r3, r3, #31
 8009b2c:	b2db      	uxtb	r3, r3
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <csp_rdp_time_after>:

/* Return 1 if time is after cmp */
static inline int csp_rdp_time_after(uint32_t time, uint32_t cmp) {
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
	return csp_rdp_time_before(cmp, time);
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	6838      	ldr	r0, [r7, #0]
 8009b48:	f7ff ffe7 	bl	8009b1a <csp_rdp_time_before>
 8009b4c:	4603      	mov	r3, r0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <csp_rdp_send_cmp>:
/**
 * CONTROL MESSAGES
 * The following function is used to send empty messages,
 * with ACK, SYN or RST flag.
 */
static int csp_rdp_send_cmp(csp_conn_t * conn, csp_packet_t * packet, int flags, int seq_nr, int ack_nr) {
 8009b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5c:	b092      	sub	sp, #72	; 0x48
 8009b5e:	af08      	add	r7, sp, #32
 8009b60:	6178      	str	r0, [r7, #20]
 8009b62:	6139      	str	r1, [r7, #16]
 8009b64:	60fa      	str	r2, [r7, #12]
 8009b66:	60bb      	str	r3, [r7, #8]

	/* Generate message */
	if (!packet) {
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10c      	bne.n	8009b88 <csp_rdp_send_cmp+0x30>
		packet = csp_buffer_get(20);
 8009b6e:	2014      	movs	r0, #20
 8009b70:	f7fe f870 	bl	8007c54 <csp_buffer_get>
 8009b74:	6138      	str	r0, [r7, #16]
		if (!packet)
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <csp_rdp_send_cmp+0x2a>
			return CSP_ERR_NOMEM;
 8009b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b80:	e103      	b.n	8009d8a <csp_rdp_send_cmp+0x232>
		packet->length = 0;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2200      	movs	r2, #0
 8009b86:	815a      	strh	r2, [r3, #10]
	}

	/* Add RDP header */
	rdp_header_t * header = csp_rdp_header_add(packet);
 8009b88:	6938      	ldr	r0, [r7, #16]
 8009b8a:	f7ff ff33 	bl	80099f4 <csp_rdp_header_add>
 8009b8e:	6278      	str	r0, [r7, #36]	; 0x24
	if (header == NULL) {
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10e      	bne.n	8009bb4 <csp_rdp_send_cmp+0x5c>
		csp_log_error("RDP %p: No space for RDP header (cmp)", conn);
 8009b96:	4b7f      	ldr	r3, [pc, #508]	; (8009d94 <csp_rdp_send_cmp+0x23c>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <csp_rdp_send_cmp+0x50>
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	497d      	ldr	r1, [pc, #500]	; (8009d98 <csp_rdp_send_cmp+0x240>)
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	f7fe fd92 	bl	80086cc <do_csp_debug>
		csp_buffer_free(packet);
 8009ba8:	6938      	ldr	r0, [r7, #16]
 8009baa:	f7fe f8ef 	bl	8007d8c <csp_buffer_free>
		return CSP_ERR_NOMEM;
 8009bae:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb2:	e0ea      	b.n	8009d8a <csp_rdp_send_cmp+0x232>
	}
	header->seq_nr = csp_hton16(seq_nr);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe fe09 	bl	80087d0 <csp_hton16>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	f8a3 2001 	strh.w	r2, [r3, #1]
	header->ack_nr = csp_hton16(ack_nr);
 8009bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fdff 	bl	80087d0 <csp_hton16>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	f8a3 2003 	strh.w	r2, [r3, #3]
	header->ack = (flags & RDP_ACK) ? 1 : 0;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	105b      	asrs	r3, r3, #1
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	b2d9      	uxtb	r1, r3
 8009be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be8:	7813      	ldrb	r3, [r2, #0]
 8009bea:	f361 0382 	bfi	r3, r1, #2, #1
 8009bee:	7013      	strb	r3, [r2, #0]
	header->eak = (flags & RDP_EAK) ? 1 : 0;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	109b      	asrs	r3, r3, #2
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	b2d9      	uxtb	r1, r3
 8009bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfc:	7813      	ldrb	r3, [r2, #0]
 8009bfe:	f361 0341 	bfi	r3, r1, #1, #1
 8009c02:	7013      	strb	r3, [r2, #0]
	header->syn = (flags & RDP_SYN) ? 1 : 0;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	b2d9      	uxtb	r1, r3
 8009c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0e:	7813      	ldrb	r3, [r2, #0]
 8009c10:	f361 03c3 	bfi	r3, r1, #3, #1
 8009c14:	7013      	strb	r3, [r2, #0]
	header->rst = (flags & RDP_RST) ? 1 : 0;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	10db      	asrs	r3, r3, #3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	b2d9      	uxtb	r1, r3
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	7813      	ldrb	r3, [r2, #0]
 8009c24:	f361 0300 	bfi	r3, r1, #0, #1
 8009c28:	7013      	strb	r3, [r2, #0]

	/* Send copy to tx_queue, before sending packet to IF */
	if (flags & RDP_SYN) {
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d01e      	beq.n	8009c72 <csp_rdp_send_cmp+0x11a>
		rdp_packet_t * rdp_packet = csp_buffer_clone(packet);
 8009c34:	6938      	ldr	r0, [r7, #16]
 8009c36:	f7fe f921 	bl	8007e7c <csp_buffer_clone>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	61fb      	str	r3, [r7, #28]
		if (rdp_packet == NULL) return CSP_ERR_NOMEM;
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <csp_rdp_send_cmp+0xf2>
 8009c44:	f04f 33ff 	mov.w	r3, #4294967295
 8009c48:	e09f      	b.n	8009d8a <csp_rdp_send_cmp+0x232>
		rdp_packet->timestamp = csp_get_ms();
 8009c4a:	69fc      	ldr	r4, [r7, #28]
 8009c4c:	f7fd ff79 	bl	8007b42 <csp_get_ms>
 8009c50:	4603      	mov	r3, r0
 8009c52:	6063      	str	r3, [r4, #4]
		if (csp_queue_enqueue(conn->rdp.tx_queue, &rdp_packet, 0) != CSP_QUEUE_OK)
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c58:	f107 011c 	add.w	r1, r7, #28
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fd fe19 	bl	8007896 <csp_queue_enqueue>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d003      	beq.n	8009c72 <csp_rdp_send_cmp+0x11a>
			csp_buffer_free(rdp_packet);
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe f88d 	bl	8007d8c <csp_buffer_free>
	}

	/* Send control messages with high priority */
	csp_id_t idout = conn->idout;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	623b      	str	r3, [r7, #32]
	idout.pri = conn->idout.pri < CSP_PRIO_HIGH ? conn->idout.pri : CSP_PRIO_HIGH;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	7adb      	ldrb	r3, [r3, #11]
 8009c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <csp_rdp_send_cmp+0x13a>
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	7adb      	ldrb	r3, [r3, #11]
 8009c8a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	e000      	b.n	8009c94 <csp_rdp_send_cmp+0x13c>
 8009c92:	2201      	movs	r2, #1
 8009c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c98:	f362 1387 	bfi	r3, r2, #6, #2
 8009c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	csp_log_protocol("RDP %p: Send CMP S %u: syn %u, ack %u, eack %u, rst %u, seq_nr %5u, ack_nr %5u, packet_len %u (%u)",
 8009ca0:	4b3c      	ldr	r3, [pc, #240]	; (8009d94 <csp_rdp_send_cmp+0x23c>)
 8009ca2:	795b      	ldrb	r3, [r3, #5]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d042      	beq.n	8009d2e <csp_rdp_send_cmp+0x1d6>
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	7f1b      	ldrb	r3, [r3, #28]
 8009cac:	4698      	mov	r8, r3
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	461c      	mov	r4, r3
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	461d      	mov	r5, r3
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	461e      	mov	r6, r3
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	607b      	str	r3, [r7, #4]
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fd87 	bl	80087fa <csp_ntoh16>
 8009cec:	4603      	mov	r3, r0
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fd7e 	bl	80087fa <csp_ntoh16>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	461a      	mov	r2, r3
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	895b      	ldrh	r3, [r3, #10]
 8009d06:	4619      	mov	r1, r3
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	895b      	ldrh	r3, [r3, #10]
 8009d0c:	3b05      	subs	r3, #5
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	9106      	str	r1, [sp, #24]
 8009d12:	9205      	str	r2, [sp, #20]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	9204      	str	r2, [sp, #16]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	9303      	str	r3, [sp, #12]
 8009d1c:	9602      	str	r6, [sp, #8]
 8009d1e:	9501      	str	r5, [sp, #4]
 8009d20:	9400      	str	r4, [sp, #0]
 8009d22:	4643      	mov	r3, r8
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	491d      	ldr	r1, [pc, #116]	; (8009d9c <csp_rdp_send_cmp+0x244>)
 8009d28:	2005      	movs	r0, #5
 8009d2a:	f7fe fccf 	bl	80086cc <do_csp_debug>
                         conn, conn->rdp.state, header->syn, header->ack, header->eak,
                         header->rst, csp_ntoh16(header->seq_nr), csp_ntoh16(header->ack_nr),
                         packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	/* Send packet to IF */
	if (csp_send_direct(idout, packet, csp_rtable_find_route(idout.dst), 0) != CSP_ERR_NONE) {
 8009d2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d30:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7ff fdfa 	bl	8009930 <csp_rtable_find_route>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6939      	ldr	r1, [r7, #16]
 8009d42:	6a38      	ldr	r0, [r7, #32]
 8009d44:	f7fe fe5e 	bl	8008a04 <csp_send_direct>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <csp_rdp_send_cmp+0x214>
		csp_log_error("RDP %p: INTERFACE ERROR: not possible to send", conn);
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <csp_rdp_send_cmp+0x23c>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d004      	beq.n	8009d60 <csp_rdp_send_cmp+0x208>
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4911      	ldr	r1, [pc, #68]	; (8009da0 <csp_rdp_send_cmp+0x248>)
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f7fe fcb6 	bl	80086cc <do_csp_debug>
		csp_buffer_free(packet);
 8009d60:	6938      	ldr	r0, [r7, #16]
 8009d62:	f7fe f813 	bl	8007d8c <csp_buffer_free>
		return CSP_ERR_BUSY;
 8009d66:	f06f 0305 	mvn.w	r3, #5
 8009d6a:	e00e      	b.n	8009d8a <csp_rdp_send_cmp+0x232>
	}

	/* Update last ACK time stamp */
	if (flags & RDP_ACK) {
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d008      	beq.n	8009d88 <csp_rdp_send_cmp+0x230>
		conn->rdp.rcv_lsa = ack_nr;
 8009d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	851a      	strh	r2, [r3, #40]	; 0x28
		conn->rdp.ack_timestamp = csp_get_ms();
 8009d7e:	f7fd fee0 	bl	8007b42 <csp_get_ms>
 8009d82:	4602      	mov	r2, r0
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	645a      	str	r2, [r3, #68]	; 0x44
	}

	return CSP_ERR_NONE;
 8009d88:	2300      	movs	r3, #0

}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3728      	adds	r7, #40	; 0x28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d94:	20000014 	.word	0x20000014
 8009d98:	0800f290 	.word	0x0800f290
 8009d9c:	0800f2b8 	.word	0x0800f2b8
 8009da0:	0800f31c 	.word	0x0800f31c

08009da4 <csp_rdp_send_eack>:

/**
 * EXTENDED ACKNOWLEDGEMENTS
 * The following function sends an extended ACK packet
 */
static int csp_rdp_send_eack(csp_conn_t * conn) {
 8009da4:	b590      	push	{r4, r7, lr}
 8009da6:	b08b      	sub	sp, #44	; 0x2c
 8009da8:	af02      	add	r7, sp, #8
 8009daa:	6078      	str	r0, [r7, #4]

	/* Allocate message */
	csp_packet_t * packet_eack = csp_buffer_get(100);
 8009dac:	2064      	movs	r0, #100	; 0x64
 8009dae:	f7fd ff51 	bl	8007c54 <csp_buffer_get>
 8009db2:	61b8      	str	r0, [r7, #24]
	if (packet_eack == NULL) return CSP_ERR_NOMEM;
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d102      	bne.n	8009dc0 <csp_rdp_send_eack+0x1c>
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbe:	e069      	b.n	8009e94 <csp_rdp_send_eack+0xf0>
	packet_eack->length = 0;
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	815a      	strh	r2, [r3, #10]

	/* Loop through RX queue */
	int i, count;
	csp_packet_t * packet;
	count = csp_queue_size(conn->rdp.rx_queue);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fd fdab 	bl	8007926 <csp_queue_size>
 8009dd0:	6178      	str	r0, [r7, #20]
	for (i = 0; i < count; i++) {
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	61fb      	str	r3, [r7, #28]
 8009dd6:	e04a      	b.n	8009e6e <csp_rdp_send_eack+0xca>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ddc:	f107 010c 	add.w	r1, r7, #12
 8009de0:	4a2e      	ldr	r2, [pc, #184]	; (8009e9c <csp_rdp_send_eack+0xf8>)
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fd8f 	bl	8007906 <csp_queue_dequeue_isr>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d009      	beq.n	8009e02 <csp_rdp_send_eack+0x5e>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue deliver", conn);
 8009dee:	4b2c      	ldr	r3, [pc, #176]	; (8009ea0 <csp_rdp_send_eack+0xfc>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d040      	beq.n	8009e78 <csp_rdp_send_eack+0xd4>
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	492a      	ldr	r1, [pc, #168]	; (8009ea4 <csp_rdp_send_eack+0x100>)
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	f7fe fc66 	bl	80086cc <do_csp_debug>
			break;
 8009e00:	e03a      	b.n	8009e78 <csp_rdp_send_eack+0xd4>
		}

		/* Add seq nr to EACK packet */
		rdp_header_t * header = csp_rdp_header_ref(packet);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7ff fe31 	bl	8009a6c <csp_rdp_header_ref>
 8009e0a:	6138      	str	r0, [r7, #16]
		packet_eack->data16[packet_eack->length/sizeof(uint16_t)] = csp_hton16(header->seq_nr);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	895b      	ldrh	r3, [r3, #10]
 8009e18:	085b      	lsrs	r3, r3, #1
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	461c      	mov	r4, r3
 8009e1e:	4610      	mov	r0, r2
 8009e20:	f7fe fcd6 	bl	80087d0 <csp_hton16>
 8009e24:	4603      	mov	r3, r0
 8009e26:	4619      	mov	r1, r3
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	f104 0208 	add.w	r2, r4, #8
 8009e2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		packet_eack->length += sizeof(uint16_t);
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	895b      	ldrh	r3, [r3, #10]
 8009e36:	3302      	adds	r3, #2
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	815a      	strh	r2, [r3, #10]
		csp_log_protocol("RDP %p: Added EACK nr %u", conn, header->seq_nr);
 8009e3e:	4b18      	ldr	r3, [pc, #96]	; (8009ea0 <csp_rdp_send_eack+0xfc>)
 8009e40:	795b      	ldrb	r3, [r3, #5]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d008      	beq.n	8009e58 <csp_rdp_send_eack+0xb4>
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	4915      	ldr	r1, [pc, #84]	; (8009ea8 <csp_rdp_send_eack+0x104>)
 8009e52:	2005      	movs	r0, #5
 8009e54:	f7fe fc3a 	bl	80086cc <do_csp_debug>

		/* Requeue */
		csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5c:	f107 010c 	add.w	r1, r7, #12
 8009e60:	4a0e      	ldr	r2, [pc, #56]	; (8009e9c <csp_rdp_send_eack+0xf8>)
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fd fd2b 	bl	80078be <csp_queue_enqueue_isr>
	for (i = 0; i < count; i++) {
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	61fb      	str	r3, [r7, #28]
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	dbb0      	blt.n	8009dd8 <csp_rdp_send_eack+0x34>
 8009e76:	e000      	b.n	8009e7a <csp_rdp_send_eack+0xd6>
			break;
 8009e78:	bf00      	nop

	}

	return csp_rdp_send_cmp(conn, packet_eack, RDP_ACK | RDP_EAK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	8bdb      	ldrh	r3, [r3, #30]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	4613      	mov	r3, r2
 8009e88:	2206      	movs	r2, #6
 8009e8a:	69b9      	ldr	r1, [r7, #24]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff fe63 	bl	8009b58 <csp_rdp_send_cmp>
 8009e92:	4603      	mov	r3, r0

}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3724      	adds	r7, #36	; 0x24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd90      	pop	{r4, r7, pc}
 8009e9c:	20000074 	.word	0x20000074
 8009ea0:	20000014 	.word	0x20000014
 8009ea4:	0800f34c 	.word	0x0800f34c
 8009ea8:	0800f384 	.word	0x0800f384

08009eac <csp_rdp_send_syn>:

/**
 * SYN Packet
 * The following function sends a SYN packet
 */
static int csp_rdp_send_syn(csp_conn_t * conn) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	6078      	str	r0, [r7, #4]

	/* Allocate message */
	csp_packet_t * packet = csp_buffer_get(100);
 8009eb4:	2064      	movs	r0, #100	; 0x64
 8009eb6:	f7fd fecd 	bl	8007c54 <csp_buffer_get>
 8009eba:	60f8      	str	r0, [r7, #12]
	if (packet == NULL) return CSP_ERR_NOMEM;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d102      	bne.n	8009ec8 <csp_rdp_send_syn+0x1c>
 8009ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec6:	e03e      	b.n	8009f46 <csp_rdp_send_syn+0x9a>

	/* Generate contents */
	packet->data32[0] = csp_hton32(csp_rdp_window_size);
 8009ec8:	4b21      	ldr	r3, [pc, #132]	; (8009f50 <csp_rdp_send_syn+0xa4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe fca2 	bl	8008816 <csp_hton32>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	611a      	str	r2, [r3, #16]
	packet->data32[1] = csp_hton32(csp_rdp_conn_timeout);
 8009ed8:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <csp_rdp_send_syn+0xa8>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe fc9a 	bl	8008816 <csp_hton32>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	615a      	str	r2, [r3, #20]
	packet->data32[2] = csp_hton32(csp_rdp_packet_timeout);
 8009ee8:	4b1b      	ldr	r3, [pc, #108]	; (8009f58 <csp_rdp_send_syn+0xac>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe fc92 	bl	8008816 <csp_hton32>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	619a      	str	r2, [r3, #24]
	packet->data32[3] = csp_hton32(csp_rdp_delayed_acks);
 8009ef8:	4b18      	ldr	r3, [pc, #96]	; (8009f5c <csp_rdp_send_syn+0xb0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fc8a 	bl	8008816 <csp_hton32>
 8009f02:	4602      	mov	r2, r0
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	61da      	str	r2, [r3, #28]
	packet->data32[4] = csp_hton32(csp_rdp_ack_timeout);
 8009f08:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <csp_rdp_send_syn+0xb4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fc82 	bl	8008816 <csp_hton32>
 8009f12:	4602      	mov	r2, r0
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	621a      	str	r2, [r3, #32]
	packet->data32[5] = csp_hton32(csp_rdp_ack_delay_count);
 8009f18:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <csp_rdp_send_syn+0xb8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fc7a 	bl	8008816 <csp_hton32>
 8009f22:	4602      	mov	r2, r0
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	625a      	str	r2, [r3, #36]	; 0x24
	packet->length = 6 * sizeof(uint32_t);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2218      	movs	r2, #24
 8009f2c:	815a      	strh	r2, [r3, #10]

	return csp_rdp_send_cmp(conn, packet, RDP_SYN, conn->rdp.snd_iss, 0);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009f32:	461a      	mov	r2, r3
 8009f34:	2300      	movs	r3, #0
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	68f9      	ldr	r1, [r7, #12]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fe0a 	bl	8009b58 <csp_rdp_send_cmp>
 8009f44:	4603      	mov	r3, r0

}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	2000005c 	.word	0x2000005c
 8009f54:	20000060 	.word	0x20000060
 8009f58:	20000064 	.word	0x20000064
 8009f5c:	20000068 	.word	0x20000068
 8009f60:	2000006c 	.word	0x2000006c
 8009f64:	20000070 	.word	0x20000070

08009f68 <csp_rdp_receive_data>:

static inline int csp_rdp_receive_data(csp_conn_t * conn, csp_packet_t * packet) {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]

	/* Remove RDP header before passing to userspace */
	csp_rdp_header_remove(packet);
 8009f72:	6838      	ldr	r0, [r7, #0]
 8009f74:	f7ff fd62 	bl	8009a3c <csp_rdp_header_remove>

	/* Enqueue data */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7fd fffc 	bl	8007f78 <csp_conn_enqueue_packet>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	da0b      	bge.n	8009f9e <csp_rdp_receive_data+0x36>
		csp_log_warn("RDP %p: Conn RX buffer full", conn);
 8009f86:	4b08      	ldr	r3, [pc, #32]	; (8009fa8 <csp_rdp_receive_data+0x40>)
 8009f88:	785b      	ldrb	r3, [r3, #1]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d004      	beq.n	8009f98 <csp_rdp_receive_data+0x30>
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	4906      	ldr	r1, [pc, #24]	; (8009fac <csp_rdp_receive_data+0x44>)
 8009f92:	2001      	movs	r0, #1
 8009f94:	f7fe fb9a 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOBUFS;
 8009f98:	f06f 0308 	mvn.w	r3, #8
 8009f9c:	e000      	b.n	8009fa0 <csp_rdp_receive_data+0x38>
	}

	return CSP_ERR_NONE;
 8009f9e:	2300      	movs	r3, #0

}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	20000014 	.word	0x20000014
 8009fac:	0800f3a0 	.word	0x0800f3a0

08009fb0 <csp_rdp_rx_queue_flush>:

static inline void csp_rdp_rx_queue_flush(csp_conn_t * conn) {
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	/* Loop through RX queue */
	int i, count;
	csp_packet_t * packet;

front:
	count = csp_queue_size(conn->rdp.rx_queue);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fd fcb2 	bl	8007926 <csp_queue_size>
 8009fc2:	6138      	str	r0, [r7, #16]
	for (i = 0; i < count; i++) {
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	e054      	b.n	800a074 <csp_rdp_rx_queue_flush+0xc4>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fce:	f107 0108 	add.w	r1, r7, #8
 8009fd2:	4a2d      	ldr	r2, [pc, #180]	; (800a088 <csp_rdp_rx_queue_flush+0xd8>)
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fd fc96 	bl	8007906 <csp_queue_dequeue_isr>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d009      	beq.n	8009ff4 <csp_rdp_rx_queue_flush+0x44>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue deliver", conn);
 8009fe0:	4b2a      	ldr	r3, [pc, #168]	; (800a08c <csp_rdp_rx_queue_flush+0xdc>)
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d04a      	beq.n	800a07e <csp_rdp_rx_queue_flush+0xce>
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	4929      	ldr	r1, [pc, #164]	; (800a090 <csp_rdp_rx_queue_flush+0xe0>)
 8009fec:	2000      	movs	r0, #0
 8009fee:	f7fe fb6d 	bl	80086cc <do_csp_debug>
			break;
 8009ff2:	e044      	b.n	800a07e <csp_rdp_rx_queue_flush+0xce>
		}

		rdp_header_t * header = csp_rdp_header_ref(packet);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7ff fd38 	bl	8009a6c <csp_rdp_header_ref>
 8009ffc:	60f8      	str	r0, [r7, #12]
		csp_log_protocol("RDP %p: RX Queue deliver matching Element, seq %u", conn, header->seq_nr);
 8009ffe:	4b23      	ldr	r3, [pc, #140]	; (800a08c <csp_rdp_rx_queue_flush+0xdc>)
 800a000:	795b      	ldrb	r3, [r3, #5]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <csp_rdp_rx_queue_flush+0x68>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	4920      	ldr	r1, [pc, #128]	; (800a094 <csp_rdp_rx_queue_flush+0xe4>)
 800a012:	2005      	movs	r0, #5
 800a014:	f7fe fb5a 	bl	80086cc <do_csp_debug>

		/* If the matching packet was found: */
		if (header->seq_nr == (uint16_t)(conn->rdp.rcv_cur + 1)) {
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a01e:	b29a      	uxth	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a024:	3301      	adds	r3, #1
 800a026:	b29b      	uxth	r3, r3
 800a028:	429a      	cmp	r2, r3
 800a02a:	d118      	bne.n	800a05e <csp_rdp_rx_queue_flush+0xae>
			csp_log_protocol("RDP %p: Deliver seq %u", conn, header->seq_nr);
 800a02c:	4b17      	ldr	r3, [pc, #92]	; (800a08c <csp_rdp_rx_queue_flush+0xdc>)
 800a02e:	795b      	ldrb	r3, [r3, #5]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d008      	beq.n	800a046 <csp_rdp_rx_queue_flush+0x96>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	4916      	ldr	r1, [pc, #88]	; (800a098 <csp_rdp_rx_queue_flush+0xe8>)
 800a040:	2005      	movs	r0, #5
 800a042:	f7fe fb43 	bl	80086cc <do_csp_debug>
			csp_rdp_receive_data(conn, packet);
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff ff8c 	bl	8009f68 <csp_rdp_receive_data>
			conn->rdp.rcv_cur++;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a054:	3301      	adds	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	849a      	strh	r2, [r3, #36]	; 0x24
			/* Loop from first element again */
			goto front;
 800a05c:	e7ac      	b.n	8009fb8 <csp_rdp_rx_queue_flush+0x8>

		/* Otherwise, requeue */
		} else {
			csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a062:	f107 0108 	add.w	r1, r7, #8
 800a066:	4a08      	ldr	r2, [pc, #32]	; (800a088 <csp_rdp_rx_queue_flush+0xd8>)
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fd fc28 	bl	80078be <csp_queue_enqueue_isr>
	for (i = 0; i < count; i++) {
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	3301      	adds	r3, #1
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	429a      	cmp	r2, r3
 800a07a:	dba6      	blt.n	8009fca <csp_rdp_rx_queue_flush+0x1a>
		}

	}

}
 800a07c:	e000      	b.n	800a080 <csp_rdp_rx_queue_flush+0xd0>
			break;
 800a07e:	bf00      	nop
}
 800a080:	bf00      	nop
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20000074 	.word	0x20000074
 800a08c:	20000014 	.word	0x20000014
 800a090:	0800f34c 	.word	0x0800f34c
 800a094:	0800f3bc 	.word	0x0800f3bc
 800a098:	0800f3f0 	.word	0x0800f3f0

0800a09c <csp_rdp_seq_in_rx_queue>:

static inline bool csp_rdp_seq_in_rx_queue(csp_conn_t * conn, uint16_t seq_nr) {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	807b      	strh	r3, [r7, #2]

	/* Loop through RX queue */
	int i, count;
	rdp_packet_t * packet;
	count = csp_queue_size(conn->rdp.rx_queue);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fd fc3a 	bl	8007926 <csp_queue_size>
 800a0b2:	6138      	str	r0, [r7, #16]
	for (i = 0; i < count; i++) {
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	e043      	b.n	800a142 <csp_rdp_seq_in_rx_queue+0xa6>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0be:	f107 0108 	add.w	r1, r7, #8
 800a0c2:	4a25      	ldr	r2, [pc, #148]	; (800a158 <csp_rdp_seq_in_rx_queue+0xbc>)
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fd fc1e 	bl	8007906 <csp_queue_dequeue_isr>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d009      	beq.n	800a0e4 <csp_rdp_seq_in_rx_queue+0x48>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue exists", conn);
 800a0d0:	4b22      	ldr	r3, [pc, #136]	; (800a15c <csp_rdp_seq_in_rx_queue+0xc0>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d039      	beq.n	800a14c <csp_rdp_seq_in_rx_queue+0xb0>
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	4921      	ldr	r1, [pc, #132]	; (800a160 <csp_rdp_seq_in_rx_queue+0xc4>)
 800a0dc:	2000      	movs	r0, #0
 800a0de:	f7fe faf5 	bl	80086cc <do_csp_debug>
			break;
 800a0e2:	e033      	b.n	800a14c <csp_rdp_seq_in_rx_queue+0xb0>
		}

		csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e8:	f107 0108 	add.w	r1, r7, #8
 800a0ec:	4a1a      	ldr	r2, [pc, #104]	; (800a158 <csp_rdp_seq_in_rx_queue+0xbc>)
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fd fbe5 	bl	80078be <csp_queue_enqueue_isr>

		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fcb8 	bl	8009a6c <csp_rdp_header_ref>
 800a0fc:	60f8      	str	r0, [r7, #12]
		csp_log_protocol("RDP %p: RX Queue exists matching Element, seq %u", conn, header->seq_nr);
 800a0fe:	4b17      	ldr	r3, [pc, #92]	; (800a15c <csp_rdp_seq_in_rx_queue+0xc0>)
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d008      	beq.n	800a118 <csp_rdp_seq_in_rx_queue+0x7c>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	4914      	ldr	r1, [pc, #80]	; (800a164 <csp_rdp_seq_in_rx_queue+0xc8>)
 800a112:	2005      	movs	r0, #5
 800a114:	f7fe fada 	bl	80086cc <do_csp_debug>

		/* If the matching packet was found, deliver */
		if (header->seq_nr == seq_nr) {
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	887a      	ldrh	r2, [r7, #2]
 800a122:	429a      	cmp	r2, r3
 800a124:	d10a      	bne.n	800a13c <csp_rdp_seq_in_rx_queue+0xa0>
                    csp_log_protocol("RDP %p: We have a match", conn);
 800a126:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <csp_rdp_seq_in_rx_queue+0xc0>)
 800a128:	795b      	ldrb	r3, [r3, #5]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d004      	beq.n	800a138 <csp_rdp_seq_in_rx_queue+0x9c>
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	490d      	ldr	r1, [pc, #52]	; (800a168 <csp_rdp_seq_in_rx_queue+0xcc>)
 800a132:	2005      	movs	r0, #5
 800a134:	f7fe faca 	bl	80086cc <do_csp_debug>
			return true;
 800a138:	2301      	movs	r3, #1
 800a13a:	e009      	b.n	800a150 <csp_rdp_seq_in_rx_queue+0xb4>
	for (i = 0; i < count; i++) {
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	3301      	adds	r3, #1
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	429a      	cmp	r2, r3
 800a148:	dbb7      	blt.n	800a0ba <csp_rdp_seq_in_rx_queue+0x1e>
 800a14a:	e000      	b.n	800a14e <csp_rdp_seq_in_rx_queue+0xb2>
			break;
 800a14c:	bf00      	nop
		}

	}

	return false;
 800a14e:	2300      	movs	r3, #0

}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20000074 	.word	0x20000074
 800a15c:	20000014 	.word	0x20000014
 800a160:	0800f408 	.word	0x0800f408
 800a164:	0800f440 	.word	0x0800f440
 800a168:	0800f474 	.word	0x0800f474

0800a16c <csp_rdp_rx_queue_add>:

static inline int csp_rdp_rx_queue_add(csp_conn_t * conn, csp_packet_t * packet, uint16_t seq_nr) {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	80fb      	strh	r3, [r7, #6]

	if (csp_rdp_seq_in_rx_queue(conn, seq_nr))
 800a17a:	88fb      	ldrh	r3, [r7, #6]
 800a17c:	4619      	mov	r1, r3
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff ff8c 	bl	800a09c <csp_rdp_seq_in_rx_queue>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <csp_rdp_rx_queue_add+0x22>
		return CSP_QUEUE_ERROR;
 800a18a:	2300      	movs	r3, #0
 800a18c:	e008      	b.n	800a1a0 <csp_rdp_rx_queue_add+0x34>
	return csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a192:	f107 0108 	add.w	r1, r7, #8
 800a196:	4a04      	ldr	r2, [pc, #16]	; (800a1a8 <csp_rdp_rx_queue_add+0x3c>)
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fd fb90 	bl	80078be <csp_queue_enqueue_isr>
 800a19e:	4603      	mov	r3, r0

}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20000074 	.word	0x20000074

0800a1ac <csp_rdp_flush_eack>:

static void csp_rdp_flush_eack(csp_conn_t * conn, csp_packet_t * eack_packet) {
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b08d      	sub	sp, #52	; 0x34
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]

	/* Loop through TX queue */
	int i, j, count;
	rdp_packet_t * packet;
	count = csp_queue_size(conn->rdp.tx_queue);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fd fbb3 	bl	8007926 <csp_queue_size>
 800a1c0:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < count; i++) {
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1c6:	e0a7      	b.n	800a318 <csp_rdp_flush_eack+0x16c>

		if (csp_queue_dequeue(conn->rdp.tx_queue, &packet, 0) != CSP_QUEUE_OK) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1cc:	f107 010c 	add.w	r1, r7, #12
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fd fb84 	bl	80078e0 <csp_queue_dequeue>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d00a      	beq.n	800a1f4 <csp_rdp_flush_eack+0x48>
			csp_log_error("RDP %p: Cannot dequeue from tx_queue in flush EACK", conn);
 800a1de:	4b54      	ldr	r3, [pc, #336]	; (800a330 <csp_rdp_flush_eack+0x184>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 809e 	beq.w	800a324 <csp_rdp_flush_eack+0x178>
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	4952      	ldr	r1, [pc, #328]	; (800a334 <csp_rdp_flush_eack+0x188>)
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	f7fe fa6d 	bl	80086cc <do_csp_debug>
			break;
 800a1f2:	e097      	b.n	800a324 <csp_rdp_flush_eack+0x178>
		}

		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff fc38 	bl	8009a6c <csp_rdp_header_ref>
 800a1fc:	6178      	str	r0, [r7, #20]
		csp_log_protocol("RDP %p: EACK compare element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(header->seq_nr));
 800a1fe:	4b4c      	ldr	r3, [pc, #304]	; (800a330 <csp_rdp_flush_eack+0x184>)
 800a200:	795b      	ldrb	r3, [r3, #5]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d010      	beq.n	800a228 <csp_rdp_flush_eack+0x7c>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685c      	ldr	r4, [r3, #4]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a210:	b29b      	uxth	r3, r3
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe faf1 	bl	80087fa <csp_ntoh16>
 800a218:	4603      	mov	r3, r0
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	4623      	mov	r3, r4
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4945      	ldr	r1, [pc, #276]	; (800a338 <csp_rdp_flush_eack+0x18c>)
 800a222:	2005      	movs	r0, #5
 800a224:	f7fe fa52 	bl	80086cc <do_csp_debug>

		/* Look for this element in EACKs */
		int match = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < (int)((eack_packet->length - sizeof(rdp_header_t)) / sizeof(uint16_t)); j++) {
 800a22c:	2300      	movs	r3, #0
 800a22e:	623b      	str	r3, [r7, #32]
 800a230:	e046      	b.n	800a2c0 <csp_rdp_flush_eack+0x114>
			if (csp_ntoh16(eack_packet->data16[j]) == csp_ntoh16(header->seq_nr))
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	6a3a      	ldr	r2, [r7, #32]
 800a236:	3208      	adds	r2, #8
 800a238:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fadc 	bl	80087fa <csp_ntoh16>
 800a242:	4603      	mov	r3, r0
 800a244:	461c      	mov	r4, r3
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe fad3 	bl	80087fa <csp_ntoh16>
 800a254:	4603      	mov	r3, r0
 800a256:	429c      	cmp	r4, r3
 800a258:	d101      	bne.n	800a25e <csp_rdp_flush_eack+0xb2>
				match = 1;
 800a25a:	2301      	movs	r3, #1
 800a25c:	61fb      	str	r3, [r7, #28]

			/* Enable this if you want EACK's to trigger retransmission */
			if (csp_ntoh16(eack_packet->data16[j]) > csp_ntoh16(header->seq_nr)) {
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6a3a      	ldr	r2, [r7, #32]
 800a262:	3208      	adds	r2, #8
 800a264:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe fac6 	bl	80087fa <csp_ntoh16>
 800a26e:	4603      	mov	r3, r0
 800a270:	461c      	mov	r4, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe fabd 	bl	80087fa <csp_ntoh16>
 800a280:	4603      	mov	r3, r0
 800a282:	429c      	cmp	r4, r3
 800a284:	d919      	bls.n	800a2ba <csp_rdp_flush_eack+0x10e>
				uint32_t time_now = csp_get_ms();
 800a286:	f7fd fc5c 	bl	8007b42 <csp_get_ms>
 800a28a:	6138      	str	r0, [r7, #16]
				if (csp_rdp_time_after(time_now, packet->quarantine)) {
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4619      	mov	r1, r3
 800a292:	6938      	ldr	r0, [r7, #16]
 800a294:	f7ff fc51 	bl	8009b3a <csp_rdp_time_after>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00d      	beq.n	800a2ba <csp_rdp_flush_eack+0x10e>
					packet->timestamp = time_now - conn->rdp.packet_timeout - 1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	1ad2      	subs	r2, r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3a01      	subs	r2, #1
 800a2aa:	605a      	str	r2, [r3, #4]
					packet->quarantine = time_now +	conn->rdp.packet_timeout / 2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b0:	0859      	lsrs	r1, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	440a      	add	r2, r1
 800a2b8:	601a      	str	r2, [r3, #0]
		for (j = 0; j < (int)((eack_packet->length - sizeof(rdp_header_t)) / sizeof(uint16_t)); j++) {
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	623b      	str	r3, [r7, #32]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	895b      	ldrh	r3, [r3, #10]
 800a2c4:	3b05      	subs	r3, #5
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	dbb0      	blt.n	800a232 <csp_rdp_flush_eack+0x86>
				}
			}
		}

		if (match == 0) {
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d108      	bne.n	800a2e8 <csp_rdp_flush_eack+0x13c>
			/* If not found, put back on tx queue */
			csp_queue_enqueue(conn->rdp.tx_queue, &packet, 0);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2da:	f107 010c 	add.w	r1, r7, #12
 800a2de:	2200      	movs	r2, #0
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fd fad8 	bl	8007896 <csp_queue_enqueue>
 800a2e6:	e014      	b.n	800a312 <csp_rdp_flush_eack+0x166>
		} else {
			/* Found, free */
			csp_log_protocol("RDP %p: TX Element %u freed", conn, csp_ntoh16(header->seq_nr));
 800a2e8:	4b11      	ldr	r3, [pc, #68]	; (800a330 <csp_rdp_flush_eack+0x184>)
 800a2ea:	795b      	ldrb	r3, [r3, #5]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00c      	beq.n	800a30a <csp_rdp_flush_eack+0x15e>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe fa7e 	bl	80087fa <csp_ntoh16>
 800a2fe:	4603      	mov	r3, r0
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	490e      	ldr	r1, [pc, #56]	; (800a33c <csp_rdp_flush_eack+0x190>)
 800a304:	2005      	movs	r0, #5
 800a306:	f7fe f9e1 	bl	80086cc <do_csp_debug>
			csp_buffer_free(packet);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fd fd3d 	bl	8007d8c <csp_buffer_free>
	for (i = 0; i < count; i++) {
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	3301      	adds	r3, #1
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
 800a318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	f6ff af53 	blt.w	800a1c8 <csp_rdp_flush_eack+0x1c>
		}

	}

}
 800a322:	e000      	b.n	800a326 <csp_rdp_flush_eack+0x17a>
			break;
 800a324:	bf00      	nop
}
 800a326:	bf00      	nop
 800a328:	372c      	adds	r7, #44	; 0x2c
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd90      	pop	{r4, r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000014 	.word	0x20000014
 800a334:	0800f48c 	.word	0x0800f48c
 800a338:	0800f4c0 	.word	0x0800f4c0
 800a33c:	0800f4f0 	.word	0x0800f4f0

0800a340 <csp_rdp_should_ack>:

static inline bool csp_rdp_should_ack(csp_conn_t * conn) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]

	/* If delayed ACKs are not used, always ACK */
	if (!conn->rdp.delayed_acks) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <csp_rdp_should_ack+0x14>
		return true;
 800a350:	2301      	movs	r3, #1
 800a352:	e022      	b.n	800a39a <csp_rdp_should_ack+0x5a>
	}

	/* ACK if time since last ACK is greater than ACK timeout */
	uint32_t time_now = csp_get_ms();
 800a354:	f7fd fbf5 	bl	8007b42 <csp_get_ms>
 800a358:	60f8      	str	r0, [r7, #12]
	if (csp_rdp_time_after(time_now, conn->rdp.ack_timestamp + conn->rdp.ack_timeout))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	4413      	add	r3, r2
 800a364:	4619      	mov	r1, r3
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f7ff fbe7 	bl	8009b3a <csp_rdp_time_after>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <csp_rdp_should_ack+0x36>
		return true;
 800a372:	2301      	movs	r3, #1
 800a374:	e011      	b.n	800a39a <csp_rdp_should_ack+0x5a>

	/* ACK if number of unacknowledged packets is greater than delay count */
	if (csp_rdp_seq_after(conn->rdp.rcv_cur, conn->rdp.rcv_lsa + conn->rdp.ack_delay_count))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	b29b      	uxth	r3, r3
 800a384:	4413      	add	r3, r2
 800a386:	b29b      	uxth	r3, r3
 800a388:	4619      	mov	r1, r3
 800a38a:	f7ff fbb3 	bl	8009af4 <csp_rdp_seq_after>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <csp_rdp_should_ack+0x58>
		return true;
 800a394:	2301      	movs	r3, #1
 800a396:	e000      	b.n	800a39a <csp_rdp_should_ack+0x5a>

	return false;
 800a398:	2300      	movs	r3, #0

}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <csp_rdp_flush_all>:

void csp_rdp_flush_all(csp_conn_t * conn) {
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	6078      	str	r0, [r7, #4]

	if ((conn == NULL) || conn->rdp.tx_queue == NULL) {
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <csp_rdp_flush_all+0x16>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d129      	bne.n	800a40e <csp_rdp_flush_all+0x6a>
		csp_log_error("RDP %p: Null pointer passed to rdp flush all", conn);
 800a3ba:	4b33      	ldr	r3, [pc, #204]	; (800a488 <csp_rdp_flush_all+0xe4>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d05d      	beq.n	800a47e <csp_rdp_flush_all+0xda>
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	4931      	ldr	r1, [pc, #196]	; (800a48c <csp_rdp_flush_all+0xe8>)
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	f7fe f980 	bl	80086cc <do_csp_debug>
 800a3cc:	e058      	b.n	800a480 <csp_rdp_flush_all+0xdc>

	rdp_packet_t * packet;

	/* Empty TX queue */
	while (csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
		if (packet != NULL) {
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01c      	beq.n	800a40e <csp_rdp_flush_all+0x6a>
			csp_log_protocol("RDP %p: Flush TX Element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(csp_rdp_header_ref((csp_packet_t *) packet)->seq_nr));
 800a3d4:	4b2c      	ldr	r3, [pc, #176]	; (800a488 <csp_rdp_flush_all+0xe4>)
 800a3d6:	795b      	ldrb	r3, [r3, #5]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d014      	beq.n	800a406 <csp_rdp_flush_all+0x62>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	685c      	ldr	r4, [r3, #4]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fb42 	bl	8009a6c <csp_rdp_header_ref>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe fa02 	bl	80087fa <csp_ntoh16>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	4623      	mov	r3, r4
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	4924      	ldr	r1, [pc, #144]	; (800a490 <csp_rdp_flush_all+0xec>)
 800a400:	2005      	movs	r0, #5
 800a402:	f7fe f963 	bl	80086cc <do_csp_debug>
			csp_buffer_free(packet);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd fcbf 	bl	8007d8c <csp_buffer_free>
	while (csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a412:	f107 010c 	add.w	r1, r7, #12
 800a416:	4a1f      	ldr	r2, [pc, #124]	; (800a494 <csp_rdp_flush_all+0xf0>)
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fd fa74 	bl	8007906 <csp_queue_dequeue_isr>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b01      	cmp	r3, #1
 800a422:	d0d4      	beq.n	800a3ce <csp_rdp_flush_all+0x2a>
		}
	}

	/* Empty RX queue */
	while (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 800a424:	e01f      	b.n	800a466 <csp_rdp_flush_all+0xc2>
		if (packet != NULL) {
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01c      	beq.n	800a466 <csp_rdp_flush_all+0xc2>
			csp_log_protocol("RDP %p: Flush RX Element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(csp_rdp_header_ref((csp_packet_t *) packet)->seq_nr));
 800a42c:	4b16      	ldr	r3, [pc, #88]	; (800a488 <csp_rdp_flush_all+0xe4>)
 800a42e:	795b      	ldrb	r3, [r3, #5]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d014      	beq.n	800a45e <csp_rdp_flush_all+0xba>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685c      	ldr	r4, [r3, #4]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fb16 	bl	8009a6c <csp_rdp_header_ref>
 800a440:	4603      	mov	r3, r0
 800a442:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a446:	b29b      	uxth	r3, r3
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe f9d6 	bl	80087fa <csp_ntoh16>
 800a44e:	4603      	mov	r3, r0
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	4623      	mov	r3, r4
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	4910      	ldr	r1, [pc, #64]	; (800a498 <csp_rdp_flush_all+0xf4>)
 800a458:	2005      	movs	r0, #5
 800a45a:	f7fe f937 	bl	80086cc <do_csp_debug>
			csp_buffer_free(packet);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4618      	mov	r0, r3
 800a462:	f7fd fc93 	bl	8007d8c <csp_buffer_free>
	while (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a46a:	f107 010c 	add.w	r1, r7, #12
 800a46e:	4a09      	ldr	r2, [pc, #36]	; (800a494 <csp_rdp_flush_all+0xf0>)
 800a470:	4618      	mov	r0, r3
 800a472:	f7fd fa48 	bl	8007906 <csp_queue_dequeue_isr>
 800a476:	4603      	mov	r3, r0
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d0d4      	beq.n	800a426 <csp_rdp_flush_all+0x82>
 800a47c:	e000      	b.n	800a480 <csp_rdp_flush_all+0xdc>
		return;
 800a47e:	bf00      	nop
		}
	}

}
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	bd90      	pop	{r4, r7, pc}
 800a486:	bf00      	nop
 800a488:	20000014 	.word	0x20000014
 800a48c:	0800f50c 	.word	0x0800f50c
 800a490:	0800f53c 	.word	0x0800f53c
 800a494:	20000074 	.word	0x20000074
 800a498:	0800f568 	.word	0x0800f568

0800a49c <csp_rdp_check_ack>:


int csp_rdp_check_ack(csp_conn_t * conn) {
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	6078      	str	r0, [r7, #4]

	/* Check all RX queues for spare capacity */
	int avail = 1;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	60fb      	str	r3, [r7, #12]
	for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60bb      	str	r3, [r7, #8]
 800a4ac:	e018      	b.n	800a4e0 <csp_rdp_check_ack+0x44>
		if (csp_conf.conn_queue_length - csp_queue_size(conn->rx_queue[prio]) <= 2 * (int32_t)conn->rdp.window_size) {
 800a4ae:	4b1b      	ldr	r3, [pc, #108]	; (800a51c <csp_rdp_check_ack+0x80>)
 800a4b0:	7c5b      	ldrb	r3, [r3, #17]
 800a4b2:	461c      	mov	r4, r3
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	3302      	adds	r3, #2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fd fa30 	bl	8007926 <csp_queue_size>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	1ae2      	subs	r2, r4, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	dc02      	bgt.n	800a4da <csp_rdp_check_ack+0x3e>
			avail = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]
			break;
 800a4d8:	e005      	b.n	800a4e6 <csp_rdp_check_ack+0x4a>
	for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	60bb      	str	r3, [r7, #8]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dde3      	ble.n	800a4ae <csp_rdp_check_ack+0x12>
		}
	}

	/* If more space available, only send after ack timeout or immediately if delay_acks is zero */
	if (avail && csp_rdp_should_ack(conn)) {
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d011      	beq.n	800a510 <csp_rdp_check_ack+0x74>
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ff27 	bl	800a340 <csp_rdp_should_ack>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00b      	beq.n	800a510 <csp_rdp_check_ack+0x74>
		csp_rdp_send_cmp(conn, NULL, RDP_ACK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	8bdb      	ldrh	r3, [r3, #30]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	4613      	mov	r3, r2
 800a506:	2202      	movs	r2, #2
 800a508:	2100      	movs	r1, #0
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7ff fb24 	bl	8009b58 <csp_rdp_send_cmp>
	}

	return CSP_ERR_NONE;
 800a510:	2300      	movs	r3, #0

}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	bd90      	pop	{r4, r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20008ec8 	.word	0x20008ec8

0800a520 <csp_rdp_is_conn_ready_for_tx>:

static inline bool csp_rdp_is_conn_ready_for_tx(csp_conn_t * conn)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	// Check Tx window (messages waiting for acks)
	if (csp_rdp_seq_after(conn->rdp.snd_nxt, conn->rdp.snd_una + conn->rdp.window_size - 1)) {
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	8bd8      	ldrh	r0, [r3, #30]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	8c1a      	ldrh	r2, [r3, #32]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	b29b      	uxth	r3, r3
 800a536:	4413      	add	r3, r2
 800a538:	b29b      	uxth	r3, r3
 800a53a:	3b01      	subs	r3, #1
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	4619      	mov	r1, r3
 800a540:	f7ff fad8 	bl	8009af4 <csp_rdp_seq_after>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <csp_rdp_is_conn_ready_for_tx+0x2e>
		return false;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e000      	b.n	800a550 <csp_rdp_is_conn_ready_for_tx+0x30>
	}
	return true;
 800a54e:	2301      	movs	r3, #1
}
 800a550:	4618      	mov	r0, r3
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <csp_rdp_check_timeouts>:
 * This function must be called with regular intervals for the
 * RDP protocol to work as expected. This takes care of closing
 * stale connections and retransmitting traffic. A good place to
 * call this function is from the CSP router task.
 */
void csp_rdp_check_timeouts(csp_conn_t * conn) {
 800a558:	b590      	push	{r4, r7, lr}
 800a55a:	b08b      	sub	sp, #44	; 0x2c
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	6078      	str	r0, [r7, #4]

	const uint32_t time_now = csp_get_ms();
 800a560:	f7fd faef 	bl	8007b42 <csp_get_ms>
 800a564:	61b8      	str	r0, [r7, #24]

	/**
	 * CONNECTION TIMEOUT:
	 * Check that connection has not timed out inside the network stack
	 */
	if (conn->socket != NULL) {
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d020      	beq.n	800a5b0 <csp_rdp_check_timeouts+0x58>
		if (csp_rdp_time_after(time_now, conn->timestamp + conn->rdp.conn_timeout)) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	695a      	ldr	r2, [r3, #20]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a576:	4413      	add	r3, r2
 800a578:	4619      	mov	r1, r3
 800a57a:	69b8      	ldr	r0, [r7, #24]
 800a57c:	f7ff fadd 	bl	8009b3a <csp_rdp_time_after>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d014      	beq.n	800a5b0 <csp_rdp_check_timeouts+0x58>
			csp_log_warn("RDP %p: Found a lost connection (now: %"PRIu32", ts: %"PRIu32", to: %"PRIu32"), closing",
 800a586:	4b83      	ldr	r3, [pc, #524]	; (800a794 <csp_rdp_check_timeouts+0x23c>)
 800a588:	785b      	ldrb	r3, [r3, #1]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00b      	beq.n	800a5a6 <csp_rdp_check_timeouts+0x4e>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a596:	9201      	str	r2, [sp, #4]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	497e      	ldr	r1, [pc, #504]	; (800a798 <csp_rdp_check_timeouts+0x240>)
 800a5a0:	2001      	movs	r0, #1
 800a5a2:	f7fe f893 	bl	80086cc <do_csp_debug>
				conn, time_now, conn->timestamp, conn->rdp.conn_timeout);
			csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE | CSP_RDP_CLOSED_BY_PROTOCOL | CSP_RDP_CLOSED_BY_TIMEOUT);
 800a5a6:	2107      	movs	r1, #7
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7fd ff09 	bl	80083c0 <csp_conn_close>
			return;
 800a5ae:	e0ee      	b.n	800a78e <csp_rdp_check_timeouts+0x236>

	/**
	 * CLOSE-WAIT TIMEOUT:
	 * After waiting a while in CLOSE-WAIT, the connection should be closed.
	 */
	if (conn->rdp.state == RDP_CLOSE_WAIT) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7f1b      	ldrb	r3, [r3, #28]
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d111      	bne.n	800a5dc <csp_rdp_check_timeouts+0x84>
		if (csp_rdp_time_after(time_now, conn->timestamp + conn->rdp.conn_timeout)) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	695a      	ldr	r2, [r3, #20]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c0:	4413      	add	r3, r2
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	69b8      	ldr	r0, [r7, #24]
 800a5c6:	f7ff fab8 	bl	8009b3a <csp_rdp_time_after>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 80dd 	beq.w	800a78c <csp_rdp_check_timeouts+0x234>
			csp_conn_close(conn, CSP_RDP_CLOSED_BY_PROTOCOL | CSP_RDP_CLOSED_BY_TIMEOUT);
 800a5d2:	2106      	movs	r1, #6
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7fd fef3 	bl	80083c0 <csp_conn_close>
		}
		return;
 800a5da:	e0d7      	b.n	800a78c <csp_rdp_check_timeouts+0x234>

	/**
	 * MESSAGE TIMEOUT:
	 * Check each outgoing message for TX timeout
	 */
	int count = csp_queue_size(conn->rdp.tx_queue);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fd f9a0 	bl	8007926 <csp_queue_size>
 800a5e6:	6178      	str	r0, [r7, #20]
	for (int i = 0; i < count; i++) {
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	61fb      	str	r3, [r7, #28]
 800a5ec:	e0a7      	b.n	800a73e <csp_rdp_check_timeouts+0x1e6>

		rdp_packet_t * packet;
		if ((csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) || packet == NULL) {
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f2:	f107 0108 	add.w	r1, r7, #8
 800a5f6:	4a69      	ldr	r2, [pc, #420]	; (800a79c <csp_rdp_check_timeouts+0x244>)
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fd f984 	bl	8007906 <csp_queue_dequeue_isr>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b01      	cmp	r3, #1
 800a602:	d102      	bne.n	800a60a <csp_rdp_check_timeouts+0xb2>
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <csp_rdp_check_timeouts+0xc8>
			csp_log_warn("RDP %p: Cannot dequeue from tx_queue in check timeout", conn);
 800a60a:	4b62      	ldr	r3, [pc, #392]	; (800a794 <csp_rdp_check_timeouts+0x23c>)
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 809b 	beq.w	800a74a <csp_rdp_check_timeouts+0x1f2>
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	4962      	ldr	r1, [pc, #392]	; (800a7a0 <csp_rdp_check_timeouts+0x248>)
 800a618:	2001      	movs	r0, #1
 800a61a:	f7fe f857 	bl	80086cc <do_csp_debug>
 800a61e:	e095      	b.n	800a74c <csp_rdp_check_timeouts+0x1f4>
			break;
		}

		/* Get header */
		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff fa22 	bl	8009a6c <csp_rdp_header_ref>
 800a628:	6138      	str	r0, [r7, #16]

		/* If acked, do not retransmit */
		if (csp_rdp_seq_before(csp_ntoh16(header->seq_nr), conn->rdp.snd_una)) {
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a630:	b29b      	uxth	r3, r3
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe f8e1 	bl	80087fa <csp_ntoh16>
 800a638:	4603      	mov	r3, r0
 800a63a:	461a      	mov	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	8c1b      	ldrh	r3, [r3, #32]
 800a640:	4619      	mov	r1, r3
 800a642:	4610      	mov	r0, r2
 800a644:	f7ff fa40 	bl	8009ac8 <csp_rdp_seq_before>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d01d      	beq.n	800a68a <csp_rdp_check_timeouts+0x132>
			csp_log_protocol("RDP %p: TX Element Free, time %"PRIu32", seq %u, una %u", conn, packet->timestamp, csp_ntoh16(header->seq_nr), conn->rdp.snd_una);
 800a64e:	4b51      	ldr	r3, [pc, #324]	; (800a794 <csp_rdp_check_timeouts+0x23c>)
 800a650:	795b      	ldrb	r3, [r3, #5]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d014      	beq.n	800a680 <csp_rdp_check_timeouts+0x128>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	685c      	ldr	r4, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a660:	b29b      	uxth	r3, r3
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe f8c9 	bl	80087fa <csp_ntoh16>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	8c1b      	ldrh	r3, [r3, #32]
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	9200      	str	r2, [sp, #0]
 800a674:	4623      	mov	r3, r4
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	494a      	ldr	r1, [pc, #296]	; (800a7a4 <csp_rdp_check_timeouts+0x24c>)
 800a67a:	2005      	movs	r0, #5
 800a67c:	f7fe f826 	bl	80086cc <do_csp_debug>
			csp_buffer_free(packet);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4618      	mov	r0, r3
 800a684:	f7fd fb82 	bl	8007d8c <csp_buffer_free>
 800a688:	e056      	b.n	800a738 <csp_rdp_check_timeouts+0x1e0>
			continue;
		}

		/* Check timestamp and retransmit if needed */
		if (csp_rdp_time_after(time_now, packet->timestamp + conn->rdp.packet_timeout)) {
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a692:	4413      	add	r3, r2
 800a694:	4619      	mov	r1, r3
 800a696:	69b8      	ldr	r0, [r7, #24]
 800a698:	f7ff fa4f 	bl	8009b3a <csp_rdp_time_after>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d042      	beq.n	800a728 <csp_rdp_check_timeouts+0x1d0>
			csp_log_protocol("RDP %p: TX Element timed out, retransmitting seq %u", conn, csp_ntoh16(header->seq_nr));
 800a6a2:	4b3c      	ldr	r3, [pc, #240]	; (800a794 <csp_rdp_check_timeouts+0x23c>)
 800a6a4:	795b      	ldrb	r3, [r3, #5]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00c      	beq.n	800a6c4 <csp_rdp_check_timeouts+0x16c>
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe f8a1 	bl	80087fa <csp_ntoh16>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	493a      	ldr	r1, [pc, #232]	; (800a7a8 <csp_rdp_check_timeouts+0x250>)
 800a6be:	2005      	movs	r0, #5
 800a6c0:	f7fe f804 	bl	80086cc <do_csp_debug>

			/* Update to latest outgoing ACK */
			header->ack_nr = csp_hton16(conn->rdp.rcv_cur);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe f881 	bl	80087d0 <csp_hton16>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f8a3 2003 	strh.w	r2, [r3, #3]

			/* Send copy to tx_queue */
			packet->timestamp = csp_get_ms();
 800a6d8:	68bc      	ldr	r4, [r7, #8]
 800a6da:	f7fd fa32 	bl	8007b42 <csp_get_ms>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	6063      	str	r3, [r4, #4]
			csp_packet_t * new_packet = csp_buffer_clone(packet);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fd fbc9 	bl	8007e7c <csp_buffer_clone>
 800a6ea:	60f8      	str	r0, [r7, #12]
			if (csp_send_direct(conn->idout, new_packet, csp_rtable_find_route(conn->idout.dst), 0) != CSP_ERR_NONE) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	895b      	ldrh	r3, [r3, #10]
 800a6f0:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff f91a 	bl	8009930 <csp_rtable_find_route>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	2300      	movs	r3, #0
 800a702:	68f9      	ldr	r1, [r7, #12]
 800a704:	6880      	ldr	r0, [r0, #8]
 800a706:	f7fe f97d 	bl	8008a04 <csp_send_direct>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <csp_rdp_check_timeouts+0x1d0>
				csp_log_warn("RDP %p: Retransmission failed", conn);
 800a710:	4b20      	ldr	r3, [pc, #128]	; (800a794 <csp_rdp_check_timeouts+0x23c>)
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d004      	beq.n	800a722 <csp_rdp_check_timeouts+0x1ca>
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	4924      	ldr	r1, [pc, #144]	; (800a7ac <csp_rdp_check_timeouts+0x254>)
 800a71c:	2001      	movs	r0, #1
 800a71e:	f7fd ffd5 	bl	80086cc <do_csp_debug>
				csp_buffer_free(new_packet);
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f7fd fb32 	bl	8007d8c <csp_buffer_free>
			}

		}

		/* Requeue the TX element */
		csp_queue_enqueue_isr(conn->rdp.tx_queue, &packet, &pdTrue);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72c:	f107 0108 	add.w	r1, r7, #8
 800a730:	4a1a      	ldr	r2, [pc, #104]	; (800a79c <csp_rdp_check_timeouts+0x244>)
 800a732:	4618      	mov	r0, r3
 800a734:	f7fd f8c3 	bl	80078be <csp_queue_enqueue_isr>
	for (int i = 0; i < count; i++) {
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	3301      	adds	r3, #1
 800a73c:	61fb      	str	r3, [r7, #28]
 800a73e:	69fa      	ldr	r2, [r7, #28]
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	429a      	cmp	r2, r3
 800a744:	f6ff af53 	blt.w	800a5ee <csp_rdp_check_timeouts+0x96>
 800a748:	e000      	b.n	800a74c <csp_rdp_check_timeouts+0x1f4>
			break;
 800a74a:	bf00      	nop

	}

	if (conn->rdp.state == RDP_OPEN) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7f1b      	ldrb	r3, [r3, #28]
 800a750:	2b03      	cmp	r3, #3
 800a752:	d11c      	bne.n	800a78e <csp_rdp_check_timeouts+0x236>

		/* Check if we have unacknowledged segments */
		if (conn->rdp.delayed_acks) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <csp_rdp_check_timeouts+0x20a>
			csp_rdp_check_ack(conn);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff fe9d 	bl	800a49c <csp_rdp_check_ack>
		}

		/* Wake user task if additional Tx can be done */
		if (csp_rdp_is_conn_ready_for_tx(conn)) {
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff fedc 	bl	800a520 <csp_rdp_is_conn_ready_for_tx>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00f      	beq.n	800a78e <csp_rdp_check_timeouts+0x236>
			csp_log_protocol("RDP %p: Wake Tx task (check timeouts)", conn);
 800a76e:	4b09      	ldr	r3, [pc, #36]	; (800a794 <csp_rdp_check_timeouts+0x23c>)
 800a770:	795b      	ldrb	r3, [r3, #5]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d004      	beq.n	800a780 <csp_rdp_check_timeouts+0x228>
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	490d      	ldr	r1, [pc, #52]	; (800a7b0 <csp_rdp_check_timeouts+0x258>)
 800a77a:	2005      	movs	r0, #5
 800a77c:	f7fd ffa6 	bl	80086cc <do_csp_debug>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3348      	adds	r3, #72	; 0x48
 800a784:	4618      	mov	r0, r3
 800a786:	f7fd f931 	bl	80079ec <csp_bin_sem_post>
 800a78a:	e000      	b.n	800a78e <csp_rdp_check_timeouts+0x236>
		return;
 800a78c:	bf00      	nop
		}
	}
}
 800a78e:	3724      	adds	r7, #36	; 0x24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd90      	pop	{r4, r7, pc}
 800a794:	20000014 	.word	0x20000014
 800a798:	0800f594 	.word	0x0800f594
 800a79c:	20000074 	.word	0x20000074
 800a7a0:	0800f5dc 	.word	0x0800f5dc
 800a7a4:	0800f614 	.word	0x0800f614
 800a7a8:	0800f648 	.word	0x0800f648
 800a7ac:	0800f67c 	.word	0x0800f67c
 800a7b0:	0800f69c 	.word	0x0800f69c

0800a7b4 <csp_rdp_new_packet>:

bool csp_rdp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b6:	b091      	sub	sp, #68	; 0x44
 800a7b8:	af08      	add	r7, sp, #32
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]

	bool close_connection = false;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	77fb      	strb	r3, [r7, #31]

	/* Get RX header and convert to host byte-order */
	rdp_header_t * rx_header = csp_rdp_header_ref(packet);
 800a7c2:	68b8      	ldr	r0, [r7, #8]
 800a7c4:	f7ff f952 	bl	8009a6c <csp_rdp_header_ref>
 800a7c8:	61b8      	str	r0, [r7, #24]
	rx_header->ack_nr = csp_ntoh16(rx_header->ack_nr);
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe f811 	bl	80087fa <csp_ntoh16>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	f8a3 2003 	strh.w	r2, [r3, #3]
	rx_header->seq_nr = csp_ntoh16(rx_header->seq_nr);
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe f805 	bl	80087fa <csp_ntoh16>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	f8a3 2001 	strh.w	r2, [r3, #1]

        uint8_t closed_by = CSP_RDP_CLOSED_BY_PROTOCOL;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	75fb      	strb	r3, [r7, #23]

	csp_log_protocol("RDP %p: Received in S %u: syn %u, ack %u, eack %u, "
 800a7fe:	4b72      	ldr	r3, [pc, #456]	; (800a9c8 <csp_rdp_new_packet+0x214>)
 800a800:	795b      	ldrb	r3, [r3, #5]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d03a      	beq.n	800a87c <csp_rdp_new_packet+0xc8>
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	7f1b      	ldrb	r3, [r3, #28]
 800a80c:	469c      	mov	ip, r3
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a816:	b2db      	uxtb	r3, r3
 800a818:	4619      	mov	r1, r3
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a822:	b2db      	uxtb	r3, r3
 800a824:	4618      	mov	r0, r3
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	461c      	mov	r4, r3
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	461d      	mov	r5, r3
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a844:	b29b      	uxth	r3, r3
 800a846:	461e      	mov	r6, r3
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	607b      	str	r3, [r7, #4]
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	895b      	ldrh	r3, [r3, #10]
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	895b      	ldrh	r3, [r3, #10]
 800a85c:	3b05      	subs	r3, #5
 800a85e:	9307      	str	r3, [sp, #28]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	9306      	str	r3, [sp, #24]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	9604      	str	r6, [sp, #16]
 800a86a:	9503      	str	r5, [sp, #12]
 800a86c:	9402      	str	r4, [sp, #8]
 800a86e:	9001      	str	r0, [sp, #4]
 800a870:	9100      	str	r1, [sp, #0]
 800a872:	4663      	mov	r3, ip
 800a874:	4955      	ldr	r1, [pc, #340]	; (800a9cc <csp_rdp_new_packet+0x218>)
 800a876:	2005      	movs	r0, #5
 800a878:	f7fd ff28 	bl	80086cc <do_csp_debug>
			conn, conn->rdp.state, rx_header->syn, rx_header->ack, rx_header->eak,
			rx_header->rst, rx_header->seq_nr, rx_header->ack_nr,
			packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	/* If a RESET was received. */
	if (rx_header->rst) {
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d06d      	beq.n	800a966 <csp_rdp_new_packet+0x1b2>

		if (rx_header->ack) {
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	f003 0304 	and.w	r3, r3, #4
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d007      	beq.n	800a8a8 <csp_rdp_new_packet+0xf4>
			/* Store current ack'ed sequence number */
			conn->rdp.snd_una = rx_header->ack_nr + 1;
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	841a      	strh	r2, [r3, #32]
		}

		if (conn->rdp.state == RDP_CLOSED) {
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	7f1b      	ldrb	r3, [r3, #28]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d111      	bne.n	800a8d4 <csp_rdp_new_packet+0x120>
			csp_log_protocol("RDP %p: RST received in CLOSED - ignored", conn);
 800a8b0:	4b45      	ldr	r3, [pc, #276]	; (800a9c8 <csp_rdp_new_packet+0x214>)
 800a8b2:	795b      	ldrb	r3, [r3, #5]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <csp_rdp_new_packet+0x110>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	4944      	ldr	r1, [pc, #272]	; (800a9d0 <csp_rdp_new_packet+0x21c>)
 800a8be:	2005      	movs	r0, #5
 800a8c0:	f7fd ff04 	bl	80086cc <do_csp_debug>
			close_connection = (conn->socket != NULL);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bf14      	ite	ne
 800a8cc:	2301      	movne	r3, #1
 800a8ce:	2300      	moveq	r3, #0
 800a8d0:	77fb      	strb	r3, [r7, #31]
			goto discard_open;
 800a8d2:	e3ba      	b.n	800b04a <csp_rdp_new_packet+0x896>
                }

		if (conn->rdp.state == RDP_CLOSE_WAIT) {
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	7f1b      	ldrb	r3, [r3, #28]
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d10f      	bne.n	800a8fc <csp_rdp_new_packet+0x148>
			csp_log_protocol("RDP %p: RST received in CLOSE_WAIT, ack: %d - closing", conn, rx_header->ack);
 800a8dc:	4b3a      	ldr	r3, [pc, #232]	; (800a9c8 <csp_rdp_new_packet+0x214>)
 800a8de:	795b      	ldrb	r3, [r3, #5]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 837c 	beq.w	800afde <csp_rdp_new_packet+0x82a>
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	4938      	ldr	r1, [pc, #224]	; (800a9d4 <csp_rdp_new_packet+0x220>)
 800a8f4:	2005      	movs	r0, #5
 800a8f6:	f7fd fee9 	bl	80086cc <do_csp_debug>
			if (rx_header->ack && CSP_USE_RDP_FAST_CLOSE) {
				// skip timeout - the other end has acknowledged the RST
				closed_by |= CSP_RDP_CLOSED_BY_TIMEOUT;
			}
			goto discard_close;
 800a8fa:	e370      	b.n	800afde <csp_rdp_new_packet+0x82a>
		}

		if (rx_header->seq_nr == (conn->rdp.rcv_cur + 1)) {
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a902:	b29b      	uxth	r3, r3
 800a904:	461a      	mov	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a90a:	3301      	adds	r3, #1
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d11e      	bne.n	800a94e <csp_rdp_new_packet+0x19a>
			csp_log_protocol("RDP %p: Received RST in sequence, no more data incoming, reply with RST", conn);
 800a910:	4b2d      	ldr	r3, [pc, #180]	; (800a9c8 <csp_rdp_new_packet+0x214>)
 800a912:	795b      	ldrb	r3, [r3, #5]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <csp_rdp_new_packet+0x170>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	461a      	mov	r2, r3
 800a91c:	492e      	ldr	r1, [pc, #184]	; (800a9d8 <csp_rdp_new_packet+0x224>)
 800a91e:	2005      	movs	r0, #5
 800a920:	f7fd fed4 	bl	80086cc <do_csp_debug>
			conn->rdp.state = RDP_CLOSE_WAIT;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2204      	movs	r2, #4
 800a928:	771a      	strb	r2, [r3, #28]
			conn->timestamp = csp_get_ms();
 800a92a:	68fc      	ldr	r4, [r7, #12]
 800a92c:	f7fd f909 	bl	8007b42 <csp_get_ms>
 800a930:	4603      	mov	r3, r0
 800a932:	6163      	str	r3, [r4, #20]
			csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8bdb      	ldrh	r3, [r3, #30]
 800a93a:	461a      	mov	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	4613      	mov	r3, r2
 800a944:	220a      	movs	r2, #10
 800a946:	2100      	movs	r1, #0
 800a948:	f7ff f906 	bl	8009b58 <csp_rdp_send_cmp>
                        if (CSP_USE_RDP_FAST_CLOSE) {
                            closed_by |= CSP_RDP_CLOSED_BY_TIMEOUT;
                        }
			goto discard_close;
 800a94c:	e352      	b.n	800aff4 <csp_rdp_new_packet+0x840>
		}

                csp_log_protocol("RDP %p: RST out of sequence, keep connection open", conn);
 800a94e:	4b1e      	ldr	r3, [pc, #120]	; (800a9c8 <csp_rdp_new_packet+0x214>)
 800a950:	795b      	ldrb	r3, [r3, #5]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 8368 	beq.w	800b028 <csp_rdp_new_packet+0x874>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	461a      	mov	r2, r3
 800a95c:	491f      	ldr	r1, [pc, #124]	; (800a9dc <csp_rdp_new_packet+0x228>)
 800a95e:	2005      	movs	r0, #5
 800a960:	f7fd feb4 	bl	80086cc <do_csp_debug>
		goto discard_open;
 800a964:	e360      	b.n	800b028 <csp_rdp_new_packet+0x874>
	}

	/* The BIG FAT switch (state-machine) */
	switch(conn->rdp.state) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	7f1b      	ldrb	r3, [r3, #28]
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	f200 832c 	bhi.w	800afc8 <csp_rdp_new_packet+0x814>
 800a970:	a201      	add	r2, pc, #4	; (adr r2, 800a978 <csp_rdp_new_packet+0x1c4>)
 800a972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a976:	bf00      	nop
 800a978:	0800a98d 	.word	0x0800a98d
 800a97c:	0800aaf5 	.word	0x0800aaf5
 800a980:	0800ac03 	.word	0x0800ac03
 800a984:	0800ac03 	.word	0x0800ac03
 800a988:	0800aedd 	.word	0x0800aedd
	 * STATE == CLOSED
	 */
	case RDP_CLOSED: {

		/* No SYN flag set while in closed. Inform by sending back RST */
		if (!rx_header->syn) {
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	f003 0308 	and.w	r3, r3, #8
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d124      	bne.n	800a9e4 <csp_rdp_new_packet+0x230>
			csp_log_protocol("RDP %p: Not SYN received in CLOSED state. Discarding packet", conn);
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <csp_rdp_new_packet+0x214>)
 800a99c:	795b      	ldrb	r3, [r3, #5]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d005      	beq.n	800a9ae <csp_rdp_new_packet+0x1fa>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	490e      	ldr	r1, [pc, #56]	; (800a9e0 <csp_rdp_new_packet+0x22c>)
 800a9a8:	2005      	movs	r0, #5
 800a9aa:	f7fd fe8f 	bl	80086cc <do_csp_debug>
			csp_rdp_send_cmp(conn, NULL, RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	8bdb      	ldrh	r3, [r3, #30]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	2208      	movs	r2, #8
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	f7ff f8c9 	bl	8009b58 <csp_rdp_send_cmp>
			goto discard_close;
 800a9c6:	e315      	b.n	800aff4 <csp_rdp_new_packet+0x840>
 800a9c8:	20000014 	.word	0x20000014
 800a9cc:	0800f6c4 	.word	0x0800f6c4
 800a9d0:	0800f72c 	.word	0x0800f72c
 800a9d4:	0800f758 	.word	0x0800f758
 800a9d8:	0800f790 	.word	0x0800f790
 800a9dc:	0800f7d8 	.word	0x0800f7d8
 800a9e0:	0800f80c 	.word	0x0800f80c
		}

		csp_log_protocol("RDP %p: SYN-Received", conn);
 800a9e4:	4b9e      	ldr	r3, [pc, #632]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800a9e6:	795b      	ldrb	r3, [r3, #5]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <csp_rdp_new_packet+0x244>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	499c      	ldr	r1, [pc, #624]	; (800ac64 <csp_rdp_new_packet+0x4b0>)
 800a9f2:	2005      	movs	r0, #5
 800a9f4:	f7fd fe6a 	bl	80086cc <do_csp_debug>

		/* Setup TX seq. */
		conn->rdp.snd_iss = (uint16_t)rand();
 800a9f8:	f001 fdba 	bl	800c570 <rand>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	b292      	uxth	r2, r2
 800aa02:	845a      	strh	r2, [r3, #34]	; 0x22
		conn->rdp.snd_nxt = conn->rdp.snd_iss + 1;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3201      	adds	r2, #1
 800aa0c:	b292      	uxth	r2, r2
 800aa0e:	83da      	strh	r2, [r3, #30]
		conn->rdp.snd_una = conn->rdp.snd_iss;
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800aa16:	841a      	strh	r2, [r3, #32]

		/* Store RX seq. */
		conn->rdp.rcv_cur = rx_header->seq_nr;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800aa20:	b292      	uxth	r2, r2
 800aa22:	849a      	strh	r2, [r3, #36]	; 0x24
		conn->rdp.rcv_irs = rx_header->seq_nr;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800aa2c:	b292      	uxth	r2, r2
 800aa2e:	84da      	strh	r2, [r3, #38]	; 0x26
		conn->rdp.rcv_lsa = rx_header->seq_nr;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	69ba      	ldr	r2, [r7, #24]
 800aa34:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	851a      	strh	r2, [r3, #40]	; 0x28

		/* Store RDP options */
		conn->rdp.window_size 		= csp_ntoh32(packet->data32[0]);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	68fc      	ldr	r4, [r7, #12]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fd ff00 	bl	8008848 <csp_ntoh32>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	62e3      	str	r3, [r4, #44]	; 0x2c
		conn->rdp.conn_timeout 		= csp_ntoh32(packet->data32[1]);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	68fc      	ldr	r4, [r7, #12]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fd fef8 	bl	8008848 <csp_ntoh32>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	6323      	str	r3, [r4, #48]	; 0x30
		conn->rdp.packet_timeout 	= csp_ntoh32(packet->data32[2]);
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	68fc      	ldr	r4, [r7, #12]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fd fef0 	bl	8008848 <csp_ntoh32>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	6363      	str	r3, [r4, #52]	; 0x34
		conn->rdp.delayed_acks 		= csp_ntoh32(packet->data32[3]);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	68fc      	ldr	r4, [r7, #12]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fd fee8 	bl	8008848 <csp_ntoh32>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	63a3      	str	r3, [r4, #56]	; 0x38
		conn->rdp.ack_timeout 		= csp_ntoh32(packet->data32[4]);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	68fc      	ldr	r4, [r7, #12]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fd fee0 	bl	8008848 <csp_ntoh32>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	63e3      	str	r3, [r4, #60]	; 0x3c
		conn->rdp.ack_delay_count 	= csp_ntoh32(packet->data32[5]);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	68fc      	ldr	r4, [r7, #12]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fd fed8 	bl	8008848 <csp_ntoh32>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	6423      	str	r3, [r4, #64]	; 0x40
		csp_log_protocol("RDP %p: window size %"PRIu32", conn timeout %"PRIu32", packet timeout %"PRIu32", delayed acks: %"PRIu32", ack timeout %"PRIu32", ack each %"PRIu32" packet",
 800aa9c:	4b70      	ldr	r3, [pc, #448]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800aa9e:	795b      	ldrb	r3, [r3, #5]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d017      	beq.n	800aad4 <csp_rdp_new_packet+0x320>
 800aaa4:	68fd      	ldr	r5, [r7, #12]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aab2:	68f9      	ldr	r1, [r7, #12]
 800aab4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800aaba:	68fc      	ldr	r4, [r7, #12]
 800aabc:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800aabe:	9404      	str	r4, [sp, #16]
 800aac0:	9003      	str	r0, [sp, #12]
 800aac2:	9102      	str	r1, [sp, #8]
 800aac4:	9201      	str	r2, [sp, #4]
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	4633      	mov	r3, r6
 800aaca:	462a      	mov	r2, r5
 800aacc:	4966      	ldr	r1, [pc, #408]	; (800ac68 <csp_rdp_new_packet+0x4b4>)
 800aace:	2005      	movs	r0, #5
 800aad0:	f7fd fdfc 	bl	80086cc <do_csp_debug>
				conn, conn->rdp.window_size, conn->rdp.conn_timeout, conn->rdp.packet_timeout,
				conn->rdp.delayed_acks, conn->rdp.ack_timeout, conn->rdp.ack_delay_count);

		/* Connection accepted */
		conn->rdp.state = RDP_SYN_RCVD;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2202      	movs	r2, #2
 800aad8:	771a      	strb	r2, [r3, #28]

		/* Send SYN/ACK */
		csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_SYN, conn->rdp.snd_iss, conn->rdp.rcv_irs);
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800aae0:	461a      	mov	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	4613      	mov	r3, r2
 800aaea:	2203      	movs	r2, #3
 800aaec:	2100      	movs	r1, #0
 800aaee:	f7ff f833 	bl	8009b58 <csp_rdp_send_cmp>

		goto discard_open;
 800aaf2:	e2aa      	b.n	800b04a <csp_rdp_new_packet+0x896>
	 * STATE == SYN-SENT
	 */
	case RDP_SYN_SENT: {

		/* First check SYN/ACK */
		if (rx_header->syn && rx_header->ack) {
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d050      	beq.n	800aba4 <csp_rdp_new_packet+0x3f0>
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f003 0304 	and.w	r3, r3, #4
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d049      	beq.n	800aba4 <csp_rdp_new_packet+0x3f0>

			conn->rdp.rcv_cur = rx_header->seq_nr;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800ab18:	b292      	uxth	r2, r2
 800ab1a:	849a      	strh	r2, [r3, #36]	; 0x24
			conn->rdp.rcv_irs = rx_header->seq_nr;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 800ab24:	b292      	uxth	r2, r2
 800ab26:	84da      	strh	r2, [r3, #38]	; 0x26
			conn->rdp.rcv_lsa = rx_header->seq_nr - 1;
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3a01      	subs	r2, #1
 800ab34:	b292      	uxth	r2, r2
 800ab36:	851a      	strh	r2, [r3, #40]	; 0x28
			conn->rdp.snd_una = rx_header->ack_nr + 1;
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3201      	adds	r2, #1
 800ab44:	b292      	uxth	r2, r2
 800ab46:	841a      	strh	r2, [r3, #32]
			conn->rdp.ack_timestamp = csp_get_ms();
 800ab48:	68fc      	ldr	r4, [r7, #12]
 800ab4a:	f7fc fffa 	bl	8007b42 <csp_get_ms>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	6463      	str	r3, [r4, #68]	; 0x44
			conn->rdp.state = RDP_OPEN;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2203      	movs	r2, #3
 800ab56:	771a      	strb	r2, [r3, #28]

			csp_log_protocol("RDP %p: NP: Connection OPEN", conn);
 800ab58:	4b41      	ldr	r3, [pc, #260]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800ab5a:	795b      	ldrb	r3, [r3, #5]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d005      	beq.n	800ab6c <csp_rdp_new_packet+0x3b8>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	461a      	mov	r2, r3
 800ab64:	4941      	ldr	r1, [pc, #260]	; (800ac6c <csp_rdp_new_packet+0x4b8>)
 800ab66:	2005      	movs	r0, #5
 800ab68:	f7fd fdb0 	bl	80086cc <do_csp_debug>

			/* Send ACK */
			csp_rdp_send_cmp(conn, NULL, RDP_ACK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8bdb      	ldrh	r3, [r3, #30]
 800ab72:	461a      	mov	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	2100      	movs	r1, #0
 800ab80:	f7fe ffea 	bl	8009b58 <csp_rdp_send_cmp>

			/* Wake TX task */
			csp_log_protocol("RDP %p: Wake Tx task (ack)", conn);
 800ab84:	4b36      	ldr	r3, [pc, #216]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800ab86:	795b      	ldrb	r3, [r3, #5]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d005      	beq.n	800ab98 <csp_rdp_new_packet+0x3e4>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4937      	ldr	r1, [pc, #220]	; (800ac70 <csp_rdp_new_packet+0x4bc>)
 800ab92:	2005      	movs	r0, #5
 800ab94:	f7fd fd9a 	bl	80086cc <do_csp_debug>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3348      	adds	r3, #72	; 0x48
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fc ff25 	bl	80079ec <csp_bin_sem_post>

			goto discard_open;
 800aba2:	e252      	b.n	800b04a <csp_rdp_new_packet+0x896>
		/* If there was no SYN in the reply, our SYN message hit an already open connection
		 * This is handled by sending a RST.
		 * Normally this would be followed up by a new connection attempt, however
		 * we don't have a method for signaling this to the user space.
		 */
		if (rx_header->ack) {
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d01b      	beq.n	800abea <csp_rdp_new_packet+0x436>
			csp_log_error("RDP %p: Half-open connection found, send RST and wake Tx task", conn);
 800abb2:	4b2b      	ldr	r3, [pc, #172]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d005      	beq.n	800abc6 <csp_rdp_new_packet+0x412>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	461a      	mov	r2, r3
 800abbe:	492d      	ldr	r1, [pc, #180]	; (800ac74 <csp_rdp_new_packet+0x4c0>)
 800abc0:	2000      	movs	r0, #0
 800abc2:	f7fd fd83 	bl	80086cc <do_csp_debug>
			csp_rdp_send_cmp(conn, NULL, RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8bdb      	ldrh	r3, [r3, #30]
 800abcc:	461a      	mov	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	4613      	mov	r3, r2
 800abd6:	2208      	movs	r2, #8
 800abd8:	2100      	movs	r1, #0
 800abda:	f7fe ffbd 	bl	8009b58 <csp_rdp_send_cmp>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3348      	adds	r3, #72	; 0x48
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fc ff02 	bl	80079ec <csp_bin_sem_post>

			goto discard_open;
 800abe8:	e22f      	b.n	800b04a <csp_rdp_new_packet+0x896>

		/* Otherwise we have an invalid command, such as a SYN reply to a SYN command,
		 * indicating simultaneous connections, which is not possible in the way CSP
		 * reserves some ports for server and some for clients.
		 */
		csp_log_error("RDP %p: Invalid reply to SYN request", conn);
 800abea:	4b1d      	ldr	r3, [pc, #116]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 81f7 	beq.w	800afe2 <csp_rdp_new_packet+0x82e>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	461a      	mov	r2, r3
 800abf8:	491f      	ldr	r1, [pc, #124]	; (800ac78 <csp_rdp_new_packet+0x4c4>)
 800abfa:	2000      	movs	r0, #0
 800abfc:	f7fd fd66 	bl	80086cc <do_csp_debug>
		goto discard_close;
 800ac00:	e1ef      	b.n	800afe2 <csp_rdp_new_packet+0x82e>
	case RDP_SYN_RCVD:
	case RDP_OPEN:
	{

		/* SYN or !ACK is invalid */
		if (rx_header->syn || !rx_header->ack) {
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d106      	bne.n	800ac1e <csp_rdp_new_packet+0x46a>
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 0304 	and.w	r3, r3, #4
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d132      	bne.n	800ac84 <csp_rdp_new_packet+0x4d0>
			if (rx_header->seq_nr != conn->rdp.rcv_irs) {
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d00b      	beq.n	800ac46 <csp_rdp_new_packet+0x492>
				csp_log_error("RDP %p: Invalid SYN or no ACK, resetting!", conn);
 800ac2e:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f000 81d7 	beq.w	800afe6 <csp_rdp_new_packet+0x832>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	490f      	ldr	r1, [pc, #60]	; (800ac7c <csp_rdp_new_packet+0x4c8>)
 800ac3e:	2000      	movs	r0, #0
 800ac40:	f7fd fd44 	bl	80086cc <do_csp_debug>
				goto discard_close;
 800ac44:	e1cf      	b.n	800afe6 <csp_rdp_new_packet+0x832>
			} else {
				csp_log_protocol("RDP %p: Ignoring duplicate SYN packet!", conn);
 800ac46:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <csp_rdp_new_packet+0x4ac>)
 800ac48:	795b      	ldrb	r3, [r3, #5]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 81ee 	beq.w	800b02c <csp_rdp_new_packet+0x878>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	461a      	mov	r2, r3
 800ac54:	490a      	ldr	r1, [pc, #40]	; (800ac80 <csp_rdp_new_packet+0x4cc>)
 800ac56:	2005      	movs	r0, #5
 800ac58:	f7fd fd38 	bl	80086cc <do_csp_debug>
				goto discard_open;
 800ac5c:	e1e6      	b.n	800b02c <csp_rdp_new_packet+0x878>
 800ac5e:	bf00      	nop
 800ac60:	20000014 	.word	0x20000014
 800ac64:	0800f848 	.word	0x0800f848
 800ac68:	0800f860 	.word	0x0800f860
 800ac6c:	0800f8d8 	.word	0x0800f8d8
 800ac70:	0800f8f4 	.word	0x0800f8f4
 800ac74:	0800f910 	.word	0x0800f910
 800ac78:	0800f950 	.word	0x0800f950
 800ac7c:	0800f978 	.word	0x0800f978
 800ac80:	0800f9a4 	.word	0x0800f9a4
			}
		}

		/* Check sequence number */
		if (!csp_rdp_seq_between(rx_header->seq_nr, conn->rdp.rcv_cur + 1, conn->rdp.rcv_cur + (conn->rdp.window_size * 2))) {
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac8a:	b298      	uxth	r0, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac90:	3301      	adds	r3, #1
 800ac92:	b299      	uxth	r1, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	4413      	add	r3, r2
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	f7fe fef2 	bl	8009a90 <csp_rdp_seq_between>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d135      	bne.n	800ad1e <csp_rdp_new_packet+0x56a>
			csp_log_protocol("RDP %p: Invalid sequence number! %u not between %u and %"PRIu32,
 800acb2:	4b97      	ldr	r3, [pc, #604]	; (800af10 <csp_rdp_new_packet+0x75c>)
 800acb4:	795b      	ldrb	r3, [r3, #5]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d017      	beq.n	800acea <csp_rdp_new_packet+0x536>
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	461c      	mov	r4, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800acca:	3301      	adds	r3, #1
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800acd0:	4610      	mov	r0, r2
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acd6:	0052      	lsls	r2, r2, #1
 800acd8:	4402      	add	r2, r0
 800acda:	9201      	str	r2, [sp, #4]
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	4623      	mov	r3, r4
 800ace0:	460a      	mov	r2, r1
 800ace2:	498c      	ldr	r1, [pc, #560]	; (800af14 <csp_rdp_new_packet+0x760>)
 800ace4:	2005      	movs	r0, #5
 800ace6:	f7fd fcf1 	bl	80086cc <do_csp_debug>
				conn, rx_header->seq_nr, conn->rdp.rcv_cur + 1U, conn->rdp.rcv_cur + (conn->rdp.window_size * 2U));
			/* If duplicate SYN received, send another SYN/ACK */
			if (conn->rdp.state == RDP_SYN_RCVD)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	7f1b      	ldrb	r3, [r3, #28]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d10b      	bne.n	800ad0a <csp_rdp_new_packet+0x556>
				csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_SYN, conn->rdp.snd_iss, conn->rdp.rcv_irs);
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800acf8:	461a      	mov	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	4613      	mov	r3, r2
 800ad02:	2203      	movs	r2, #3
 800ad04:	2100      	movs	r1, #0
 800ad06:	f7fe ff27 	bl	8009b58 <csp_rdp_send_cmp>
			/* If duplicate data packet received, send EACK back */
			if (conn->rdp.state == RDP_OPEN)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	7f1b      	ldrb	r3, [r3, #28]
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	f040 818e 	bne.w	800b030 <csp_rdp_new_packet+0x87c>
				csp_rdp_send_eack(conn);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7ff f844 	bl	8009da4 <csp_rdp_send_eack>

			goto discard_open;
 800ad1c:	e188      	b.n	800b030 <csp_rdp_new_packet+0x87c>
		}

		/* Check ACK number */
		if (!csp_rdp_seq_between(rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1)) {
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ad24:	b298      	uxth	r0, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	8c1a      	ldrh	r2, [r3, #32]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	b299      	uxth	r1, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	8bdb      	ldrh	r3, [r3, #30]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	461a      	mov	r2, r3
 800ad46:	f7fe fea3 	bl	8009a90 <csp_rdp_seq_between>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d11e      	bne.n	800ad8e <csp_rdp_new_packet+0x5da>
			csp_log_error("RDP %p: Invalid ACK number! %u not between %"PRIu32" and %u",
 800ad50:	4b6f      	ldr	r3, [pc, #444]	; (800af10 <csp_rdp_new_packet+0x75c>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f000 816d 	beq.w	800b034 <csp_rdp_new_packet+0x880>
 800ad5a:	68f9      	ldr	r1, [r7, #12]
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	4618      	mov	r0, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	8c1b      	ldrh	r3, [r3, #32]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	3b01      	subs	r3, #1
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	8bd2      	ldrh	r2, [r2, #30]
 800ad7a:	3a01      	subs	r2, #1
 800ad7c:	9201      	str	r2, [sp, #4]
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	4603      	mov	r3, r0
 800ad82:	460a      	mov	r2, r1
 800ad84:	4964      	ldr	r1, [pc, #400]	; (800af18 <csp_rdp_new_packet+0x764>)
 800ad86:	2000      	movs	r0, #0
 800ad88:	f7fd fca0 	bl	80086cc <do_csp_debug>
				conn, rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1);
			goto discard_open;
 800ad8c:	e152      	b.n	800b034 <csp_rdp_new_packet+0x880>
		}

		/* Check SYN_RCVD ACK */
		if (conn->rdp.state == RDP_SYN_RCVD) {
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	7f1b      	ldrb	r3, [r3, #28]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d13e      	bne.n	800ae14 <csp_rdp_new_packet+0x660>
			if (rx_header->ack_nr != conn->rdp.snd_iss) {
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d00b      	beq.n	800adbe <csp_rdp_new_packet+0x60a>
				csp_log_error("RDP %p: SYN-RCVD: Wrong ACK number", conn);
 800ada6:	4b5a      	ldr	r3, [pc, #360]	; (800af10 <csp_rdp_new_packet+0x75c>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 811d 	beq.w	800afea <csp_rdp_new_packet+0x836>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	461a      	mov	r2, r3
 800adb4:	4959      	ldr	r1, [pc, #356]	; (800af1c <csp_rdp_new_packet+0x768>)
 800adb6:	2000      	movs	r0, #0
 800adb8:	f7fd fc88 	bl	80086cc <do_csp_debug>
				goto discard_close;
 800adbc:	e115      	b.n	800afea <csp_rdp_new_packet+0x836>
			}
			csp_log_protocol("RDP %p: NC: Connection OPEN", conn);
 800adbe:	4b54      	ldr	r3, [pc, #336]	; (800af10 <csp_rdp_new_packet+0x75c>)
 800adc0:	795b      	ldrb	r3, [r3, #5]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <csp_rdp_new_packet+0x61e>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	461a      	mov	r2, r3
 800adca:	4955      	ldr	r1, [pc, #340]	; (800af20 <csp_rdp_new_packet+0x76c>)
 800adcc:	2005      	movs	r0, #5
 800adce:	f7fd fc7d 	bl	80086cc <do_csp_debug>
			conn->rdp.state = RDP_OPEN;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2203      	movs	r2, #3
 800add6:	771a      	strb	r2, [r3, #28]

			/* If a socket is set, this message is the first in a new connection
			 * so the connection must be queued to the socket. */
			if (conn->socket != NULL) {
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d019      	beq.n	800ae14 <csp_rdp_new_packet+0x660>

				/* Try queueing */
				if (csp_queue_enqueue(conn->socket, &conn, 0) == CSP_QUEUE_FULL) {
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	f107 010c 	add.w	r1, r7, #12
 800ade8:	2200      	movs	r2, #0
 800adea:	4618      	mov	r0, r3
 800adec:	f7fc fd53 	bl	8007896 <csp_queue_enqueue>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10b      	bne.n	800ae0e <csp_rdp_new_packet+0x65a>
					csp_log_error("RDP %p: ERROR socket cannot accept more connections", conn);
 800adf6:	4b46      	ldr	r3, [pc, #280]	; (800af10 <csp_rdp_new_packet+0x75c>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 80f7 	beq.w	800afee <csp_rdp_new_packet+0x83a>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	461a      	mov	r2, r3
 800ae04:	4947      	ldr	r1, [pc, #284]	; (800af24 <csp_rdp_new_packet+0x770>)
 800ae06:	2000      	movs	r0, #0
 800ae08:	f7fd fc60 	bl	80086cc <do_csp_debug>
					goto discard_close;
 800ae0c:	e0ef      	b.n	800afee <csp_rdp_new_packet+0x83a>
				}

				/* Ensure that this connection will not be posted to this socket again
				 * and remember that the connection handle has been passed to userspace
				 * by setting the socket = NULL */
				conn->socket = NULL;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	611a      	str	r2, [r3, #16]
			}

		}

		/* Store current ack'ed sequence number */
		conn->rdp.snd_una = rx_header->ack_nr + 1;
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3201      	adds	r2, #1
 800ae20:	b292      	uxth	r2, r2
 800ae22:	841a      	strh	r2, [r3, #32]

		/* We have an EACK */
		if (rx_header->eak) {
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	f003 0302 	and.w	r3, r3, #2
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <csp_rdp_new_packet+0x694>
			if (packet->length > sizeof(rdp_header_t))
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	895b      	ldrh	r3, [r3, #10]
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	f240 80fe 	bls.w	800b038 <csp_rdp_new_packet+0x884>
				csp_rdp_flush_eack(conn, packet);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7ff f9b3 	bl	800a1ac <csp_rdp_flush_eack>
			goto discard_open;
 800ae46:	e0f7      	b.n	800b038 <csp_rdp_new_packet+0x884>
		}

		/* If no data, return here */
		if (packet->length <= sizeof(rdp_header_t))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	895b      	ldrh	r3, [r3, #10]
 800ae4c:	2b05      	cmp	r3, #5
 800ae4e:	f240 80f5 	bls.w	800b03c <csp_rdp_new_packet+0x888>
			goto discard_open;

		/* If message is not in sequence, send EACK and store packet */
		if (rx_header->seq_nr != (uint16_t)(conn->rdp.rcv_cur + 1)) {
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae5e:	3301      	adds	r3, #1
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d01f      	beq.n	800aea6 <csp_rdp_new_packet+0x6f2>
			if (csp_rdp_rx_queue_add(conn, packet, rx_header->seq_nr) != CSP_QUEUE_OK) {
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	461a      	mov	r2, r3
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	f7ff f97a 	bl	800a16c <csp_rdp_rx_queue_add>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d00e      	beq.n	800ae9c <csp_rdp_new_packet+0x6e8>
				csp_log_protocol("RDP %p: Duplicate sequence number", conn);
 800ae7e:	4b24      	ldr	r3, [pc, #144]	; (800af10 <csp_rdp_new_packet+0x75c>)
 800ae80:	795b      	ldrb	r3, [r3, #5]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d005      	beq.n	800ae92 <csp_rdp_new_packet+0x6de>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4927      	ldr	r1, [pc, #156]	; (800af28 <csp_rdp_new_packet+0x774>)
 800ae8c:	2005      	movs	r0, #5
 800ae8e:	f7fd fc1d 	bl	80086cc <do_csp_debug>
				csp_rdp_check_ack(conn);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7ff fb01 	bl	800a49c <csp_rdp_check_ack>
				goto discard_open;
 800ae9a:	e0d6      	b.n	800b04a <csp_rdp_new_packet+0x896>
			}
			csp_rdp_send_eack(conn);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe ff80 	bl	8009da4 <csp_rdp_send_eack>
			goto accepted_open;
 800aea4:	e0d4      	b.n	800b050 <csp_rdp_new_packet+0x89c>
		}

		/* Store sequence number before stripping RDP header */
		uint16_t seq_nr = rx_header->seq_nr;
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	785a      	ldrb	r2, [r3, #1]
 800aeaa:	789b      	ldrb	r3, [r3, #2]
 800aeac:	021b      	lsls	r3, r3, #8
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	82bb      	strh	r3, [r7, #20]

		/* Receive data */
		if (csp_rdp_receive_data(conn, packet) != CSP_ERR_NONE)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff f856 	bl	8009f68 <csp_rdp_receive_data>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f040 80be 	bne.w	800b040 <csp_rdp_new_packet+0x88c>
			goto discard_open;

		/* Update last received packet */
		conn->rdp.rcv_cur = seq_nr;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	8aba      	ldrh	r2, [r7, #20]
 800aec8:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Only ACK the message if there is room for a full window in the RX buffer.
		 * Unacknowledged segments are ACKed by csp_rdp_check_timeouts when the buffer is
		 * no longer full. */
		csp_rdp_check_ack(conn);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4618      	mov	r0, r3
 800aece:	f7ff fae5 	bl	800a49c <csp_rdp_check_ack>

		/* Flush RX queue */
		csp_rdp_rx_queue_flush(conn);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff f86b 	bl	8009fb0 <csp_rdp_rx_queue_flush>

		goto accepted_open;
 800aeda:	e0b9      	b.n	800b050 <csp_rdp_new_packet+0x89c>
	break;

	case RDP_CLOSE_WAIT:

		/* Ignore SYN or !ACK */
		if (rx_header->syn || !rx_header->ack) {
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 0308 	and.w	r3, r3, #8
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <csp_rdp_new_packet+0x744>
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f003 0304 	and.w	r3, r3, #4
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11b      	bne.n	800af30 <csp_rdp_new_packet+0x77c>
			csp_log_protocol("RDP %p: Invalid SYN or no ACK in CLOSE-WAIT", conn);
 800aef8:	4b05      	ldr	r3, [pc, #20]	; (800af10 <csp_rdp_new_packet+0x75c>)
 800aefa:	795b      	ldrb	r3, [r3, #5]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 80a1 	beq.w	800b044 <csp_rdp_new_packet+0x890>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	461a      	mov	r2, r3
 800af06:	4909      	ldr	r1, [pc, #36]	; (800af2c <csp_rdp_new_packet+0x778>)
 800af08:	2005      	movs	r0, #5
 800af0a:	f7fd fbdf 	bl	80086cc <do_csp_debug>
			goto discard_open;
 800af0e:	e099      	b.n	800b044 <csp_rdp_new_packet+0x890>
 800af10:	20000014 	.word	0x20000014
 800af14:	0800f9cc 	.word	0x0800f9cc
 800af18:	0800fa08 	.word	0x0800fa08
 800af1c:	0800fa40 	.word	0x0800fa40
 800af20:	0800fa64 	.word	0x0800fa64
 800af24:	0800fa80 	.word	0x0800fa80
 800af28:	0800fab4 	.word	0x0800fab4
 800af2c:	0800fad8 	.word	0x0800fad8
		}

		/* Check ACK number */
		if (!csp_rdp_seq_between(rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1)) {
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800af36:	b298      	uxth	r0, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	8c1a      	ldrh	r2, [r3, #32]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	b29b      	uxth	r3, r3
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	b29b      	uxth	r3, r3
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	b29b      	uxth	r3, r3
 800af4a:	3b01      	subs	r3, #1
 800af4c:	b299      	uxth	r1, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	8bdb      	ldrh	r3, [r3, #30]
 800af52:	3b01      	subs	r3, #1
 800af54:	b29b      	uxth	r3, r3
 800af56:	461a      	mov	r2, r3
 800af58:	f7fe fd9a 	bl	8009a90 <csp_rdp_seq_between>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d11d      	bne.n	800af9e <csp_rdp_new_packet+0x7ea>
			csp_log_error("RDP %p: Invalid ACK number! %u not between %"PRIu32" and %u",
 800af62:	4b3e      	ldr	r3, [pc, #248]	; (800b05c <csp_rdp_new_packet+0x8a8>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d06e      	beq.n	800b048 <csp_rdp_new_packet+0x894>
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800af72:	b29b      	uxth	r3, r3
 800af74:	4618      	mov	r0, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	8c1b      	ldrh	r3, [r3, #32]
 800af7a:	461a      	mov	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	3b01      	subs	r3, #1
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	8bd2      	ldrh	r2, [r2, #30]
 800af8a:	3a01      	subs	r2, #1
 800af8c:	9201      	str	r2, [sp, #4]
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	4603      	mov	r3, r0
 800af92:	460a      	mov	r2, r1
 800af94:	4932      	ldr	r1, [pc, #200]	; (800b060 <csp_rdp_new_packet+0x8ac>)
 800af96:	2000      	movs	r0, #0
 800af98:	f7fd fb98 	bl	80086cc <do_csp_debug>
				conn, rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1);
			goto discard_open;
 800af9c:	e054      	b.n	800b048 <csp_rdp_new_packet+0x894>
		}

		/* Store current ack'ed sequence number */
		conn->rdp.snd_una = rx_header->ack_nr + 1;
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3201      	adds	r2, #1
 800afaa:	b292      	uxth	r2, r2
 800afac:	841a      	strh	r2, [r3, #32]

		/* Send back a reset */
		csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	8bdb      	ldrh	r3, [r3, #30]
 800afb4:	461a      	mov	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4613      	mov	r3, r2
 800afbe:	220a      	movs	r2, #10
 800afc0:	2100      	movs	r1, #0
 800afc2:	f7fe fdc9 	bl	8009b58 <csp_rdp_send_cmp>

		goto discard_open;
 800afc6:	e040      	b.n	800b04a <csp_rdp_new_packet+0x896>

	default:
            csp_log_error("RDP %p: ERROR default state!", conn);
 800afc8:	4b24      	ldr	r3, [pc, #144]	; (800b05c <csp_rdp_new_packet+0x8a8>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d010      	beq.n	800aff2 <csp_rdp_new_packet+0x83e>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	461a      	mov	r2, r3
 800afd4:	4923      	ldr	r1, [pc, #140]	; (800b064 <csp_rdp_new_packet+0x8b0>)
 800afd6:	2000      	movs	r0, #0
 800afd8:	f7fd fb78 	bl	80086cc <do_csp_debug>
		goto discard_close;
 800afdc:	e009      	b.n	800aff2 <csp_rdp_new_packet+0x83e>
			goto discard_close;
 800afde:	bf00      	nop
 800afe0:	e008      	b.n	800aff4 <csp_rdp_new_packet+0x840>
		goto discard_close;
 800afe2:	bf00      	nop
 800afe4:	e006      	b.n	800aff4 <csp_rdp_new_packet+0x840>
				goto discard_close;
 800afe6:	bf00      	nop
 800afe8:	e004      	b.n	800aff4 <csp_rdp_new_packet+0x840>
				goto discard_close;
 800afea:	bf00      	nop
 800afec:	e002      	b.n	800aff4 <csp_rdp_new_packet+0x840>
					goto discard_close;
 800afee:	bf00      	nop
 800aff0:	e000      	b.n	800aff4 <csp_rdp_new_packet+0x840>
		goto discard_close;
 800aff2:	bf00      	nop
	}

discard_close:
	/* If user-space has received the connection handle, wake it up,
	 * by sending a NULL pointer, user-space must close connection */
	if (conn->socket == NULL) {
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10b      	bne.n	800b014 <csp_rdp_new_packet+0x860>
		csp_conn_close(conn, closed_by);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	7dfa      	ldrb	r2, [r7, #23]
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f7fd f9dc 	bl	80083c0 <csp_conn_close>
		csp_conn_enqueue_packet(conn, NULL);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fc ffb3 	bl	8007f78 <csp_conn_enqueue_packet>
 800b012:	e01a      	b.n	800b04a <csp_rdp_new_packet+0x896>
	} else {
		/* New connection, userspace doesn't know anything about it yet - so it can be completely closed */
		csp_conn_close(conn, closed_by | CSP_RDP_CLOSED_BY_USERSPACE);
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	f043 0301 	orr.w	r3, r3, #1
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	4619      	mov	r1, r3
 800b020:	4610      	mov	r0, r2
 800b022:	f7fd f9cd 	bl	80083c0 <csp_conn_close>
 800b026:	e010      	b.n	800b04a <csp_rdp_new_packet+0x896>
		goto discard_open;
 800b028:	bf00      	nop
 800b02a:	e00e      	b.n	800b04a <csp_rdp_new_packet+0x896>
				goto discard_open;
 800b02c:	bf00      	nop
 800b02e:	e00c      	b.n	800b04a <csp_rdp_new_packet+0x896>
			goto discard_open;
 800b030:	bf00      	nop
 800b032:	e00a      	b.n	800b04a <csp_rdp_new_packet+0x896>
			goto discard_open;
 800b034:	bf00      	nop
 800b036:	e008      	b.n	800b04a <csp_rdp_new_packet+0x896>
			goto discard_open;
 800b038:	bf00      	nop
 800b03a:	e006      	b.n	800b04a <csp_rdp_new_packet+0x896>
			goto discard_open;
 800b03c:	bf00      	nop
 800b03e:	e004      	b.n	800b04a <csp_rdp_new_packet+0x896>
			goto discard_open;
 800b040:	bf00      	nop
 800b042:	e002      	b.n	800b04a <csp_rdp_new_packet+0x896>
			goto discard_open;
 800b044:	bf00      	nop
 800b046:	e000      	b.n	800b04a <csp_rdp_new_packet+0x896>
			goto discard_open;
 800b048:	bf00      	nop
	}

discard_open:
	csp_buffer_free(packet);
 800b04a:	68b8      	ldr	r0, [r7, #8]
 800b04c:	f7fc fe9e 	bl	8007d8c <csp_buffer_free>
accepted_open:
	return close_connection;
 800b050:	7ffb      	ldrb	r3, [r7, #31]

}
 800b052:	4618      	mov	r0, r3
 800b054:	3724      	adds	r7, #36	; 0x24
 800b056:	46bd      	mov	sp, r7
 800b058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000014 	.word	0x20000014
 800b060:	0800fa08 	.word	0x0800fa08
 800b064:	0800fb04 	.word	0x0800fb04

0800b068 <csp_rdp_connect>:

int csp_rdp_connect(csp_conn_t * conn) {
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

	int retry = 1;
 800b070:	2301      	movs	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]

	conn->rdp.window_size     = csp_rdp_window_size;
 800b074:	4b5e      	ldr	r3, [pc, #376]	; (800b1f0 <csp_rdp_connect+0x188>)
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	62da      	str	r2, [r3, #44]	; 0x2c
	conn->rdp.conn_timeout    = csp_rdp_conn_timeout;
 800b07c:	4b5d      	ldr	r3, [pc, #372]	; (800b1f4 <csp_rdp_connect+0x18c>)
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	631a      	str	r2, [r3, #48]	; 0x30
	conn->rdp.packet_timeout  = csp_rdp_packet_timeout;
 800b084:	4b5c      	ldr	r3, [pc, #368]	; (800b1f8 <csp_rdp_connect+0x190>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	635a      	str	r2, [r3, #52]	; 0x34
	conn->rdp.delayed_acks    = csp_rdp_delayed_acks;
 800b08c:	4b5b      	ldr	r3, [pc, #364]	; (800b1fc <csp_rdp_connect+0x194>)
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	639a      	str	r2, [r3, #56]	; 0x38
	conn->rdp.ack_timeout     = csp_rdp_ack_timeout;
 800b094:	4b5a      	ldr	r3, [pc, #360]	; (800b200 <csp_rdp_connect+0x198>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	63da      	str	r2, [r3, #60]	; 0x3c
	conn->rdp.ack_delay_count = csp_rdp_ack_delay_count;
 800b09c:	4b59      	ldr	r3, [pc, #356]	; (800b204 <csp_rdp_connect+0x19c>)
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	641a      	str	r2, [r3, #64]	; 0x40
	conn->rdp.ack_timestamp   = csp_get_ms();
 800b0a4:	f7fc fd4d 	bl	8007b42 <csp_get_ms>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	645a      	str	r2, [r3, #68]	; 0x44

retry:
	csp_log_protocol("RDP %p: Active connect, conn state %u", conn, conn->rdp.state);
 800b0ae:	4b56      	ldr	r3, [pc, #344]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b0b0:	795b      	ldrb	r3, [r3, #5]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <csp_rdp_connect+0x5c>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7f1b      	ldrb	r3, [r3, #28]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	4953      	ldr	r1, [pc, #332]	; (800b20c <csp_rdp_connect+0x1a4>)
 800b0be:	2005      	movs	r0, #5
 800b0c0:	f7fd fb04 	bl	80086cc <do_csp_debug>

	if (conn->rdp.state == RDP_OPEN) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	7f1b      	ldrb	r3, [r3, #28]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d10b      	bne.n	800b0e4 <csp_rdp_connect+0x7c>
		csp_log_error("RDP %p: Connection already open", conn);
 800b0cc:	4b4e      	ldr	r3, [pc, #312]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <csp_rdp_connect+0x76>
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	494e      	ldr	r1, [pc, #312]	; (800b210 <csp_rdp_connect+0x1a8>)
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f7fd faf7 	bl	80086cc <do_csp_debug>
		return CSP_ERR_ALREADY;
 800b0de:	f06f 0306 	mvn.w	r3, #6
 800b0e2:	e081      	b.n	800b1e8 <csp_rdp_connect+0x180>
	}

	/* Randomize ISS */
	conn->rdp.snd_iss = (uint16_t)rand();
 800b0e4:	f001 fa44 	bl	800c570 <rand>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	845a      	strh	r2, [r3, #34]	; 0x22
	conn->rdp.snd_nxt = conn->rdp.snd_iss + 1;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	83da      	strh	r2, [r3, #30]
	conn->rdp.snd_una = conn->rdp.snd_iss;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	841a      	strh	r2, [r3, #32]

	csp_log_protocol("RDP %p: AC: Sending SYN", conn);
 800b104:	4b40      	ldr	r3, [pc, #256]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b106:	795b      	ldrb	r3, [r3, #5]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d004      	beq.n	800b116 <csp_rdp_connect+0xae>
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	4941      	ldr	r1, [pc, #260]	; (800b214 <csp_rdp_connect+0x1ac>)
 800b110:	2005      	movs	r0, #5
 800b112:	f7fd fadb 	bl	80086cc <do_csp_debug>

	/* Ensure semaphore is busy, so router task can release it */
	csp_bin_sem_wait(&conn->rdp.tx_wait, 0);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3348      	adds	r3, #72	; 0x48
 800b11a:	2100      	movs	r1, #0
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fc fc3f 	bl	80079a0 <csp_bin_sem_wait>

	/* Send SYN message */
	conn->rdp.state = RDP_SYN_SENT;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	771a      	strb	r2, [r3, #28]
	if (csp_rdp_send_syn(conn) != CSP_ERR_NONE)
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7fe febf 	bl	8009eac <csp_rdp_send_syn>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d144      	bne.n	800b1be <csp_rdp_connect+0x156>
		goto error;

	/* Wait for router task to release semaphore */
	csp_log_protocol("RDP %p: AC: Waiting for SYN/ACK reply...", conn);
 800b134:	4b34      	ldr	r3, [pc, #208]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b136:	795b      	ldrb	r3, [r3, #5]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d004      	beq.n	800b146 <csp_rdp_connect+0xde>
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	4936      	ldr	r1, [pc, #216]	; (800b218 <csp_rdp_connect+0x1b0>)
 800b140:	2005      	movs	r0, #5
 800b142:	f7fd fac3 	bl	80086cc <do_csp_debug>
	int result = csp_bin_sem_wait(&conn->rdp.tx_wait, conn->rdp.conn_timeout);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b150:	4619      	mov	r1, r3
 800b152:	4610      	mov	r0, r2
 800b154:	f7fc fc24 	bl	80079a0 <csp_bin_sem_wait>
 800b158:	60b8      	str	r0, [r7, #8]

	if (result == CSP_SEMAPHORE_OK) {
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d130      	bne.n	800b1c2 <csp_rdp_connect+0x15a>
		if (conn->rdp.state == RDP_OPEN) {
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	7f1b      	ldrb	r3, [r3, #28]
 800b164:	2b03      	cmp	r3, #3
 800b166:	d10a      	bne.n	800b17e <csp_rdp_connect+0x116>
			csp_log_protocol("RDP %p: AC: Connection OPEN", conn);
 800b168:	4b27      	ldr	r3, [pc, #156]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b16a:	795b      	ldrb	r3, [r3, #5]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <csp_rdp_connect+0x112>
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	492a      	ldr	r1, [pc, #168]	; (800b21c <csp_rdp_connect+0x1b4>)
 800b174:	2005      	movs	r0, #5
 800b176:	f7fd faa9 	bl	80086cc <do_csp_debug>
			return CSP_ERR_NONE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	e034      	b.n	800b1e8 <csp_rdp_connect+0x180>
		}
		if (conn->rdp.state == RDP_SYN_SENT) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	7f1b      	ldrb	r3, [r3, #28]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d11d      	bne.n	800b1c2 <csp_rdp_connect+0x15a>
			if (retry) {
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00e      	beq.n	800b1aa <csp_rdp_connect+0x142>
				csp_log_warn("RDP %p: Half-open connection detected, RST sent, now retrying", conn);
 800b18c:	4b1e      	ldr	r3, [pc, #120]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <csp_rdp_connect+0x136>
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	4922      	ldr	r1, [pc, #136]	; (800b220 <csp_rdp_connect+0x1b8>)
 800b198:	2001      	movs	r0, #1
 800b19a:	f7fd fa97 	bl	80086cc <do_csp_debug>
				csp_rdp_flush_all(conn);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff f900 	bl	800a3a4 <csp_rdp_flush_all>
				retry = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]
				goto retry;
 800b1a8:	e781      	b.n	800b0ae <csp_rdp_connect+0x46>
			}
			csp_log_error("RDP %p: Connection stayed half-open, even after RST and retry!", conn);
 800b1aa:	4b17      	ldr	r3, [pc, #92]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d009      	beq.n	800b1c6 <csp_rdp_connect+0x15e>
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	491b      	ldr	r1, [pc, #108]	; (800b224 <csp_rdp_connect+0x1bc>)
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	f7fd fa88 	bl	80086cc <do_csp_debug>
			goto error;
 800b1bc:	e003      	b.n	800b1c6 <csp_rdp_connect+0x15e>
		goto error;
 800b1be:	bf00      	nop
 800b1c0:	e002      	b.n	800b1c8 <csp_rdp_connect+0x160>
		}
	}

error:
 800b1c2:	bf00      	nop
 800b1c4:	e000      	b.n	800b1c8 <csp_rdp_connect+0x160>
			goto error;
 800b1c6:	bf00      	nop
	csp_log_protocol("RDP %p: AC: Connection Failed", conn);
 800b1c8:	4b0f      	ldr	r3, [pc, #60]	; (800b208 <csp_rdp_connect+0x1a0>)
 800b1ca:	795b      	ldrb	r3, [r3, #5]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <csp_rdp_connect+0x172>
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	4915      	ldr	r1, [pc, #84]	; (800b228 <csp_rdp_connect+0x1c0>)
 800b1d4:	2005      	movs	r0, #5
 800b1d6:	f7fd fa79 	bl	80086cc <do_csp_debug>
	csp_rdp_close_internal(conn, CSP_RDP_CLOSED_BY_PROTOCOL, false);
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2102      	movs	r1, #2
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f9dc 	bl	800b59c <csp_rdp_close_internal>
	return CSP_ERR_TIMEDOUT;
 800b1e4:	f06f 0302 	mvn.w	r3, #2

}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	2000005c 	.word	0x2000005c
 800b1f4:	20000060 	.word	0x20000060
 800b1f8:	20000064 	.word	0x20000064
 800b1fc:	20000068 	.word	0x20000068
 800b200:	2000006c 	.word	0x2000006c
 800b204:	20000070 	.word	0x20000070
 800b208:	20000014 	.word	0x20000014
 800b20c:	0800fb24 	.word	0x0800fb24
 800b210:	0800fb4c 	.word	0x0800fb4c
 800b214:	0800fb6c 	.word	0x0800fb6c
 800b218:	0800fb84 	.word	0x0800fb84
 800b21c:	0800fbb0 	.word	0x0800fbb0
 800b220:	0800fbcc 	.word	0x0800fbcc
 800b224:	0800fc0c 	.word	0x0800fc0c
 800b228:	0800fc4c 	.word	0x0800fc4c

0800b22c <csp_rdp_send>:

int csp_rdp_send(csp_conn_t * conn, csp_packet_t * packet) {
 800b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b230:	b08e      	sub	sp, #56	; 0x38
 800b232:	af08      	add	r7, sp, #32
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]

	if (conn->rdp.state != RDP_OPEN) {
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	7f1b      	ldrb	r3, [r3, #28]
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	d030      	beq.n	800b2a2 <csp_rdp_send+0x76>
		csp_log_error("RDP %p: ERROR cannot send, connection not open (%d)", conn, conn->rdp.state);
 800b240:	4b82      	ldr	r3, [pc, #520]	; (800b44c <csp_rdp_send+0x220>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d006      	beq.n	800b256 <csp_rdp_send+0x2a>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	7f1b      	ldrb	r3, [r3, #28]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4980      	ldr	r1, [pc, #512]	; (800b450 <csp_rdp_send+0x224>)
 800b250:	2000      	movs	r0, #0
 800b252:	f7fd fa3b 	bl	80086cc <do_csp_debug>
		return CSP_ERR_RESET;
 800b256:	f06f 0307 	mvn.w	r3, #7
 800b25a:	e0f2      	b.n	800b442 <csp_rdp_send+0x216>
	}

	while ((conn->rdp.state == RDP_OPEN) && (csp_rdp_is_conn_ready_for_tx(conn) == false)) {
		csp_log_protocol("RDP %p: Waiting for window update before sending seq %u", conn, conn->rdp.snd_nxt);
 800b25c:	4b7b      	ldr	r3, [pc, #492]	; (800b44c <csp_rdp_send+0x220>)
 800b25e:	795b      	ldrb	r3, [r3, #5]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d006      	beq.n	800b272 <csp_rdp_send+0x46>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8bdb      	ldrh	r3, [r3, #30]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	497a      	ldr	r1, [pc, #488]	; (800b454 <csp_rdp_send+0x228>)
 800b26c:	2005      	movs	r0, #5
 800b26e:	f7fd fa2d 	bl	80086cc <do_csp_debug>
		if ((csp_bin_sem_wait(&conn->rdp.tx_wait, conn->rdp.conn_timeout)) != CSP_SEMAPHORE_OK) {
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27c:	4619      	mov	r1, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	f7fc fb8e 	bl	80079a0 <csp_bin_sem_wait>
 800b284:	4603      	mov	r3, r0
 800b286:	2b01      	cmp	r3, #1
 800b288:	d00b      	beq.n	800b2a2 <csp_rdp_send+0x76>
			csp_log_error("RDP %p: Timeout during send", conn);
 800b28a:	4b70      	ldr	r3, [pc, #448]	; (800b44c <csp_rdp_send+0x220>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d004      	beq.n	800b29c <csp_rdp_send+0x70>
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4970      	ldr	r1, [pc, #448]	; (800b458 <csp_rdp_send+0x22c>)
 800b296:	2000      	movs	r0, #0
 800b298:	f7fd fa18 	bl	80086cc <do_csp_debug>
			return CSP_ERR_TIMEDOUT;
 800b29c:	f06f 0302 	mvn.w	r3, #2
 800b2a0:	e0cf      	b.n	800b442 <csp_rdp_send+0x216>
	while ((conn->rdp.state == RDP_OPEN) && (csp_rdp_is_conn_ready_for_tx(conn) == false)) {
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	7f1b      	ldrb	r3, [r3, #28]
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d108      	bne.n	800b2bc <csp_rdp_send+0x90>
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff f938 	bl	800a520 <csp_rdp_is_conn_ready_for_tx>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f083 0301 	eor.w	r3, r3, #1
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1cf      	bne.n	800b25c <csp_rdp_send+0x30>
		}
	}

	if (conn->rdp.state != RDP_OPEN) {
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	7f1b      	ldrb	r3, [r3, #28]
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d00d      	beq.n	800b2e0 <csp_rdp_send+0xb4>
		csp_log_error("RDP %p: ERROR cannot send, connection not open (%d) -> reset", conn, conn->rdp.state);
 800b2c4:	4b61      	ldr	r3, [pc, #388]	; (800b44c <csp_rdp_send+0x220>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d006      	beq.n	800b2da <csp_rdp_send+0xae>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	7f1b      	ldrb	r3, [r3, #28]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4962      	ldr	r1, [pc, #392]	; (800b45c <csp_rdp_send+0x230>)
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	f7fd f9f9 	bl	80086cc <do_csp_debug>
		return CSP_ERR_RESET;
 800b2da:	f06f 0307 	mvn.w	r3, #7
 800b2de:	e0b0      	b.n	800b442 <csp_rdp_send+0x216>
	}

	/* Add RDP header */
	rdp_header_t * tx_header = csp_rdp_header_add(packet);
 800b2e0:	68b8      	ldr	r0, [r7, #8]
 800b2e2:	f7fe fb87 	bl	80099f4 <csp_rdp_header_add>
 800b2e6:	6178      	str	r0, [r7, #20]
	if (tx_header == NULL) {
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10b      	bne.n	800b306 <csp_rdp_send+0xda>
		csp_log_error("RDP %p: No space for RDP header (send)", conn);
 800b2ee:	4b57      	ldr	r3, [pc, #348]	; (800b44c <csp_rdp_send+0x220>)
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d004      	beq.n	800b300 <csp_rdp_send+0xd4>
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4959      	ldr	r1, [pc, #356]	; (800b460 <csp_rdp_send+0x234>)
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	f7fd f9e6 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800b300:	f04f 33ff 	mov.w	r3, #4294967295
 800b304:	e09d      	b.n	800b442 <csp_rdp_send+0x216>
        }
	tx_header->ack_nr = csp_hton16(conn->rdp.rcv_cur);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd fa60 	bl	80087d0 <csp_hton16>
 800b310:	4603      	mov	r3, r0
 800b312:	461a      	mov	r2, r3
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	f8a3 2003 	strh.w	r2, [r3, #3]
	tx_header->seq_nr = csp_hton16(conn->rdp.snd_nxt);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8bdb      	ldrh	r3, [r3, #30]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fd fa56 	bl	80087d0 <csp_hton16>
 800b324:	4603      	mov	r3, r0
 800b326:	461a      	mov	r2, r3
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	f8a3 2001 	strh.w	r2, [r3, #1]
	tx_header->ack = 1;
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	7813      	ldrb	r3, [r2, #0]
 800b332:	f043 0304 	orr.w	r3, r3, #4
 800b336:	7013      	strb	r3, [r2, #0]

	/* Send copy to tx_queue */
	rdp_packet_t * rdp_packet = csp_buffer_clone(packet);
 800b338:	68b8      	ldr	r0, [r7, #8]
 800b33a:	f7fc fd9f 	bl	8007e7c <csp_buffer_clone>
 800b33e:	4603      	mov	r3, r0
 800b340:	613b      	str	r3, [r7, #16]
	if (rdp_packet == NULL) {
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10b      	bne.n	800b360 <csp_rdp_send+0x134>
		csp_log_error("RDP %p: Failed to allocate packet buffer", conn);
 800b348:	4b40      	ldr	r3, [pc, #256]	; (800b44c <csp_rdp_send+0x220>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d004      	beq.n	800b35a <csp_rdp_send+0x12e>
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	4944      	ldr	r1, [pc, #272]	; (800b464 <csp_rdp_send+0x238>)
 800b354:	2000      	movs	r0, #0
 800b356:	f7fd f9b9 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800b35a:	f04f 33ff 	mov.w	r3, #4294967295
 800b35e:	e070      	b.n	800b442 <csp_rdp_send+0x216>
	}

	rdp_packet->timestamp = csp_get_ms();
 800b360:	693c      	ldr	r4, [r7, #16]
 800b362:	f7fc fbee 	bl	8007b42 <csp_get_ms>
 800b366:	4603      	mov	r3, r0
 800b368:	6063      	str	r3, [r4, #4]
	rdp_packet->quarantine = 0;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2200      	movs	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]
	if (csp_queue_enqueue(conn->rdp.tx_queue, &rdp_packet, 0) != CSP_QUEUE_OK) {
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b374:	f107 0110 	add.w	r1, r7, #16
 800b378:	2200      	movs	r2, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fc fa8b 	bl	8007896 <csp_queue_enqueue>
 800b380:	4603      	mov	r3, r0
 800b382:	2b01      	cmp	r3, #1
 800b384:	d00f      	beq.n	800b3a6 <csp_rdp_send+0x17a>
		csp_log_error("RDP %p: No more space in RDP retransmit queue", conn);
 800b386:	4b31      	ldr	r3, [pc, #196]	; (800b44c <csp_rdp_send+0x220>)
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d004      	beq.n	800b398 <csp_rdp_send+0x16c>
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	4935      	ldr	r1, [pc, #212]	; (800b468 <csp_rdp_send+0x23c>)
 800b392:	2000      	movs	r0, #0
 800b394:	f7fd f99a 	bl	80086cc <do_csp_debug>
		csp_buffer_free(rdp_packet);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fc fcf6 	bl	8007d8c <csp_buffer_free>
		return CSP_ERR_NOBUFS;
 800b3a0:	f06f 0308 	mvn.w	r3, #8
 800b3a4:	e04d      	b.n	800b442 <csp_rdp_send+0x216>
	}

	csp_log_protocol("RDP %p: Sending  in S %u: syn %u, ack %u, eack %u, "
 800b3a6:	4b29      	ldr	r3, [pc, #164]	; (800b44c <csp_rdp_send+0x220>)
 800b3a8:	795b      	ldrb	r3, [r3, #5]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d042      	beq.n	800b434 <csp_rdp_send+0x208>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	7f1b      	ldrb	r3, [r3, #28]
 800b3b2:	4698      	mov	r8, r3
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461c      	mov	r4, r3
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	461d      	mov	r5, r3
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	461e      	mov	r6, r3
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	607b      	str	r3, [r7, #4]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fd fa04 	bl	80087fa <csp_ntoh16>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	603b      	str	r3, [r7, #0]
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fd f9fb 	bl	80087fa <csp_ntoh16>
 800b404:	4603      	mov	r3, r0
 800b406:	461a      	mov	r2, r3
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	895b      	ldrh	r3, [r3, #10]
 800b40c:	4619      	mov	r1, r3
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	895b      	ldrh	r3, [r3, #10]
 800b412:	3b05      	subs	r3, #5
 800b414:	9307      	str	r3, [sp, #28]
 800b416:	9106      	str	r1, [sp, #24]
 800b418:	9205      	str	r2, [sp, #20]
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	9204      	str	r2, [sp, #16]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	9303      	str	r3, [sp, #12]
 800b422:	9602      	str	r6, [sp, #8]
 800b424:	9501      	str	r5, [sp, #4]
 800b426:	9400      	str	r4, [sp, #0]
 800b428:	4643      	mov	r3, r8
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	490f      	ldr	r1, [pc, #60]	; (800b46c <csp_rdp_send+0x240>)
 800b42e:	2005      	movs	r0, #5
 800b430:	f7fd f94c 	bl	80086cc <do_csp_debug>
				"rst %u, seq_nr %5u, ack_nr %5u, packet_len %u (%u)",
				conn, conn->rdp.state, tx_header->syn, tx_header->ack, tx_header->eak,
				tx_header->rst, csp_ntoh16(tx_header->seq_nr), csp_ntoh16(tx_header->ack_nr),
				packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	conn->rdp.snd_nxt++;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	8bdb      	ldrh	r3, [r3, #30]
 800b438:	3301      	adds	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	83da      	strh	r2, [r3, #30]
	return CSP_ERR_NONE;
 800b440:	2300      	movs	r3, #0

}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	20000014 	.word	0x20000014
 800b450:	0800fc6c 	.word	0x0800fc6c
 800b454:	0800fca0 	.word	0x0800fca0
 800b458:	0800fcd8 	.word	0x0800fcd8
 800b45c:	0800fcf4 	.word	0x0800fcf4
 800b460:	0800fd34 	.word	0x0800fd34
 800b464:	0800fd5c 	.word	0x0800fd5c
 800b468:	0800fd88 	.word	0x0800fd88
 800b46c:	0800fdb8 	.word	0x0800fdb8

0800b470 <csp_rdp_init>:

int csp_rdp_init(csp_conn_t * conn) {
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

	csp_log_protocol("RDP %p: Creating RDP queues", conn);
 800b478:	4b37      	ldr	r3, [pc, #220]	; (800b558 <csp_rdp_init+0xe8>)
 800b47a:	795b      	ldrb	r3, [r3, #5]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d004      	beq.n	800b48a <csp_rdp_init+0x1a>
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	4936      	ldr	r1, [pc, #216]	; (800b55c <csp_rdp_init+0xec>)
 800b484:	2005      	movs	r0, #5
 800b486:	f7fd f921 	bl	80086cc <do_csp_debug>

	/* Set initial state */
	conn->rdp.state = RDP_CLOSED;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	771a      	strb	r2, [r3, #28]
	conn->rdp.conn_timeout = csp_rdp_conn_timeout;
 800b490:	4b33      	ldr	r3, [pc, #204]	; (800b560 <csp_rdp_init+0xf0>)
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	631a      	str	r2, [r3, #48]	; 0x30
	conn->rdp.packet_timeout = csp_rdp_packet_timeout;
 800b498:	4b32      	ldr	r3, [pc, #200]	; (800b564 <csp_rdp_init+0xf4>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Create a binary semaphore to wait on for tasks */
	if (csp_bin_sem_create(&conn->rdp.tx_wait) != CSP_SEMAPHORE_OK) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3348      	adds	r3, #72	; 0x48
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fc fa4a 	bl	800793e <csp_bin_sem_create>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d00b      	beq.n	800b4c8 <csp_rdp_init+0x58>
		csp_log_error("RDP %p: Failed to initialize semaphore", conn);
 800b4b0:	4b29      	ldr	r3, [pc, #164]	; (800b558 <csp_rdp_init+0xe8>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <csp_rdp_init+0x52>
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	492b      	ldr	r1, [pc, #172]	; (800b568 <csp_rdp_init+0xf8>)
 800b4bc:	2000      	movs	r0, #0
 800b4be:	f7fd f905 	bl	80086cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800b4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c6:	e042      	b.n	800b54e <csp_rdp_init+0xde>
	}

	/* Create TX queue */
	conn->rdp.tx_queue = csp_queue_create(csp_conf.rdp_max_window, sizeof(csp_packet_t *));
 800b4c8:	4b28      	ldr	r3, [pc, #160]	; (800b56c <csp_rdp_init+0xfc>)
 800b4ca:	7d1b      	ldrb	r3, [r3, #20]
 800b4cc:	2104      	movs	r1, #4
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fc f9c6 	bl	8007860 <csp_queue_create>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	64da      	str	r2, [r3, #76]	; 0x4c
	if (conn->rdp.tx_queue == NULL) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d110      	bne.n	800b504 <csp_rdp_init+0x94>
		csp_log_error("RDP %p: Failed to create TX queue for conn", conn);
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <csp_rdp_init+0xe8>)
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <csp_rdp_init+0x84>
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	4920      	ldr	r1, [pc, #128]	; (800b570 <csp_rdp_init+0x100>)
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f7fd f8ec 	bl	80086cc <do_csp_debug>
		csp_bin_sem_remove(&conn->rdp.tx_wait);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3348      	adds	r3, #72	; 0x48
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fc fa3c 	bl	8007976 <csp_bin_sem_remove>
		return CSP_ERR_NOMEM;
 800b4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b502:	e024      	b.n	800b54e <csp_rdp_init+0xde>
	}

	/* Create RX queue */
	conn->rdp.rx_queue = csp_queue_create(csp_conf.rdp_max_window * 2, sizeof(csp_packet_t *));
 800b504:	4b19      	ldr	r3, [pc, #100]	; (800b56c <csp_rdp_init+0xfc>)
 800b506:	7d1b      	ldrb	r3, [r3, #20]
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	2104      	movs	r1, #4
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fc f9a7 	bl	8007860 <csp_queue_create>
 800b512:	4602      	mov	r2, r0
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	651a      	str	r2, [r3, #80]	; 0x50
	if (conn->rdp.rx_queue == NULL) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d115      	bne.n	800b54c <csp_rdp_init+0xdc>
		csp_log_error("RDP %p: Failed to create RX queue for conn", conn);
 800b520:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <csp_rdp_init+0xe8>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <csp_rdp_init+0xc2>
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	4912      	ldr	r1, [pc, #72]	; (800b574 <csp_rdp_init+0x104>)
 800b52c:	2000      	movs	r0, #0
 800b52e:	f7fd f8cd 	bl	80086cc <do_csp_debug>
		csp_bin_sem_remove(&conn->rdp.tx_wait);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	3348      	adds	r3, #72	; 0x48
 800b536:	4618      	mov	r0, r3
 800b538:	f7fc fa1d 	bl	8007976 <csp_bin_sem_remove>
		csp_queue_remove(conn->rdp.tx_queue);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b540:	4618      	mov	r0, r3
 800b542:	f7fc f99d 	bl	8007880 <csp_queue_remove>
		return CSP_ERR_NOMEM;
 800b546:	f04f 33ff 	mov.w	r3, #4294967295
 800b54a:	e000      	b.n	800b54e <csp_rdp_init+0xde>
	}

	return CSP_ERR_NONE;
 800b54c:	2300      	movs	r3, #0

}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000014 	.word	0x20000014
 800b55c:	0800fe20 	.word	0x0800fe20
 800b560:	20000060 	.word	0x20000060
 800b564:	20000064 	.word	0x20000064
 800b568:	0800fe3c 	.word	0x0800fe3c
 800b56c:	20008ec8 	.word	0x20008ec8
 800b570:	0800fe64 	.word	0x0800fe64
 800b574:	0800fe90 	.word	0x0800fe90

0800b578 <csp_rdp_close>:

/**
 * @note This function may only be called from csp_close, and is therefore
 * without any checks for null pointers.
 */
int csp_rdp_close(csp_conn_t * conn, uint8_t closed_by) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	70fb      	strb	r3, [r7, #3]
    return csp_rdp_close_internal(conn, closed_by, true);
 800b584:	78fb      	ldrb	r3, [r7, #3]
 800b586:	2201      	movs	r2, #1
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f806 	bl	800b59c <csp_rdp_close_internal>
 800b590:	4603      	mov	r3, r0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <csp_rdp_close_internal>:

static int csp_rdp_close_internal(csp_conn_t * conn, uint8_t closed_by, bool send_rst) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af04      	add	r7, sp, #16
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	70bb      	strb	r3, [r7, #2]

	if (conn->rdp.state == RDP_CLOSED) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	7f1b      	ldrb	r3, [r3, #28]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <csp_rdp_close_internal+0x1c>
		return CSP_ERR_NONE;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	e079      	b.n	800b6ac <csp_rdp_close_internal+0x110>
	}

	conn->rdp.closed_by |= closed_by;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7f5a      	ldrb	r2, [r3, #29]
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	775a      	strb	r2, [r3, #29]

	/* If connection is open, send reset */
	if (conn->rdp.state != RDP_CLOSE_WAIT) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7f1b      	ldrb	r3, [r3, #28]
 800b5ca:	2b04      	cmp	r3, #4
 800b5cc:	d02d      	beq.n	800b62a <csp_rdp_close_internal+0x8e>
		conn->rdp.state = RDP_CLOSE_WAIT;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2204      	movs	r2, #4
 800b5d2:	771a      	strb	r2, [r3, #28]
		conn->timestamp = csp_get_ms();
 800b5d4:	f7fc fab5 	bl	8007b42 <csp_get_ms>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	615a      	str	r2, [r3, #20]
		if (send_rst) {
 800b5de:	78bb      	ldrb	r3, [r7, #2]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <csp_rdp_close_internal+0x60>
			csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8bdb      	ldrh	r3, [r3, #30]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	220a      	movs	r2, #10
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7fe faae 	bl	8009b58 <csp_rdp_send_cmp>
		}
		csp_log_protocol("RDP %p: csp_rdp_close(0x%x)%s -> CLOSE_WAIT", conn, closed_by, send_rst ? ", sent RST" : "");
 800b5fc:	4b2d      	ldr	r3, [pc, #180]	; (800b6b4 <csp_rdp_close_internal+0x118>)
 800b5fe:	795b      	ldrb	r3, [r3, #5]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00d      	beq.n	800b620 <csp_rdp_close_internal+0x84>
 800b604:	78fa      	ldrb	r2, [r7, #3]
 800b606:	78bb      	ldrb	r3, [r7, #2]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <csp_rdp_close_internal+0x74>
 800b60c:	4b2a      	ldr	r3, [pc, #168]	; (800b6b8 <csp_rdp_close_internal+0x11c>)
 800b60e:	e000      	b.n	800b612 <csp_rdp_close_internal+0x76>
 800b610:	4b2a      	ldr	r3, [pc, #168]	; (800b6bc <csp_rdp_close_internal+0x120>)
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	4613      	mov	r3, r2
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	4929      	ldr	r1, [pc, #164]	; (800b6c0 <csp_rdp_close_internal+0x124>)
 800b61a:	2005      	movs	r0, #5
 800b61c:	f7fd f856 	bl	80086cc <do_csp_debug>
		csp_bin_sem_post(&conn->rdp.tx_wait); // wake up any pendng Tx
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3348      	adds	r3, #72	; 0x48
 800b624:	4618      	mov	r0, r3
 800b626:	f7fc f9e1 	bl	80079ec <csp_bin_sem_post>
	}

	if (conn->rdp.closed_by != CSP_RDP_CLOSED_BY_ALL) {
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	7f5b      	ldrb	r3, [r3, #29]
 800b62e:	2b07      	cmp	r3, #7
 800b630:	d02b      	beq.n	800b68a <csp_rdp_close_internal+0xee>
		csp_log_protocol("RDP %p: csp_rdp_close(0x%x), waiting for:%s%s%s",
 800b632:	4b20      	ldr	r3, [pc, #128]	; (800b6b4 <csp_rdp_close_internal+0x118>)
 800b634:	795b      	ldrb	r3, [r3, #5]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d024      	beq.n	800b684 <csp_rdp_close_internal+0xe8>
 800b63a:	78f8      	ldrb	r0, [r7, #3]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	7f5b      	ldrb	r3, [r3, #29]
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <csp_rdp_close_internal+0xb0>
 800b648:	4b1c      	ldr	r3, [pc, #112]	; (800b6bc <csp_rdp_close_internal+0x120>)
 800b64a:	e000      	b.n	800b64e <csp_rdp_close_internal+0xb2>
 800b64c:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <csp_rdp_close_internal+0x128>)
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	7f52      	ldrb	r2, [r2, #29]
 800b652:	f002 0202 	and.w	r2, r2, #2
 800b656:	2a00      	cmp	r2, #0
 800b658:	d001      	beq.n	800b65e <csp_rdp_close_internal+0xc2>
 800b65a:	4a18      	ldr	r2, [pc, #96]	; (800b6bc <csp_rdp_close_internal+0x120>)
 800b65c:	e000      	b.n	800b660 <csp_rdp_close_internal+0xc4>
 800b65e:	4a1a      	ldr	r2, [pc, #104]	; (800b6c8 <csp_rdp_close_internal+0x12c>)
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	7f49      	ldrb	r1, [r1, #29]
 800b664:	f001 0104 	and.w	r1, r1, #4
 800b668:	2900      	cmp	r1, #0
 800b66a:	d001      	beq.n	800b670 <csp_rdp_close_internal+0xd4>
 800b66c:	4913      	ldr	r1, [pc, #76]	; (800b6bc <csp_rdp_close_internal+0x120>)
 800b66e:	e000      	b.n	800b672 <csp_rdp_close_internal+0xd6>
 800b670:	4916      	ldr	r1, [pc, #88]	; (800b6cc <csp_rdp_close_internal+0x130>)
 800b672:	9102      	str	r1, [sp, #8]
 800b674:	9201      	str	r2, [sp, #4]
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	4603      	mov	r3, r0
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	4914      	ldr	r1, [pc, #80]	; (800b6d0 <csp_rdp_close_internal+0x134>)
 800b67e:	2005      	movs	r0, #5
 800b680:	f7fd f824 	bl	80086cc <do_csp_debug>
			conn, closed_by,
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_USERSPACE) ? "" : " userspace",
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_PROTOCOL) ? "" : " protocol",
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_TIMEOUT) ? "" : " timeout");
		return CSP_ERR_AGAIN;
 800b684:	f06f 030b 	mvn.w	r3, #11
 800b688:	e010      	b.n	800b6ac <csp_rdp_close_internal+0x110>
        }

        csp_log_protocol("RDP %p: csp_rdp_close(0x%x) -> CLOSED", conn, closed_by);
 800b68a:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <csp_rdp_close_internal+0x118>)
 800b68c:	795b      	ldrb	r3, [r3, #5]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d005      	beq.n	800b69e <csp_rdp_close_internal+0x102>
 800b692:	78fb      	ldrb	r3, [r7, #3]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	490f      	ldr	r1, [pc, #60]	; (800b6d4 <csp_rdp_close_internal+0x138>)
 800b698:	2005      	movs	r0, #5
 800b69a:	f7fd f817 	bl	80086cc <do_csp_debug>
	conn->rdp.state = RDP_CLOSED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	771a      	strb	r2, [r3, #28]
        conn->rdp.closed_by = 0;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	775a      	strb	r2, [r3, #29]
	return CSP_ERR_NONE;
 800b6aa:	2300      	movs	r3, #0

}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20000014 	.word	0x20000014
 800b6b8:	0800febc 	.word	0x0800febc
 800b6bc:	0800fec8 	.word	0x0800fec8
 800b6c0:	0800fecc 	.word	0x0800fecc
 800b6c4:	0800fef8 	.word	0x0800fef8
 800b6c8:	0800ff04 	.word	0x0800ff04
 800b6cc:	0800ff10 	.word	0x0800ff10
 800b6d0:	0800ff1c 	.word	0x0800ff1c
 800b6d4:	0800ff4c 	.word	0x0800ff4c

0800b6d8 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fc fc46 	bl	8007f78 <csp_conn_enqueue_packet>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	da0b      	bge.n	800b70a <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 800b6f2:	4b16      	ldr	r3, [pc, #88]	; (800b74c <csp_udp_new_packet+0x74>)
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <csp_udp_new_packet+0x2a>
 800b6fa:	4915      	ldr	r1, [pc, #84]	; (800b750 <csp_udp_new_packet+0x78>)
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	f7fc ffe5 	bl	80086cc <do_csp_debug>
		csp_buffer_free(packet);
 800b702:	6838      	ldr	r0, [r7, #0]
 800b704:	f7fc fb42 	bl	8007d8c <csp_buffer_free>
		return;
 800b708:	e01d      	b.n	800b746 <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d019      	beq.n	800b746 <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	1d39      	adds	r1, r7, #4
 800b718:	2200      	movs	r2, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fc f8bb 	bl	8007896 <csp_queue_enqueue>
 800b720:	4603      	mov	r3, r0
 800b722:	2b01      	cmp	r3, #1
 800b724:	d00c      	beq.n	800b740 <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 800b726:	4b09      	ldr	r3, [pc, #36]	; (800b74c <csp_udp_new_packet+0x74>)
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <csp_udp_new_packet+0x5e>
 800b72e:	4909      	ldr	r1, [pc, #36]	; (800b754 <csp_udp_new_packet+0x7c>)
 800b730:	2001      	movs	r0, #1
 800b732:	f7fc ffcb 	bl	80086cc <do_csp_debug>
			csp_close(conn);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fc fe34 	bl	80083a6 <csp_close>
			return;
 800b73e:	e002      	b.n	800b746 <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	611a      	str	r2, [r3, #16]
	}

}
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	20000014 	.word	0x20000014
 800b750:	0800ffac 	.word	0x0800ffac
 800b754:	0800ffcc 	.word	0x0800ffcc

0800b758 <calloc>:
 800b758:	4b02      	ldr	r3, [pc, #8]	; (800b764 <calloc+0xc>)
 800b75a:	460a      	mov	r2, r1
 800b75c:	4601      	mov	r1, r0
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	f000 b935 	b.w	800b9ce <_calloc_r>
 800b764:	20000078 	.word	0x20000078

0800b768 <std>:
 800b768:	2300      	movs	r3, #0
 800b76a:	b510      	push	{r4, lr}
 800b76c:	4604      	mov	r4, r0
 800b76e:	e9c0 3300 	strd	r3, r3, [r0]
 800b772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b776:	6083      	str	r3, [r0, #8]
 800b778:	8181      	strh	r1, [r0, #12]
 800b77a:	6643      	str	r3, [r0, #100]	; 0x64
 800b77c:	81c2      	strh	r2, [r0, #14]
 800b77e:	6183      	str	r3, [r0, #24]
 800b780:	4619      	mov	r1, r3
 800b782:	2208      	movs	r2, #8
 800b784:	305c      	adds	r0, #92	; 0x5c
 800b786:	f000 f91a 	bl	800b9be <memset>
 800b78a:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <std+0x38>)
 800b78c:	6263      	str	r3, [r4, #36]	; 0x24
 800b78e:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <std+0x3c>)
 800b790:	62a3      	str	r3, [r4, #40]	; 0x28
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <std+0x40>)
 800b794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <std+0x44>)
 800b798:	6224      	str	r4, [r4, #32]
 800b79a:	6323      	str	r3, [r4, #48]	; 0x30
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	bf00      	nop
 800b7a0:	0800c6e1 	.word	0x0800c6e1
 800b7a4:	0800c703 	.word	0x0800c703
 800b7a8:	0800c73b 	.word	0x0800c73b
 800b7ac:	0800c75f 	.word	0x0800c75f

0800b7b0 <_cleanup_r>:
 800b7b0:	4901      	ldr	r1, [pc, #4]	; (800b7b8 <_cleanup_r+0x8>)
 800b7b2:	f000 b8af 	b.w	800b914 <_fwalk_reent>
 800b7b6:	bf00      	nop
 800b7b8:	0800d809 	.word	0x0800d809

0800b7bc <__sfmoreglue>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	2268      	movs	r2, #104	; 0x68
 800b7c0:	1e4d      	subs	r5, r1, #1
 800b7c2:	4355      	muls	r5, r2
 800b7c4:	460e      	mov	r6, r1
 800b7c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7ca:	f000 f937 	bl	800ba3c <_malloc_r>
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	b140      	cbz	r0, 800b7e4 <__sfmoreglue+0x28>
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b7d8:	300c      	adds	r0, #12
 800b7da:	60a0      	str	r0, [r4, #8]
 800b7dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7e0:	f000 f8ed 	bl	800b9be <memset>
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}

0800b7e8 <__sfp_lock_acquire>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__sfp_lock_acquire+0x8>)
 800b7ea:	f000 b8d8 	b.w	800b99e <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	20008ef5 	.word	0x20008ef5

0800b7f4 <__sfp_lock_release>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__sfp_lock_release+0x8>)
 800b7f6:	f000 b8d3 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20008ef5 	.word	0x20008ef5

0800b800 <__sinit_lock_acquire>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__sinit_lock_acquire+0x8>)
 800b802:	f000 b8cc 	b.w	800b99e <__retarget_lock_acquire_recursive>
 800b806:	bf00      	nop
 800b808:	20008ef6 	.word	0x20008ef6

0800b80c <__sinit_lock_release>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__sinit_lock_release+0x8>)
 800b80e:	f000 b8c7 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800b812:	bf00      	nop
 800b814:	20008ef6 	.word	0x20008ef6

0800b818 <__sinit>:
 800b818:	b510      	push	{r4, lr}
 800b81a:	4604      	mov	r4, r0
 800b81c:	f7ff fff0 	bl	800b800 <__sinit_lock_acquire>
 800b820:	69a3      	ldr	r3, [r4, #24]
 800b822:	b11b      	cbz	r3, 800b82c <__sinit+0x14>
 800b824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b828:	f7ff bff0 	b.w	800b80c <__sinit_lock_release>
 800b82c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b830:	6523      	str	r3, [r4, #80]	; 0x50
 800b832:	4b13      	ldr	r3, [pc, #76]	; (800b880 <__sinit+0x68>)
 800b834:	4a13      	ldr	r2, [pc, #76]	; (800b884 <__sinit+0x6c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	62a2      	str	r2, [r4, #40]	; 0x28
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	bf04      	itt	eq
 800b83e:	2301      	moveq	r3, #1
 800b840:	61a3      	streq	r3, [r4, #24]
 800b842:	4620      	mov	r0, r4
 800b844:	f000 f820 	bl	800b888 <__sfp>
 800b848:	6060      	str	r0, [r4, #4]
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f81c 	bl	800b888 <__sfp>
 800b850:	60a0      	str	r0, [r4, #8]
 800b852:	4620      	mov	r0, r4
 800b854:	f000 f818 	bl	800b888 <__sfp>
 800b858:	2200      	movs	r2, #0
 800b85a:	60e0      	str	r0, [r4, #12]
 800b85c:	2104      	movs	r1, #4
 800b85e:	6860      	ldr	r0, [r4, #4]
 800b860:	f7ff ff82 	bl	800b768 <std>
 800b864:	68a0      	ldr	r0, [r4, #8]
 800b866:	2201      	movs	r2, #1
 800b868:	2109      	movs	r1, #9
 800b86a:	f7ff ff7d 	bl	800b768 <std>
 800b86e:	68e0      	ldr	r0, [r4, #12]
 800b870:	2202      	movs	r2, #2
 800b872:	2112      	movs	r1, #18
 800b874:	f7ff ff78 	bl	800b768 <std>
 800b878:	2301      	movs	r3, #1
 800b87a:	61a3      	str	r3, [r4, #24]
 800b87c:	e7d2      	b.n	800b824 <__sinit+0xc>
 800b87e:	bf00      	nop
 800b880:	080100e8 	.word	0x080100e8
 800b884:	0800b7b1 	.word	0x0800b7b1

0800b888 <__sfp>:
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	4607      	mov	r7, r0
 800b88c:	f7ff ffac 	bl	800b7e8 <__sfp_lock_acquire>
 800b890:	4b1e      	ldr	r3, [pc, #120]	; (800b90c <__sfp+0x84>)
 800b892:	681e      	ldr	r6, [r3, #0]
 800b894:	69b3      	ldr	r3, [r6, #24]
 800b896:	b913      	cbnz	r3, 800b89e <__sfp+0x16>
 800b898:	4630      	mov	r0, r6
 800b89a:	f7ff ffbd 	bl	800b818 <__sinit>
 800b89e:	3648      	adds	r6, #72	; 0x48
 800b8a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	d503      	bpl.n	800b8b0 <__sfp+0x28>
 800b8a8:	6833      	ldr	r3, [r6, #0]
 800b8aa:	b30b      	cbz	r3, 800b8f0 <__sfp+0x68>
 800b8ac:	6836      	ldr	r6, [r6, #0]
 800b8ae:	e7f7      	b.n	800b8a0 <__sfp+0x18>
 800b8b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8b4:	b9d5      	cbnz	r5, 800b8ec <__sfp+0x64>
 800b8b6:	4b16      	ldr	r3, [pc, #88]	; (800b910 <__sfp+0x88>)
 800b8b8:	60e3      	str	r3, [r4, #12]
 800b8ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8be:	6665      	str	r5, [r4, #100]	; 0x64
 800b8c0:	f000 f86c 	bl	800b99c <__retarget_lock_init_recursive>
 800b8c4:	f7ff ff96 	bl	800b7f4 <__sfp_lock_release>
 800b8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8d0:	6025      	str	r5, [r4, #0]
 800b8d2:	61a5      	str	r5, [r4, #24]
 800b8d4:	2208      	movs	r2, #8
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8dc:	f000 f86f 	bl	800b9be <memset>
 800b8e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ec:	3468      	adds	r4, #104	; 0x68
 800b8ee:	e7d9      	b.n	800b8a4 <__sfp+0x1c>
 800b8f0:	2104      	movs	r1, #4
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	f7ff ff62 	bl	800b7bc <__sfmoreglue>
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	6030      	str	r0, [r6, #0]
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d1d5      	bne.n	800b8ac <__sfp+0x24>
 800b900:	f7ff ff78 	bl	800b7f4 <__sfp_lock_release>
 800b904:	230c      	movs	r3, #12
 800b906:	603b      	str	r3, [r7, #0]
 800b908:	e7ee      	b.n	800b8e8 <__sfp+0x60>
 800b90a:	bf00      	nop
 800b90c:	080100e8 	.word	0x080100e8
 800b910:	ffff0001 	.word	0xffff0001

0800b914 <_fwalk_reent>:
 800b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b918:	4606      	mov	r6, r0
 800b91a:	4688      	mov	r8, r1
 800b91c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b920:	2700      	movs	r7, #0
 800b922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b926:	f1b9 0901 	subs.w	r9, r9, #1
 800b92a:	d505      	bpl.n	800b938 <_fwalk_reent+0x24>
 800b92c:	6824      	ldr	r4, [r4, #0]
 800b92e:	2c00      	cmp	r4, #0
 800b930:	d1f7      	bne.n	800b922 <_fwalk_reent+0xe>
 800b932:	4638      	mov	r0, r7
 800b934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b938:	89ab      	ldrh	r3, [r5, #12]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d907      	bls.n	800b94e <_fwalk_reent+0x3a>
 800b93e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b942:	3301      	adds	r3, #1
 800b944:	d003      	beq.n	800b94e <_fwalk_reent+0x3a>
 800b946:	4629      	mov	r1, r5
 800b948:	4630      	mov	r0, r6
 800b94a:	47c0      	blx	r8
 800b94c:	4307      	orrs	r7, r0
 800b94e:	3568      	adds	r5, #104	; 0x68
 800b950:	e7e9      	b.n	800b926 <_fwalk_reent+0x12>
	...

0800b954 <__libc_init_array>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4d0d      	ldr	r5, [pc, #52]	; (800b98c <__libc_init_array+0x38>)
 800b958:	4c0d      	ldr	r4, [pc, #52]	; (800b990 <__libc_init_array+0x3c>)
 800b95a:	1b64      	subs	r4, r4, r5
 800b95c:	10a4      	asrs	r4, r4, #2
 800b95e:	2600      	movs	r6, #0
 800b960:	42a6      	cmp	r6, r4
 800b962:	d109      	bne.n	800b978 <__libc_init_array+0x24>
 800b964:	4d0b      	ldr	r5, [pc, #44]	; (800b994 <__libc_init_array+0x40>)
 800b966:	4c0c      	ldr	r4, [pc, #48]	; (800b998 <__libc_init_array+0x44>)
 800b968:	f002 fe46 	bl	800e5f8 <_init>
 800b96c:	1b64      	subs	r4, r4, r5
 800b96e:	10a4      	asrs	r4, r4, #2
 800b970:	2600      	movs	r6, #0
 800b972:	42a6      	cmp	r6, r4
 800b974:	d105      	bne.n	800b982 <__libc_init_array+0x2e>
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	f855 3b04 	ldr.w	r3, [r5], #4
 800b97c:	4798      	blx	r3
 800b97e:	3601      	adds	r6, #1
 800b980:	e7ee      	b.n	800b960 <__libc_init_array+0xc>
 800b982:	f855 3b04 	ldr.w	r3, [r5], #4
 800b986:	4798      	blx	r3
 800b988:	3601      	adds	r6, #1
 800b98a:	e7f2      	b.n	800b972 <__libc_init_array+0x1e>
 800b98c:	080104c8 	.word	0x080104c8
 800b990:	080104c8 	.word	0x080104c8
 800b994:	080104c8 	.word	0x080104c8
 800b998:	080104cc 	.word	0x080104cc

0800b99c <__retarget_lock_init_recursive>:
 800b99c:	4770      	bx	lr

0800b99e <__retarget_lock_acquire_recursive>:
 800b99e:	4770      	bx	lr

0800b9a0 <__retarget_lock_release_recursive>:
 800b9a0:	4770      	bx	lr

0800b9a2 <memcpy>:
 800b9a2:	440a      	add	r2, r1
 800b9a4:	4291      	cmp	r1, r2
 800b9a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9aa:	d100      	bne.n	800b9ae <memcpy+0xc>
 800b9ac:	4770      	bx	lr
 800b9ae:	b510      	push	{r4, lr}
 800b9b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9b8:	4291      	cmp	r1, r2
 800b9ba:	d1f9      	bne.n	800b9b0 <memcpy+0xe>
 800b9bc:	bd10      	pop	{r4, pc}

0800b9be <memset>:
 800b9be:	4402      	add	r2, r0
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d100      	bne.n	800b9c8 <memset+0xa>
 800b9c6:	4770      	bx	lr
 800b9c8:	f803 1b01 	strb.w	r1, [r3], #1
 800b9cc:	e7f9      	b.n	800b9c2 <memset+0x4>

0800b9ce <_calloc_r>:
 800b9ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9d0:	fba1 2402 	umull	r2, r4, r1, r2
 800b9d4:	b94c      	cbnz	r4, 800b9ea <_calloc_r+0x1c>
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	9201      	str	r2, [sp, #4]
 800b9da:	f000 f82f 	bl	800ba3c <_malloc_r>
 800b9de:	9a01      	ldr	r2, [sp, #4]
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	b930      	cbnz	r0, 800b9f2 <_calloc_r+0x24>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	b003      	add	sp, #12
 800b9e8:	bd30      	pop	{r4, r5, pc}
 800b9ea:	220c      	movs	r2, #12
 800b9ec:	6002      	str	r2, [r0, #0]
 800b9ee:	2500      	movs	r5, #0
 800b9f0:	e7f8      	b.n	800b9e4 <_calloc_r+0x16>
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	f7ff ffe3 	bl	800b9be <memset>
 800b9f8:	e7f4      	b.n	800b9e4 <_calloc_r+0x16>
	...

0800b9fc <sbrk_aligned>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	4e0e      	ldr	r6, [pc, #56]	; (800ba38 <sbrk_aligned+0x3c>)
 800ba00:	460c      	mov	r4, r1
 800ba02:	6831      	ldr	r1, [r6, #0]
 800ba04:	4605      	mov	r5, r0
 800ba06:	b911      	cbnz	r1, 800ba0e <sbrk_aligned+0x12>
 800ba08:	f000 fe5a 	bl	800c6c0 <_sbrk_r>
 800ba0c:	6030      	str	r0, [r6, #0]
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4628      	mov	r0, r5
 800ba12:	f000 fe55 	bl	800c6c0 <_sbrk_r>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d00a      	beq.n	800ba30 <sbrk_aligned+0x34>
 800ba1a:	1cc4      	adds	r4, r0, #3
 800ba1c:	f024 0403 	bic.w	r4, r4, #3
 800ba20:	42a0      	cmp	r0, r4
 800ba22:	d007      	beq.n	800ba34 <sbrk_aligned+0x38>
 800ba24:	1a21      	subs	r1, r4, r0
 800ba26:	4628      	mov	r0, r5
 800ba28:	f000 fe4a 	bl	800c6c0 <_sbrk_r>
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d101      	bne.n	800ba34 <sbrk_aligned+0x38>
 800ba30:	f04f 34ff 	mov.w	r4, #4294967295
 800ba34:	4620      	mov	r0, r4
 800ba36:	bd70      	pop	{r4, r5, r6, pc}
 800ba38:	20008efc 	.word	0x20008efc

0800ba3c <_malloc_r>:
 800ba3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba40:	1ccd      	adds	r5, r1, #3
 800ba42:	f025 0503 	bic.w	r5, r5, #3
 800ba46:	3508      	adds	r5, #8
 800ba48:	2d0c      	cmp	r5, #12
 800ba4a:	bf38      	it	cc
 800ba4c:	250c      	movcc	r5, #12
 800ba4e:	2d00      	cmp	r5, #0
 800ba50:	4607      	mov	r7, r0
 800ba52:	db01      	blt.n	800ba58 <_malloc_r+0x1c>
 800ba54:	42a9      	cmp	r1, r5
 800ba56:	d905      	bls.n	800ba64 <_malloc_r+0x28>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	2600      	movs	r6, #0
 800ba5e:	4630      	mov	r0, r6
 800ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba64:	4e2e      	ldr	r6, [pc, #184]	; (800bb20 <_malloc_r+0xe4>)
 800ba66:	f001 ffa1 	bl	800d9ac <__malloc_lock>
 800ba6a:	6833      	ldr	r3, [r6, #0]
 800ba6c:	461c      	mov	r4, r3
 800ba6e:	bb34      	cbnz	r4, 800babe <_malloc_r+0x82>
 800ba70:	4629      	mov	r1, r5
 800ba72:	4638      	mov	r0, r7
 800ba74:	f7ff ffc2 	bl	800b9fc <sbrk_aligned>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	d14d      	bne.n	800bb1a <_malloc_r+0xde>
 800ba7e:	6834      	ldr	r4, [r6, #0]
 800ba80:	4626      	mov	r6, r4
 800ba82:	2e00      	cmp	r6, #0
 800ba84:	d140      	bne.n	800bb08 <_malloc_r+0xcc>
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	eb04 0803 	add.w	r8, r4, r3
 800ba90:	f000 fe16 	bl	800c6c0 <_sbrk_r>
 800ba94:	4580      	cmp	r8, r0
 800ba96:	d13a      	bne.n	800bb0e <_malloc_r+0xd2>
 800ba98:	6821      	ldr	r1, [r4, #0]
 800ba9a:	3503      	adds	r5, #3
 800ba9c:	1a6d      	subs	r5, r5, r1
 800ba9e:	f025 0503 	bic.w	r5, r5, #3
 800baa2:	3508      	adds	r5, #8
 800baa4:	2d0c      	cmp	r5, #12
 800baa6:	bf38      	it	cc
 800baa8:	250c      	movcc	r5, #12
 800baaa:	4629      	mov	r1, r5
 800baac:	4638      	mov	r0, r7
 800baae:	f7ff ffa5 	bl	800b9fc <sbrk_aligned>
 800bab2:	3001      	adds	r0, #1
 800bab4:	d02b      	beq.n	800bb0e <_malloc_r+0xd2>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	442b      	add	r3, r5
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	e00e      	b.n	800badc <_malloc_r+0xa0>
 800babe:	6822      	ldr	r2, [r4, #0]
 800bac0:	1b52      	subs	r2, r2, r5
 800bac2:	d41e      	bmi.n	800bb02 <_malloc_r+0xc6>
 800bac4:	2a0b      	cmp	r2, #11
 800bac6:	d916      	bls.n	800baf6 <_malloc_r+0xba>
 800bac8:	1961      	adds	r1, r4, r5
 800baca:	42a3      	cmp	r3, r4
 800bacc:	6025      	str	r5, [r4, #0]
 800bace:	bf18      	it	ne
 800bad0:	6059      	strne	r1, [r3, #4]
 800bad2:	6863      	ldr	r3, [r4, #4]
 800bad4:	bf08      	it	eq
 800bad6:	6031      	streq	r1, [r6, #0]
 800bad8:	5162      	str	r2, [r4, r5]
 800bada:	604b      	str	r3, [r1, #4]
 800badc:	4638      	mov	r0, r7
 800bade:	f104 060b 	add.w	r6, r4, #11
 800bae2:	f001 ff69 	bl	800d9b8 <__malloc_unlock>
 800bae6:	f026 0607 	bic.w	r6, r6, #7
 800baea:	1d23      	adds	r3, r4, #4
 800baec:	1af2      	subs	r2, r6, r3
 800baee:	d0b6      	beq.n	800ba5e <_malloc_r+0x22>
 800baf0:	1b9b      	subs	r3, r3, r6
 800baf2:	50a3      	str	r3, [r4, r2]
 800baf4:	e7b3      	b.n	800ba5e <_malloc_r+0x22>
 800baf6:	6862      	ldr	r2, [r4, #4]
 800baf8:	42a3      	cmp	r3, r4
 800bafa:	bf0c      	ite	eq
 800bafc:	6032      	streq	r2, [r6, #0]
 800bafe:	605a      	strne	r2, [r3, #4]
 800bb00:	e7ec      	b.n	800badc <_malloc_r+0xa0>
 800bb02:	4623      	mov	r3, r4
 800bb04:	6864      	ldr	r4, [r4, #4]
 800bb06:	e7b2      	b.n	800ba6e <_malloc_r+0x32>
 800bb08:	4634      	mov	r4, r6
 800bb0a:	6876      	ldr	r6, [r6, #4]
 800bb0c:	e7b9      	b.n	800ba82 <_malloc_r+0x46>
 800bb0e:	230c      	movs	r3, #12
 800bb10:	603b      	str	r3, [r7, #0]
 800bb12:	4638      	mov	r0, r7
 800bb14:	f001 ff50 	bl	800d9b8 <__malloc_unlock>
 800bb18:	e7a1      	b.n	800ba5e <_malloc_r+0x22>
 800bb1a:	6025      	str	r5, [r4, #0]
 800bb1c:	e7de      	b.n	800badc <_malloc_r+0xa0>
 800bb1e:	bf00      	nop
 800bb20:	20008ef8 	.word	0x20008ef8

0800bb24 <__cvt>:
 800bb24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb28:	ec55 4b10 	vmov	r4, r5, d0
 800bb2c:	2d00      	cmp	r5, #0
 800bb2e:	460e      	mov	r6, r1
 800bb30:	4619      	mov	r1, r3
 800bb32:	462b      	mov	r3, r5
 800bb34:	bfbb      	ittet	lt
 800bb36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb3a:	461d      	movlt	r5, r3
 800bb3c:	2300      	movge	r3, #0
 800bb3e:	232d      	movlt	r3, #45	; 0x2d
 800bb40:	700b      	strb	r3, [r1, #0]
 800bb42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb48:	4691      	mov	r9, r2
 800bb4a:	f023 0820 	bic.w	r8, r3, #32
 800bb4e:	bfbc      	itt	lt
 800bb50:	4622      	movlt	r2, r4
 800bb52:	4614      	movlt	r4, r2
 800bb54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb58:	d005      	beq.n	800bb66 <__cvt+0x42>
 800bb5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb5e:	d100      	bne.n	800bb62 <__cvt+0x3e>
 800bb60:	3601      	adds	r6, #1
 800bb62:	2102      	movs	r1, #2
 800bb64:	e000      	b.n	800bb68 <__cvt+0x44>
 800bb66:	2103      	movs	r1, #3
 800bb68:	ab03      	add	r3, sp, #12
 800bb6a:	9301      	str	r3, [sp, #4]
 800bb6c:	ab02      	add	r3, sp, #8
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	ec45 4b10 	vmov	d0, r4, r5
 800bb74:	4653      	mov	r3, sl
 800bb76:	4632      	mov	r2, r6
 800bb78:	f000 ffd2 	bl	800cb20 <_dtoa_r>
 800bb7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb80:	4607      	mov	r7, r0
 800bb82:	d102      	bne.n	800bb8a <__cvt+0x66>
 800bb84:	f019 0f01 	tst.w	r9, #1
 800bb88:	d022      	beq.n	800bbd0 <__cvt+0xac>
 800bb8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb8e:	eb07 0906 	add.w	r9, r7, r6
 800bb92:	d110      	bne.n	800bbb6 <__cvt+0x92>
 800bb94:	783b      	ldrb	r3, [r7, #0]
 800bb96:	2b30      	cmp	r3, #48	; 0x30
 800bb98:	d10a      	bne.n	800bbb0 <__cvt+0x8c>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4620      	mov	r0, r4
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7f4 ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 800bba6:	b918      	cbnz	r0, 800bbb0 <__cvt+0x8c>
 800bba8:	f1c6 0601 	rsb	r6, r6, #1
 800bbac:	f8ca 6000 	str.w	r6, [sl]
 800bbb0:	f8da 3000 	ldr.w	r3, [sl]
 800bbb4:	4499      	add	r9, r3
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4620      	mov	r0, r4
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7f4 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 800bbc2:	b108      	cbz	r0, 800bbc8 <__cvt+0xa4>
 800bbc4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbc8:	2230      	movs	r2, #48	; 0x30
 800bbca:	9b03      	ldr	r3, [sp, #12]
 800bbcc:	454b      	cmp	r3, r9
 800bbce:	d307      	bcc.n	800bbe0 <__cvt+0xbc>
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbd4:	1bdb      	subs	r3, r3, r7
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	b004      	add	sp, #16
 800bbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe0:	1c59      	adds	r1, r3, #1
 800bbe2:	9103      	str	r1, [sp, #12]
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	e7f0      	b.n	800bbca <__cvt+0xa6>

0800bbe8 <__exponent>:
 800bbe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbea:	4603      	mov	r3, r0
 800bbec:	2900      	cmp	r1, #0
 800bbee:	bfb8      	it	lt
 800bbf0:	4249      	neglt	r1, r1
 800bbf2:	f803 2b02 	strb.w	r2, [r3], #2
 800bbf6:	bfb4      	ite	lt
 800bbf8:	222d      	movlt	r2, #45	; 0x2d
 800bbfa:	222b      	movge	r2, #43	; 0x2b
 800bbfc:	2909      	cmp	r1, #9
 800bbfe:	7042      	strb	r2, [r0, #1]
 800bc00:	dd2a      	ble.n	800bc58 <__exponent+0x70>
 800bc02:	f10d 0407 	add.w	r4, sp, #7
 800bc06:	46a4      	mov	ip, r4
 800bc08:	270a      	movs	r7, #10
 800bc0a:	46a6      	mov	lr, r4
 800bc0c:	460a      	mov	r2, r1
 800bc0e:	fb91 f6f7 	sdiv	r6, r1, r7
 800bc12:	fb07 1516 	mls	r5, r7, r6, r1
 800bc16:	3530      	adds	r5, #48	; 0x30
 800bc18:	2a63      	cmp	r2, #99	; 0x63
 800bc1a:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc22:	4631      	mov	r1, r6
 800bc24:	dcf1      	bgt.n	800bc0a <__exponent+0x22>
 800bc26:	3130      	adds	r1, #48	; 0x30
 800bc28:	f1ae 0502 	sub.w	r5, lr, #2
 800bc2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc30:	1c44      	adds	r4, r0, #1
 800bc32:	4629      	mov	r1, r5
 800bc34:	4561      	cmp	r1, ip
 800bc36:	d30a      	bcc.n	800bc4e <__exponent+0x66>
 800bc38:	f10d 0209 	add.w	r2, sp, #9
 800bc3c:	eba2 020e 	sub.w	r2, r2, lr
 800bc40:	4565      	cmp	r5, ip
 800bc42:	bf88      	it	hi
 800bc44:	2200      	movhi	r2, #0
 800bc46:	4413      	add	r3, r2
 800bc48:	1a18      	subs	r0, r3, r0
 800bc4a:	b003      	add	sp, #12
 800bc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc52:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc56:	e7ed      	b.n	800bc34 <__exponent+0x4c>
 800bc58:	2330      	movs	r3, #48	; 0x30
 800bc5a:	3130      	adds	r1, #48	; 0x30
 800bc5c:	7083      	strb	r3, [r0, #2]
 800bc5e:	70c1      	strb	r1, [r0, #3]
 800bc60:	1d03      	adds	r3, r0, #4
 800bc62:	e7f1      	b.n	800bc48 <__exponent+0x60>

0800bc64 <_printf_float>:
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	ed2d 8b02 	vpush	{d8}
 800bc6c:	b08d      	sub	sp, #52	; 0x34
 800bc6e:	460c      	mov	r4, r1
 800bc70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc74:	4616      	mov	r6, r2
 800bc76:	461f      	mov	r7, r3
 800bc78:	4605      	mov	r5, r0
 800bc7a:	f001 fe13 	bl	800d8a4 <_localeconv_r>
 800bc7e:	f8d0 a000 	ldr.w	sl, [r0]
 800bc82:	4650      	mov	r0, sl
 800bc84:	f7f4 fac4 	bl	8000210 <strlen>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	9305      	str	r3, [sp, #20]
 800bc90:	f8d8 3000 	ldr.w	r3, [r8]
 800bc94:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc98:	3307      	adds	r3, #7
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	f103 0208 	add.w	r2, r3, #8
 800bca2:	f8c8 2000 	str.w	r2, [r8]
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bcae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bcb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcb6:	9307      	str	r3, [sp, #28]
 800bcb8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcbc:	ee08 0a10 	vmov	s16, r0
 800bcc0:	4b9f      	ldr	r3, [pc, #636]	; (800bf40 <_printf_float+0x2dc>)
 800bcc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcca:	f7f4 ff4f 	bl	8000b6c <__aeabi_dcmpun>
 800bcce:	bb88      	cbnz	r0, 800bd34 <_printf_float+0xd0>
 800bcd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcd4:	4b9a      	ldr	r3, [pc, #616]	; (800bf40 <_printf_float+0x2dc>)
 800bcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcda:	f7f4 ff29 	bl	8000b30 <__aeabi_dcmple>
 800bcde:	bb48      	cbnz	r0, 800bd34 <_printf_float+0xd0>
 800bce0:	2200      	movs	r2, #0
 800bce2:	2300      	movs	r3, #0
 800bce4:	4640      	mov	r0, r8
 800bce6:	4649      	mov	r1, r9
 800bce8:	f7f4 ff18 	bl	8000b1c <__aeabi_dcmplt>
 800bcec:	b110      	cbz	r0, 800bcf4 <_printf_float+0x90>
 800bcee:	232d      	movs	r3, #45	; 0x2d
 800bcf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf4:	4b93      	ldr	r3, [pc, #588]	; (800bf44 <_printf_float+0x2e0>)
 800bcf6:	4894      	ldr	r0, [pc, #592]	; (800bf48 <_printf_float+0x2e4>)
 800bcf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bcfc:	bf94      	ite	ls
 800bcfe:	4698      	movls	r8, r3
 800bd00:	4680      	movhi	r8, r0
 800bd02:	2303      	movs	r3, #3
 800bd04:	6123      	str	r3, [r4, #16]
 800bd06:	9b05      	ldr	r3, [sp, #20]
 800bd08:	f023 0204 	bic.w	r2, r3, #4
 800bd0c:	6022      	str	r2, [r4, #0]
 800bd0e:	f04f 0900 	mov.w	r9, #0
 800bd12:	9700      	str	r7, [sp, #0]
 800bd14:	4633      	mov	r3, r6
 800bd16:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f000 f9d8 	bl	800c0d0 <_printf_common>
 800bd20:	3001      	adds	r0, #1
 800bd22:	f040 8090 	bne.w	800be46 <_printf_float+0x1e2>
 800bd26:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2a:	b00d      	add	sp, #52	; 0x34
 800bd2c:	ecbd 8b02 	vpop	{d8}
 800bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd34:	4642      	mov	r2, r8
 800bd36:	464b      	mov	r3, r9
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	f7f4 ff16 	bl	8000b6c <__aeabi_dcmpun>
 800bd40:	b140      	cbz	r0, 800bd54 <_printf_float+0xf0>
 800bd42:	464b      	mov	r3, r9
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	bfbc      	itt	lt
 800bd48:	232d      	movlt	r3, #45	; 0x2d
 800bd4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd4e:	487f      	ldr	r0, [pc, #508]	; (800bf4c <_printf_float+0x2e8>)
 800bd50:	4b7f      	ldr	r3, [pc, #508]	; (800bf50 <_printf_float+0x2ec>)
 800bd52:	e7d1      	b.n	800bcf8 <_printf_float+0x94>
 800bd54:	6863      	ldr	r3, [r4, #4]
 800bd56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd5a:	9206      	str	r2, [sp, #24]
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	d13f      	bne.n	800bde0 <_printf_float+0x17c>
 800bd60:	2306      	movs	r3, #6
 800bd62:	6063      	str	r3, [r4, #4]
 800bd64:	9b05      	ldr	r3, [sp, #20]
 800bd66:	6861      	ldr	r1, [r4, #4]
 800bd68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	ab0a      	add	r3, sp, #40	; 0x28
 800bd72:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd76:	ab09      	add	r3, sp, #36	; 0x24
 800bd78:	ec49 8b10 	vmov	d0, r8, r9
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	6022      	str	r2, [r4, #0]
 800bd80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd84:	4628      	mov	r0, r5
 800bd86:	f7ff fecd 	bl	800bb24 <__cvt>
 800bd8a:	9b06      	ldr	r3, [sp, #24]
 800bd8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd8e:	2b47      	cmp	r3, #71	; 0x47
 800bd90:	4680      	mov	r8, r0
 800bd92:	d108      	bne.n	800bda6 <_printf_float+0x142>
 800bd94:	1cc8      	adds	r0, r1, #3
 800bd96:	db02      	blt.n	800bd9e <_printf_float+0x13a>
 800bd98:	6863      	ldr	r3, [r4, #4]
 800bd9a:	4299      	cmp	r1, r3
 800bd9c:	dd41      	ble.n	800be22 <_printf_float+0x1be>
 800bd9e:	f1ab 0b02 	sub.w	fp, fp, #2
 800bda2:	fa5f fb8b 	uxtb.w	fp, fp
 800bda6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdaa:	d820      	bhi.n	800bdee <_printf_float+0x18a>
 800bdac:	3901      	subs	r1, #1
 800bdae:	465a      	mov	r2, fp
 800bdb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bdb4:	9109      	str	r1, [sp, #36]	; 0x24
 800bdb6:	f7ff ff17 	bl	800bbe8 <__exponent>
 800bdba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdbc:	1813      	adds	r3, r2, r0
 800bdbe:	2a01      	cmp	r2, #1
 800bdc0:	4681      	mov	r9, r0
 800bdc2:	6123      	str	r3, [r4, #16]
 800bdc4:	dc02      	bgt.n	800bdcc <_printf_float+0x168>
 800bdc6:	6822      	ldr	r2, [r4, #0]
 800bdc8:	07d2      	lsls	r2, r2, #31
 800bdca:	d501      	bpl.n	800bdd0 <_printf_float+0x16c>
 800bdcc:	3301      	adds	r3, #1
 800bdce:	6123      	str	r3, [r4, #16]
 800bdd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d09c      	beq.n	800bd12 <_printf_float+0xae>
 800bdd8:	232d      	movs	r3, #45	; 0x2d
 800bdda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdde:	e798      	b.n	800bd12 <_printf_float+0xae>
 800bde0:	9a06      	ldr	r2, [sp, #24]
 800bde2:	2a47      	cmp	r2, #71	; 0x47
 800bde4:	d1be      	bne.n	800bd64 <_printf_float+0x100>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1bc      	bne.n	800bd64 <_printf_float+0x100>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e7b9      	b.n	800bd62 <_printf_float+0xfe>
 800bdee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bdf2:	d118      	bne.n	800be26 <_printf_float+0x1c2>
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	6863      	ldr	r3, [r4, #4]
 800bdf8:	dd0b      	ble.n	800be12 <_printf_float+0x1ae>
 800bdfa:	6121      	str	r1, [r4, #16]
 800bdfc:	b913      	cbnz	r3, 800be04 <_printf_float+0x1a0>
 800bdfe:	6822      	ldr	r2, [r4, #0]
 800be00:	07d0      	lsls	r0, r2, #31
 800be02:	d502      	bpl.n	800be0a <_printf_float+0x1a6>
 800be04:	3301      	adds	r3, #1
 800be06:	440b      	add	r3, r1
 800be08:	6123      	str	r3, [r4, #16]
 800be0a:	65a1      	str	r1, [r4, #88]	; 0x58
 800be0c:	f04f 0900 	mov.w	r9, #0
 800be10:	e7de      	b.n	800bdd0 <_printf_float+0x16c>
 800be12:	b913      	cbnz	r3, 800be1a <_printf_float+0x1b6>
 800be14:	6822      	ldr	r2, [r4, #0]
 800be16:	07d2      	lsls	r2, r2, #31
 800be18:	d501      	bpl.n	800be1e <_printf_float+0x1ba>
 800be1a:	3302      	adds	r3, #2
 800be1c:	e7f4      	b.n	800be08 <_printf_float+0x1a4>
 800be1e:	2301      	movs	r3, #1
 800be20:	e7f2      	b.n	800be08 <_printf_float+0x1a4>
 800be22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be28:	4299      	cmp	r1, r3
 800be2a:	db05      	blt.n	800be38 <_printf_float+0x1d4>
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	6121      	str	r1, [r4, #16]
 800be30:	07d8      	lsls	r0, r3, #31
 800be32:	d5ea      	bpl.n	800be0a <_printf_float+0x1a6>
 800be34:	1c4b      	adds	r3, r1, #1
 800be36:	e7e7      	b.n	800be08 <_printf_float+0x1a4>
 800be38:	2900      	cmp	r1, #0
 800be3a:	bfd4      	ite	le
 800be3c:	f1c1 0202 	rsble	r2, r1, #2
 800be40:	2201      	movgt	r2, #1
 800be42:	4413      	add	r3, r2
 800be44:	e7e0      	b.n	800be08 <_printf_float+0x1a4>
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	055a      	lsls	r2, r3, #21
 800be4a:	d407      	bmi.n	800be5c <_printf_float+0x1f8>
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	4642      	mov	r2, r8
 800be50:	4631      	mov	r1, r6
 800be52:	4628      	mov	r0, r5
 800be54:	47b8      	blx	r7
 800be56:	3001      	adds	r0, #1
 800be58:	d12c      	bne.n	800beb4 <_printf_float+0x250>
 800be5a:	e764      	b.n	800bd26 <_printf_float+0xc2>
 800be5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be60:	f240 80e0 	bls.w	800c024 <_printf_float+0x3c0>
 800be64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be68:	2200      	movs	r2, #0
 800be6a:	2300      	movs	r3, #0
 800be6c:	f7f4 fe4c 	bl	8000b08 <__aeabi_dcmpeq>
 800be70:	2800      	cmp	r0, #0
 800be72:	d034      	beq.n	800bede <_printf_float+0x27a>
 800be74:	4a37      	ldr	r2, [pc, #220]	; (800bf54 <_printf_float+0x2f0>)
 800be76:	2301      	movs	r3, #1
 800be78:	4631      	mov	r1, r6
 800be7a:	4628      	mov	r0, r5
 800be7c:	47b8      	blx	r7
 800be7e:	3001      	adds	r0, #1
 800be80:	f43f af51 	beq.w	800bd26 <_printf_float+0xc2>
 800be84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be88:	429a      	cmp	r2, r3
 800be8a:	db02      	blt.n	800be92 <_printf_float+0x22e>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	07d8      	lsls	r0, r3, #31
 800be90:	d510      	bpl.n	800beb4 <_printf_float+0x250>
 800be92:	ee18 3a10 	vmov	r3, s16
 800be96:	4652      	mov	r2, sl
 800be98:	4631      	mov	r1, r6
 800be9a:	4628      	mov	r0, r5
 800be9c:	47b8      	blx	r7
 800be9e:	3001      	adds	r0, #1
 800bea0:	f43f af41 	beq.w	800bd26 <_printf_float+0xc2>
 800bea4:	f04f 0800 	mov.w	r8, #0
 800bea8:	f104 091a 	add.w	r9, r4, #26
 800beac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beae:	3b01      	subs	r3, #1
 800beb0:	4543      	cmp	r3, r8
 800beb2:	dc09      	bgt.n	800bec8 <_printf_float+0x264>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	079b      	lsls	r3, r3, #30
 800beb8:	f100 8105 	bmi.w	800c0c6 <_printf_float+0x462>
 800bebc:	68e0      	ldr	r0, [r4, #12]
 800bebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bec0:	4298      	cmp	r0, r3
 800bec2:	bfb8      	it	lt
 800bec4:	4618      	movlt	r0, r3
 800bec6:	e730      	b.n	800bd2a <_printf_float+0xc6>
 800bec8:	2301      	movs	r3, #1
 800beca:	464a      	mov	r2, r9
 800becc:	4631      	mov	r1, r6
 800bece:	4628      	mov	r0, r5
 800bed0:	47b8      	blx	r7
 800bed2:	3001      	adds	r0, #1
 800bed4:	f43f af27 	beq.w	800bd26 <_printf_float+0xc2>
 800bed8:	f108 0801 	add.w	r8, r8, #1
 800bedc:	e7e6      	b.n	800beac <_printf_float+0x248>
 800bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dc39      	bgt.n	800bf58 <_printf_float+0x2f4>
 800bee4:	4a1b      	ldr	r2, [pc, #108]	; (800bf54 <_printf_float+0x2f0>)
 800bee6:	2301      	movs	r3, #1
 800bee8:	4631      	mov	r1, r6
 800beea:	4628      	mov	r0, r5
 800beec:	47b8      	blx	r7
 800beee:	3001      	adds	r0, #1
 800bef0:	f43f af19 	beq.w	800bd26 <_printf_float+0xc2>
 800bef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bef8:	4313      	orrs	r3, r2
 800befa:	d102      	bne.n	800bf02 <_printf_float+0x29e>
 800befc:	6823      	ldr	r3, [r4, #0]
 800befe:	07d9      	lsls	r1, r3, #31
 800bf00:	d5d8      	bpl.n	800beb4 <_printf_float+0x250>
 800bf02:	ee18 3a10 	vmov	r3, s16
 800bf06:	4652      	mov	r2, sl
 800bf08:	4631      	mov	r1, r6
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	47b8      	blx	r7
 800bf0e:	3001      	adds	r0, #1
 800bf10:	f43f af09 	beq.w	800bd26 <_printf_float+0xc2>
 800bf14:	f04f 0900 	mov.w	r9, #0
 800bf18:	f104 0a1a 	add.w	sl, r4, #26
 800bf1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf1e:	425b      	negs	r3, r3
 800bf20:	454b      	cmp	r3, r9
 800bf22:	dc01      	bgt.n	800bf28 <_printf_float+0x2c4>
 800bf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf26:	e792      	b.n	800be4e <_printf_float+0x1ea>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	4652      	mov	r2, sl
 800bf2c:	4631      	mov	r1, r6
 800bf2e:	4628      	mov	r0, r5
 800bf30:	47b8      	blx	r7
 800bf32:	3001      	adds	r0, #1
 800bf34:	f43f aef7 	beq.w	800bd26 <_printf_float+0xc2>
 800bf38:	f109 0901 	add.w	r9, r9, #1
 800bf3c:	e7ee      	b.n	800bf1c <_printf_float+0x2b8>
 800bf3e:	bf00      	nop
 800bf40:	7fefffff 	.word	0x7fefffff
 800bf44:	080100ec 	.word	0x080100ec
 800bf48:	080100f0 	.word	0x080100f0
 800bf4c:	080100f8 	.word	0x080100f8
 800bf50:	080100f4 	.word	0x080100f4
 800bf54:	080100fc 	.word	0x080100fc
 800bf58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	bfa8      	it	ge
 800bf60:	461a      	movge	r2, r3
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	4691      	mov	r9, r2
 800bf66:	dc37      	bgt.n	800bfd8 <_printf_float+0x374>
 800bf68:	f04f 0b00 	mov.w	fp, #0
 800bf6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf70:	f104 021a 	add.w	r2, r4, #26
 800bf74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf76:	9305      	str	r3, [sp, #20]
 800bf78:	eba3 0309 	sub.w	r3, r3, r9
 800bf7c:	455b      	cmp	r3, fp
 800bf7e:	dc33      	bgt.n	800bfe8 <_printf_float+0x384>
 800bf80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf84:	429a      	cmp	r2, r3
 800bf86:	db3b      	blt.n	800c000 <_printf_float+0x39c>
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	07da      	lsls	r2, r3, #31
 800bf8c:	d438      	bmi.n	800c000 <_printf_float+0x39c>
 800bf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf90:	9a05      	ldr	r2, [sp, #20]
 800bf92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf94:	1a9a      	subs	r2, r3, r2
 800bf96:	eba3 0901 	sub.w	r9, r3, r1
 800bf9a:	4591      	cmp	r9, r2
 800bf9c:	bfa8      	it	ge
 800bf9e:	4691      	movge	r9, r2
 800bfa0:	f1b9 0f00 	cmp.w	r9, #0
 800bfa4:	dc35      	bgt.n	800c012 <_printf_float+0x3ae>
 800bfa6:	f04f 0800 	mov.w	r8, #0
 800bfaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfae:	f104 0a1a 	add.w	sl, r4, #26
 800bfb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfb6:	1a9b      	subs	r3, r3, r2
 800bfb8:	eba3 0309 	sub.w	r3, r3, r9
 800bfbc:	4543      	cmp	r3, r8
 800bfbe:	f77f af79 	ble.w	800beb4 <_printf_float+0x250>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	4652      	mov	r2, sl
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	4628      	mov	r0, r5
 800bfca:	47b8      	blx	r7
 800bfcc:	3001      	adds	r0, #1
 800bfce:	f43f aeaa 	beq.w	800bd26 <_printf_float+0xc2>
 800bfd2:	f108 0801 	add.w	r8, r8, #1
 800bfd6:	e7ec      	b.n	800bfb2 <_printf_float+0x34e>
 800bfd8:	4613      	mov	r3, r2
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4642      	mov	r2, r8
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b8      	blx	r7
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d1c0      	bne.n	800bf68 <_printf_float+0x304>
 800bfe6:	e69e      	b.n	800bd26 <_printf_float+0xc2>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	4631      	mov	r1, r6
 800bfec:	4628      	mov	r0, r5
 800bfee:	9205      	str	r2, [sp, #20]
 800bff0:	47b8      	blx	r7
 800bff2:	3001      	adds	r0, #1
 800bff4:	f43f ae97 	beq.w	800bd26 <_printf_float+0xc2>
 800bff8:	9a05      	ldr	r2, [sp, #20]
 800bffa:	f10b 0b01 	add.w	fp, fp, #1
 800bffe:	e7b9      	b.n	800bf74 <_printf_float+0x310>
 800c000:	ee18 3a10 	vmov	r3, s16
 800c004:	4652      	mov	r2, sl
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	47b8      	blx	r7
 800c00c:	3001      	adds	r0, #1
 800c00e:	d1be      	bne.n	800bf8e <_printf_float+0x32a>
 800c010:	e689      	b.n	800bd26 <_printf_float+0xc2>
 800c012:	9a05      	ldr	r2, [sp, #20]
 800c014:	464b      	mov	r3, r9
 800c016:	4442      	add	r2, r8
 800c018:	4631      	mov	r1, r6
 800c01a:	4628      	mov	r0, r5
 800c01c:	47b8      	blx	r7
 800c01e:	3001      	adds	r0, #1
 800c020:	d1c1      	bne.n	800bfa6 <_printf_float+0x342>
 800c022:	e680      	b.n	800bd26 <_printf_float+0xc2>
 800c024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c026:	2a01      	cmp	r2, #1
 800c028:	dc01      	bgt.n	800c02e <_printf_float+0x3ca>
 800c02a:	07db      	lsls	r3, r3, #31
 800c02c:	d538      	bpl.n	800c0a0 <_printf_float+0x43c>
 800c02e:	2301      	movs	r3, #1
 800c030:	4642      	mov	r2, r8
 800c032:	4631      	mov	r1, r6
 800c034:	4628      	mov	r0, r5
 800c036:	47b8      	blx	r7
 800c038:	3001      	adds	r0, #1
 800c03a:	f43f ae74 	beq.w	800bd26 <_printf_float+0xc2>
 800c03e:	ee18 3a10 	vmov	r3, s16
 800c042:	4652      	mov	r2, sl
 800c044:	4631      	mov	r1, r6
 800c046:	4628      	mov	r0, r5
 800c048:	47b8      	blx	r7
 800c04a:	3001      	adds	r0, #1
 800c04c:	f43f ae6b 	beq.w	800bd26 <_printf_float+0xc2>
 800c050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c054:	2200      	movs	r2, #0
 800c056:	2300      	movs	r3, #0
 800c058:	f7f4 fd56 	bl	8000b08 <__aeabi_dcmpeq>
 800c05c:	b9d8      	cbnz	r0, 800c096 <_printf_float+0x432>
 800c05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c060:	f108 0201 	add.w	r2, r8, #1
 800c064:	3b01      	subs	r3, #1
 800c066:	4631      	mov	r1, r6
 800c068:	4628      	mov	r0, r5
 800c06a:	47b8      	blx	r7
 800c06c:	3001      	adds	r0, #1
 800c06e:	d10e      	bne.n	800c08e <_printf_float+0x42a>
 800c070:	e659      	b.n	800bd26 <_printf_float+0xc2>
 800c072:	2301      	movs	r3, #1
 800c074:	4652      	mov	r2, sl
 800c076:	4631      	mov	r1, r6
 800c078:	4628      	mov	r0, r5
 800c07a:	47b8      	blx	r7
 800c07c:	3001      	adds	r0, #1
 800c07e:	f43f ae52 	beq.w	800bd26 <_printf_float+0xc2>
 800c082:	f108 0801 	add.w	r8, r8, #1
 800c086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c088:	3b01      	subs	r3, #1
 800c08a:	4543      	cmp	r3, r8
 800c08c:	dcf1      	bgt.n	800c072 <_printf_float+0x40e>
 800c08e:	464b      	mov	r3, r9
 800c090:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c094:	e6dc      	b.n	800be50 <_printf_float+0x1ec>
 800c096:	f04f 0800 	mov.w	r8, #0
 800c09a:	f104 0a1a 	add.w	sl, r4, #26
 800c09e:	e7f2      	b.n	800c086 <_printf_float+0x422>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	4642      	mov	r2, r8
 800c0a4:	e7df      	b.n	800c066 <_printf_float+0x402>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	464a      	mov	r2, r9
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	47b8      	blx	r7
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	f43f ae38 	beq.w	800bd26 <_printf_float+0xc2>
 800c0b6:	f108 0801 	add.w	r8, r8, #1
 800c0ba:	68e3      	ldr	r3, [r4, #12]
 800c0bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0be:	1a5b      	subs	r3, r3, r1
 800c0c0:	4543      	cmp	r3, r8
 800c0c2:	dcf0      	bgt.n	800c0a6 <_printf_float+0x442>
 800c0c4:	e6fa      	b.n	800bebc <_printf_float+0x258>
 800c0c6:	f04f 0800 	mov.w	r8, #0
 800c0ca:	f104 0919 	add.w	r9, r4, #25
 800c0ce:	e7f4      	b.n	800c0ba <_printf_float+0x456>

0800c0d0 <_printf_common>:
 800c0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	4699      	mov	r9, r3
 800c0d8:	688a      	ldr	r2, [r1, #8]
 800c0da:	690b      	ldr	r3, [r1, #16]
 800c0dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	bfb8      	it	lt
 800c0e4:	4613      	movlt	r3, r2
 800c0e6:	6033      	str	r3, [r6, #0]
 800c0e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	b10a      	cbz	r2, 800c0f6 <_printf_common+0x26>
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	6033      	str	r3, [r6, #0]
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	0699      	lsls	r1, r3, #26
 800c0fa:	bf42      	ittt	mi
 800c0fc:	6833      	ldrmi	r3, [r6, #0]
 800c0fe:	3302      	addmi	r3, #2
 800c100:	6033      	strmi	r3, [r6, #0]
 800c102:	6825      	ldr	r5, [r4, #0]
 800c104:	f015 0506 	ands.w	r5, r5, #6
 800c108:	d106      	bne.n	800c118 <_printf_common+0x48>
 800c10a:	f104 0a19 	add.w	sl, r4, #25
 800c10e:	68e3      	ldr	r3, [r4, #12]
 800c110:	6832      	ldr	r2, [r6, #0]
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	42ab      	cmp	r3, r5
 800c116:	dc26      	bgt.n	800c166 <_printf_common+0x96>
 800c118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c11c:	1e13      	subs	r3, r2, #0
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	bf18      	it	ne
 800c122:	2301      	movne	r3, #1
 800c124:	0692      	lsls	r2, r2, #26
 800c126:	d42b      	bmi.n	800c180 <_printf_common+0xb0>
 800c128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c12c:	4649      	mov	r1, r9
 800c12e:	4638      	mov	r0, r7
 800c130:	47c0      	blx	r8
 800c132:	3001      	adds	r0, #1
 800c134:	d01e      	beq.n	800c174 <_printf_common+0xa4>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	68e5      	ldr	r5, [r4, #12]
 800c13a:	6832      	ldr	r2, [r6, #0]
 800c13c:	f003 0306 	and.w	r3, r3, #6
 800c140:	2b04      	cmp	r3, #4
 800c142:	bf08      	it	eq
 800c144:	1aad      	subeq	r5, r5, r2
 800c146:	68a3      	ldr	r3, [r4, #8]
 800c148:	6922      	ldr	r2, [r4, #16]
 800c14a:	bf0c      	ite	eq
 800c14c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c150:	2500      	movne	r5, #0
 800c152:	4293      	cmp	r3, r2
 800c154:	bfc4      	itt	gt
 800c156:	1a9b      	subgt	r3, r3, r2
 800c158:	18ed      	addgt	r5, r5, r3
 800c15a:	2600      	movs	r6, #0
 800c15c:	341a      	adds	r4, #26
 800c15e:	42b5      	cmp	r5, r6
 800c160:	d11a      	bne.n	800c198 <_printf_common+0xc8>
 800c162:	2000      	movs	r0, #0
 800c164:	e008      	b.n	800c178 <_printf_common+0xa8>
 800c166:	2301      	movs	r3, #1
 800c168:	4652      	mov	r2, sl
 800c16a:	4649      	mov	r1, r9
 800c16c:	4638      	mov	r0, r7
 800c16e:	47c0      	blx	r8
 800c170:	3001      	adds	r0, #1
 800c172:	d103      	bne.n	800c17c <_printf_common+0xac>
 800c174:	f04f 30ff 	mov.w	r0, #4294967295
 800c178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17c:	3501      	adds	r5, #1
 800c17e:	e7c6      	b.n	800c10e <_printf_common+0x3e>
 800c180:	18e1      	adds	r1, r4, r3
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	2030      	movs	r0, #48	; 0x30
 800c186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c18a:	4422      	add	r2, r4
 800c18c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c194:	3302      	adds	r3, #2
 800c196:	e7c7      	b.n	800c128 <_printf_common+0x58>
 800c198:	2301      	movs	r3, #1
 800c19a:	4622      	mov	r2, r4
 800c19c:	4649      	mov	r1, r9
 800c19e:	4638      	mov	r0, r7
 800c1a0:	47c0      	blx	r8
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	d0e6      	beq.n	800c174 <_printf_common+0xa4>
 800c1a6:	3601      	adds	r6, #1
 800c1a8:	e7d9      	b.n	800c15e <_printf_common+0x8e>
	...

0800c1ac <_printf_i>:
 800c1ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b0:	7e0f      	ldrb	r7, [r1, #24]
 800c1b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1b4:	2f78      	cmp	r7, #120	; 0x78
 800c1b6:	4691      	mov	r9, r2
 800c1b8:	4680      	mov	r8, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	469a      	mov	sl, r3
 800c1be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1c2:	d807      	bhi.n	800c1d4 <_printf_i+0x28>
 800c1c4:	2f62      	cmp	r7, #98	; 0x62
 800c1c6:	d80a      	bhi.n	800c1de <_printf_i+0x32>
 800c1c8:	2f00      	cmp	r7, #0
 800c1ca:	f000 80d8 	beq.w	800c37e <_printf_i+0x1d2>
 800c1ce:	2f58      	cmp	r7, #88	; 0x58
 800c1d0:	f000 80a3 	beq.w	800c31a <_printf_i+0x16e>
 800c1d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1dc:	e03a      	b.n	800c254 <_printf_i+0xa8>
 800c1de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1e2:	2b15      	cmp	r3, #21
 800c1e4:	d8f6      	bhi.n	800c1d4 <_printf_i+0x28>
 800c1e6:	a101      	add	r1, pc, #4	; (adr r1, 800c1ec <_printf_i+0x40>)
 800c1e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1ec:	0800c245 	.word	0x0800c245
 800c1f0:	0800c259 	.word	0x0800c259
 800c1f4:	0800c1d5 	.word	0x0800c1d5
 800c1f8:	0800c1d5 	.word	0x0800c1d5
 800c1fc:	0800c1d5 	.word	0x0800c1d5
 800c200:	0800c1d5 	.word	0x0800c1d5
 800c204:	0800c259 	.word	0x0800c259
 800c208:	0800c1d5 	.word	0x0800c1d5
 800c20c:	0800c1d5 	.word	0x0800c1d5
 800c210:	0800c1d5 	.word	0x0800c1d5
 800c214:	0800c1d5 	.word	0x0800c1d5
 800c218:	0800c365 	.word	0x0800c365
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c347 	.word	0x0800c347
 800c224:	0800c1d5 	.word	0x0800c1d5
 800c228:	0800c1d5 	.word	0x0800c1d5
 800c22c:	0800c387 	.word	0x0800c387
 800c230:	0800c1d5 	.word	0x0800c1d5
 800c234:	0800c289 	.word	0x0800c289
 800c238:	0800c1d5 	.word	0x0800c1d5
 800c23c:	0800c1d5 	.word	0x0800c1d5
 800c240:	0800c34f 	.word	0x0800c34f
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	1d1a      	adds	r2, r3, #4
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	602a      	str	r2, [r5, #0]
 800c24c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c254:	2301      	movs	r3, #1
 800c256:	e0a3      	b.n	800c3a0 <_printf_i+0x1f4>
 800c258:	6820      	ldr	r0, [r4, #0]
 800c25a:	6829      	ldr	r1, [r5, #0]
 800c25c:	0606      	lsls	r6, r0, #24
 800c25e:	f101 0304 	add.w	r3, r1, #4
 800c262:	d50a      	bpl.n	800c27a <_printf_i+0xce>
 800c264:	680e      	ldr	r6, [r1, #0]
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	2e00      	cmp	r6, #0
 800c26a:	da03      	bge.n	800c274 <_printf_i+0xc8>
 800c26c:	232d      	movs	r3, #45	; 0x2d
 800c26e:	4276      	negs	r6, r6
 800c270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c274:	485e      	ldr	r0, [pc, #376]	; (800c3f0 <_printf_i+0x244>)
 800c276:	230a      	movs	r3, #10
 800c278:	e019      	b.n	800c2ae <_printf_i+0x102>
 800c27a:	680e      	ldr	r6, [r1, #0]
 800c27c:	602b      	str	r3, [r5, #0]
 800c27e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c282:	bf18      	it	ne
 800c284:	b236      	sxthne	r6, r6
 800c286:	e7ef      	b.n	800c268 <_printf_i+0xbc>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	6820      	ldr	r0, [r4, #0]
 800c28c:	1d19      	adds	r1, r3, #4
 800c28e:	6029      	str	r1, [r5, #0]
 800c290:	0601      	lsls	r1, r0, #24
 800c292:	d501      	bpl.n	800c298 <_printf_i+0xec>
 800c294:	681e      	ldr	r6, [r3, #0]
 800c296:	e002      	b.n	800c29e <_printf_i+0xf2>
 800c298:	0646      	lsls	r6, r0, #25
 800c29a:	d5fb      	bpl.n	800c294 <_printf_i+0xe8>
 800c29c:	881e      	ldrh	r6, [r3, #0]
 800c29e:	4854      	ldr	r0, [pc, #336]	; (800c3f0 <_printf_i+0x244>)
 800c2a0:	2f6f      	cmp	r7, #111	; 0x6f
 800c2a2:	bf0c      	ite	eq
 800c2a4:	2308      	moveq	r3, #8
 800c2a6:	230a      	movne	r3, #10
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2ae:	6865      	ldr	r5, [r4, #4]
 800c2b0:	60a5      	str	r5, [r4, #8]
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	bfa2      	ittt	ge
 800c2b6:	6821      	ldrge	r1, [r4, #0]
 800c2b8:	f021 0104 	bicge.w	r1, r1, #4
 800c2bc:	6021      	strge	r1, [r4, #0]
 800c2be:	b90e      	cbnz	r6, 800c2c4 <_printf_i+0x118>
 800c2c0:	2d00      	cmp	r5, #0
 800c2c2:	d04d      	beq.n	800c360 <_printf_i+0x1b4>
 800c2c4:	4615      	mov	r5, r2
 800c2c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2ca:	fb03 6711 	mls	r7, r3, r1, r6
 800c2ce:	5dc7      	ldrb	r7, [r0, r7]
 800c2d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2d4:	4637      	mov	r7, r6
 800c2d6:	42bb      	cmp	r3, r7
 800c2d8:	460e      	mov	r6, r1
 800c2da:	d9f4      	bls.n	800c2c6 <_printf_i+0x11a>
 800c2dc:	2b08      	cmp	r3, #8
 800c2de:	d10b      	bne.n	800c2f8 <_printf_i+0x14c>
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	07de      	lsls	r6, r3, #31
 800c2e4:	d508      	bpl.n	800c2f8 <_printf_i+0x14c>
 800c2e6:	6923      	ldr	r3, [r4, #16]
 800c2e8:	6861      	ldr	r1, [r4, #4]
 800c2ea:	4299      	cmp	r1, r3
 800c2ec:	bfde      	ittt	le
 800c2ee:	2330      	movle	r3, #48	; 0x30
 800c2f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2f8:	1b52      	subs	r2, r2, r5
 800c2fa:	6122      	str	r2, [r4, #16]
 800c2fc:	f8cd a000 	str.w	sl, [sp]
 800c300:	464b      	mov	r3, r9
 800c302:	aa03      	add	r2, sp, #12
 800c304:	4621      	mov	r1, r4
 800c306:	4640      	mov	r0, r8
 800c308:	f7ff fee2 	bl	800c0d0 <_printf_common>
 800c30c:	3001      	adds	r0, #1
 800c30e:	d14c      	bne.n	800c3aa <_printf_i+0x1fe>
 800c310:	f04f 30ff 	mov.w	r0, #4294967295
 800c314:	b004      	add	sp, #16
 800c316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c31a:	4835      	ldr	r0, [pc, #212]	; (800c3f0 <_printf_i+0x244>)
 800c31c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c320:	6829      	ldr	r1, [r5, #0]
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	f851 6b04 	ldr.w	r6, [r1], #4
 800c328:	6029      	str	r1, [r5, #0]
 800c32a:	061d      	lsls	r5, r3, #24
 800c32c:	d514      	bpl.n	800c358 <_printf_i+0x1ac>
 800c32e:	07df      	lsls	r7, r3, #31
 800c330:	bf44      	itt	mi
 800c332:	f043 0320 	orrmi.w	r3, r3, #32
 800c336:	6023      	strmi	r3, [r4, #0]
 800c338:	b91e      	cbnz	r6, 800c342 <_printf_i+0x196>
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	f023 0320 	bic.w	r3, r3, #32
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	2310      	movs	r3, #16
 800c344:	e7b0      	b.n	800c2a8 <_printf_i+0xfc>
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	f043 0320 	orr.w	r3, r3, #32
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	2378      	movs	r3, #120	; 0x78
 800c350:	4828      	ldr	r0, [pc, #160]	; (800c3f4 <_printf_i+0x248>)
 800c352:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c356:	e7e3      	b.n	800c320 <_printf_i+0x174>
 800c358:	0659      	lsls	r1, r3, #25
 800c35a:	bf48      	it	mi
 800c35c:	b2b6      	uxthmi	r6, r6
 800c35e:	e7e6      	b.n	800c32e <_printf_i+0x182>
 800c360:	4615      	mov	r5, r2
 800c362:	e7bb      	b.n	800c2dc <_printf_i+0x130>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	6826      	ldr	r6, [r4, #0]
 800c368:	6961      	ldr	r1, [r4, #20]
 800c36a:	1d18      	adds	r0, r3, #4
 800c36c:	6028      	str	r0, [r5, #0]
 800c36e:	0635      	lsls	r5, r6, #24
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	d501      	bpl.n	800c378 <_printf_i+0x1cc>
 800c374:	6019      	str	r1, [r3, #0]
 800c376:	e002      	b.n	800c37e <_printf_i+0x1d2>
 800c378:	0670      	lsls	r0, r6, #25
 800c37a:	d5fb      	bpl.n	800c374 <_printf_i+0x1c8>
 800c37c:	8019      	strh	r1, [r3, #0]
 800c37e:	2300      	movs	r3, #0
 800c380:	6123      	str	r3, [r4, #16]
 800c382:	4615      	mov	r5, r2
 800c384:	e7ba      	b.n	800c2fc <_printf_i+0x150>
 800c386:	682b      	ldr	r3, [r5, #0]
 800c388:	1d1a      	adds	r2, r3, #4
 800c38a:	602a      	str	r2, [r5, #0]
 800c38c:	681d      	ldr	r5, [r3, #0]
 800c38e:	6862      	ldr	r2, [r4, #4]
 800c390:	2100      	movs	r1, #0
 800c392:	4628      	mov	r0, r5
 800c394:	f7f3 ff44 	bl	8000220 <memchr>
 800c398:	b108      	cbz	r0, 800c39e <_printf_i+0x1f2>
 800c39a:	1b40      	subs	r0, r0, r5
 800c39c:	6060      	str	r0, [r4, #4]
 800c39e:	6863      	ldr	r3, [r4, #4]
 800c3a0:	6123      	str	r3, [r4, #16]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3a8:	e7a8      	b.n	800c2fc <_printf_i+0x150>
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	47d0      	blx	sl
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d0ab      	beq.n	800c310 <_printf_i+0x164>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	079b      	lsls	r3, r3, #30
 800c3bc:	d413      	bmi.n	800c3e6 <_printf_i+0x23a>
 800c3be:	68e0      	ldr	r0, [r4, #12]
 800c3c0:	9b03      	ldr	r3, [sp, #12]
 800c3c2:	4298      	cmp	r0, r3
 800c3c4:	bfb8      	it	lt
 800c3c6:	4618      	movlt	r0, r3
 800c3c8:	e7a4      	b.n	800c314 <_printf_i+0x168>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	4632      	mov	r2, r6
 800c3ce:	4649      	mov	r1, r9
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	47d0      	blx	sl
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	d09b      	beq.n	800c310 <_printf_i+0x164>
 800c3d8:	3501      	adds	r5, #1
 800c3da:	68e3      	ldr	r3, [r4, #12]
 800c3dc:	9903      	ldr	r1, [sp, #12]
 800c3de:	1a5b      	subs	r3, r3, r1
 800c3e0:	42ab      	cmp	r3, r5
 800c3e2:	dcf2      	bgt.n	800c3ca <_printf_i+0x21e>
 800c3e4:	e7eb      	b.n	800c3be <_printf_i+0x212>
 800c3e6:	2500      	movs	r5, #0
 800c3e8:	f104 0619 	add.w	r6, r4, #25
 800c3ec:	e7f5      	b.n	800c3da <_printf_i+0x22e>
 800c3ee:	bf00      	nop
 800c3f0:	080100fe 	.word	0x080100fe
 800c3f4:	0801010f 	.word	0x0801010f

0800c3f8 <iprintf>:
 800c3f8:	b40f      	push	{r0, r1, r2, r3}
 800c3fa:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <iprintf+0x2c>)
 800c3fc:	b513      	push	{r0, r1, r4, lr}
 800c3fe:	681c      	ldr	r4, [r3, #0]
 800c400:	b124      	cbz	r4, 800c40c <iprintf+0x14>
 800c402:	69a3      	ldr	r3, [r4, #24]
 800c404:	b913      	cbnz	r3, 800c40c <iprintf+0x14>
 800c406:	4620      	mov	r0, r4
 800c408:	f7ff fa06 	bl	800b818 <__sinit>
 800c40c:	ab05      	add	r3, sp, #20
 800c40e:	9a04      	ldr	r2, [sp, #16]
 800c410:	68a1      	ldr	r1, [r4, #8]
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	4620      	mov	r0, r4
 800c416:	f001 fecf 	bl	800e1b8 <_vfiprintf_r>
 800c41a:	b002      	add	sp, #8
 800c41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c420:	b004      	add	sp, #16
 800c422:	4770      	bx	lr
 800c424:	20000078 	.word	0x20000078

0800c428 <_puts_r>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	460e      	mov	r6, r1
 800c42c:	4605      	mov	r5, r0
 800c42e:	b118      	cbz	r0, 800c438 <_puts_r+0x10>
 800c430:	6983      	ldr	r3, [r0, #24]
 800c432:	b90b      	cbnz	r3, 800c438 <_puts_r+0x10>
 800c434:	f7ff f9f0 	bl	800b818 <__sinit>
 800c438:	69ab      	ldr	r3, [r5, #24]
 800c43a:	68ac      	ldr	r4, [r5, #8]
 800c43c:	b913      	cbnz	r3, 800c444 <_puts_r+0x1c>
 800c43e:	4628      	mov	r0, r5
 800c440:	f7ff f9ea 	bl	800b818 <__sinit>
 800c444:	4b2c      	ldr	r3, [pc, #176]	; (800c4f8 <_puts_r+0xd0>)
 800c446:	429c      	cmp	r4, r3
 800c448:	d120      	bne.n	800c48c <_puts_r+0x64>
 800c44a:	686c      	ldr	r4, [r5, #4]
 800c44c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c44e:	07db      	lsls	r3, r3, #31
 800c450:	d405      	bmi.n	800c45e <_puts_r+0x36>
 800c452:	89a3      	ldrh	r3, [r4, #12]
 800c454:	0598      	lsls	r0, r3, #22
 800c456:	d402      	bmi.n	800c45e <_puts_r+0x36>
 800c458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c45a:	f7ff faa0 	bl	800b99e <__retarget_lock_acquire_recursive>
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	0719      	lsls	r1, r3, #28
 800c462:	d51d      	bpl.n	800c4a0 <_puts_r+0x78>
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	b1db      	cbz	r3, 800c4a0 <_puts_r+0x78>
 800c468:	3e01      	subs	r6, #1
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c470:	3b01      	subs	r3, #1
 800c472:	60a3      	str	r3, [r4, #8]
 800c474:	bb39      	cbnz	r1, 800c4c6 <_puts_r+0x9e>
 800c476:	2b00      	cmp	r3, #0
 800c478:	da38      	bge.n	800c4ec <_puts_r+0xc4>
 800c47a:	4622      	mov	r2, r4
 800c47c:	210a      	movs	r1, #10
 800c47e:	4628      	mov	r0, r5
 800c480:	f000 f9c0 	bl	800c804 <__swbuf_r>
 800c484:	3001      	adds	r0, #1
 800c486:	d011      	beq.n	800c4ac <_puts_r+0x84>
 800c488:	250a      	movs	r5, #10
 800c48a:	e011      	b.n	800c4b0 <_puts_r+0x88>
 800c48c:	4b1b      	ldr	r3, [pc, #108]	; (800c4fc <_puts_r+0xd4>)
 800c48e:	429c      	cmp	r4, r3
 800c490:	d101      	bne.n	800c496 <_puts_r+0x6e>
 800c492:	68ac      	ldr	r4, [r5, #8]
 800c494:	e7da      	b.n	800c44c <_puts_r+0x24>
 800c496:	4b1a      	ldr	r3, [pc, #104]	; (800c500 <_puts_r+0xd8>)
 800c498:	429c      	cmp	r4, r3
 800c49a:	bf08      	it	eq
 800c49c:	68ec      	ldreq	r4, [r5, #12]
 800c49e:	e7d5      	b.n	800c44c <_puts_r+0x24>
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f000 fa12 	bl	800c8cc <__swsetup_r>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d0dd      	beq.n	800c468 <_puts_r+0x40>
 800c4ac:	f04f 35ff 	mov.w	r5, #4294967295
 800c4b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4b2:	07da      	lsls	r2, r3, #31
 800c4b4:	d405      	bmi.n	800c4c2 <_puts_r+0x9a>
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	059b      	lsls	r3, r3, #22
 800c4ba:	d402      	bmi.n	800c4c2 <_puts_r+0x9a>
 800c4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4be:	f7ff fa6f 	bl	800b9a0 <__retarget_lock_release_recursive>
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	bd70      	pop	{r4, r5, r6, pc}
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	da04      	bge.n	800c4d4 <_puts_r+0xac>
 800c4ca:	69a2      	ldr	r2, [r4, #24]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	dc06      	bgt.n	800c4de <_puts_r+0xb6>
 800c4d0:	290a      	cmp	r1, #10
 800c4d2:	d004      	beq.n	800c4de <_puts_r+0xb6>
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	6022      	str	r2, [r4, #0]
 800c4da:	7019      	strb	r1, [r3, #0]
 800c4dc:	e7c5      	b.n	800c46a <_puts_r+0x42>
 800c4de:	4622      	mov	r2, r4
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	f000 f98f 	bl	800c804 <__swbuf_r>
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	d1bf      	bne.n	800c46a <_puts_r+0x42>
 800c4ea:	e7df      	b.n	800c4ac <_puts_r+0x84>
 800c4ec:	6823      	ldr	r3, [r4, #0]
 800c4ee:	250a      	movs	r5, #10
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	6022      	str	r2, [r4, #0]
 800c4f4:	701d      	strb	r5, [r3, #0]
 800c4f6:	e7db      	b.n	800c4b0 <_puts_r+0x88>
 800c4f8:	080100a8 	.word	0x080100a8
 800c4fc:	080100c8 	.word	0x080100c8
 800c500:	08010088 	.word	0x08010088

0800c504 <puts>:
 800c504:	4b02      	ldr	r3, [pc, #8]	; (800c510 <puts+0xc>)
 800c506:	4601      	mov	r1, r0
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f7ff bf8d 	b.w	800c428 <_puts_r>
 800c50e:	bf00      	nop
 800c510:	20000078 	.word	0x20000078

0800c514 <srand>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4b10      	ldr	r3, [pc, #64]	; (800c558 <srand+0x44>)
 800c518:	681d      	ldr	r5, [r3, #0]
 800c51a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c51c:	4604      	mov	r4, r0
 800c51e:	b9b3      	cbnz	r3, 800c54e <srand+0x3a>
 800c520:	2018      	movs	r0, #24
 800c522:	f001 fa3b 	bl	800d99c <malloc>
 800c526:	4602      	mov	r2, r0
 800c528:	63a8      	str	r0, [r5, #56]	; 0x38
 800c52a:	b920      	cbnz	r0, 800c536 <srand+0x22>
 800c52c:	4b0b      	ldr	r3, [pc, #44]	; (800c55c <srand+0x48>)
 800c52e:	480c      	ldr	r0, [pc, #48]	; (800c560 <srand+0x4c>)
 800c530:	2142      	movs	r1, #66	; 0x42
 800c532:	f000 fa39 	bl	800c9a8 <__assert_func>
 800c536:	490b      	ldr	r1, [pc, #44]	; (800c564 <srand+0x50>)
 800c538:	4b0b      	ldr	r3, [pc, #44]	; (800c568 <srand+0x54>)
 800c53a:	e9c0 1300 	strd	r1, r3, [r0]
 800c53e:	4b0b      	ldr	r3, [pc, #44]	; (800c56c <srand+0x58>)
 800c540:	6083      	str	r3, [r0, #8]
 800c542:	230b      	movs	r3, #11
 800c544:	8183      	strh	r3, [r0, #12]
 800c546:	2100      	movs	r1, #0
 800c548:	2001      	movs	r0, #1
 800c54a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c54e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c550:	2200      	movs	r2, #0
 800c552:	611c      	str	r4, [r3, #16]
 800c554:	615a      	str	r2, [r3, #20]
 800c556:	bd38      	pop	{r3, r4, r5, pc}
 800c558:	20000078 	.word	0x20000078
 800c55c:	08010120 	.word	0x08010120
 800c560:	08010137 	.word	0x08010137
 800c564:	abcd330e 	.word	0xabcd330e
 800c568:	e66d1234 	.word	0xe66d1234
 800c56c:	0005deec 	.word	0x0005deec

0800c570 <rand>:
 800c570:	4b16      	ldr	r3, [pc, #88]	; (800c5cc <rand+0x5c>)
 800c572:	b510      	push	{r4, lr}
 800c574:	681c      	ldr	r4, [r3, #0]
 800c576:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c578:	b9b3      	cbnz	r3, 800c5a8 <rand+0x38>
 800c57a:	2018      	movs	r0, #24
 800c57c:	f001 fa0e 	bl	800d99c <malloc>
 800c580:	63a0      	str	r0, [r4, #56]	; 0x38
 800c582:	b928      	cbnz	r0, 800c590 <rand+0x20>
 800c584:	4602      	mov	r2, r0
 800c586:	4b12      	ldr	r3, [pc, #72]	; (800c5d0 <rand+0x60>)
 800c588:	4812      	ldr	r0, [pc, #72]	; (800c5d4 <rand+0x64>)
 800c58a:	214e      	movs	r1, #78	; 0x4e
 800c58c:	f000 fa0c 	bl	800c9a8 <__assert_func>
 800c590:	4a11      	ldr	r2, [pc, #68]	; (800c5d8 <rand+0x68>)
 800c592:	4b12      	ldr	r3, [pc, #72]	; (800c5dc <rand+0x6c>)
 800c594:	e9c0 2300 	strd	r2, r3, [r0]
 800c598:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <rand+0x70>)
 800c59a:	6083      	str	r3, [r0, #8]
 800c59c:	230b      	movs	r3, #11
 800c59e:	8183      	strh	r3, [r0, #12]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c5a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c5aa:	4a0e      	ldr	r2, [pc, #56]	; (800c5e4 <rand+0x74>)
 800c5ac:	6920      	ldr	r0, [r4, #16]
 800c5ae:	6963      	ldr	r3, [r4, #20]
 800c5b0:	490d      	ldr	r1, [pc, #52]	; (800c5e8 <rand+0x78>)
 800c5b2:	4342      	muls	r2, r0
 800c5b4:	fb01 2203 	mla	r2, r1, r3, r2
 800c5b8:	fba0 0101 	umull	r0, r1, r0, r1
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	eb42 0001 	adc.w	r0, r2, r1
 800c5c2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800c5c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c5ca:	bd10      	pop	{r4, pc}
 800c5cc:	20000078 	.word	0x20000078
 800c5d0:	08010120 	.word	0x08010120
 800c5d4:	08010137 	.word	0x08010137
 800c5d8:	abcd330e 	.word	0xabcd330e
 800c5dc:	e66d1234 	.word	0xe66d1234
 800c5e0:	0005deec 	.word	0x0005deec
 800c5e4:	5851f42d 	.word	0x5851f42d
 800c5e8:	4c957f2d 	.word	0x4c957f2d

0800c5ec <cleanup_glue>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	6809      	ldr	r1, [r1, #0]
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b109      	cbz	r1, 800c5fa <cleanup_glue+0xe>
 800c5f6:	f7ff fff9 	bl	800c5ec <cleanup_glue>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c602:	f001 bd63 	b.w	800e0cc <_free_r>
	...

0800c608 <_reclaim_reent>:
 800c608:	4b2c      	ldr	r3, [pc, #176]	; (800c6bc <_reclaim_reent+0xb4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4283      	cmp	r3, r0
 800c60e:	b570      	push	{r4, r5, r6, lr}
 800c610:	4604      	mov	r4, r0
 800c612:	d051      	beq.n	800c6b8 <_reclaim_reent+0xb0>
 800c614:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c616:	b143      	cbz	r3, 800c62a <_reclaim_reent+0x22>
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d14a      	bne.n	800c6b4 <_reclaim_reent+0xac>
 800c61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c620:	6819      	ldr	r1, [r3, #0]
 800c622:	b111      	cbz	r1, 800c62a <_reclaim_reent+0x22>
 800c624:	4620      	mov	r0, r4
 800c626:	f001 fd51 	bl	800e0cc <_free_r>
 800c62a:	6961      	ldr	r1, [r4, #20]
 800c62c:	b111      	cbz	r1, 800c634 <_reclaim_reent+0x2c>
 800c62e:	4620      	mov	r0, r4
 800c630:	f001 fd4c 	bl	800e0cc <_free_r>
 800c634:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c636:	b111      	cbz	r1, 800c63e <_reclaim_reent+0x36>
 800c638:	4620      	mov	r0, r4
 800c63a:	f001 fd47 	bl	800e0cc <_free_r>
 800c63e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c640:	b111      	cbz	r1, 800c648 <_reclaim_reent+0x40>
 800c642:	4620      	mov	r0, r4
 800c644:	f001 fd42 	bl	800e0cc <_free_r>
 800c648:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c64a:	b111      	cbz	r1, 800c652 <_reclaim_reent+0x4a>
 800c64c:	4620      	mov	r0, r4
 800c64e:	f001 fd3d 	bl	800e0cc <_free_r>
 800c652:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c654:	b111      	cbz	r1, 800c65c <_reclaim_reent+0x54>
 800c656:	4620      	mov	r0, r4
 800c658:	f001 fd38 	bl	800e0cc <_free_r>
 800c65c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c65e:	b111      	cbz	r1, 800c666 <_reclaim_reent+0x5e>
 800c660:	4620      	mov	r0, r4
 800c662:	f001 fd33 	bl	800e0cc <_free_r>
 800c666:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c668:	b111      	cbz	r1, 800c670 <_reclaim_reent+0x68>
 800c66a:	4620      	mov	r0, r4
 800c66c:	f001 fd2e 	bl	800e0cc <_free_r>
 800c670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c672:	b111      	cbz	r1, 800c67a <_reclaim_reent+0x72>
 800c674:	4620      	mov	r0, r4
 800c676:	f001 fd29 	bl	800e0cc <_free_r>
 800c67a:	69a3      	ldr	r3, [r4, #24]
 800c67c:	b1e3      	cbz	r3, 800c6b8 <_reclaim_reent+0xb0>
 800c67e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c680:	4620      	mov	r0, r4
 800c682:	4798      	blx	r3
 800c684:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c686:	b1b9      	cbz	r1, 800c6b8 <_reclaim_reent+0xb0>
 800c688:	4620      	mov	r0, r4
 800c68a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c68e:	f7ff bfad 	b.w	800c5ec <cleanup_glue>
 800c692:	5949      	ldr	r1, [r1, r5]
 800c694:	b941      	cbnz	r1, 800c6a8 <_reclaim_reent+0xa0>
 800c696:	3504      	adds	r5, #4
 800c698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c69a:	2d80      	cmp	r5, #128	; 0x80
 800c69c:	68d9      	ldr	r1, [r3, #12]
 800c69e:	d1f8      	bne.n	800c692 <_reclaim_reent+0x8a>
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f001 fd13 	bl	800e0cc <_free_r>
 800c6a6:	e7ba      	b.n	800c61e <_reclaim_reent+0x16>
 800c6a8:	680e      	ldr	r6, [r1, #0]
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f001 fd0e 	bl	800e0cc <_free_r>
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	e7ef      	b.n	800c694 <_reclaim_reent+0x8c>
 800c6b4:	2500      	movs	r5, #0
 800c6b6:	e7ef      	b.n	800c698 <_reclaim_reent+0x90>
 800c6b8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ba:	bf00      	nop
 800c6bc:	20000078 	.word	0x20000078

0800c6c0 <_sbrk_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4d06      	ldr	r5, [pc, #24]	; (800c6dc <_sbrk_r+0x1c>)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	602b      	str	r3, [r5, #0]
 800c6cc:	f001 ff7c 	bl	800e5c8 <_sbrk>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d102      	bne.n	800c6da <_sbrk_r+0x1a>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b103      	cbz	r3, 800c6da <_sbrk_r+0x1a>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	20008f00 	.word	0x20008f00

0800c6e0 <__sread>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e8:	f001 fe96 	bl	800e418 <_read_r>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	bfab      	itete	ge
 800c6f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c6f4:	181b      	addge	r3, r3, r0
 800c6f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6fa:	bfac      	ite	ge
 800c6fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6fe:	81a3      	strhlt	r3, [r4, #12]
 800c700:	bd10      	pop	{r4, pc}

0800c702 <__swrite>:
 800c702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c706:	461f      	mov	r7, r3
 800c708:	898b      	ldrh	r3, [r1, #12]
 800c70a:	05db      	lsls	r3, r3, #23
 800c70c:	4605      	mov	r5, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	4616      	mov	r6, r2
 800c712:	d505      	bpl.n	800c720 <__swrite+0x1e>
 800c714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c718:	2302      	movs	r3, #2
 800c71a:	2200      	movs	r2, #0
 800c71c:	f001 f8c6 	bl	800d8ac <_lseek_r>
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c72a:	81a3      	strh	r3, [r4, #12]
 800c72c:	4632      	mov	r2, r6
 800c72e:	463b      	mov	r3, r7
 800c730:	4628      	mov	r0, r5
 800c732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c736:	f000 b8b7 	b.w	800c8a8 <_write_r>

0800c73a <__sseek>:
 800c73a:	b510      	push	{r4, lr}
 800c73c:	460c      	mov	r4, r1
 800c73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c742:	f001 f8b3 	bl	800d8ac <_lseek_r>
 800c746:	1c43      	adds	r3, r0, #1
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	bf15      	itete	ne
 800c74c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c74e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c756:	81a3      	strheq	r3, [r4, #12]
 800c758:	bf18      	it	ne
 800c75a:	81a3      	strhne	r3, [r4, #12]
 800c75c:	bd10      	pop	{r4, pc}

0800c75e <__sclose>:
 800c75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c762:	f000 b93f 	b.w	800c9e4 <_close_r>
	...

0800c768 <strncasecmp>:
 800c768:	b570      	push	{r4, r5, r6, lr}
 800c76a:	4e0f      	ldr	r6, [pc, #60]	; (800c7a8 <strncasecmp+0x40>)
 800c76c:	4604      	mov	r4, r0
 800c76e:	440a      	add	r2, r1
 800c770:	428a      	cmp	r2, r1
 800c772:	d101      	bne.n	800c778 <strncasecmp+0x10>
 800c774:	2000      	movs	r0, #0
 800c776:	e013      	b.n	800c7a0 <strncasecmp+0x38>
 800c778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c77c:	5d98      	ldrb	r0, [r3, r6]
 800c77e:	f000 0003 	and.w	r0, r0, #3
 800c782:	2801      	cmp	r0, #1
 800c784:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c788:	5c35      	ldrb	r5, [r6, r0]
 800c78a:	f005 0503 	and.w	r5, r5, #3
 800c78e:	bf08      	it	eq
 800c790:	3320      	addeq	r3, #32
 800c792:	2d01      	cmp	r5, #1
 800c794:	bf08      	it	eq
 800c796:	3020      	addeq	r0, #32
 800c798:	1a1b      	subs	r3, r3, r0
 800c79a:	d102      	bne.n	800c7a2 <strncasecmp+0x3a>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d1e7      	bne.n	800c770 <strncasecmp+0x8>
 800c7a0:	bd70      	pop	{r4, r5, r6, pc}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	e7fc      	b.n	800c7a0 <strncasecmp+0x38>
 800c7a6:	bf00      	nop
 800c7a8:	080101cf 	.word	0x080101cf

0800c7ac <strncpy>:
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	3901      	subs	r1, #1
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	b132      	cbz	r2, 800c7c2 <strncpy+0x16>
 800c7b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c7b8:	f803 4b01 	strb.w	r4, [r3], #1
 800c7bc:	3a01      	subs	r2, #1
 800c7be:	2c00      	cmp	r4, #0
 800c7c0:	d1f7      	bne.n	800c7b2 <strncpy+0x6>
 800c7c2:	441a      	add	r2, r3
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d100      	bne.n	800c7cc <strncpy+0x20>
 800c7ca:	bd10      	pop	{r4, pc}
 800c7cc:	f803 1b01 	strb.w	r1, [r3], #1
 800c7d0:	e7f9      	b.n	800c7c6 <strncpy+0x1a>
	...

0800c7d4 <viprintf>:
 800c7d4:	b513      	push	{r0, r1, r4, lr}
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	4909      	ldr	r1, [pc, #36]	; (800c800 <viprintf+0x2c>)
 800c7da:	680c      	ldr	r4, [r1, #0]
 800c7dc:	4602      	mov	r2, r0
 800c7de:	b144      	cbz	r4, 800c7f2 <viprintf+0x1e>
 800c7e0:	69a1      	ldr	r1, [r4, #24]
 800c7e2:	b931      	cbnz	r1, 800c7f2 <viprintf+0x1e>
 800c7e4:	e9cd 0300 	strd	r0, r3, [sp]
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f7ff f815 	bl	800b818 <__sinit>
 800c7ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7f2:	68a1      	ldr	r1, [r4, #8]
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	b002      	add	sp, #8
 800c7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7fc:	f001 bcdc 	b.w	800e1b8 <_vfiprintf_r>
 800c800:	20000078 	.word	0x20000078

0800c804 <__swbuf_r>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	460e      	mov	r6, r1
 800c808:	4614      	mov	r4, r2
 800c80a:	4605      	mov	r5, r0
 800c80c:	b118      	cbz	r0, 800c816 <__swbuf_r+0x12>
 800c80e:	6983      	ldr	r3, [r0, #24]
 800c810:	b90b      	cbnz	r3, 800c816 <__swbuf_r+0x12>
 800c812:	f7ff f801 	bl	800b818 <__sinit>
 800c816:	4b21      	ldr	r3, [pc, #132]	; (800c89c <__swbuf_r+0x98>)
 800c818:	429c      	cmp	r4, r3
 800c81a:	d12b      	bne.n	800c874 <__swbuf_r+0x70>
 800c81c:	686c      	ldr	r4, [r5, #4]
 800c81e:	69a3      	ldr	r3, [r4, #24]
 800c820:	60a3      	str	r3, [r4, #8]
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	071a      	lsls	r2, r3, #28
 800c826:	d52f      	bpl.n	800c888 <__swbuf_r+0x84>
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	b36b      	cbz	r3, 800c888 <__swbuf_r+0x84>
 800c82c:	6923      	ldr	r3, [r4, #16]
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	1ac0      	subs	r0, r0, r3
 800c832:	6963      	ldr	r3, [r4, #20]
 800c834:	b2f6      	uxtb	r6, r6
 800c836:	4283      	cmp	r3, r0
 800c838:	4637      	mov	r7, r6
 800c83a:	dc04      	bgt.n	800c846 <__swbuf_r+0x42>
 800c83c:	4621      	mov	r1, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	f000 ffe2 	bl	800d808 <_fflush_r>
 800c844:	bb30      	cbnz	r0, 800c894 <__swbuf_r+0x90>
 800c846:	68a3      	ldr	r3, [r4, #8]
 800c848:	3b01      	subs	r3, #1
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	6022      	str	r2, [r4, #0]
 800c852:	701e      	strb	r6, [r3, #0]
 800c854:	6963      	ldr	r3, [r4, #20]
 800c856:	3001      	adds	r0, #1
 800c858:	4283      	cmp	r3, r0
 800c85a:	d004      	beq.n	800c866 <__swbuf_r+0x62>
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	07db      	lsls	r3, r3, #31
 800c860:	d506      	bpl.n	800c870 <__swbuf_r+0x6c>
 800c862:	2e0a      	cmp	r6, #10
 800c864:	d104      	bne.n	800c870 <__swbuf_r+0x6c>
 800c866:	4621      	mov	r1, r4
 800c868:	4628      	mov	r0, r5
 800c86a:	f000 ffcd 	bl	800d808 <_fflush_r>
 800c86e:	b988      	cbnz	r0, 800c894 <__swbuf_r+0x90>
 800c870:	4638      	mov	r0, r7
 800c872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c874:	4b0a      	ldr	r3, [pc, #40]	; (800c8a0 <__swbuf_r+0x9c>)
 800c876:	429c      	cmp	r4, r3
 800c878:	d101      	bne.n	800c87e <__swbuf_r+0x7a>
 800c87a:	68ac      	ldr	r4, [r5, #8]
 800c87c:	e7cf      	b.n	800c81e <__swbuf_r+0x1a>
 800c87e:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <__swbuf_r+0xa0>)
 800c880:	429c      	cmp	r4, r3
 800c882:	bf08      	it	eq
 800c884:	68ec      	ldreq	r4, [r5, #12]
 800c886:	e7ca      	b.n	800c81e <__swbuf_r+0x1a>
 800c888:	4621      	mov	r1, r4
 800c88a:	4628      	mov	r0, r5
 800c88c:	f000 f81e 	bl	800c8cc <__swsetup_r>
 800c890:	2800      	cmp	r0, #0
 800c892:	d0cb      	beq.n	800c82c <__swbuf_r+0x28>
 800c894:	f04f 37ff 	mov.w	r7, #4294967295
 800c898:	e7ea      	b.n	800c870 <__swbuf_r+0x6c>
 800c89a:	bf00      	nop
 800c89c:	080100a8 	.word	0x080100a8
 800c8a0:	080100c8 	.word	0x080100c8
 800c8a4:	08010088 	.word	0x08010088

0800c8a8 <_write_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d07      	ldr	r5, [pc, #28]	; (800c8c8 <_write_r+0x20>)
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	4608      	mov	r0, r1
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	602a      	str	r2, [r5, #0]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f001 fe94 	bl	800e5e4 <_write>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_write_r+0x1e>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_write_r+0x1e>
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	20008f00 	.word	0x20008f00

0800c8cc <__swsetup_r>:
 800c8cc:	4b32      	ldr	r3, [pc, #200]	; (800c998 <__swsetup_r+0xcc>)
 800c8ce:	b570      	push	{r4, r5, r6, lr}
 800c8d0:	681d      	ldr	r5, [r3, #0]
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	b125      	cbz	r5, 800c8e2 <__swsetup_r+0x16>
 800c8d8:	69ab      	ldr	r3, [r5, #24]
 800c8da:	b913      	cbnz	r3, 800c8e2 <__swsetup_r+0x16>
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f7fe ff9b 	bl	800b818 <__sinit>
 800c8e2:	4b2e      	ldr	r3, [pc, #184]	; (800c99c <__swsetup_r+0xd0>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	d10f      	bne.n	800c908 <__swsetup_r+0x3c>
 800c8e8:	686c      	ldr	r4, [r5, #4]
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8f0:	0719      	lsls	r1, r3, #28
 800c8f2:	d42c      	bmi.n	800c94e <__swsetup_r+0x82>
 800c8f4:	06dd      	lsls	r5, r3, #27
 800c8f6:	d411      	bmi.n	800c91c <__swsetup_r+0x50>
 800c8f8:	2309      	movs	r3, #9
 800c8fa:	6033      	str	r3, [r6, #0]
 800c8fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	e03e      	b.n	800c986 <__swsetup_r+0xba>
 800c908:	4b25      	ldr	r3, [pc, #148]	; (800c9a0 <__swsetup_r+0xd4>)
 800c90a:	429c      	cmp	r4, r3
 800c90c:	d101      	bne.n	800c912 <__swsetup_r+0x46>
 800c90e:	68ac      	ldr	r4, [r5, #8]
 800c910:	e7eb      	b.n	800c8ea <__swsetup_r+0x1e>
 800c912:	4b24      	ldr	r3, [pc, #144]	; (800c9a4 <__swsetup_r+0xd8>)
 800c914:	429c      	cmp	r4, r3
 800c916:	bf08      	it	eq
 800c918:	68ec      	ldreq	r4, [r5, #12]
 800c91a:	e7e6      	b.n	800c8ea <__swsetup_r+0x1e>
 800c91c:	0758      	lsls	r0, r3, #29
 800c91e:	d512      	bpl.n	800c946 <__swsetup_r+0x7a>
 800c920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c922:	b141      	cbz	r1, 800c936 <__swsetup_r+0x6a>
 800c924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c928:	4299      	cmp	r1, r3
 800c92a:	d002      	beq.n	800c932 <__swsetup_r+0x66>
 800c92c:	4630      	mov	r0, r6
 800c92e:	f001 fbcd 	bl	800e0cc <_free_r>
 800c932:	2300      	movs	r3, #0
 800c934:	6363      	str	r3, [r4, #52]	; 0x34
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c93c:	81a3      	strh	r3, [r4, #12]
 800c93e:	2300      	movs	r3, #0
 800c940:	6063      	str	r3, [r4, #4]
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	f043 0308 	orr.w	r3, r3, #8
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	b94b      	cbnz	r3, 800c966 <__swsetup_r+0x9a>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c95c:	d003      	beq.n	800c966 <__swsetup_r+0x9a>
 800c95e:	4621      	mov	r1, r4
 800c960:	4630      	mov	r0, r6
 800c962:	f000 ffdb 	bl	800d91c <__smakebuf_r>
 800c966:	89a0      	ldrh	r0, [r4, #12]
 800c968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c96c:	f010 0301 	ands.w	r3, r0, #1
 800c970:	d00a      	beq.n	800c988 <__swsetup_r+0xbc>
 800c972:	2300      	movs	r3, #0
 800c974:	60a3      	str	r3, [r4, #8]
 800c976:	6963      	ldr	r3, [r4, #20]
 800c978:	425b      	negs	r3, r3
 800c97a:	61a3      	str	r3, [r4, #24]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	b943      	cbnz	r3, 800c992 <__swsetup_r+0xc6>
 800c980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c984:	d1ba      	bne.n	800c8fc <__swsetup_r+0x30>
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	0781      	lsls	r1, r0, #30
 800c98a:	bf58      	it	pl
 800c98c:	6963      	ldrpl	r3, [r4, #20]
 800c98e:	60a3      	str	r3, [r4, #8]
 800c990:	e7f4      	b.n	800c97c <__swsetup_r+0xb0>
 800c992:	2000      	movs	r0, #0
 800c994:	e7f7      	b.n	800c986 <__swsetup_r+0xba>
 800c996:	bf00      	nop
 800c998:	20000078 	.word	0x20000078
 800c99c:	080100a8 	.word	0x080100a8
 800c9a0:	080100c8 	.word	0x080100c8
 800c9a4:	08010088 	.word	0x08010088

0800c9a8 <__assert_func>:
 800c9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9aa:	4614      	mov	r4, r2
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <__assert_func+0x2c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	68d8      	ldr	r0, [r3, #12]
 800c9b6:	b14c      	cbz	r4, 800c9cc <__assert_func+0x24>
 800c9b8:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <__assert_func+0x30>)
 800c9ba:	9100      	str	r1, [sp, #0]
 800c9bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c9c0:	4906      	ldr	r1, [pc, #24]	; (800c9dc <__assert_func+0x34>)
 800c9c2:	462b      	mov	r3, r5
 800c9c4:	f000 ff5c 	bl	800d880 <fiprintf>
 800c9c8:	f001 fd38 	bl	800e43c <abort>
 800c9cc:	4b04      	ldr	r3, [pc, #16]	; (800c9e0 <__assert_func+0x38>)
 800c9ce:	461c      	mov	r4, r3
 800c9d0:	e7f3      	b.n	800c9ba <__assert_func+0x12>
 800c9d2:	bf00      	nop
 800c9d4:	20000078 	.word	0x20000078
 800c9d8:	08010192 	.word	0x08010192
 800c9dc:	0801019f 	.word	0x0801019f
 800c9e0:	080101cd 	.word	0x080101cd

0800c9e4 <_close_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d06      	ldr	r5, [pc, #24]	; (800ca00 <_close_r+0x1c>)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	f001 fdb2 	bl	800e558 <_close>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_close_r+0x1a>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_close_r+0x1a>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	20008f00 	.word	0x20008f00

0800ca04 <quorem>:
 800ca04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca08:	6903      	ldr	r3, [r0, #16]
 800ca0a:	690c      	ldr	r4, [r1, #16]
 800ca0c:	42a3      	cmp	r3, r4
 800ca0e:	4607      	mov	r7, r0
 800ca10:	f2c0 8081 	blt.w	800cb16 <quorem+0x112>
 800ca14:	3c01      	subs	r4, #1
 800ca16:	f101 0814 	add.w	r8, r1, #20
 800ca1a:	f100 0514 	add.w	r5, r0, #20
 800ca1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca22:	9301      	str	r3, [sp, #4]
 800ca24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca38:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca3c:	d331      	bcc.n	800caa2 <quorem+0x9e>
 800ca3e:	f04f 0e00 	mov.w	lr, #0
 800ca42:	4640      	mov	r0, r8
 800ca44:	46ac      	mov	ip, r5
 800ca46:	46f2      	mov	sl, lr
 800ca48:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca4c:	b293      	uxth	r3, r2
 800ca4e:	fb06 e303 	mla	r3, r6, r3, lr
 800ca52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	ebaa 0303 	sub.w	r3, sl, r3
 800ca5c:	f8dc a000 	ldr.w	sl, [ip]
 800ca60:	0c12      	lsrs	r2, r2, #16
 800ca62:	fa13 f38a 	uxtah	r3, r3, sl
 800ca66:	fb06 e202 	mla	r2, r6, r2, lr
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca72:	b292      	uxth	r2, r2
 800ca74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ca78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca7c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ca80:	4581      	cmp	r9, r0
 800ca82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca86:	f84c 3b04 	str.w	r3, [ip], #4
 800ca8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca8e:	d2db      	bcs.n	800ca48 <quorem+0x44>
 800ca90:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca94:	b92b      	cbnz	r3, 800caa2 <quorem+0x9e>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	3b04      	subs	r3, #4
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	d32e      	bcc.n	800cafe <quorem+0xfa>
 800caa0:	613c      	str	r4, [r7, #16]
 800caa2:	4638      	mov	r0, r7
 800caa4:	f001 fa10 	bl	800dec8 <__mcmp>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	db24      	blt.n	800caf6 <quorem+0xf2>
 800caac:	3601      	adds	r6, #1
 800caae:	4628      	mov	r0, r5
 800cab0:	f04f 0c00 	mov.w	ip, #0
 800cab4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cab8:	f8d0 e000 	ldr.w	lr, [r0]
 800cabc:	b293      	uxth	r3, r2
 800cabe:	ebac 0303 	sub.w	r3, ip, r3
 800cac2:	0c12      	lsrs	r2, r2, #16
 800cac4:	fa13 f38e 	uxtah	r3, r3, lr
 800cac8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cacc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cad6:	45c1      	cmp	r9, r8
 800cad8:	f840 3b04 	str.w	r3, [r0], #4
 800cadc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cae0:	d2e8      	bcs.n	800cab4 <quorem+0xb0>
 800cae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caea:	b922      	cbnz	r2, 800caf6 <quorem+0xf2>
 800caec:	3b04      	subs	r3, #4
 800caee:	429d      	cmp	r5, r3
 800caf0:	461a      	mov	r2, r3
 800caf2:	d30a      	bcc.n	800cb0a <quorem+0x106>
 800caf4:	613c      	str	r4, [r7, #16]
 800caf6:	4630      	mov	r0, r6
 800caf8:	b003      	add	sp, #12
 800cafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafe:	6812      	ldr	r2, [r2, #0]
 800cb00:	3b04      	subs	r3, #4
 800cb02:	2a00      	cmp	r2, #0
 800cb04:	d1cc      	bne.n	800caa0 <quorem+0x9c>
 800cb06:	3c01      	subs	r4, #1
 800cb08:	e7c7      	b.n	800ca9a <quorem+0x96>
 800cb0a:	6812      	ldr	r2, [r2, #0]
 800cb0c:	3b04      	subs	r3, #4
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	d1f0      	bne.n	800caf4 <quorem+0xf0>
 800cb12:	3c01      	subs	r4, #1
 800cb14:	e7eb      	b.n	800caee <quorem+0xea>
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7ee      	b.n	800caf8 <quorem+0xf4>
 800cb1a:	0000      	movs	r0, r0
 800cb1c:	0000      	movs	r0, r0
	...

0800cb20 <_dtoa_r>:
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	ed2d 8b04 	vpush	{d8-d9}
 800cb28:	ec57 6b10 	vmov	r6, r7, d0
 800cb2c:	b093      	sub	sp, #76	; 0x4c
 800cb2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb34:	9106      	str	r1, [sp, #24]
 800cb36:	ee10 aa10 	vmov	sl, s0
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb3e:	930c      	str	r3, [sp, #48]	; 0x30
 800cb40:	46bb      	mov	fp, r7
 800cb42:	b975      	cbnz	r5, 800cb62 <_dtoa_r+0x42>
 800cb44:	2010      	movs	r0, #16
 800cb46:	f000 ff29 	bl	800d99c <malloc>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	6260      	str	r0, [r4, #36]	; 0x24
 800cb4e:	b920      	cbnz	r0, 800cb5a <_dtoa_r+0x3a>
 800cb50:	4ba7      	ldr	r3, [pc, #668]	; (800cdf0 <_dtoa_r+0x2d0>)
 800cb52:	21ea      	movs	r1, #234	; 0xea
 800cb54:	48a7      	ldr	r0, [pc, #668]	; (800cdf4 <_dtoa_r+0x2d4>)
 800cb56:	f7ff ff27 	bl	800c9a8 <__assert_func>
 800cb5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb5e:	6005      	str	r5, [r0, #0]
 800cb60:	60c5      	str	r5, [r0, #12]
 800cb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb64:	6819      	ldr	r1, [r3, #0]
 800cb66:	b151      	cbz	r1, 800cb7e <_dtoa_r+0x5e>
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	604a      	str	r2, [r1, #4]
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	4093      	lsls	r3, r2
 800cb70:	608b      	str	r3, [r1, #8]
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 ff66 	bl	800da44 <_Bfree>
 800cb78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
 800cb7e:	1e3b      	subs	r3, r7, #0
 800cb80:	bfaa      	itet	ge
 800cb82:	2300      	movge	r3, #0
 800cb84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cb88:	f8c8 3000 	strge.w	r3, [r8]
 800cb8c:	4b9a      	ldr	r3, [pc, #616]	; (800cdf8 <_dtoa_r+0x2d8>)
 800cb8e:	bfbc      	itt	lt
 800cb90:	2201      	movlt	r2, #1
 800cb92:	f8c8 2000 	strlt.w	r2, [r8]
 800cb96:	ea33 030b 	bics.w	r3, r3, fp
 800cb9a:	d11b      	bne.n	800cbd4 <_dtoa_r+0xb4>
 800cb9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cba8:	4333      	orrs	r3, r6
 800cbaa:	f000 8592 	beq.w	800d6d2 <_dtoa_r+0xbb2>
 800cbae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbb0:	b963      	cbnz	r3, 800cbcc <_dtoa_r+0xac>
 800cbb2:	4b92      	ldr	r3, [pc, #584]	; (800cdfc <_dtoa_r+0x2dc>)
 800cbb4:	e022      	b.n	800cbfc <_dtoa_r+0xdc>
 800cbb6:	4b92      	ldr	r3, [pc, #584]	; (800ce00 <_dtoa_r+0x2e0>)
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	3308      	adds	r3, #8
 800cbbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	9801      	ldr	r0, [sp, #4]
 800cbc2:	b013      	add	sp, #76	; 0x4c
 800cbc4:	ecbd 8b04 	vpop	{d8-d9}
 800cbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbcc:	4b8b      	ldr	r3, [pc, #556]	; (800cdfc <_dtoa_r+0x2dc>)
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	3303      	adds	r3, #3
 800cbd2:	e7f3      	b.n	800cbbc <_dtoa_r+0x9c>
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	4650      	mov	r0, sl
 800cbda:	4659      	mov	r1, fp
 800cbdc:	f7f3 ff94 	bl	8000b08 <__aeabi_dcmpeq>
 800cbe0:	ec4b ab19 	vmov	d9, sl, fp
 800cbe4:	4680      	mov	r8, r0
 800cbe6:	b158      	cbz	r0, 800cc00 <_dtoa_r+0xe0>
 800cbe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbea:	2301      	movs	r3, #1
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f000 856b 	beq.w	800d6cc <_dtoa_r+0xbac>
 800cbf6:	4883      	ldr	r0, [pc, #524]	; (800ce04 <_dtoa_r+0x2e4>)
 800cbf8:	6018      	str	r0, [r3, #0]
 800cbfa:	1e43      	subs	r3, r0, #1
 800cbfc:	9301      	str	r3, [sp, #4]
 800cbfe:	e7df      	b.n	800cbc0 <_dtoa_r+0xa0>
 800cc00:	ec4b ab10 	vmov	d0, sl, fp
 800cc04:	aa10      	add	r2, sp, #64	; 0x40
 800cc06:	a911      	add	r1, sp, #68	; 0x44
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f001 fa03 	bl	800e014 <__d2b>
 800cc0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cc12:	ee08 0a10 	vmov	s16, r0
 800cc16:	2d00      	cmp	r5, #0
 800cc18:	f000 8084 	beq.w	800cd24 <_dtoa_r+0x204>
 800cc1c:	ee19 3a90 	vmov	r3, s19
 800cc20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc28:	4656      	mov	r6, sl
 800cc2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cc36:	4b74      	ldr	r3, [pc, #464]	; (800ce08 <_dtoa_r+0x2e8>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 fb43 	bl	80002c8 <__aeabi_dsub>
 800cc42:	a365      	add	r3, pc, #404	; (adr r3, 800cdd8 <_dtoa_r+0x2b8>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	f7f3 fcf6 	bl	8000638 <__aeabi_dmul>
 800cc4c:	a364      	add	r3, pc, #400	; (adr r3, 800cde0 <_dtoa_r+0x2c0>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f7f3 fb3b 	bl	80002cc <__adddf3>
 800cc56:	4606      	mov	r6, r0
 800cc58:	4628      	mov	r0, r5
 800cc5a:	460f      	mov	r7, r1
 800cc5c:	f7f3 fc82 	bl	8000564 <__aeabi_i2d>
 800cc60:	a361      	add	r3, pc, #388	; (adr r3, 800cde8 <_dtoa_r+0x2c8>)
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	f7f3 fce7 	bl	8000638 <__aeabi_dmul>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	f7f3 fb2b 	bl	80002cc <__adddf3>
 800cc76:	4606      	mov	r6, r0
 800cc78:	460f      	mov	r7, r1
 800cc7a:	f7f3 ff8d 	bl	8000b98 <__aeabi_d2iz>
 800cc7e:	2200      	movs	r2, #0
 800cc80:	9000      	str	r0, [sp, #0]
 800cc82:	2300      	movs	r3, #0
 800cc84:	4630      	mov	r0, r6
 800cc86:	4639      	mov	r1, r7
 800cc88:	f7f3 ff48 	bl	8000b1c <__aeabi_dcmplt>
 800cc8c:	b150      	cbz	r0, 800cca4 <_dtoa_r+0x184>
 800cc8e:	9800      	ldr	r0, [sp, #0]
 800cc90:	f7f3 fc68 	bl	8000564 <__aeabi_i2d>
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	f7f3 ff36 	bl	8000b08 <__aeabi_dcmpeq>
 800cc9c:	b910      	cbnz	r0, 800cca4 <_dtoa_r+0x184>
 800cc9e:	9b00      	ldr	r3, [sp, #0]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	9b00      	ldr	r3, [sp, #0]
 800cca6:	2b16      	cmp	r3, #22
 800cca8:	d85a      	bhi.n	800cd60 <_dtoa_r+0x240>
 800ccaa:	9a00      	ldr	r2, [sp, #0]
 800ccac:	4b57      	ldr	r3, [pc, #348]	; (800ce0c <_dtoa_r+0x2ec>)
 800ccae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	ec51 0b19 	vmov	r0, r1, d9
 800ccba:	f7f3 ff2f 	bl	8000b1c <__aeabi_dcmplt>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d050      	beq.n	800cd64 <_dtoa_r+0x244>
 800ccc2:	9b00      	ldr	r3, [sp, #0]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	930b      	str	r3, [sp, #44]	; 0x2c
 800cccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccce:	1b5d      	subs	r5, r3, r5
 800ccd0:	1e6b      	subs	r3, r5, #1
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	bf45      	ittet	mi
 800ccd6:	f1c5 0301 	rsbmi	r3, r5, #1
 800ccda:	9304      	strmi	r3, [sp, #16]
 800ccdc:	2300      	movpl	r3, #0
 800ccde:	2300      	movmi	r3, #0
 800cce0:	bf4c      	ite	mi
 800cce2:	9305      	strmi	r3, [sp, #20]
 800cce4:	9304      	strpl	r3, [sp, #16]
 800cce6:	9b00      	ldr	r3, [sp, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	db3d      	blt.n	800cd68 <_dtoa_r+0x248>
 800ccec:	9b05      	ldr	r3, [sp, #20]
 800ccee:	9a00      	ldr	r2, [sp, #0]
 800ccf0:	920a      	str	r2, [sp, #40]	; 0x28
 800ccf2:	4413      	add	r3, r2
 800ccf4:	9305      	str	r3, [sp, #20]
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	9307      	str	r3, [sp, #28]
 800ccfa:	9b06      	ldr	r3, [sp, #24]
 800ccfc:	2b09      	cmp	r3, #9
 800ccfe:	f200 8089 	bhi.w	800ce14 <_dtoa_r+0x2f4>
 800cd02:	2b05      	cmp	r3, #5
 800cd04:	bfc4      	itt	gt
 800cd06:	3b04      	subgt	r3, #4
 800cd08:	9306      	strgt	r3, [sp, #24]
 800cd0a:	9b06      	ldr	r3, [sp, #24]
 800cd0c:	f1a3 0302 	sub.w	r3, r3, #2
 800cd10:	bfcc      	ite	gt
 800cd12:	2500      	movgt	r5, #0
 800cd14:	2501      	movle	r5, #1
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	f200 8087 	bhi.w	800ce2a <_dtoa_r+0x30a>
 800cd1c:	e8df f003 	tbb	[pc, r3]
 800cd20:	59383a2d 	.word	0x59383a2d
 800cd24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cd28:	441d      	add	r5, r3
 800cd2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd2e:	2b20      	cmp	r3, #32
 800cd30:	bfc1      	itttt	gt
 800cd32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800cd3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd42:	bfda      	itte	le
 800cd44:	f1c3 0320 	rsble	r3, r3, #32
 800cd48:	fa06 f003 	lslle.w	r0, r6, r3
 800cd4c:	4318      	orrgt	r0, r3
 800cd4e:	f7f3 fbf9 	bl	8000544 <__aeabi_ui2d>
 800cd52:	2301      	movs	r3, #1
 800cd54:	4606      	mov	r6, r0
 800cd56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd5a:	3d01      	subs	r5, #1
 800cd5c:	930e      	str	r3, [sp, #56]	; 0x38
 800cd5e:	e76a      	b.n	800cc36 <_dtoa_r+0x116>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e7b2      	b.n	800ccca <_dtoa_r+0x1aa>
 800cd64:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd66:	e7b1      	b.n	800cccc <_dtoa_r+0x1ac>
 800cd68:	9b04      	ldr	r3, [sp, #16]
 800cd6a:	9a00      	ldr	r2, [sp, #0]
 800cd6c:	1a9b      	subs	r3, r3, r2
 800cd6e:	9304      	str	r3, [sp, #16]
 800cd70:	4253      	negs	r3, r2
 800cd72:	9307      	str	r3, [sp, #28]
 800cd74:	2300      	movs	r3, #0
 800cd76:	930a      	str	r3, [sp, #40]	; 0x28
 800cd78:	e7bf      	b.n	800ccfa <_dtoa_r+0x1da>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	9308      	str	r3, [sp, #32]
 800cd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dc55      	bgt.n	800ce30 <_dtoa_r+0x310>
 800cd84:	2301      	movs	r3, #1
 800cd86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd8e:	e00c      	b.n	800cdaa <_dtoa_r+0x28a>
 800cd90:	2301      	movs	r3, #1
 800cd92:	e7f3      	b.n	800cd7c <_dtoa_r+0x25c>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd98:	9308      	str	r3, [sp, #32]
 800cd9a:	9b00      	ldr	r3, [sp, #0]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	9302      	str	r3, [sp, #8]
 800cda0:	3301      	adds	r3, #1
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	bfb8      	it	lt
 800cda8:	2301      	movlt	r3, #1
 800cdaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cdac:	2200      	movs	r2, #0
 800cdae:	6042      	str	r2, [r0, #4]
 800cdb0:	2204      	movs	r2, #4
 800cdb2:	f102 0614 	add.w	r6, r2, #20
 800cdb6:	429e      	cmp	r6, r3
 800cdb8:	6841      	ldr	r1, [r0, #4]
 800cdba:	d93d      	bls.n	800ce38 <_dtoa_r+0x318>
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f000 fe01 	bl	800d9c4 <_Balloc>
 800cdc2:	9001      	str	r0, [sp, #4]
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d13b      	bne.n	800ce40 <_dtoa_r+0x320>
 800cdc8:	4b11      	ldr	r3, [pc, #68]	; (800ce10 <_dtoa_r+0x2f0>)
 800cdca:	4602      	mov	r2, r0
 800cdcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cdd0:	e6c0      	b.n	800cb54 <_dtoa_r+0x34>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e7df      	b.n	800cd96 <_dtoa_r+0x276>
 800cdd6:	bf00      	nop
 800cdd8:	636f4361 	.word	0x636f4361
 800cddc:	3fd287a7 	.word	0x3fd287a7
 800cde0:	8b60c8b3 	.word	0x8b60c8b3
 800cde4:	3fc68a28 	.word	0x3fc68a28
 800cde8:	509f79fb 	.word	0x509f79fb
 800cdec:	3fd34413 	.word	0x3fd34413
 800cdf0:	08010120 	.word	0x08010120
 800cdf4:	080102dc 	.word	0x080102dc
 800cdf8:	7ff00000 	.word	0x7ff00000
 800cdfc:	080102d8 	.word	0x080102d8
 800ce00:	080102cf 	.word	0x080102cf
 800ce04:	080100fd 	.word	0x080100fd
 800ce08:	3ff80000 	.word	0x3ff80000
 800ce0c:	080103d0 	.word	0x080103d0
 800ce10:	08010337 	.word	0x08010337
 800ce14:	2501      	movs	r5, #1
 800ce16:	2300      	movs	r3, #0
 800ce18:	9306      	str	r3, [sp, #24]
 800ce1a:	9508      	str	r5, [sp, #32]
 800ce1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce24:	2200      	movs	r2, #0
 800ce26:	2312      	movs	r3, #18
 800ce28:	e7b0      	b.n	800cd8c <_dtoa_r+0x26c>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	9308      	str	r3, [sp, #32]
 800ce2e:	e7f5      	b.n	800ce1c <_dtoa_r+0x2fc>
 800ce30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce36:	e7b8      	b.n	800cdaa <_dtoa_r+0x28a>
 800ce38:	3101      	adds	r1, #1
 800ce3a:	6041      	str	r1, [r0, #4]
 800ce3c:	0052      	lsls	r2, r2, #1
 800ce3e:	e7b8      	b.n	800cdb2 <_dtoa_r+0x292>
 800ce40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce42:	9a01      	ldr	r2, [sp, #4]
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	9b03      	ldr	r3, [sp, #12]
 800ce48:	2b0e      	cmp	r3, #14
 800ce4a:	f200 809d 	bhi.w	800cf88 <_dtoa_r+0x468>
 800ce4e:	2d00      	cmp	r5, #0
 800ce50:	f000 809a 	beq.w	800cf88 <_dtoa_r+0x468>
 800ce54:	9b00      	ldr	r3, [sp, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	dd32      	ble.n	800cec0 <_dtoa_r+0x3a0>
 800ce5a:	4ab7      	ldr	r2, [pc, #732]	; (800d138 <_dtoa_r+0x618>)
 800ce5c:	f003 030f 	and.w	r3, r3, #15
 800ce60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce68:	9b00      	ldr	r3, [sp, #0]
 800ce6a:	05d8      	lsls	r0, r3, #23
 800ce6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ce70:	d516      	bpl.n	800cea0 <_dtoa_r+0x380>
 800ce72:	4bb2      	ldr	r3, [pc, #712]	; (800d13c <_dtoa_r+0x61c>)
 800ce74:	ec51 0b19 	vmov	r0, r1, d9
 800ce78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce7c:	f7f3 fd06 	bl	800088c <__aeabi_ddiv>
 800ce80:	f007 070f 	and.w	r7, r7, #15
 800ce84:	4682      	mov	sl, r0
 800ce86:	468b      	mov	fp, r1
 800ce88:	2503      	movs	r5, #3
 800ce8a:	4eac      	ldr	r6, [pc, #688]	; (800d13c <_dtoa_r+0x61c>)
 800ce8c:	b957      	cbnz	r7, 800cea4 <_dtoa_r+0x384>
 800ce8e:	4642      	mov	r2, r8
 800ce90:	464b      	mov	r3, r9
 800ce92:	4650      	mov	r0, sl
 800ce94:	4659      	mov	r1, fp
 800ce96:	f7f3 fcf9 	bl	800088c <__aeabi_ddiv>
 800ce9a:	4682      	mov	sl, r0
 800ce9c:	468b      	mov	fp, r1
 800ce9e:	e028      	b.n	800cef2 <_dtoa_r+0x3d2>
 800cea0:	2502      	movs	r5, #2
 800cea2:	e7f2      	b.n	800ce8a <_dtoa_r+0x36a>
 800cea4:	07f9      	lsls	r1, r7, #31
 800cea6:	d508      	bpl.n	800ceba <_dtoa_r+0x39a>
 800cea8:	4640      	mov	r0, r8
 800ceaa:	4649      	mov	r1, r9
 800ceac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ceb0:	f7f3 fbc2 	bl	8000638 <__aeabi_dmul>
 800ceb4:	3501      	adds	r5, #1
 800ceb6:	4680      	mov	r8, r0
 800ceb8:	4689      	mov	r9, r1
 800ceba:	107f      	asrs	r7, r7, #1
 800cebc:	3608      	adds	r6, #8
 800cebe:	e7e5      	b.n	800ce8c <_dtoa_r+0x36c>
 800cec0:	f000 809b 	beq.w	800cffa <_dtoa_r+0x4da>
 800cec4:	9b00      	ldr	r3, [sp, #0]
 800cec6:	4f9d      	ldr	r7, [pc, #628]	; (800d13c <_dtoa_r+0x61c>)
 800cec8:	425e      	negs	r6, r3
 800ceca:	4b9b      	ldr	r3, [pc, #620]	; (800d138 <_dtoa_r+0x618>)
 800cecc:	f006 020f 	and.w	r2, r6, #15
 800ced0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ced4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced8:	ec51 0b19 	vmov	r0, r1, d9
 800cedc:	f7f3 fbac 	bl	8000638 <__aeabi_dmul>
 800cee0:	1136      	asrs	r6, r6, #4
 800cee2:	4682      	mov	sl, r0
 800cee4:	468b      	mov	fp, r1
 800cee6:	2300      	movs	r3, #0
 800cee8:	2502      	movs	r5, #2
 800ceea:	2e00      	cmp	r6, #0
 800ceec:	d17a      	bne.n	800cfe4 <_dtoa_r+0x4c4>
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1d3      	bne.n	800ce9a <_dtoa_r+0x37a>
 800cef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 8082 	beq.w	800cffe <_dtoa_r+0x4de>
 800cefa:	4b91      	ldr	r3, [pc, #580]	; (800d140 <_dtoa_r+0x620>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	4650      	mov	r0, sl
 800cf00:	4659      	mov	r1, fp
 800cf02:	f7f3 fe0b 	bl	8000b1c <__aeabi_dcmplt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d079      	beq.n	800cffe <_dtoa_r+0x4de>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d076      	beq.n	800cffe <_dtoa_r+0x4de>
 800cf10:	9b02      	ldr	r3, [sp, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dd36      	ble.n	800cf84 <_dtoa_r+0x464>
 800cf16:	9b00      	ldr	r3, [sp, #0]
 800cf18:	4650      	mov	r0, sl
 800cf1a:	4659      	mov	r1, fp
 800cf1c:	1e5f      	subs	r7, r3, #1
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4b88      	ldr	r3, [pc, #544]	; (800d144 <_dtoa_r+0x624>)
 800cf22:	f7f3 fb89 	bl	8000638 <__aeabi_dmul>
 800cf26:	9e02      	ldr	r6, [sp, #8]
 800cf28:	4682      	mov	sl, r0
 800cf2a:	468b      	mov	fp, r1
 800cf2c:	3501      	adds	r5, #1
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f7f3 fb18 	bl	8000564 <__aeabi_i2d>
 800cf34:	4652      	mov	r2, sl
 800cf36:	465b      	mov	r3, fp
 800cf38:	f7f3 fb7e 	bl	8000638 <__aeabi_dmul>
 800cf3c:	4b82      	ldr	r3, [pc, #520]	; (800d148 <_dtoa_r+0x628>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f7f3 f9c4 	bl	80002cc <__adddf3>
 800cf44:	46d0      	mov	r8, sl
 800cf46:	46d9      	mov	r9, fp
 800cf48:	4682      	mov	sl, r0
 800cf4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cf4e:	2e00      	cmp	r6, #0
 800cf50:	d158      	bne.n	800d004 <_dtoa_r+0x4e4>
 800cf52:	4b7e      	ldr	r3, [pc, #504]	; (800d14c <_dtoa_r+0x62c>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	4640      	mov	r0, r8
 800cf58:	4649      	mov	r1, r9
 800cf5a:	f7f3 f9b5 	bl	80002c8 <__aeabi_dsub>
 800cf5e:	4652      	mov	r2, sl
 800cf60:	465b      	mov	r3, fp
 800cf62:	4680      	mov	r8, r0
 800cf64:	4689      	mov	r9, r1
 800cf66:	f7f3 fdf7 	bl	8000b58 <__aeabi_dcmpgt>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	f040 8295 	bne.w	800d49a <_dtoa_r+0x97a>
 800cf70:	4652      	mov	r2, sl
 800cf72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf76:	4640      	mov	r0, r8
 800cf78:	4649      	mov	r1, r9
 800cf7a:	f7f3 fdcf 	bl	8000b1c <__aeabi_dcmplt>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f040 8289 	bne.w	800d496 <_dtoa_r+0x976>
 800cf84:	ec5b ab19 	vmov	sl, fp, d9
 800cf88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f2c0 8148 	blt.w	800d220 <_dtoa_r+0x700>
 800cf90:	9a00      	ldr	r2, [sp, #0]
 800cf92:	2a0e      	cmp	r2, #14
 800cf94:	f300 8144 	bgt.w	800d220 <_dtoa_r+0x700>
 800cf98:	4b67      	ldr	r3, [pc, #412]	; (800d138 <_dtoa_r+0x618>)
 800cf9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f280 80d5 	bge.w	800d154 <_dtoa_r+0x634>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f300 80d1 	bgt.w	800d154 <_dtoa_r+0x634>
 800cfb2:	f040 826f 	bne.w	800d494 <_dtoa_r+0x974>
 800cfb6:	4b65      	ldr	r3, [pc, #404]	; (800d14c <_dtoa_r+0x62c>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	4640      	mov	r0, r8
 800cfbc:	4649      	mov	r1, r9
 800cfbe:	f7f3 fb3b 	bl	8000638 <__aeabi_dmul>
 800cfc2:	4652      	mov	r2, sl
 800cfc4:	465b      	mov	r3, fp
 800cfc6:	f7f3 fdbd 	bl	8000b44 <__aeabi_dcmpge>
 800cfca:	9e03      	ldr	r6, [sp, #12]
 800cfcc:	4637      	mov	r7, r6
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	f040 8245 	bne.w	800d45e <_dtoa_r+0x93e>
 800cfd4:	9d01      	ldr	r5, [sp, #4]
 800cfd6:	2331      	movs	r3, #49	; 0x31
 800cfd8:	f805 3b01 	strb.w	r3, [r5], #1
 800cfdc:	9b00      	ldr	r3, [sp, #0]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	e240      	b.n	800d466 <_dtoa_r+0x946>
 800cfe4:	07f2      	lsls	r2, r6, #31
 800cfe6:	d505      	bpl.n	800cff4 <_dtoa_r+0x4d4>
 800cfe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfec:	f7f3 fb24 	bl	8000638 <__aeabi_dmul>
 800cff0:	3501      	adds	r5, #1
 800cff2:	2301      	movs	r3, #1
 800cff4:	1076      	asrs	r6, r6, #1
 800cff6:	3708      	adds	r7, #8
 800cff8:	e777      	b.n	800ceea <_dtoa_r+0x3ca>
 800cffa:	2502      	movs	r5, #2
 800cffc:	e779      	b.n	800cef2 <_dtoa_r+0x3d2>
 800cffe:	9f00      	ldr	r7, [sp, #0]
 800d000:	9e03      	ldr	r6, [sp, #12]
 800d002:	e794      	b.n	800cf2e <_dtoa_r+0x40e>
 800d004:	9901      	ldr	r1, [sp, #4]
 800d006:	4b4c      	ldr	r3, [pc, #304]	; (800d138 <_dtoa_r+0x618>)
 800d008:	4431      	add	r1, r6
 800d00a:	910d      	str	r1, [sp, #52]	; 0x34
 800d00c:	9908      	ldr	r1, [sp, #32]
 800d00e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d012:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d016:	2900      	cmp	r1, #0
 800d018:	d043      	beq.n	800d0a2 <_dtoa_r+0x582>
 800d01a:	494d      	ldr	r1, [pc, #308]	; (800d150 <_dtoa_r+0x630>)
 800d01c:	2000      	movs	r0, #0
 800d01e:	f7f3 fc35 	bl	800088c <__aeabi_ddiv>
 800d022:	4652      	mov	r2, sl
 800d024:	465b      	mov	r3, fp
 800d026:	f7f3 f94f 	bl	80002c8 <__aeabi_dsub>
 800d02a:	9d01      	ldr	r5, [sp, #4]
 800d02c:	4682      	mov	sl, r0
 800d02e:	468b      	mov	fp, r1
 800d030:	4649      	mov	r1, r9
 800d032:	4640      	mov	r0, r8
 800d034:	f7f3 fdb0 	bl	8000b98 <__aeabi_d2iz>
 800d038:	4606      	mov	r6, r0
 800d03a:	f7f3 fa93 	bl	8000564 <__aeabi_i2d>
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	4640      	mov	r0, r8
 800d044:	4649      	mov	r1, r9
 800d046:	f7f3 f93f 	bl	80002c8 <__aeabi_dsub>
 800d04a:	3630      	adds	r6, #48	; 0x30
 800d04c:	f805 6b01 	strb.w	r6, [r5], #1
 800d050:	4652      	mov	r2, sl
 800d052:	465b      	mov	r3, fp
 800d054:	4680      	mov	r8, r0
 800d056:	4689      	mov	r9, r1
 800d058:	f7f3 fd60 	bl	8000b1c <__aeabi_dcmplt>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d163      	bne.n	800d128 <_dtoa_r+0x608>
 800d060:	4642      	mov	r2, r8
 800d062:	464b      	mov	r3, r9
 800d064:	4936      	ldr	r1, [pc, #216]	; (800d140 <_dtoa_r+0x620>)
 800d066:	2000      	movs	r0, #0
 800d068:	f7f3 f92e 	bl	80002c8 <__aeabi_dsub>
 800d06c:	4652      	mov	r2, sl
 800d06e:	465b      	mov	r3, fp
 800d070:	f7f3 fd54 	bl	8000b1c <__aeabi_dcmplt>
 800d074:	2800      	cmp	r0, #0
 800d076:	f040 80b5 	bne.w	800d1e4 <_dtoa_r+0x6c4>
 800d07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d07c:	429d      	cmp	r5, r3
 800d07e:	d081      	beq.n	800cf84 <_dtoa_r+0x464>
 800d080:	4b30      	ldr	r3, [pc, #192]	; (800d144 <_dtoa_r+0x624>)
 800d082:	2200      	movs	r2, #0
 800d084:	4650      	mov	r0, sl
 800d086:	4659      	mov	r1, fp
 800d088:	f7f3 fad6 	bl	8000638 <__aeabi_dmul>
 800d08c:	4b2d      	ldr	r3, [pc, #180]	; (800d144 <_dtoa_r+0x624>)
 800d08e:	4682      	mov	sl, r0
 800d090:	468b      	mov	fp, r1
 800d092:	4640      	mov	r0, r8
 800d094:	4649      	mov	r1, r9
 800d096:	2200      	movs	r2, #0
 800d098:	f7f3 face 	bl	8000638 <__aeabi_dmul>
 800d09c:	4680      	mov	r8, r0
 800d09e:	4689      	mov	r9, r1
 800d0a0:	e7c6      	b.n	800d030 <_dtoa_r+0x510>
 800d0a2:	4650      	mov	r0, sl
 800d0a4:	4659      	mov	r1, fp
 800d0a6:	f7f3 fac7 	bl	8000638 <__aeabi_dmul>
 800d0aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0ac:	9d01      	ldr	r5, [sp, #4]
 800d0ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	468b      	mov	fp, r1
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	4640      	mov	r0, r8
 800d0b8:	f7f3 fd6e 	bl	8000b98 <__aeabi_d2iz>
 800d0bc:	4606      	mov	r6, r0
 800d0be:	f7f3 fa51 	bl	8000564 <__aeabi_i2d>
 800d0c2:	3630      	adds	r6, #48	; 0x30
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	4649      	mov	r1, r9
 800d0cc:	f7f3 f8fc 	bl	80002c8 <__aeabi_dsub>
 800d0d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d0d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	4680      	mov	r8, r0
 800d0da:	4689      	mov	r9, r1
 800d0dc:	f04f 0200 	mov.w	r2, #0
 800d0e0:	d124      	bne.n	800d12c <_dtoa_r+0x60c>
 800d0e2:	4b1b      	ldr	r3, [pc, #108]	; (800d150 <_dtoa_r+0x630>)
 800d0e4:	4650      	mov	r0, sl
 800d0e6:	4659      	mov	r1, fp
 800d0e8:	f7f3 f8f0 	bl	80002cc <__adddf3>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4640      	mov	r0, r8
 800d0f2:	4649      	mov	r1, r9
 800d0f4:	f7f3 fd30 	bl	8000b58 <__aeabi_dcmpgt>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d173      	bne.n	800d1e4 <_dtoa_r+0x6c4>
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	465b      	mov	r3, fp
 800d100:	4913      	ldr	r1, [pc, #76]	; (800d150 <_dtoa_r+0x630>)
 800d102:	2000      	movs	r0, #0
 800d104:	f7f3 f8e0 	bl	80002c8 <__aeabi_dsub>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	4640      	mov	r0, r8
 800d10e:	4649      	mov	r1, r9
 800d110:	f7f3 fd04 	bl	8000b1c <__aeabi_dcmplt>
 800d114:	2800      	cmp	r0, #0
 800d116:	f43f af35 	beq.w	800cf84 <_dtoa_r+0x464>
 800d11a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d11c:	1e6b      	subs	r3, r5, #1
 800d11e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d120:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d124:	2b30      	cmp	r3, #48	; 0x30
 800d126:	d0f8      	beq.n	800d11a <_dtoa_r+0x5fa>
 800d128:	9700      	str	r7, [sp, #0]
 800d12a:	e049      	b.n	800d1c0 <_dtoa_r+0x6a0>
 800d12c:	4b05      	ldr	r3, [pc, #20]	; (800d144 <_dtoa_r+0x624>)
 800d12e:	f7f3 fa83 	bl	8000638 <__aeabi_dmul>
 800d132:	4680      	mov	r8, r0
 800d134:	4689      	mov	r9, r1
 800d136:	e7bd      	b.n	800d0b4 <_dtoa_r+0x594>
 800d138:	080103d0 	.word	0x080103d0
 800d13c:	080103a8 	.word	0x080103a8
 800d140:	3ff00000 	.word	0x3ff00000
 800d144:	40240000 	.word	0x40240000
 800d148:	401c0000 	.word	0x401c0000
 800d14c:	40140000 	.word	0x40140000
 800d150:	3fe00000 	.word	0x3fe00000
 800d154:	9d01      	ldr	r5, [sp, #4]
 800d156:	4656      	mov	r6, sl
 800d158:	465f      	mov	r7, fp
 800d15a:	4642      	mov	r2, r8
 800d15c:	464b      	mov	r3, r9
 800d15e:	4630      	mov	r0, r6
 800d160:	4639      	mov	r1, r7
 800d162:	f7f3 fb93 	bl	800088c <__aeabi_ddiv>
 800d166:	f7f3 fd17 	bl	8000b98 <__aeabi_d2iz>
 800d16a:	4682      	mov	sl, r0
 800d16c:	f7f3 f9fa 	bl	8000564 <__aeabi_i2d>
 800d170:	4642      	mov	r2, r8
 800d172:	464b      	mov	r3, r9
 800d174:	f7f3 fa60 	bl	8000638 <__aeabi_dmul>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d184:	f7f3 f8a0 	bl	80002c8 <__aeabi_dsub>
 800d188:	f805 6b01 	strb.w	r6, [r5], #1
 800d18c:	9e01      	ldr	r6, [sp, #4]
 800d18e:	9f03      	ldr	r7, [sp, #12]
 800d190:	1bae      	subs	r6, r5, r6
 800d192:	42b7      	cmp	r7, r6
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	d135      	bne.n	800d206 <_dtoa_r+0x6e6>
 800d19a:	f7f3 f897 	bl	80002cc <__adddf3>
 800d19e:	4642      	mov	r2, r8
 800d1a0:	464b      	mov	r3, r9
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460f      	mov	r7, r1
 800d1a6:	f7f3 fcd7 	bl	8000b58 <__aeabi_dcmpgt>
 800d1aa:	b9d0      	cbnz	r0, 800d1e2 <_dtoa_r+0x6c2>
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	464b      	mov	r3, r9
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	f7f3 fca8 	bl	8000b08 <__aeabi_dcmpeq>
 800d1b8:	b110      	cbz	r0, 800d1c0 <_dtoa_r+0x6a0>
 800d1ba:	f01a 0f01 	tst.w	sl, #1
 800d1be:	d110      	bne.n	800d1e2 <_dtoa_r+0x6c2>
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	ee18 1a10 	vmov	r1, s16
 800d1c6:	f000 fc3d 	bl	800da44 <_Bfree>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	9800      	ldr	r0, [sp, #0]
 800d1ce:	702b      	strb	r3, [r5, #0]
 800d1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	6018      	str	r0, [r3, #0]
 800d1d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f43f acf1 	beq.w	800cbc0 <_dtoa_r+0xa0>
 800d1de:	601d      	str	r5, [r3, #0]
 800d1e0:	e4ee      	b.n	800cbc0 <_dtoa_r+0xa0>
 800d1e2:	9f00      	ldr	r7, [sp, #0]
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	461d      	mov	r5, r3
 800d1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1ec:	2a39      	cmp	r2, #57	; 0x39
 800d1ee:	d106      	bne.n	800d1fe <_dtoa_r+0x6de>
 800d1f0:	9a01      	ldr	r2, [sp, #4]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d1f7      	bne.n	800d1e6 <_dtoa_r+0x6c6>
 800d1f6:	9901      	ldr	r1, [sp, #4]
 800d1f8:	2230      	movs	r2, #48	; 0x30
 800d1fa:	3701      	adds	r7, #1
 800d1fc:	700a      	strb	r2, [r1, #0]
 800d1fe:	781a      	ldrb	r2, [r3, #0]
 800d200:	3201      	adds	r2, #1
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	e790      	b.n	800d128 <_dtoa_r+0x608>
 800d206:	4ba6      	ldr	r3, [pc, #664]	; (800d4a0 <_dtoa_r+0x980>)
 800d208:	2200      	movs	r2, #0
 800d20a:	f7f3 fa15 	bl	8000638 <__aeabi_dmul>
 800d20e:	2200      	movs	r2, #0
 800d210:	2300      	movs	r3, #0
 800d212:	4606      	mov	r6, r0
 800d214:	460f      	mov	r7, r1
 800d216:	f7f3 fc77 	bl	8000b08 <__aeabi_dcmpeq>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d09d      	beq.n	800d15a <_dtoa_r+0x63a>
 800d21e:	e7cf      	b.n	800d1c0 <_dtoa_r+0x6a0>
 800d220:	9a08      	ldr	r2, [sp, #32]
 800d222:	2a00      	cmp	r2, #0
 800d224:	f000 80d7 	beq.w	800d3d6 <_dtoa_r+0x8b6>
 800d228:	9a06      	ldr	r2, [sp, #24]
 800d22a:	2a01      	cmp	r2, #1
 800d22c:	f300 80ba 	bgt.w	800d3a4 <_dtoa_r+0x884>
 800d230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d232:	2a00      	cmp	r2, #0
 800d234:	f000 80b2 	beq.w	800d39c <_dtoa_r+0x87c>
 800d238:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d23c:	9e07      	ldr	r6, [sp, #28]
 800d23e:	9d04      	ldr	r5, [sp, #16]
 800d240:	9a04      	ldr	r2, [sp, #16]
 800d242:	441a      	add	r2, r3
 800d244:	9204      	str	r2, [sp, #16]
 800d246:	9a05      	ldr	r2, [sp, #20]
 800d248:	2101      	movs	r1, #1
 800d24a:	441a      	add	r2, r3
 800d24c:	4620      	mov	r0, r4
 800d24e:	9205      	str	r2, [sp, #20]
 800d250:	f000 fcb0 	bl	800dbb4 <__i2b>
 800d254:	4607      	mov	r7, r0
 800d256:	2d00      	cmp	r5, #0
 800d258:	dd0c      	ble.n	800d274 <_dtoa_r+0x754>
 800d25a:	9b05      	ldr	r3, [sp, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dd09      	ble.n	800d274 <_dtoa_r+0x754>
 800d260:	42ab      	cmp	r3, r5
 800d262:	9a04      	ldr	r2, [sp, #16]
 800d264:	bfa8      	it	ge
 800d266:	462b      	movge	r3, r5
 800d268:	1ad2      	subs	r2, r2, r3
 800d26a:	9204      	str	r2, [sp, #16]
 800d26c:	9a05      	ldr	r2, [sp, #20]
 800d26e:	1aed      	subs	r5, r5, r3
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	9305      	str	r3, [sp, #20]
 800d274:	9b07      	ldr	r3, [sp, #28]
 800d276:	b31b      	cbz	r3, 800d2c0 <_dtoa_r+0x7a0>
 800d278:	9b08      	ldr	r3, [sp, #32]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 80af 	beq.w	800d3de <_dtoa_r+0x8be>
 800d280:	2e00      	cmp	r6, #0
 800d282:	dd13      	ble.n	800d2ac <_dtoa_r+0x78c>
 800d284:	4639      	mov	r1, r7
 800d286:	4632      	mov	r2, r6
 800d288:	4620      	mov	r0, r4
 800d28a:	f000 fd53 	bl	800dd34 <__pow5mult>
 800d28e:	ee18 2a10 	vmov	r2, s16
 800d292:	4601      	mov	r1, r0
 800d294:	4607      	mov	r7, r0
 800d296:	4620      	mov	r0, r4
 800d298:	f000 fca2 	bl	800dbe0 <__multiply>
 800d29c:	ee18 1a10 	vmov	r1, s16
 800d2a0:	4680      	mov	r8, r0
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f000 fbce 	bl	800da44 <_Bfree>
 800d2a8:	ee08 8a10 	vmov	s16, r8
 800d2ac:	9b07      	ldr	r3, [sp, #28]
 800d2ae:	1b9a      	subs	r2, r3, r6
 800d2b0:	d006      	beq.n	800d2c0 <_dtoa_r+0x7a0>
 800d2b2:	ee18 1a10 	vmov	r1, s16
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f000 fd3c 	bl	800dd34 <__pow5mult>
 800d2bc:	ee08 0a10 	vmov	s16, r0
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f000 fc76 	bl	800dbb4 <__i2b>
 800d2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	f340 8088 	ble.w	800d3e2 <_dtoa_r+0x8c2>
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	4601      	mov	r1, r0
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fd2c 	bl	800dd34 <__pow5mult>
 800d2dc:	9b06      	ldr	r3, [sp, #24]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	f340 8081 	ble.w	800d3e8 <_dtoa_r+0x8c8>
 800d2e6:	f04f 0800 	mov.w	r8, #0
 800d2ea:	6933      	ldr	r3, [r6, #16]
 800d2ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d2f0:	6918      	ldr	r0, [r3, #16]
 800d2f2:	f000 fc0f 	bl	800db14 <__hi0bits>
 800d2f6:	f1c0 0020 	rsb	r0, r0, #32
 800d2fa:	9b05      	ldr	r3, [sp, #20]
 800d2fc:	4418      	add	r0, r3
 800d2fe:	f010 001f 	ands.w	r0, r0, #31
 800d302:	f000 8092 	beq.w	800d42a <_dtoa_r+0x90a>
 800d306:	f1c0 0320 	rsb	r3, r0, #32
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	f340 808a 	ble.w	800d424 <_dtoa_r+0x904>
 800d310:	f1c0 001c 	rsb	r0, r0, #28
 800d314:	9b04      	ldr	r3, [sp, #16]
 800d316:	4403      	add	r3, r0
 800d318:	9304      	str	r3, [sp, #16]
 800d31a:	9b05      	ldr	r3, [sp, #20]
 800d31c:	4403      	add	r3, r0
 800d31e:	4405      	add	r5, r0
 800d320:	9305      	str	r3, [sp, #20]
 800d322:	9b04      	ldr	r3, [sp, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	dd07      	ble.n	800d338 <_dtoa_r+0x818>
 800d328:	ee18 1a10 	vmov	r1, s16
 800d32c:	461a      	mov	r2, r3
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 fd5a 	bl	800dde8 <__lshift>
 800d334:	ee08 0a10 	vmov	s16, r0
 800d338:	9b05      	ldr	r3, [sp, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	dd05      	ble.n	800d34a <_dtoa_r+0x82a>
 800d33e:	4631      	mov	r1, r6
 800d340:	461a      	mov	r2, r3
 800d342:	4620      	mov	r0, r4
 800d344:	f000 fd50 	bl	800dde8 <__lshift>
 800d348:	4606      	mov	r6, r0
 800d34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d06e      	beq.n	800d42e <_dtoa_r+0x90e>
 800d350:	ee18 0a10 	vmov	r0, s16
 800d354:	4631      	mov	r1, r6
 800d356:	f000 fdb7 	bl	800dec8 <__mcmp>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	da67      	bge.n	800d42e <_dtoa_r+0x90e>
 800d35e:	9b00      	ldr	r3, [sp, #0]
 800d360:	3b01      	subs	r3, #1
 800d362:	ee18 1a10 	vmov	r1, s16
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	220a      	movs	r2, #10
 800d36a:	2300      	movs	r3, #0
 800d36c:	4620      	mov	r0, r4
 800d36e:	f000 fb8b 	bl	800da88 <__multadd>
 800d372:	9b08      	ldr	r3, [sp, #32]
 800d374:	ee08 0a10 	vmov	s16, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 81b1 	beq.w	800d6e0 <_dtoa_r+0xbc0>
 800d37e:	2300      	movs	r3, #0
 800d380:	4639      	mov	r1, r7
 800d382:	220a      	movs	r2, #10
 800d384:	4620      	mov	r0, r4
 800d386:	f000 fb7f 	bl	800da88 <__multadd>
 800d38a:	9b02      	ldr	r3, [sp, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	4607      	mov	r7, r0
 800d390:	f300 808e 	bgt.w	800d4b0 <_dtoa_r+0x990>
 800d394:	9b06      	ldr	r3, [sp, #24]
 800d396:	2b02      	cmp	r3, #2
 800d398:	dc51      	bgt.n	800d43e <_dtoa_r+0x91e>
 800d39a:	e089      	b.n	800d4b0 <_dtoa_r+0x990>
 800d39c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d39e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d3a2:	e74b      	b.n	800d23c <_dtoa_r+0x71c>
 800d3a4:	9b03      	ldr	r3, [sp, #12]
 800d3a6:	1e5e      	subs	r6, r3, #1
 800d3a8:	9b07      	ldr	r3, [sp, #28]
 800d3aa:	42b3      	cmp	r3, r6
 800d3ac:	bfbf      	itttt	lt
 800d3ae:	9b07      	ldrlt	r3, [sp, #28]
 800d3b0:	9607      	strlt	r6, [sp, #28]
 800d3b2:	1af2      	sublt	r2, r6, r3
 800d3b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d3b6:	bfb6      	itet	lt
 800d3b8:	189b      	addlt	r3, r3, r2
 800d3ba:	1b9e      	subge	r6, r3, r6
 800d3bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d3be:	9b03      	ldr	r3, [sp, #12]
 800d3c0:	bfb8      	it	lt
 800d3c2:	2600      	movlt	r6, #0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	bfb7      	itett	lt
 800d3c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d3cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d3d0:	1a9d      	sublt	r5, r3, r2
 800d3d2:	2300      	movlt	r3, #0
 800d3d4:	e734      	b.n	800d240 <_dtoa_r+0x720>
 800d3d6:	9e07      	ldr	r6, [sp, #28]
 800d3d8:	9d04      	ldr	r5, [sp, #16]
 800d3da:	9f08      	ldr	r7, [sp, #32]
 800d3dc:	e73b      	b.n	800d256 <_dtoa_r+0x736>
 800d3de:	9a07      	ldr	r2, [sp, #28]
 800d3e0:	e767      	b.n	800d2b2 <_dtoa_r+0x792>
 800d3e2:	9b06      	ldr	r3, [sp, #24]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	dc18      	bgt.n	800d41a <_dtoa_r+0x8fa>
 800d3e8:	f1ba 0f00 	cmp.w	sl, #0
 800d3ec:	d115      	bne.n	800d41a <_dtoa_r+0x8fa>
 800d3ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3f2:	b993      	cbnz	r3, 800d41a <_dtoa_r+0x8fa>
 800d3f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d3f8:	0d1b      	lsrs	r3, r3, #20
 800d3fa:	051b      	lsls	r3, r3, #20
 800d3fc:	b183      	cbz	r3, 800d420 <_dtoa_r+0x900>
 800d3fe:	9b04      	ldr	r3, [sp, #16]
 800d400:	3301      	adds	r3, #1
 800d402:	9304      	str	r3, [sp, #16]
 800d404:	9b05      	ldr	r3, [sp, #20]
 800d406:	3301      	adds	r3, #1
 800d408:	9305      	str	r3, [sp, #20]
 800d40a:	f04f 0801 	mov.w	r8, #1
 800d40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d410:	2b00      	cmp	r3, #0
 800d412:	f47f af6a 	bne.w	800d2ea <_dtoa_r+0x7ca>
 800d416:	2001      	movs	r0, #1
 800d418:	e76f      	b.n	800d2fa <_dtoa_r+0x7da>
 800d41a:	f04f 0800 	mov.w	r8, #0
 800d41e:	e7f6      	b.n	800d40e <_dtoa_r+0x8ee>
 800d420:	4698      	mov	r8, r3
 800d422:	e7f4      	b.n	800d40e <_dtoa_r+0x8ee>
 800d424:	f43f af7d 	beq.w	800d322 <_dtoa_r+0x802>
 800d428:	4618      	mov	r0, r3
 800d42a:	301c      	adds	r0, #28
 800d42c:	e772      	b.n	800d314 <_dtoa_r+0x7f4>
 800d42e:	9b03      	ldr	r3, [sp, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	dc37      	bgt.n	800d4a4 <_dtoa_r+0x984>
 800d434:	9b06      	ldr	r3, [sp, #24]
 800d436:	2b02      	cmp	r3, #2
 800d438:	dd34      	ble.n	800d4a4 <_dtoa_r+0x984>
 800d43a:	9b03      	ldr	r3, [sp, #12]
 800d43c:	9302      	str	r3, [sp, #8]
 800d43e:	9b02      	ldr	r3, [sp, #8]
 800d440:	b96b      	cbnz	r3, 800d45e <_dtoa_r+0x93e>
 800d442:	4631      	mov	r1, r6
 800d444:	2205      	movs	r2, #5
 800d446:	4620      	mov	r0, r4
 800d448:	f000 fb1e 	bl	800da88 <__multadd>
 800d44c:	4601      	mov	r1, r0
 800d44e:	4606      	mov	r6, r0
 800d450:	ee18 0a10 	vmov	r0, s16
 800d454:	f000 fd38 	bl	800dec8 <__mcmp>
 800d458:	2800      	cmp	r0, #0
 800d45a:	f73f adbb 	bgt.w	800cfd4 <_dtoa_r+0x4b4>
 800d45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d460:	9d01      	ldr	r5, [sp, #4]
 800d462:	43db      	mvns	r3, r3
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	f04f 0800 	mov.w	r8, #0
 800d46a:	4631      	mov	r1, r6
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fae9 	bl	800da44 <_Bfree>
 800d472:	2f00      	cmp	r7, #0
 800d474:	f43f aea4 	beq.w	800d1c0 <_dtoa_r+0x6a0>
 800d478:	f1b8 0f00 	cmp.w	r8, #0
 800d47c:	d005      	beq.n	800d48a <_dtoa_r+0x96a>
 800d47e:	45b8      	cmp	r8, r7
 800d480:	d003      	beq.n	800d48a <_dtoa_r+0x96a>
 800d482:	4641      	mov	r1, r8
 800d484:	4620      	mov	r0, r4
 800d486:	f000 fadd 	bl	800da44 <_Bfree>
 800d48a:	4639      	mov	r1, r7
 800d48c:	4620      	mov	r0, r4
 800d48e:	f000 fad9 	bl	800da44 <_Bfree>
 800d492:	e695      	b.n	800d1c0 <_dtoa_r+0x6a0>
 800d494:	2600      	movs	r6, #0
 800d496:	4637      	mov	r7, r6
 800d498:	e7e1      	b.n	800d45e <_dtoa_r+0x93e>
 800d49a:	9700      	str	r7, [sp, #0]
 800d49c:	4637      	mov	r7, r6
 800d49e:	e599      	b.n	800cfd4 <_dtoa_r+0x4b4>
 800d4a0:	40240000 	.word	0x40240000
 800d4a4:	9b08      	ldr	r3, [sp, #32]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 80ca 	beq.w	800d640 <_dtoa_r+0xb20>
 800d4ac:	9b03      	ldr	r3, [sp, #12]
 800d4ae:	9302      	str	r3, [sp, #8]
 800d4b0:	2d00      	cmp	r5, #0
 800d4b2:	dd05      	ble.n	800d4c0 <_dtoa_r+0x9a0>
 800d4b4:	4639      	mov	r1, r7
 800d4b6:	462a      	mov	r2, r5
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 fc95 	bl	800dde8 <__lshift>
 800d4be:	4607      	mov	r7, r0
 800d4c0:	f1b8 0f00 	cmp.w	r8, #0
 800d4c4:	d05b      	beq.n	800d57e <_dtoa_r+0xa5e>
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f000 fa7b 	bl	800d9c4 <_Balloc>
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	b928      	cbnz	r0, 800d4de <_dtoa_r+0x9be>
 800d4d2:	4b87      	ldr	r3, [pc, #540]	; (800d6f0 <_dtoa_r+0xbd0>)
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d4da:	f7ff bb3b 	b.w	800cb54 <_dtoa_r+0x34>
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	3202      	adds	r2, #2
 800d4e2:	0092      	lsls	r2, r2, #2
 800d4e4:	f107 010c 	add.w	r1, r7, #12
 800d4e8:	300c      	adds	r0, #12
 800d4ea:	f7fe fa5a 	bl	800b9a2 <memcpy>
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 fc78 	bl	800dde8 <__lshift>
 800d4f8:	9b01      	ldr	r3, [sp, #4]
 800d4fa:	f103 0901 	add.w	r9, r3, #1
 800d4fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d502:	4413      	add	r3, r2
 800d504:	9305      	str	r3, [sp, #20]
 800d506:	f00a 0301 	and.w	r3, sl, #1
 800d50a:	46b8      	mov	r8, r7
 800d50c:	9304      	str	r3, [sp, #16]
 800d50e:	4607      	mov	r7, r0
 800d510:	4631      	mov	r1, r6
 800d512:	ee18 0a10 	vmov	r0, s16
 800d516:	f7ff fa75 	bl	800ca04 <quorem>
 800d51a:	4641      	mov	r1, r8
 800d51c:	9002      	str	r0, [sp, #8]
 800d51e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d522:	ee18 0a10 	vmov	r0, s16
 800d526:	f000 fccf 	bl	800dec8 <__mcmp>
 800d52a:	463a      	mov	r2, r7
 800d52c:	9003      	str	r0, [sp, #12]
 800d52e:	4631      	mov	r1, r6
 800d530:	4620      	mov	r0, r4
 800d532:	f000 fce5 	bl	800df00 <__mdiff>
 800d536:	68c2      	ldr	r2, [r0, #12]
 800d538:	f109 3bff 	add.w	fp, r9, #4294967295
 800d53c:	4605      	mov	r5, r0
 800d53e:	bb02      	cbnz	r2, 800d582 <_dtoa_r+0xa62>
 800d540:	4601      	mov	r1, r0
 800d542:	ee18 0a10 	vmov	r0, s16
 800d546:	f000 fcbf 	bl	800dec8 <__mcmp>
 800d54a:	4602      	mov	r2, r0
 800d54c:	4629      	mov	r1, r5
 800d54e:	4620      	mov	r0, r4
 800d550:	9207      	str	r2, [sp, #28]
 800d552:	f000 fa77 	bl	800da44 <_Bfree>
 800d556:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d55a:	ea43 0102 	orr.w	r1, r3, r2
 800d55e:	9b04      	ldr	r3, [sp, #16]
 800d560:	430b      	orrs	r3, r1
 800d562:	464d      	mov	r5, r9
 800d564:	d10f      	bne.n	800d586 <_dtoa_r+0xa66>
 800d566:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d56a:	d02a      	beq.n	800d5c2 <_dtoa_r+0xaa2>
 800d56c:	9b03      	ldr	r3, [sp, #12]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	dd02      	ble.n	800d578 <_dtoa_r+0xa58>
 800d572:	9b02      	ldr	r3, [sp, #8]
 800d574:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d578:	f88b a000 	strb.w	sl, [fp]
 800d57c:	e775      	b.n	800d46a <_dtoa_r+0x94a>
 800d57e:	4638      	mov	r0, r7
 800d580:	e7ba      	b.n	800d4f8 <_dtoa_r+0x9d8>
 800d582:	2201      	movs	r2, #1
 800d584:	e7e2      	b.n	800d54c <_dtoa_r+0xa2c>
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	db04      	blt.n	800d596 <_dtoa_r+0xa76>
 800d58c:	9906      	ldr	r1, [sp, #24]
 800d58e:	430b      	orrs	r3, r1
 800d590:	9904      	ldr	r1, [sp, #16]
 800d592:	430b      	orrs	r3, r1
 800d594:	d122      	bne.n	800d5dc <_dtoa_r+0xabc>
 800d596:	2a00      	cmp	r2, #0
 800d598:	ddee      	ble.n	800d578 <_dtoa_r+0xa58>
 800d59a:	ee18 1a10 	vmov	r1, s16
 800d59e:	2201      	movs	r2, #1
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f000 fc21 	bl	800dde8 <__lshift>
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	ee08 0a10 	vmov	s16, r0
 800d5ac:	f000 fc8c 	bl	800dec8 <__mcmp>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	dc03      	bgt.n	800d5bc <_dtoa_r+0xa9c>
 800d5b4:	d1e0      	bne.n	800d578 <_dtoa_r+0xa58>
 800d5b6:	f01a 0f01 	tst.w	sl, #1
 800d5ba:	d0dd      	beq.n	800d578 <_dtoa_r+0xa58>
 800d5bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5c0:	d1d7      	bne.n	800d572 <_dtoa_r+0xa52>
 800d5c2:	2339      	movs	r3, #57	; 0x39
 800d5c4:	f88b 3000 	strb.w	r3, [fp]
 800d5c8:	462b      	mov	r3, r5
 800d5ca:	461d      	mov	r5, r3
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d5d2:	2a39      	cmp	r2, #57	; 0x39
 800d5d4:	d071      	beq.n	800d6ba <_dtoa_r+0xb9a>
 800d5d6:	3201      	adds	r2, #1
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	e746      	b.n	800d46a <_dtoa_r+0x94a>
 800d5dc:	2a00      	cmp	r2, #0
 800d5de:	dd07      	ble.n	800d5f0 <_dtoa_r+0xad0>
 800d5e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5e4:	d0ed      	beq.n	800d5c2 <_dtoa_r+0xaa2>
 800d5e6:	f10a 0301 	add.w	r3, sl, #1
 800d5ea:	f88b 3000 	strb.w	r3, [fp]
 800d5ee:	e73c      	b.n	800d46a <_dtoa_r+0x94a>
 800d5f0:	9b05      	ldr	r3, [sp, #20]
 800d5f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d5f6:	4599      	cmp	r9, r3
 800d5f8:	d047      	beq.n	800d68a <_dtoa_r+0xb6a>
 800d5fa:	ee18 1a10 	vmov	r1, s16
 800d5fe:	2300      	movs	r3, #0
 800d600:	220a      	movs	r2, #10
 800d602:	4620      	mov	r0, r4
 800d604:	f000 fa40 	bl	800da88 <__multadd>
 800d608:	45b8      	cmp	r8, r7
 800d60a:	ee08 0a10 	vmov	s16, r0
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	f04f 020a 	mov.w	r2, #10
 800d616:	4641      	mov	r1, r8
 800d618:	4620      	mov	r0, r4
 800d61a:	d106      	bne.n	800d62a <_dtoa_r+0xb0a>
 800d61c:	f000 fa34 	bl	800da88 <__multadd>
 800d620:	4680      	mov	r8, r0
 800d622:	4607      	mov	r7, r0
 800d624:	f109 0901 	add.w	r9, r9, #1
 800d628:	e772      	b.n	800d510 <_dtoa_r+0x9f0>
 800d62a:	f000 fa2d 	bl	800da88 <__multadd>
 800d62e:	4639      	mov	r1, r7
 800d630:	4680      	mov	r8, r0
 800d632:	2300      	movs	r3, #0
 800d634:	220a      	movs	r2, #10
 800d636:	4620      	mov	r0, r4
 800d638:	f000 fa26 	bl	800da88 <__multadd>
 800d63c:	4607      	mov	r7, r0
 800d63e:	e7f1      	b.n	800d624 <_dtoa_r+0xb04>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	9302      	str	r3, [sp, #8]
 800d644:	9d01      	ldr	r5, [sp, #4]
 800d646:	ee18 0a10 	vmov	r0, s16
 800d64a:	4631      	mov	r1, r6
 800d64c:	f7ff f9da 	bl	800ca04 <quorem>
 800d650:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d654:	9b01      	ldr	r3, [sp, #4]
 800d656:	f805 ab01 	strb.w	sl, [r5], #1
 800d65a:	1aea      	subs	r2, r5, r3
 800d65c:	9b02      	ldr	r3, [sp, #8]
 800d65e:	4293      	cmp	r3, r2
 800d660:	dd09      	ble.n	800d676 <_dtoa_r+0xb56>
 800d662:	ee18 1a10 	vmov	r1, s16
 800d666:	2300      	movs	r3, #0
 800d668:	220a      	movs	r2, #10
 800d66a:	4620      	mov	r0, r4
 800d66c:	f000 fa0c 	bl	800da88 <__multadd>
 800d670:	ee08 0a10 	vmov	s16, r0
 800d674:	e7e7      	b.n	800d646 <_dtoa_r+0xb26>
 800d676:	9b02      	ldr	r3, [sp, #8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	bfc8      	it	gt
 800d67c:	461d      	movgt	r5, r3
 800d67e:	9b01      	ldr	r3, [sp, #4]
 800d680:	bfd8      	it	le
 800d682:	2501      	movle	r5, #1
 800d684:	441d      	add	r5, r3
 800d686:	f04f 0800 	mov.w	r8, #0
 800d68a:	ee18 1a10 	vmov	r1, s16
 800d68e:	2201      	movs	r2, #1
 800d690:	4620      	mov	r0, r4
 800d692:	f000 fba9 	bl	800dde8 <__lshift>
 800d696:	4631      	mov	r1, r6
 800d698:	ee08 0a10 	vmov	s16, r0
 800d69c:	f000 fc14 	bl	800dec8 <__mcmp>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	dc91      	bgt.n	800d5c8 <_dtoa_r+0xaa8>
 800d6a4:	d102      	bne.n	800d6ac <_dtoa_r+0xb8c>
 800d6a6:	f01a 0f01 	tst.w	sl, #1
 800d6aa:	d18d      	bne.n	800d5c8 <_dtoa_r+0xaa8>
 800d6ac:	462b      	mov	r3, r5
 800d6ae:	461d      	mov	r5, r3
 800d6b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6b4:	2a30      	cmp	r2, #48	; 0x30
 800d6b6:	d0fa      	beq.n	800d6ae <_dtoa_r+0xb8e>
 800d6b8:	e6d7      	b.n	800d46a <_dtoa_r+0x94a>
 800d6ba:	9a01      	ldr	r2, [sp, #4]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d184      	bne.n	800d5ca <_dtoa_r+0xaaa>
 800d6c0:	9b00      	ldr	r3, [sp, #0]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	2331      	movs	r3, #49	; 0x31
 800d6c8:	7013      	strb	r3, [r2, #0]
 800d6ca:	e6ce      	b.n	800d46a <_dtoa_r+0x94a>
 800d6cc:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <_dtoa_r+0xbd4>)
 800d6ce:	f7ff ba95 	b.w	800cbfc <_dtoa_r+0xdc>
 800d6d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f47f aa6e 	bne.w	800cbb6 <_dtoa_r+0x96>
 800d6da:	4b07      	ldr	r3, [pc, #28]	; (800d6f8 <_dtoa_r+0xbd8>)
 800d6dc:	f7ff ba8e 	b.w	800cbfc <_dtoa_r+0xdc>
 800d6e0:	9b02      	ldr	r3, [sp, #8]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	dcae      	bgt.n	800d644 <_dtoa_r+0xb24>
 800d6e6:	9b06      	ldr	r3, [sp, #24]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	f73f aea8 	bgt.w	800d43e <_dtoa_r+0x91e>
 800d6ee:	e7a9      	b.n	800d644 <_dtoa_r+0xb24>
 800d6f0:	08010337 	.word	0x08010337
 800d6f4:	080100fc 	.word	0x080100fc
 800d6f8:	080102cf 	.word	0x080102cf

0800d6fc <__sflush_r>:
 800d6fc:	898a      	ldrh	r2, [r1, #12]
 800d6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d702:	4605      	mov	r5, r0
 800d704:	0710      	lsls	r0, r2, #28
 800d706:	460c      	mov	r4, r1
 800d708:	d458      	bmi.n	800d7bc <__sflush_r+0xc0>
 800d70a:	684b      	ldr	r3, [r1, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	dc05      	bgt.n	800d71c <__sflush_r+0x20>
 800d710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d712:	2b00      	cmp	r3, #0
 800d714:	dc02      	bgt.n	800d71c <__sflush_r+0x20>
 800d716:	2000      	movs	r0, #0
 800d718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d71c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d71e:	2e00      	cmp	r6, #0
 800d720:	d0f9      	beq.n	800d716 <__sflush_r+0x1a>
 800d722:	2300      	movs	r3, #0
 800d724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d728:	682f      	ldr	r7, [r5, #0]
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	d032      	beq.n	800d794 <__sflush_r+0x98>
 800d72e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d730:	89a3      	ldrh	r3, [r4, #12]
 800d732:	075a      	lsls	r2, r3, #29
 800d734:	d505      	bpl.n	800d742 <__sflush_r+0x46>
 800d736:	6863      	ldr	r3, [r4, #4]
 800d738:	1ac0      	subs	r0, r0, r3
 800d73a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d73c:	b10b      	cbz	r3, 800d742 <__sflush_r+0x46>
 800d73e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d740:	1ac0      	subs	r0, r0, r3
 800d742:	2300      	movs	r3, #0
 800d744:	4602      	mov	r2, r0
 800d746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d748:	6a21      	ldr	r1, [r4, #32]
 800d74a:	4628      	mov	r0, r5
 800d74c:	47b0      	blx	r6
 800d74e:	1c43      	adds	r3, r0, #1
 800d750:	89a3      	ldrh	r3, [r4, #12]
 800d752:	d106      	bne.n	800d762 <__sflush_r+0x66>
 800d754:	6829      	ldr	r1, [r5, #0]
 800d756:	291d      	cmp	r1, #29
 800d758:	d82c      	bhi.n	800d7b4 <__sflush_r+0xb8>
 800d75a:	4a2a      	ldr	r2, [pc, #168]	; (800d804 <__sflush_r+0x108>)
 800d75c:	40ca      	lsrs	r2, r1
 800d75e:	07d6      	lsls	r6, r2, #31
 800d760:	d528      	bpl.n	800d7b4 <__sflush_r+0xb8>
 800d762:	2200      	movs	r2, #0
 800d764:	6062      	str	r2, [r4, #4]
 800d766:	04d9      	lsls	r1, r3, #19
 800d768:	6922      	ldr	r2, [r4, #16]
 800d76a:	6022      	str	r2, [r4, #0]
 800d76c:	d504      	bpl.n	800d778 <__sflush_r+0x7c>
 800d76e:	1c42      	adds	r2, r0, #1
 800d770:	d101      	bne.n	800d776 <__sflush_r+0x7a>
 800d772:	682b      	ldr	r3, [r5, #0]
 800d774:	b903      	cbnz	r3, 800d778 <__sflush_r+0x7c>
 800d776:	6560      	str	r0, [r4, #84]	; 0x54
 800d778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d77a:	602f      	str	r7, [r5, #0]
 800d77c:	2900      	cmp	r1, #0
 800d77e:	d0ca      	beq.n	800d716 <__sflush_r+0x1a>
 800d780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d784:	4299      	cmp	r1, r3
 800d786:	d002      	beq.n	800d78e <__sflush_r+0x92>
 800d788:	4628      	mov	r0, r5
 800d78a:	f000 fc9f 	bl	800e0cc <_free_r>
 800d78e:	2000      	movs	r0, #0
 800d790:	6360      	str	r0, [r4, #52]	; 0x34
 800d792:	e7c1      	b.n	800d718 <__sflush_r+0x1c>
 800d794:	6a21      	ldr	r1, [r4, #32]
 800d796:	2301      	movs	r3, #1
 800d798:	4628      	mov	r0, r5
 800d79a:	47b0      	blx	r6
 800d79c:	1c41      	adds	r1, r0, #1
 800d79e:	d1c7      	bne.n	800d730 <__sflush_r+0x34>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0c4      	beq.n	800d730 <__sflush_r+0x34>
 800d7a6:	2b1d      	cmp	r3, #29
 800d7a8:	d001      	beq.n	800d7ae <__sflush_r+0xb2>
 800d7aa:	2b16      	cmp	r3, #22
 800d7ac:	d101      	bne.n	800d7b2 <__sflush_r+0xb6>
 800d7ae:	602f      	str	r7, [r5, #0]
 800d7b0:	e7b1      	b.n	800d716 <__sflush_r+0x1a>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7b8:	81a3      	strh	r3, [r4, #12]
 800d7ba:	e7ad      	b.n	800d718 <__sflush_r+0x1c>
 800d7bc:	690f      	ldr	r7, [r1, #16]
 800d7be:	2f00      	cmp	r7, #0
 800d7c0:	d0a9      	beq.n	800d716 <__sflush_r+0x1a>
 800d7c2:	0793      	lsls	r3, r2, #30
 800d7c4:	680e      	ldr	r6, [r1, #0]
 800d7c6:	bf08      	it	eq
 800d7c8:	694b      	ldreq	r3, [r1, #20]
 800d7ca:	600f      	str	r7, [r1, #0]
 800d7cc:	bf18      	it	ne
 800d7ce:	2300      	movne	r3, #0
 800d7d0:	eba6 0807 	sub.w	r8, r6, r7
 800d7d4:	608b      	str	r3, [r1, #8]
 800d7d6:	f1b8 0f00 	cmp.w	r8, #0
 800d7da:	dd9c      	ble.n	800d716 <__sflush_r+0x1a>
 800d7dc:	6a21      	ldr	r1, [r4, #32]
 800d7de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7e0:	4643      	mov	r3, r8
 800d7e2:	463a      	mov	r2, r7
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	47b0      	blx	r6
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	dc06      	bgt.n	800d7fa <__sflush_r+0xfe>
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f8:	e78e      	b.n	800d718 <__sflush_r+0x1c>
 800d7fa:	4407      	add	r7, r0
 800d7fc:	eba8 0800 	sub.w	r8, r8, r0
 800d800:	e7e9      	b.n	800d7d6 <__sflush_r+0xda>
 800d802:	bf00      	nop
 800d804:	20400001 	.word	0x20400001

0800d808 <_fflush_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	690b      	ldr	r3, [r1, #16]
 800d80c:	4605      	mov	r5, r0
 800d80e:	460c      	mov	r4, r1
 800d810:	b913      	cbnz	r3, 800d818 <_fflush_r+0x10>
 800d812:	2500      	movs	r5, #0
 800d814:	4628      	mov	r0, r5
 800d816:	bd38      	pop	{r3, r4, r5, pc}
 800d818:	b118      	cbz	r0, 800d822 <_fflush_r+0x1a>
 800d81a:	6983      	ldr	r3, [r0, #24]
 800d81c:	b90b      	cbnz	r3, 800d822 <_fflush_r+0x1a>
 800d81e:	f7fd fffb 	bl	800b818 <__sinit>
 800d822:	4b14      	ldr	r3, [pc, #80]	; (800d874 <_fflush_r+0x6c>)
 800d824:	429c      	cmp	r4, r3
 800d826:	d11b      	bne.n	800d860 <_fflush_r+0x58>
 800d828:	686c      	ldr	r4, [r5, #4]
 800d82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d0ef      	beq.n	800d812 <_fflush_r+0xa>
 800d832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d834:	07d0      	lsls	r0, r2, #31
 800d836:	d404      	bmi.n	800d842 <_fflush_r+0x3a>
 800d838:	0599      	lsls	r1, r3, #22
 800d83a:	d402      	bmi.n	800d842 <_fflush_r+0x3a>
 800d83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d83e:	f7fe f8ae 	bl	800b99e <__retarget_lock_acquire_recursive>
 800d842:	4628      	mov	r0, r5
 800d844:	4621      	mov	r1, r4
 800d846:	f7ff ff59 	bl	800d6fc <__sflush_r>
 800d84a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d84c:	07da      	lsls	r2, r3, #31
 800d84e:	4605      	mov	r5, r0
 800d850:	d4e0      	bmi.n	800d814 <_fflush_r+0xc>
 800d852:	89a3      	ldrh	r3, [r4, #12]
 800d854:	059b      	lsls	r3, r3, #22
 800d856:	d4dd      	bmi.n	800d814 <_fflush_r+0xc>
 800d858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d85a:	f7fe f8a1 	bl	800b9a0 <__retarget_lock_release_recursive>
 800d85e:	e7d9      	b.n	800d814 <_fflush_r+0xc>
 800d860:	4b05      	ldr	r3, [pc, #20]	; (800d878 <_fflush_r+0x70>)
 800d862:	429c      	cmp	r4, r3
 800d864:	d101      	bne.n	800d86a <_fflush_r+0x62>
 800d866:	68ac      	ldr	r4, [r5, #8]
 800d868:	e7df      	b.n	800d82a <_fflush_r+0x22>
 800d86a:	4b04      	ldr	r3, [pc, #16]	; (800d87c <_fflush_r+0x74>)
 800d86c:	429c      	cmp	r4, r3
 800d86e:	bf08      	it	eq
 800d870:	68ec      	ldreq	r4, [r5, #12]
 800d872:	e7da      	b.n	800d82a <_fflush_r+0x22>
 800d874:	080100a8 	.word	0x080100a8
 800d878:	080100c8 	.word	0x080100c8
 800d87c:	08010088 	.word	0x08010088

0800d880 <fiprintf>:
 800d880:	b40e      	push	{r1, r2, r3}
 800d882:	b503      	push	{r0, r1, lr}
 800d884:	4601      	mov	r1, r0
 800d886:	ab03      	add	r3, sp, #12
 800d888:	4805      	ldr	r0, [pc, #20]	; (800d8a0 <fiprintf+0x20>)
 800d88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d88e:	6800      	ldr	r0, [r0, #0]
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	f000 fc91 	bl	800e1b8 <_vfiprintf_r>
 800d896:	b002      	add	sp, #8
 800d898:	f85d eb04 	ldr.w	lr, [sp], #4
 800d89c:	b003      	add	sp, #12
 800d89e:	4770      	bx	lr
 800d8a0:	20000078 	.word	0x20000078

0800d8a4 <_localeconv_r>:
 800d8a4:	4800      	ldr	r0, [pc, #0]	; (800d8a8 <_localeconv_r+0x4>)
 800d8a6:	4770      	bx	lr
 800d8a8:	200001cc 	.word	0x200001cc

0800d8ac <_lseek_r>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4d07      	ldr	r5, [pc, #28]	; (800d8cc <_lseek_r+0x20>)
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	4608      	mov	r0, r1
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	602a      	str	r2, [r5, #0]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	f000 fe74 	bl	800e5a8 <_lseek>
 800d8c0:	1c43      	adds	r3, r0, #1
 800d8c2:	d102      	bne.n	800d8ca <_lseek_r+0x1e>
 800d8c4:	682b      	ldr	r3, [r5, #0]
 800d8c6:	b103      	cbz	r3, 800d8ca <_lseek_r+0x1e>
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	bd38      	pop	{r3, r4, r5, pc}
 800d8cc:	20008f00 	.word	0x20008f00

0800d8d0 <__swhatbuf_r>:
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	460e      	mov	r6, r1
 800d8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d8:	2900      	cmp	r1, #0
 800d8da:	b096      	sub	sp, #88	; 0x58
 800d8dc:	4614      	mov	r4, r2
 800d8de:	461d      	mov	r5, r3
 800d8e0:	da08      	bge.n	800d8f4 <__swhatbuf_r+0x24>
 800d8e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	602a      	str	r2, [r5, #0]
 800d8ea:	061a      	lsls	r2, r3, #24
 800d8ec:	d410      	bmi.n	800d910 <__swhatbuf_r+0x40>
 800d8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8f2:	e00e      	b.n	800d912 <__swhatbuf_r+0x42>
 800d8f4:	466a      	mov	r2, sp
 800d8f6:	f000 fda9 	bl	800e44c <_fstat_r>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	dbf1      	blt.n	800d8e2 <__swhatbuf_r+0x12>
 800d8fe:	9a01      	ldr	r2, [sp, #4]
 800d900:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d904:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d908:	425a      	negs	r2, r3
 800d90a:	415a      	adcs	r2, r3
 800d90c:	602a      	str	r2, [r5, #0]
 800d90e:	e7ee      	b.n	800d8ee <__swhatbuf_r+0x1e>
 800d910:	2340      	movs	r3, #64	; 0x40
 800d912:	2000      	movs	r0, #0
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	b016      	add	sp, #88	; 0x58
 800d918:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d91c <__smakebuf_r>:
 800d91c:	898b      	ldrh	r3, [r1, #12]
 800d91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d920:	079d      	lsls	r5, r3, #30
 800d922:	4606      	mov	r6, r0
 800d924:	460c      	mov	r4, r1
 800d926:	d507      	bpl.n	800d938 <__smakebuf_r+0x1c>
 800d928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d92c:	6023      	str	r3, [r4, #0]
 800d92e:	6123      	str	r3, [r4, #16]
 800d930:	2301      	movs	r3, #1
 800d932:	6163      	str	r3, [r4, #20]
 800d934:	b002      	add	sp, #8
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	ab01      	add	r3, sp, #4
 800d93a:	466a      	mov	r2, sp
 800d93c:	f7ff ffc8 	bl	800d8d0 <__swhatbuf_r>
 800d940:	9900      	ldr	r1, [sp, #0]
 800d942:	4605      	mov	r5, r0
 800d944:	4630      	mov	r0, r6
 800d946:	f7fe f879 	bl	800ba3c <_malloc_r>
 800d94a:	b948      	cbnz	r0, 800d960 <__smakebuf_r+0x44>
 800d94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d950:	059a      	lsls	r2, r3, #22
 800d952:	d4ef      	bmi.n	800d934 <__smakebuf_r+0x18>
 800d954:	f023 0303 	bic.w	r3, r3, #3
 800d958:	f043 0302 	orr.w	r3, r3, #2
 800d95c:	81a3      	strh	r3, [r4, #12]
 800d95e:	e7e3      	b.n	800d928 <__smakebuf_r+0xc>
 800d960:	4b0d      	ldr	r3, [pc, #52]	; (800d998 <__smakebuf_r+0x7c>)
 800d962:	62b3      	str	r3, [r6, #40]	; 0x28
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	6020      	str	r0, [r4, #0]
 800d968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d96c:	81a3      	strh	r3, [r4, #12]
 800d96e:	9b00      	ldr	r3, [sp, #0]
 800d970:	6163      	str	r3, [r4, #20]
 800d972:	9b01      	ldr	r3, [sp, #4]
 800d974:	6120      	str	r0, [r4, #16]
 800d976:	b15b      	cbz	r3, 800d990 <__smakebuf_r+0x74>
 800d978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d97c:	4630      	mov	r0, r6
 800d97e:	f000 fd77 	bl	800e470 <_isatty_r>
 800d982:	b128      	cbz	r0, 800d990 <__smakebuf_r+0x74>
 800d984:	89a3      	ldrh	r3, [r4, #12]
 800d986:	f023 0303 	bic.w	r3, r3, #3
 800d98a:	f043 0301 	orr.w	r3, r3, #1
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	89a0      	ldrh	r0, [r4, #12]
 800d992:	4305      	orrs	r5, r0
 800d994:	81a5      	strh	r5, [r4, #12]
 800d996:	e7cd      	b.n	800d934 <__smakebuf_r+0x18>
 800d998:	0800b7b1 	.word	0x0800b7b1

0800d99c <malloc>:
 800d99c:	4b02      	ldr	r3, [pc, #8]	; (800d9a8 <malloc+0xc>)
 800d99e:	4601      	mov	r1, r0
 800d9a0:	6818      	ldr	r0, [r3, #0]
 800d9a2:	f7fe b84b 	b.w	800ba3c <_malloc_r>
 800d9a6:	bf00      	nop
 800d9a8:	20000078 	.word	0x20000078

0800d9ac <__malloc_lock>:
 800d9ac:	4801      	ldr	r0, [pc, #4]	; (800d9b4 <__malloc_lock+0x8>)
 800d9ae:	f7fd bff6 	b.w	800b99e <__retarget_lock_acquire_recursive>
 800d9b2:	bf00      	nop
 800d9b4:	20008ef4 	.word	0x20008ef4

0800d9b8 <__malloc_unlock>:
 800d9b8:	4801      	ldr	r0, [pc, #4]	; (800d9c0 <__malloc_unlock+0x8>)
 800d9ba:	f7fd bff1 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800d9be:	bf00      	nop
 800d9c0:	20008ef4 	.word	0x20008ef4

0800d9c4 <_Balloc>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	460d      	mov	r5, r1
 800d9cc:	b976      	cbnz	r6, 800d9ec <_Balloc+0x28>
 800d9ce:	2010      	movs	r0, #16
 800d9d0:	f7ff ffe4 	bl	800d99c <malloc>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	6260      	str	r0, [r4, #36]	; 0x24
 800d9d8:	b920      	cbnz	r0, 800d9e4 <_Balloc+0x20>
 800d9da:	4b18      	ldr	r3, [pc, #96]	; (800da3c <_Balloc+0x78>)
 800d9dc:	4818      	ldr	r0, [pc, #96]	; (800da40 <_Balloc+0x7c>)
 800d9de:	2166      	movs	r1, #102	; 0x66
 800d9e0:	f7fe ffe2 	bl	800c9a8 <__assert_func>
 800d9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9e8:	6006      	str	r6, [r0, #0]
 800d9ea:	60c6      	str	r6, [r0, #12]
 800d9ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9ee:	68f3      	ldr	r3, [r6, #12]
 800d9f0:	b183      	cbz	r3, 800da14 <_Balloc+0x50>
 800d9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9fa:	b9b8      	cbnz	r0, 800da2c <_Balloc+0x68>
 800d9fc:	2101      	movs	r1, #1
 800d9fe:	fa01 f605 	lsl.w	r6, r1, r5
 800da02:	1d72      	adds	r2, r6, #5
 800da04:	0092      	lsls	r2, r2, #2
 800da06:	4620      	mov	r0, r4
 800da08:	f7fd ffe1 	bl	800b9ce <_calloc_r>
 800da0c:	b160      	cbz	r0, 800da28 <_Balloc+0x64>
 800da0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da12:	e00e      	b.n	800da32 <_Balloc+0x6e>
 800da14:	2221      	movs	r2, #33	; 0x21
 800da16:	2104      	movs	r1, #4
 800da18:	4620      	mov	r0, r4
 800da1a:	f7fd ffd8 	bl	800b9ce <_calloc_r>
 800da1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da20:	60f0      	str	r0, [r6, #12]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e4      	bne.n	800d9f2 <_Balloc+0x2e>
 800da28:	2000      	movs	r0, #0
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	6802      	ldr	r2, [r0, #0]
 800da2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da32:	2300      	movs	r3, #0
 800da34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da38:	e7f7      	b.n	800da2a <_Balloc+0x66>
 800da3a:	bf00      	nop
 800da3c:	08010120 	.word	0x08010120
 800da40:	08010348 	.word	0x08010348

0800da44 <_Bfree>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da48:	4605      	mov	r5, r0
 800da4a:	460c      	mov	r4, r1
 800da4c:	b976      	cbnz	r6, 800da6c <_Bfree+0x28>
 800da4e:	2010      	movs	r0, #16
 800da50:	f7ff ffa4 	bl	800d99c <malloc>
 800da54:	4602      	mov	r2, r0
 800da56:	6268      	str	r0, [r5, #36]	; 0x24
 800da58:	b920      	cbnz	r0, 800da64 <_Bfree+0x20>
 800da5a:	4b09      	ldr	r3, [pc, #36]	; (800da80 <_Bfree+0x3c>)
 800da5c:	4809      	ldr	r0, [pc, #36]	; (800da84 <_Bfree+0x40>)
 800da5e:	218a      	movs	r1, #138	; 0x8a
 800da60:	f7fe ffa2 	bl	800c9a8 <__assert_func>
 800da64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da68:	6006      	str	r6, [r0, #0]
 800da6a:	60c6      	str	r6, [r0, #12]
 800da6c:	b13c      	cbz	r4, 800da7e <_Bfree+0x3a>
 800da6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da70:	6862      	ldr	r2, [r4, #4]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da78:	6021      	str	r1, [r4, #0]
 800da7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da7e:	bd70      	pop	{r4, r5, r6, pc}
 800da80:	08010120 	.word	0x08010120
 800da84:	08010348 	.word	0x08010348

0800da88 <__multadd>:
 800da88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da8c:	690d      	ldr	r5, [r1, #16]
 800da8e:	4607      	mov	r7, r0
 800da90:	460c      	mov	r4, r1
 800da92:	461e      	mov	r6, r3
 800da94:	f101 0c14 	add.w	ip, r1, #20
 800da98:	2000      	movs	r0, #0
 800da9a:	f8dc 3000 	ldr.w	r3, [ip]
 800da9e:	b299      	uxth	r1, r3
 800daa0:	fb02 6101 	mla	r1, r2, r1, r6
 800daa4:	0c1e      	lsrs	r6, r3, #16
 800daa6:	0c0b      	lsrs	r3, r1, #16
 800daa8:	fb02 3306 	mla	r3, r2, r6, r3
 800daac:	b289      	uxth	r1, r1
 800daae:	3001      	adds	r0, #1
 800dab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dab4:	4285      	cmp	r5, r0
 800dab6:	f84c 1b04 	str.w	r1, [ip], #4
 800daba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dabe:	dcec      	bgt.n	800da9a <__multadd+0x12>
 800dac0:	b30e      	cbz	r6, 800db06 <__multadd+0x7e>
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	42ab      	cmp	r3, r5
 800dac6:	dc19      	bgt.n	800dafc <__multadd+0x74>
 800dac8:	6861      	ldr	r1, [r4, #4]
 800daca:	4638      	mov	r0, r7
 800dacc:	3101      	adds	r1, #1
 800dace:	f7ff ff79 	bl	800d9c4 <_Balloc>
 800dad2:	4680      	mov	r8, r0
 800dad4:	b928      	cbnz	r0, 800dae2 <__multadd+0x5a>
 800dad6:	4602      	mov	r2, r0
 800dad8:	4b0c      	ldr	r3, [pc, #48]	; (800db0c <__multadd+0x84>)
 800dada:	480d      	ldr	r0, [pc, #52]	; (800db10 <__multadd+0x88>)
 800dadc:	21b5      	movs	r1, #181	; 0xb5
 800dade:	f7fe ff63 	bl	800c9a8 <__assert_func>
 800dae2:	6922      	ldr	r2, [r4, #16]
 800dae4:	3202      	adds	r2, #2
 800dae6:	f104 010c 	add.w	r1, r4, #12
 800daea:	0092      	lsls	r2, r2, #2
 800daec:	300c      	adds	r0, #12
 800daee:	f7fd ff58 	bl	800b9a2 <memcpy>
 800daf2:	4621      	mov	r1, r4
 800daf4:	4638      	mov	r0, r7
 800daf6:	f7ff ffa5 	bl	800da44 <_Bfree>
 800dafa:	4644      	mov	r4, r8
 800dafc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db00:	3501      	adds	r5, #1
 800db02:	615e      	str	r6, [r3, #20]
 800db04:	6125      	str	r5, [r4, #16]
 800db06:	4620      	mov	r0, r4
 800db08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db0c:	08010337 	.word	0x08010337
 800db10:	08010348 	.word	0x08010348

0800db14 <__hi0bits>:
 800db14:	0c03      	lsrs	r3, r0, #16
 800db16:	041b      	lsls	r3, r3, #16
 800db18:	b9d3      	cbnz	r3, 800db50 <__hi0bits+0x3c>
 800db1a:	0400      	lsls	r0, r0, #16
 800db1c:	2310      	movs	r3, #16
 800db1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db22:	bf04      	itt	eq
 800db24:	0200      	lsleq	r0, r0, #8
 800db26:	3308      	addeq	r3, #8
 800db28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db2c:	bf04      	itt	eq
 800db2e:	0100      	lsleq	r0, r0, #4
 800db30:	3304      	addeq	r3, #4
 800db32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db36:	bf04      	itt	eq
 800db38:	0080      	lsleq	r0, r0, #2
 800db3a:	3302      	addeq	r3, #2
 800db3c:	2800      	cmp	r0, #0
 800db3e:	db05      	blt.n	800db4c <__hi0bits+0x38>
 800db40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db44:	f103 0301 	add.w	r3, r3, #1
 800db48:	bf08      	it	eq
 800db4a:	2320      	moveq	r3, #32
 800db4c:	4618      	mov	r0, r3
 800db4e:	4770      	bx	lr
 800db50:	2300      	movs	r3, #0
 800db52:	e7e4      	b.n	800db1e <__hi0bits+0xa>

0800db54 <__lo0bits>:
 800db54:	6803      	ldr	r3, [r0, #0]
 800db56:	f013 0207 	ands.w	r2, r3, #7
 800db5a:	4601      	mov	r1, r0
 800db5c:	d00b      	beq.n	800db76 <__lo0bits+0x22>
 800db5e:	07da      	lsls	r2, r3, #31
 800db60:	d423      	bmi.n	800dbaa <__lo0bits+0x56>
 800db62:	0798      	lsls	r0, r3, #30
 800db64:	bf49      	itett	mi
 800db66:	085b      	lsrmi	r3, r3, #1
 800db68:	089b      	lsrpl	r3, r3, #2
 800db6a:	2001      	movmi	r0, #1
 800db6c:	600b      	strmi	r3, [r1, #0]
 800db6e:	bf5c      	itt	pl
 800db70:	600b      	strpl	r3, [r1, #0]
 800db72:	2002      	movpl	r0, #2
 800db74:	4770      	bx	lr
 800db76:	b298      	uxth	r0, r3
 800db78:	b9a8      	cbnz	r0, 800dba6 <__lo0bits+0x52>
 800db7a:	0c1b      	lsrs	r3, r3, #16
 800db7c:	2010      	movs	r0, #16
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	b90a      	cbnz	r2, 800db86 <__lo0bits+0x32>
 800db82:	3008      	adds	r0, #8
 800db84:	0a1b      	lsrs	r3, r3, #8
 800db86:	071a      	lsls	r2, r3, #28
 800db88:	bf04      	itt	eq
 800db8a:	091b      	lsreq	r3, r3, #4
 800db8c:	3004      	addeq	r0, #4
 800db8e:	079a      	lsls	r2, r3, #30
 800db90:	bf04      	itt	eq
 800db92:	089b      	lsreq	r3, r3, #2
 800db94:	3002      	addeq	r0, #2
 800db96:	07da      	lsls	r2, r3, #31
 800db98:	d403      	bmi.n	800dba2 <__lo0bits+0x4e>
 800db9a:	085b      	lsrs	r3, r3, #1
 800db9c:	f100 0001 	add.w	r0, r0, #1
 800dba0:	d005      	beq.n	800dbae <__lo0bits+0x5a>
 800dba2:	600b      	str	r3, [r1, #0]
 800dba4:	4770      	bx	lr
 800dba6:	4610      	mov	r0, r2
 800dba8:	e7e9      	b.n	800db7e <__lo0bits+0x2a>
 800dbaa:	2000      	movs	r0, #0
 800dbac:	4770      	bx	lr
 800dbae:	2020      	movs	r0, #32
 800dbb0:	4770      	bx	lr
	...

0800dbb4 <__i2b>:
 800dbb4:	b510      	push	{r4, lr}
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	2101      	movs	r1, #1
 800dbba:	f7ff ff03 	bl	800d9c4 <_Balloc>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	b928      	cbnz	r0, 800dbce <__i2b+0x1a>
 800dbc2:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <__i2b+0x24>)
 800dbc4:	4805      	ldr	r0, [pc, #20]	; (800dbdc <__i2b+0x28>)
 800dbc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dbca:	f7fe feed 	bl	800c9a8 <__assert_func>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	6144      	str	r4, [r0, #20]
 800dbd2:	6103      	str	r3, [r0, #16]
 800dbd4:	bd10      	pop	{r4, pc}
 800dbd6:	bf00      	nop
 800dbd8:	08010337 	.word	0x08010337
 800dbdc:	08010348 	.word	0x08010348

0800dbe0 <__multiply>:
 800dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	4691      	mov	r9, r2
 800dbe6:	690a      	ldr	r2, [r1, #16]
 800dbe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	bfb8      	it	lt
 800dbf0:	460b      	movlt	r3, r1
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	bfbc      	itt	lt
 800dbf6:	464c      	movlt	r4, r9
 800dbf8:	4699      	movlt	r9, r3
 800dbfa:	6927      	ldr	r7, [r4, #16]
 800dbfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc00:	68a3      	ldr	r3, [r4, #8]
 800dc02:	6861      	ldr	r1, [r4, #4]
 800dc04:	eb07 060a 	add.w	r6, r7, sl
 800dc08:	42b3      	cmp	r3, r6
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	bfb8      	it	lt
 800dc0e:	3101      	addlt	r1, #1
 800dc10:	f7ff fed8 	bl	800d9c4 <_Balloc>
 800dc14:	b930      	cbnz	r0, 800dc24 <__multiply+0x44>
 800dc16:	4602      	mov	r2, r0
 800dc18:	4b44      	ldr	r3, [pc, #272]	; (800dd2c <__multiply+0x14c>)
 800dc1a:	4845      	ldr	r0, [pc, #276]	; (800dd30 <__multiply+0x150>)
 800dc1c:	f240 115d 	movw	r1, #349	; 0x15d
 800dc20:	f7fe fec2 	bl	800c9a8 <__assert_func>
 800dc24:	f100 0514 	add.w	r5, r0, #20
 800dc28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc2c:	462b      	mov	r3, r5
 800dc2e:	2200      	movs	r2, #0
 800dc30:	4543      	cmp	r3, r8
 800dc32:	d321      	bcc.n	800dc78 <__multiply+0x98>
 800dc34:	f104 0314 	add.w	r3, r4, #20
 800dc38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc3c:	f109 0314 	add.w	r3, r9, #20
 800dc40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc44:	9202      	str	r2, [sp, #8]
 800dc46:	1b3a      	subs	r2, r7, r4
 800dc48:	3a15      	subs	r2, #21
 800dc4a:	f022 0203 	bic.w	r2, r2, #3
 800dc4e:	3204      	adds	r2, #4
 800dc50:	f104 0115 	add.w	r1, r4, #21
 800dc54:	428f      	cmp	r7, r1
 800dc56:	bf38      	it	cc
 800dc58:	2204      	movcc	r2, #4
 800dc5a:	9201      	str	r2, [sp, #4]
 800dc5c:	9a02      	ldr	r2, [sp, #8]
 800dc5e:	9303      	str	r3, [sp, #12]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d80c      	bhi.n	800dc7e <__multiply+0x9e>
 800dc64:	2e00      	cmp	r6, #0
 800dc66:	dd03      	ble.n	800dc70 <__multiply+0x90>
 800dc68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d05a      	beq.n	800dd26 <__multiply+0x146>
 800dc70:	6106      	str	r6, [r0, #16]
 800dc72:	b005      	add	sp, #20
 800dc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc78:	f843 2b04 	str.w	r2, [r3], #4
 800dc7c:	e7d8      	b.n	800dc30 <__multiply+0x50>
 800dc7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc82:	f1ba 0f00 	cmp.w	sl, #0
 800dc86:	d024      	beq.n	800dcd2 <__multiply+0xf2>
 800dc88:	f104 0e14 	add.w	lr, r4, #20
 800dc8c:	46a9      	mov	r9, r5
 800dc8e:	f04f 0c00 	mov.w	ip, #0
 800dc92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc96:	f8d9 1000 	ldr.w	r1, [r9]
 800dc9a:	fa1f fb82 	uxth.w	fp, r2
 800dc9e:	b289      	uxth	r1, r1
 800dca0:	fb0a 110b 	mla	r1, sl, fp, r1
 800dca4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dca8:	f8d9 2000 	ldr.w	r2, [r9]
 800dcac:	4461      	add	r1, ip
 800dcae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800dcb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dcba:	b289      	uxth	r1, r1
 800dcbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dcc0:	4577      	cmp	r7, lr
 800dcc2:	f849 1b04 	str.w	r1, [r9], #4
 800dcc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcca:	d8e2      	bhi.n	800dc92 <__multiply+0xb2>
 800dccc:	9a01      	ldr	r2, [sp, #4]
 800dcce:	f845 c002 	str.w	ip, [r5, r2]
 800dcd2:	9a03      	ldr	r2, [sp, #12]
 800dcd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	f1b9 0f00 	cmp.w	r9, #0
 800dcde:	d020      	beq.n	800dd22 <__multiply+0x142>
 800dce0:	6829      	ldr	r1, [r5, #0]
 800dce2:	f104 0c14 	add.w	ip, r4, #20
 800dce6:	46ae      	mov	lr, r5
 800dce8:	f04f 0a00 	mov.w	sl, #0
 800dcec:	f8bc b000 	ldrh.w	fp, [ip]
 800dcf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dcf4:	fb09 220b 	mla	r2, r9, fp, r2
 800dcf8:	4492      	add	sl, r2
 800dcfa:	b289      	uxth	r1, r1
 800dcfc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd00:	f84e 1b04 	str.w	r1, [lr], #4
 800dd04:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd08:	f8be 1000 	ldrh.w	r1, [lr]
 800dd0c:	0c12      	lsrs	r2, r2, #16
 800dd0e:	fb09 1102 	mla	r1, r9, r2, r1
 800dd12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd16:	4567      	cmp	r7, ip
 800dd18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd1c:	d8e6      	bhi.n	800dcec <__multiply+0x10c>
 800dd1e:	9a01      	ldr	r2, [sp, #4]
 800dd20:	50a9      	str	r1, [r5, r2]
 800dd22:	3504      	adds	r5, #4
 800dd24:	e79a      	b.n	800dc5c <__multiply+0x7c>
 800dd26:	3e01      	subs	r6, #1
 800dd28:	e79c      	b.n	800dc64 <__multiply+0x84>
 800dd2a:	bf00      	nop
 800dd2c:	08010337 	.word	0x08010337
 800dd30:	08010348 	.word	0x08010348

0800dd34 <__pow5mult>:
 800dd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd38:	4615      	mov	r5, r2
 800dd3a:	f012 0203 	ands.w	r2, r2, #3
 800dd3e:	4606      	mov	r6, r0
 800dd40:	460f      	mov	r7, r1
 800dd42:	d007      	beq.n	800dd54 <__pow5mult+0x20>
 800dd44:	4c25      	ldr	r4, [pc, #148]	; (800dddc <__pow5mult+0xa8>)
 800dd46:	3a01      	subs	r2, #1
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd4e:	f7ff fe9b 	bl	800da88 <__multadd>
 800dd52:	4607      	mov	r7, r0
 800dd54:	10ad      	asrs	r5, r5, #2
 800dd56:	d03d      	beq.n	800ddd4 <__pow5mult+0xa0>
 800dd58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd5a:	b97c      	cbnz	r4, 800dd7c <__pow5mult+0x48>
 800dd5c:	2010      	movs	r0, #16
 800dd5e:	f7ff fe1d 	bl	800d99c <malloc>
 800dd62:	4602      	mov	r2, r0
 800dd64:	6270      	str	r0, [r6, #36]	; 0x24
 800dd66:	b928      	cbnz	r0, 800dd74 <__pow5mult+0x40>
 800dd68:	4b1d      	ldr	r3, [pc, #116]	; (800dde0 <__pow5mult+0xac>)
 800dd6a:	481e      	ldr	r0, [pc, #120]	; (800dde4 <__pow5mult+0xb0>)
 800dd6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dd70:	f7fe fe1a 	bl	800c9a8 <__assert_func>
 800dd74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd78:	6004      	str	r4, [r0, #0]
 800dd7a:	60c4      	str	r4, [r0, #12]
 800dd7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd84:	b94c      	cbnz	r4, 800dd9a <__pow5mult+0x66>
 800dd86:	f240 2171 	movw	r1, #625	; 0x271
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	f7ff ff12 	bl	800dbb4 <__i2b>
 800dd90:	2300      	movs	r3, #0
 800dd92:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd96:	4604      	mov	r4, r0
 800dd98:	6003      	str	r3, [r0, #0]
 800dd9a:	f04f 0900 	mov.w	r9, #0
 800dd9e:	07eb      	lsls	r3, r5, #31
 800dda0:	d50a      	bpl.n	800ddb8 <__pow5mult+0x84>
 800dda2:	4639      	mov	r1, r7
 800dda4:	4622      	mov	r2, r4
 800dda6:	4630      	mov	r0, r6
 800dda8:	f7ff ff1a 	bl	800dbe0 <__multiply>
 800ddac:	4639      	mov	r1, r7
 800ddae:	4680      	mov	r8, r0
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f7ff fe47 	bl	800da44 <_Bfree>
 800ddb6:	4647      	mov	r7, r8
 800ddb8:	106d      	asrs	r5, r5, #1
 800ddba:	d00b      	beq.n	800ddd4 <__pow5mult+0xa0>
 800ddbc:	6820      	ldr	r0, [r4, #0]
 800ddbe:	b938      	cbnz	r0, 800ddd0 <__pow5mult+0x9c>
 800ddc0:	4622      	mov	r2, r4
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	f7ff ff0b 	bl	800dbe0 <__multiply>
 800ddca:	6020      	str	r0, [r4, #0]
 800ddcc:	f8c0 9000 	str.w	r9, [r0]
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	e7e4      	b.n	800dd9e <__pow5mult+0x6a>
 800ddd4:	4638      	mov	r0, r7
 800ddd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddda:	bf00      	nop
 800dddc:	08010498 	.word	0x08010498
 800dde0:	08010120 	.word	0x08010120
 800dde4:	08010348 	.word	0x08010348

0800dde8 <__lshift>:
 800dde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddec:	460c      	mov	r4, r1
 800ddee:	6849      	ldr	r1, [r1, #4]
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddf6:	68a3      	ldr	r3, [r4, #8]
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	4691      	mov	r9, r2
 800ddfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de00:	f108 0601 	add.w	r6, r8, #1
 800de04:	42b3      	cmp	r3, r6
 800de06:	db0b      	blt.n	800de20 <__lshift+0x38>
 800de08:	4638      	mov	r0, r7
 800de0a:	f7ff fddb 	bl	800d9c4 <_Balloc>
 800de0e:	4605      	mov	r5, r0
 800de10:	b948      	cbnz	r0, 800de26 <__lshift+0x3e>
 800de12:	4602      	mov	r2, r0
 800de14:	4b2a      	ldr	r3, [pc, #168]	; (800dec0 <__lshift+0xd8>)
 800de16:	482b      	ldr	r0, [pc, #172]	; (800dec4 <__lshift+0xdc>)
 800de18:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de1c:	f7fe fdc4 	bl	800c9a8 <__assert_func>
 800de20:	3101      	adds	r1, #1
 800de22:	005b      	lsls	r3, r3, #1
 800de24:	e7ee      	b.n	800de04 <__lshift+0x1c>
 800de26:	2300      	movs	r3, #0
 800de28:	f100 0114 	add.w	r1, r0, #20
 800de2c:	f100 0210 	add.w	r2, r0, #16
 800de30:	4618      	mov	r0, r3
 800de32:	4553      	cmp	r3, sl
 800de34:	db37      	blt.n	800dea6 <__lshift+0xbe>
 800de36:	6920      	ldr	r0, [r4, #16]
 800de38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de3c:	f104 0314 	add.w	r3, r4, #20
 800de40:	f019 091f 	ands.w	r9, r9, #31
 800de44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800de4c:	d02f      	beq.n	800deae <__lshift+0xc6>
 800de4e:	f1c9 0e20 	rsb	lr, r9, #32
 800de52:	468a      	mov	sl, r1
 800de54:	f04f 0c00 	mov.w	ip, #0
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	fa02 f209 	lsl.w	r2, r2, r9
 800de5e:	ea42 020c 	orr.w	r2, r2, ip
 800de62:	f84a 2b04 	str.w	r2, [sl], #4
 800de66:	f853 2b04 	ldr.w	r2, [r3], #4
 800de6a:	4298      	cmp	r0, r3
 800de6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800de70:	d8f2      	bhi.n	800de58 <__lshift+0x70>
 800de72:	1b03      	subs	r3, r0, r4
 800de74:	3b15      	subs	r3, #21
 800de76:	f023 0303 	bic.w	r3, r3, #3
 800de7a:	3304      	adds	r3, #4
 800de7c:	f104 0215 	add.w	r2, r4, #21
 800de80:	4290      	cmp	r0, r2
 800de82:	bf38      	it	cc
 800de84:	2304      	movcc	r3, #4
 800de86:	f841 c003 	str.w	ip, [r1, r3]
 800de8a:	f1bc 0f00 	cmp.w	ip, #0
 800de8e:	d001      	beq.n	800de94 <__lshift+0xac>
 800de90:	f108 0602 	add.w	r6, r8, #2
 800de94:	3e01      	subs	r6, #1
 800de96:	4638      	mov	r0, r7
 800de98:	612e      	str	r6, [r5, #16]
 800de9a:	4621      	mov	r1, r4
 800de9c:	f7ff fdd2 	bl	800da44 <_Bfree>
 800dea0:	4628      	mov	r0, r5
 800dea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dea6:	f842 0f04 	str.w	r0, [r2, #4]!
 800deaa:	3301      	adds	r3, #1
 800deac:	e7c1      	b.n	800de32 <__lshift+0x4a>
 800deae:	3904      	subs	r1, #4
 800deb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800deb8:	4298      	cmp	r0, r3
 800deba:	d8f9      	bhi.n	800deb0 <__lshift+0xc8>
 800debc:	e7ea      	b.n	800de94 <__lshift+0xac>
 800debe:	bf00      	nop
 800dec0:	08010337 	.word	0x08010337
 800dec4:	08010348 	.word	0x08010348

0800dec8 <__mcmp>:
 800dec8:	b530      	push	{r4, r5, lr}
 800deca:	6902      	ldr	r2, [r0, #16]
 800decc:	690c      	ldr	r4, [r1, #16]
 800dece:	1b12      	subs	r2, r2, r4
 800ded0:	d10e      	bne.n	800def0 <__mcmp+0x28>
 800ded2:	f100 0314 	add.w	r3, r0, #20
 800ded6:	3114      	adds	r1, #20
 800ded8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dedc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dee8:	42a5      	cmp	r5, r4
 800deea:	d003      	beq.n	800def4 <__mcmp+0x2c>
 800deec:	d305      	bcc.n	800defa <__mcmp+0x32>
 800deee:	2201      	movs	r2, #1
 800def0:	4610      	mov	r0, r2
 800def2:	bd30      	pop	{r4, r5, pc}
 800def4:	4283      	cmp	r3, r0
 800def6:	d3f3      	bcc.n	800dee0 <__mcmp+0x18>
 800def8:	e7fa      	b.n	800def0 <__mcmp+0x28>
 800defa:	f04f 32ff 	mov.w	r2, #4294967295
 800defe:	e7f7      	b.n	800def0 <__mcmp+0x28>

0800df00 <__mdiff>:
 800df00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df04:	460c      	mov	r4, r1
 800df06:	4606      	mov	r6, r0
 800df08:	4611      	mov	r1, r2
 800df0a:	4620      	mov	r0, r4
 800df0c:	4690      	mov	r8, r2
 800df0e:	f7ff ffdb 	bl	800dec8 <__mcmp>
 800df12:	1e05      	subs	r5, r0, #0
 800df14:	d110      	bne.n	800df38 <__mdiff+0x38>
 800df16:	4629      	mov	r1, r5
 800df18:	4630      	mov	r0, r6
 800df1a:	f7ff fd53 	bl	800d9c4 <_Balloc>
 800df1e:	b930      	cbnz	r0, 800df2e <__mdiff+0x2e>
 800df20:	4b3a      	ldr	r3, [pc, #232]	; (800e00c <__mdiff+0x10c>)
 800df22:	4602      	mov	r2, r0
 800df24:	f240 2132 	movw	r1, #562	; 0x232
 800df28:	4839      	ldr	r0, [pc, #228]	; (800e010 <__mdiff+0x110>)
 800df2a:	f7fe fd3d 	bl	800c9a8 <__assert_func>
 800df2e:	2301      	movs	r3, #1
 800df30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df38:	bfa4      	itt	ge
 800df3a:	4643      	movge	r3, r8
 800df3c:	46a0      	movge	r8, r4
 800df3e:	4630      	mov	r0, r6
 800df40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df44:	bfa6      	itte	ge
 800df46:	461c      	movge	r4, r3
 800df48:	2500      	movge	r5, #0
 800df4a:	2501      	movlt	r5, #1
 800df4c:	f7ff fd3a 	bl	800d9c4 <_Balloc>
 800df50:	b920      	cbnz	r0, 800df5c <__mdiff+0x5c>
 800df52:	4b2e      	ldr	r3, [pc, #184]	; (800e00c <__mdiff+0x10c>)
 800df54:	4602      	mov	r2, r0
 800df56:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df5a:	e7e5      	b.n	800df28 <__mdiff+0x28>
 800df5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df60:	6926      	ldr	r6, [r4, #16]
 800df62:	60c5      	str	r5, [r0, #12]
 800df64:	f104 0914 	add.w	r9, r4, #20
 800df68:	f108 0514 	add.w	r5, r8, #20
 800df6c:	f100 0e14 	add.w	lr, r0, #20
 800df70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df78:	f108 0210 	add.w	r2, r8, #16
 800df7c:	46f2      	mov	sl, lr
 800df7e:	2100      	movs	r1, #0
 800df80:	f859 3b04 	ldr.w	r3, [r9], #4
 800df84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df88:	fa1f f883 	uxth.w	r8, r3
 800df8c:	fa11 f18b 	uxtah	r1, r1, fp
 800df90:	0c1b      	lsrs	r3, r3, #16
 800df92:	eba1 0808 	sub.w	r8, r1, r8
 800df96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df9e:	fa1f f888 	uxth.w	r8, r8
 800dfa2:	1419      	asrs	r1, r3, #16
 800dfa4:	454e      	cmp	r6, r9
 800dfa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfaa:	f84a 3b04 	str.w	r3, [sl], #4
 800dfae:	d8e7      	bhi.n	800df80 <__mdiff+0x80>
 800dfb0:	1b33      	subs	r3, r6, r4
 800dfb2:	3b15      	subs	r3, #21
 800dfb4:	f023 0303 	bic.w	r3, r3, #3
 800dfb8:	3304      	adds	r3, #4
 800dfba:	3415      	adds	r4, #21
 800dfbc:	42a6      	cmp	r6, r4
 800dfbe:	bf38      	it	cc
 800dfc0:	2304      	movcc	r3, #4
 800dfc2:	441d      	add	r5, r3
 800dfc4:	4473      	add	r3, lr
 800dfc6:	469e      	mov	lr, r3
 800dfc8:	462e      	mov	r6, r5
 800dfca:	4566      	cmp	r6, ip
 800dfcc:	d30e      	bcc.n	800dfec <__mdiff+0xec>
 800dfce:	f10c 0203 	add.w	r2, ip, #3
 800dfd2:	1b52      	subs	r2, r2, r5
 800dfd4:	f022 0203 	bic.w	r2, r2, #3
 800dfd8:	3d03      	subs	r5, #3
 800dfda:	45ac      	cmp	ip, r5
 800dfdc:	bf38      	it	cc
 800dfde:	2200      	movcc	r2, #0
 800dfe0:	441a      	add	r2, r3
 800dfe2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dfe6:	b17b      	cbz	r3, 800e008 <__mdiff+0x108>
 800dfe8:	6107      	str	r7, [r0, #16]
 800dfea:	e7a3      	b.n	800df34 <__mdiff+0x34>
 800dfec:	f856 8b04 	ldr.w	r8, [r6], #4
 800dff0:	fa11 f288 	uxtah	r2, r1, r8
 800dff4:	1414      	asrs	r4, r2, #16
 800dff6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dffa:	b292      	uxth	r2, r2
 800dffc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e000:	f84e 2b04 	str.w	r2, [lr], #4
 800e004:	1421      	asrs	r1, r4, #16
 800e006:	e7e0      	b.n	800dfca <__mdiff+0xca>
 800e008:	3f01      	subs	r7, #1
 800e00a:	e7ea      	b.n	800dfe2 <__mdiff+0xe2>
 800e00c:	08010337 	.word	0x08010337
 800e010:	08010348 	.word	0x08010348

0800e014 <__d2b>:
 800e014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e018:	4689      	mov	r9, r1
 800e01a:	2101      	movs	r1, #1
 800e01c:	ec57 6b10 	vmov	r6, r7, d0
 800e020:	4690      	mov	r8, r2
 800e022:	f7ff fccf 	bl	800d9c4 <_Balloc>
 800e026:	4604      	mov	r4, r0
 800e028:	b930      	cbnz	r0, 800e038 <__d2b+0x24>
 800e02a:	4602      	mov	r2, r0
 800e02c:	4b25      	ldr	r3, [pc, #148]	; (800e0c4 <__d2b+0xb0>)
 800e02e:	4826      	ldr	r0, [pc, #152]	; (800e0c8 <__d2b+0xb4>)
 800e030:	f240 310a 	movw	r1, #778	; 0x30a
 800e034:	f7fe fcb8 	bl	800c9a8 <__assert_func>
 800e038:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e03c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e040:	bb35      	cbnz	r5, 800e090 <__d2b+0x7c>
 800e042:	2e00      	cmp	r6, #0
 800e044:	9301      	str	r3, [sp, #4]
 800e046:	d028      	beq.n	800e09a <__d2b+0x86>
 800e048:	4668      	mov	r0, sp
 800e04a:	9600      	str	r6, [sp, #0]
 800e04c:	f7ff fd82 	bl	800db54 <__lo0bits>
 800e050:	9900      	ldr	r1, [sp, #0]
 800e052:	b300      	cbz	r0, 800e096 <__d2b+0x82>
 800e054:	9a01      	ldr	r2, [sp, #4]
 800e056:	f1c0 0320 	rsb	r3, r0, #32
 800e05a:	fa02 f303 	lsl.w	r3, r2, r3
 800e05e:	430b      	orrs	r3, r1
 800e060:	40c2      	lsrs	r2, r0
 800e062:	6163      	str	r3, [r4, #20]
 800e064:	9201      	str	r2, [sp, #4]
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	61a3      	str	r3, [r4, #24]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	bf14      	ite	ne
 800e06e:	2202      	movne	r2, #2
 800e070:	2201      	moveq	r2, #1
 800e072:	6122      	str	r2, [r4, #16]
 800e074:	b1d5      	cbz	r5, 800e0ac <__d2b+0x98>
 800e076:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e07a:	4405      	add	r5, r0
 800e07c:	f8c9 5000 	str.w	r5, [r9]
 800e080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e084:	f8c8 0000 	str.w	r0, [r8]
 800e088:	4620      	mov	r0, r4
 800e08a:	b003      	add	sp, #12
 800e08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e094:	e7d5      	b.n	800e042 <__d2b+0x2e>
 800e096:	6161      	str	r1, [r4, #20]
 800e098:	e7e5      	b.n	800e066 <__d2b+0x52>
 800e09a:	a801      	add	r0, sp, #4
 800e09c:	f7ff fd5a 	bl	800db54 <__lo0bits>
 800e0a0:	9b01      	ldr	r3, [sp, #4]
 800e0a2:	6163      	str	r3, [r4, #20]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	6122      	str	r2, [r4, #16]
 800e0a8:	3020      	adds	r0, #32
 800e0aa:	e7e3      	b.n	800e074 <__d2b+0x60>
 800e0ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0b4:	f8c9 0000 	str.w	r0, [r9]
 800e0b8:	6918      	ldr	r0, [r3, #16]
 800e0ba:	f7ff fd2b 	bl	800db14 <__hi0bits>
 800e0be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0c2:	e7df      	b.n	800e084 <__d2b+0x70>
 800e0c4:	08010337 	.word	0x08010337
 800e0c8:	08010348 	.word	0x08010348

0800e0cc <_free_r>:
 800e0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ce:	2900      	cmp	r1, #0
 800e0d0:	d044      	beq.n	800e15c <_free_r+0x90>
 800e0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d6:	9001      	str	r0, [sp, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f1a1 0404 	sub.w	r4, r1, #4
 800e0de:	bfb8      	it	lt
 800e0e0:	18e4      	addlt	r4, r4, r3
 800e0e2:	f7ff fc63 	bl	800d9ac <__malloc_lock>
 800e0e6:	4a1e      	ldr	r2, [pc, #120]	; (800e160 <_free_r+0x94>)
 800e0e8:	9801      	ldr	r0, [sp, #4]
 800e0ea:	6813      	ldr	r3, [r2, #0]
 800e0ec:	b933      	cbnz	r3, 800e0fc <_free_r+0x30>
 800e0ee:	6063      	str	r3, [r4, #4]
 800e0f0:	6014      	str	r4, [r2, #0]
 800e0f2:	b003      	add	sp, #12
 800e0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0f8:	f7ff bc5e 	b.w	800d9b8 <__malloc_unlock>
 800e0fc:	42a3      	cmp	r3, r4
 800e0fe:	d908      	bls.n	800e112 <_free_r+0x46>
 800e100:	6825      	ldr	r5, [r4, #0]
 800e102:	1961      	adds	r1, r4, r5
 800e104:	428b      	cmp	r3, r1
 800e106:	bf01      	itttt	eq
 800e108:	6819      	ldreq	r1, [r3, #0]
 800e10a:	685b      	ldreq	r3, [r3, #4]
 800e10c:	1949      	addeq	r1, r1, r5
 800e10e:	6021      	streq	r1, [r4, #0]
 800e110:	e7ed      	b.n	800e0ee <_free_r+0x22>
 800e112:	461a      	mov	r2, r3
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	b10b      	cbz	r3, 800e11c <_free_r+0x50>
 800e118:	42a3      	cmp	r3, r4
 800e11a:	d9fa      	bls.n	800e112 <_free_r+0x46>
 800e11c:	6811      	ldr	r1, [r2, #0]
 800e11e:	1855      	adds	r5, r2, r1
 800e120:	42a5      	cmp	r5, r4
 800e122:	d10b      	bne.n	800e13c <_free_r+0x70>
 800e124:	6824      	ldr	r4, [r4, #0]
 800e126:	4421      	add	r1, r4
 800e128:	1854      	adds	r4, r2, r1
 800e12a:	42a3      	cmp	r3, r4
 800e12c:	6011      	str	r1, [r2, #0]
 800e12e:	d1e0      	bne.n	800e0f2 <_free_r+0x26>
 800e130:	681c      	ldr	r4, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	6053      	str	r3, [r2, #4]
 800e136:	4421      	add	r1, r4
 800e138:	6011      	str	r1, [r2, #0]
 800e13a:	e7da      	b.n	800e0f2 <_free_r+0x26>
 800e13c:	d902      	bls.n	800e144 <_free_r+0x78>
 800e13e:	230c      	movs	r3, #12
 800e140:	6003      	str	r3, [r0, #0]
 800e142:	e7d6      	b.n	800e0f2 <_free_r+0x26>
 800e144:	6825      	ldr	r5, [r4, #0]
 800e146:	1961      	adds	r1, r4, r5
 800e148:	428b      	cmp	r3, r1
 800e14a:	bf04      	itt	eq
 800e14c:	6819      	ldreq	r1, [r3, #0]
 800e14e:	685b      	ldreq	r3, [r3, #4]
 800e150:	6063      	str	r3, [r4, #4]
 800e152:	bf04      	itt	eq
 800e154:	1949      	addeq	r1, r1, r5
 800e156:	6021      	streq	r1, [r4, #0]
 800e158:	6054      	str	r4, [r2, #4]
 800e15a:	e7ca      	b.n	800e0f2 <_free_r+0x26>
 800e15c:	b003      	add	sp, #12
 800e15e:	bd30      	pop	{r4, r5, pc}
 800e160:	20008ef8 	.word	0x20008ef8

0800e164 <__sfputc_r>:
 800e164:	6893      	ldr	r3, [r2, #8]
 800e166:	3b01      	subs	r3, #1
 800e168:	2b00      	cmp	r3, #0
 800e16a:	b410      	push	{r4}
 800e16c:	6093      	str	r3, [r2, #8]
 800e16e:	da08      	bge.n	800e182 <__sfputc_r+0x1e>
 800e170:	6994      	ldr	r4, [r2, #24]
 800e172:	42a3      	cmp	r3, r4
 800e174:	db01      	blt.n	800e17a <__sfputc_r+0x16>
 800e176:	290a      	cmp	r1, #10
 800e178:	d103      	bne.n	800e182 <__sfputc_r+0x1e>
 800e17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e17e:	f7fe bb41 	b.w	800c804 <__swbuf_r>
 800e182:	6813      	ldr	r3, [r2, #0]
 800e184:	1c58      	adds	r0, r3, #1
 800e186:	6010      	str	r0, [r2, #0]
 800e188:	7019      	strb	r1, [r3, #0]
 800e18a:	4608      	mov	r0, r1
 800e18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <__sfputs_r>:
 800e192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e194:	4606      	mov	r6, r0
 800e196:	460f      	mov	r7, r1
 800e198:	4614      	mov	r4, r2
 800e19a:	18d5      	adds	r5, r2, r3
 800e19c:	42ac      	cmp	r4, r5
 800e19e:	d101      	bne.n	800e1a4 <__sfputs_r+0x12>
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	e007      	b.n	800e1b4 <__sfputs_r+0x22>
 800e1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1a8:	463a      	mov	r2, r7
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f7ff ffda 	bl	800e164 <__sfputc_r>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	d1f3      	bne.n	800e19c <__sfputs_r+0xa>
 800e1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1b8 <_vfiprintf_r>:
 800e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	460d      	mov	r5, r1
 800e1be:	b09d      	sub	sp, #116	; 0x74
 800e1c0:	4614      	mov	r4, r2
 800e1c2:	4698      	mov	r8, r3
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	b118      	cbz	r0, 800e1d0 <_vfiprintf_r+0x18>
 800e1c8:	6983      	ldr	r3, [r0, #24]
 800e1ca:	b90b      	cbnz	r3, 800e1d0 <_vfiprintf_r+0x18>
 800e1cc:	f7fd fb24 	bl	800b818 <__sinit>
 800e1d0:	4b89      	ldr	r3, [pc, #548]	; (800e3f8 <_vfiprintf_r+0x240>)
 800e1d2:	429d      	cmp	r5, r3
 800e1d4:	d11b      	bne.n	800e20e <_vfiprintf_r+0x56>
 800e1d6:	6875      	ldr	r5, [r6, #4]
 800e1d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1da:	07d9      	lsls	r1, r3, #31
 800e1dc:	d405      	bmi.n	800e1ea <_vfiprintf_r+0x32>
 800e1de:	89ab      	ldrh	r3, [r5, #12]
 800e1e0:	059a      	lsls	r2, r3, #22
 800e1e2:	d402      	bmi.n	800e1ea <_vfiprintf_r+0x32>
 800e1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1e6:	f7fd fbda 	bl	800b99e <__retarget_lock_acquire_recursive>
 800e1ea:	89ab      	ldrh	r3, [r5, #12]
 800e1ec:	071b      	lsls	r3, r3, #28
 800e1ee:	d501      	bpl.n	800e1f4 <_vfiprintf_r+0x3c>
 800e1f0:	692b      	ldr	r3, [r5, #16]
 800e1f2:	b9eb      	cbnz	r3, 800e230 <_vfiprintf_r+0x78>
 800e1f4:	4629      	mov	r1, r5
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f7fe fb68 	bl	800c8cc <__swsetup_r>
 800e1fc:	b1c0      	cbz	r0, 800e230 <_vfiprintf_r+0x78>
 800e1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e200:	07dc      	lsls	r4, r3, #31
 800e202:	d50e      	bpl.n	800e222 <_vfiprintf_r+0x6a>
 800e204:	f04f 30ff 	mov.w	r0, #4294967295
 800e208:	b01d      	add	sp, #116	; 0x74
 800e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20e:	4b7b      	ldr	r3, [pc, #492]	; (800e3fc <_vfiprintf_r+0x244>)
 800e210:	429d      	cmp	r5, r3
 800e212:	d101      	bne.n	800e218 <_vfiprintf_r+0x60>
 800e214:	68b5      	ldr	r5, [r6, #8]
 800e216:	e7df      	b.n	800e1d8 <_vfiprintf_r+0x20>
 800e218:	4b79      	ldr	r3, [pc, #484]	; (800e400 <_vfiprintf_r+0x248>)
 800e21a:	429d      	cmp	r5, r3
 800e21c:	bf08      	it	eq
 800e21e:	68f5      	ldreq	r5, [r6, #12]
 800e220:	e7da      	b.n	800e1d8 <_vfiprintf_r+0x20>
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	0598      	lsls	r0, r3, #22
 800e226:	d4ed      	bmi.n	800e204 <_vfiprintf_r+0x4c>
 800e228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e22a:	f7fd fbb9 	bl	800b9a0 <__retarget_lock_release_recursive>
 800e22e:	e7e9      	b.n	800e204 <_vfiprintf_r+0x4c>
 800e230:	2300      	movs	r3, #0
 800e232:	9309      	str	r3, [sp, #36]	; 0x24
 800e234:	2320      	movs	r3, #32
 800e236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e23a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e23e:	2330      	movs	r3, #48	; 0x30
 800e240:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e404 <_vfiprintf_r+0x24c>
 800e244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e248:	f04f 0901 	mov.w	r9, #1
 800e24c:	4623      	mov	r3, r4
 800e24e:	469a      	mov	sl, r3
 800e250:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e254:	b10a      	cbz	r2, 800e25a <_vfiprintf_r+0xa2>
 800e256:	2a25      	cmp	r2, #37	; 0x25
 800e258:	d1f9      	bne.n	800e24e <_vfiprintf_r+0x96>
 800e25a:	ebba 0b04 	subs.w	fp, sl, r4
 800e25e:	d00b      	beq.n	800e278 <_vfiprintf_r+0xc0>
 800e260:	465b      	mov	r3, fp
 800e262:	4622      	mov	r2, r4
 800e264:	4629      	mov	r1, r5
 800e266:	4630      	mov	r0, r6
 800e268:	f7ff ff93 	bl	800e192 <__sfputs_r>
 800e26c:	3001      	adds	r0, #1
 800e26e:	f000 80aa 	beq.w	800e3c6 <_vfiprintf_r+0x20e>
 800e272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e274:	445a      	add	r2, fp
 800e276:	9209      	str	r2, [sp, #36]	; 0x24
 800e278:	f89a 3000 	ldrb.w	r3, [sl]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 80a2 	beq.w	800e3c6 <_vfiprintf_r+0x20e>
 800e282:	2300      	movs	r3, #0
 800e284:	f04f 32ff 	mov.w	r2, #4294967295
 800e288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e28c:	f10a 0a01 	add.w	sl, sl, #1
 800e290:	9304      	str	r3, [sp, #16]
 800e292:	9307      	str	r3, [sp, #28]
 800e294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e298:	931a      	str	r3, [sp, #104]	; 0x68
 800e29a:	4654      	mov	r4, sl
 800e29c:	2205      	movs	r2, #5
 800e29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a2:	4858      	ldr	r0, [pc, #352]	; (800e404 <_vfiprintf_r+0x24c>)
 800e2a4:	f7f1 ffbc 	bl	8000220 <memchr>
 800e2a8:	9a04      	ldr	r2, [sp, #16]
 800e2aa:	b9d8      	cbnz	r0, 800e2e4 <_vfiprintf_r+0x12c>
 800e2ac:	06d1      	lsls	r1, r2, #27
 800e2ae:	bf44      	itt	mi
 800e2b0:	2320      	movmi	r3, #32
 800e2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b6:	0713      	lsls	r3, r2, #28
 800e2b8:	bf44      	itt	mi
 800e2ba:	232b      	movmi	r3, #43	; 0x2b
 800e2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e2c6:	d015      	beq.n	800e2f4 <_vfiprintf_r+0x13c>
 800e2c8:	9a07      	ldr	r2, [sp, #28]
 800e2ca:	4654      	mov	r4, sl
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	f04f 0c0a 	mov.w	ip, #10
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2d8:	3b30      	subs	r3, #48	; 0x30
 800e2da:	2b09      	cmp	r3, #9
 800e2dc:	d94e      	bls.n	800e37c <_vfiprintf_r+0x1c4>
 800e2de:	b1b0      	cbz	r0, 800e30e <_vfiprintf_r+0x156>
 800e2e0:	9207      	str	r2, [sp, #28]
 800e2e2:	e014      	b.n	800e30e <_vfiprintf_r+0x156>
 800e2e4:	eba0 0308 	sub.w	r3, r0, r8
 800e2e8:	fa09 f303 	lsl.w	r3, r9, r3
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	9304      	str	r3, [sp, #16]
 800e2f0:	46a2      	mov	sl, r4
 800e2f2:	e7d2      	b.n	800e29a <_vfiprintf_r+0xe2>
 800e2f4:	9b03      	ldr	r3, [sp, #12]
 800e2f6:	1d19      	adds	r1, r3, #4
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	9103      	str	r1, [sp, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	bfbb      	ittet	lt
 800e300:	425b      	neglt	r3, r3
 800e302:	f042 0202 	orrlt.w	r2, r2, #2
 800e306:	9307      	strge	r3, [sp, #28]
 800e308:	9307      	strlt	r3, [sp, #28]
 800e30a:	bfb8      	it	lt
 800e30c:	9204      	strlt	r2, [sp, #16]
 800e30e:	7823      	ldrb	r3, [r4, #0]
 800e310:	2b2e      	cmp	r3, #46	; 0x2e
 800e312:	d10c      	bne.n	800e32e <_vfiprintf_r+0x176>
 800e314:	7863      	ldrb	r3, [r4, #1]
 800e316:	2b2a      	cmp	r3, #42	; 0x2a
 800e318:	d135      	bne.n	800e386 <_vfiprintf_r+0x1ce>
 800e31a:	9b03      	ldr	r3, [sp, #12]
 800e31c:	1d1a      	adds	r2, r3, #4
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	9203      	str	r2, [sp, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	bfb8      	it	lt
 800e326:	f04f 33ff 	movlt.w	r3, #4294967295
 800e32a:	3402      	adds	r4, #2
 800e32c:	9305      	str	r3, [sp, #20]
 800e32e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e414 <_vfiprintf_r+0x25c>
 800e332:	7821      	ldrb	r1, [r4, #0]
 800e334:	2203      	movs	r2, #3
 800e336:	4650      	mov	r0, sl
 800e338:	f7f1 ff72 	bl	8000220 <memchr>
 800e33c:	b140      	cbz	r0, 800e350 <_vfiprintf_r+0x198>
 800e33e:	2340      	movs	r3, #64	; 0x40
 800e340:	eba0 000a 	sub.w	r0, r0, sl
 800e344:	fa03 f000 	lsl.w	r0, r3, r0
 800e348:	9b04      	ldr	r3, [sp, #16]
 800e34a:	4303      	orrs	r3, r0
 800e34c:	3401      	adds	r4, #1
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e354:	482c      	ldr	r0, [pc, #176]	; (800e408 <_vfiprintf_r+0x250>)
 800e356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e35a:	2206      	movs	r2, #6
 800e35c:	f7f1 ff60 	bl	8000220 <memchr>
 800e360:	2800      	cmp	r0, #0
 800e362:	d03f      	beq.n	800e3e4 <_vfiprintf_r+0x22c>
 800e364:	4b29      	ldr	r3, [pc, #164]	; (800e40c <_vfiprintf_r+0x254>)
 800e366:	bb1b      	cbnz	r3, 800e3b0 <_vfiprintf_r+0x1f8>
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	3307      	adds	r3, #7
 800e36c:	f023 0307 	bic.w	r3, r3, #7
 800e370:	3308      	adds	r3, #8
 800e372:	9303      	str	r3, [sp, #12]
 800e374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e376:	443b      	add	r3, r7
 800e378:	9309      	str	r3, [sp, #36]	; 0x24
 800e37a:	e767      	b.n	800e24c <_vfiprintf_r+0x94>
 800e37c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e380:	460c      	mov	r4, r1
 800e382:	2001      	movs	r0, #1
 800e384:	e7a5      	b.n	800e2d2 <_vfiprintf_r+0x11a>
 800e386:	2300      	movs	r3, #0
 800e388:	3401      	adds	r4, #1
 800e38a:	9305      	str	r3, [sp, #20]
 800e38c:	4619      	mov	r1, r3
 800e38e:	f04f 0c0a 	mov.w	ip, #10
 800e392:	4620      	mov	r0, r4
 800e394:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e398:	3a30      	subs	r2, #48	; 0x30
 800e39a:	2a09      	cmp	r2, #9
 800e39c:	d903      	bls.n	800e3a6 <_vfiprintf_r+0x1ee>
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d0c5      	beq.n	800e32e <_vfiprintf_r+0x176>
 800e3a2:	9105      	str	r1, [sp, #20]
 800e3a4:	e7c3      	b.n	800e32e <_vfiprintf_r+0x176>
 800e3a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e7f0      	b.n	800e392 <_vfiprintf_r+0x1da>
 800e3b0:	ab03      	add	r3, sp, #12
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	462a      	mov	r2, r5
 800e3b6:	4b16      	ldr	r3, [pc, #88]	; (800e410 <_vfiprintf_r+0x258>)
 800e3b8:	a904      	add	r1, sp, #16
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f7fd fc52 	bl	800bc64 <_printf_float>
 800e3c0:	4607      	mov	r7, r0
 800e3c2:	1c78      	adds	r0, r7, #1
 800e3c4:	d1d6      	bne.n	800e374 <_vfiprintf_r+0x1bc>
 800e3c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3c8:	07d9      	lsls	r1, r3, #31
 800e3ca:	d405      	bmi.n	800e3d8 <_vfiprintf_r+0x220>
 800e3cc:	89ab      	ldrh	r3, [r5, #12]
 800e3ce:	059a      	lsls	r2, r3, #22
 800e3d0:	d402      	bmi.n	800e3d8 <_vfiprintf_r+0x220>
 800e3d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3d4:	f7fd fae4 	bl	800b9a0 <__retarget_lock_release_recursive>
 800e3d8:	89ab      	ldrh	r3, [r5, #12]
 800e3da:	065b      	lsls	r3, r3, #25
 800e3dc:	f53f af12 	bmi.w	800e204 <_vfiprintf_r+0x4c>
 800e3e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3e2:	e711      	b.n	800e208 <_vfiprintf_r+0x50>
 800e3e4:	ab03      	add	r3, sp, #12
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	462a      	mov	r2, r5
 800e3ea:	4b09      	ldr	r3, [pc, #36]	; (800e410 <_vfiprintf_r+0x258>)
 800e3ec:	a904      	add	r1, sp, #16
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f7fd fedc 	bl	800c1ac <_printf_i>
 800e3f4:	e7e4      	b.n	800e3c0 <_vfiprintf_r+0x208>
 800e3f6:	bf00      	nop
 800e3f8:	080100a8 	.word	0x080100a8
 800e3fc:	080100c8 	.word	0x080100c8
 800e400:	08010088 	.word	0x08010088
 800e404:	080104a4 	.word	0x080104a4
 800e408:	080104ae 	.word	0x080104ae
 800e40c:	0800bc65 	.word	0x0800bc65
 800e410:	0800e193 	.word	0x0800e193
 800e414:	080104aa 	.word	0x080104aa

0800e418 <_read_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4d07      	ldr	r5, [pc, #28]	; (800e438 <_read_r+0x20>)
 800e41c:	4604      	mov	r4, r0
 800e41e:	4608      	mov	r0, r1
 800e420:	4611      	mov	r1, r2
 800e422:	2200      	movs	r2, #0
 800e424:	602a      	str	r2, [r5, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	f000 f8c6 	bl	800e5b8 <_read>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_read_r+0x1e>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_read_r+0x1e>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	20008f00 	.word	0x20008f00

0800e43c <abort>:
 800e43c:	b508      	push	{r3, lr}
 800e43e:	2006      	movs	r0, #6
 800e440:	f000 f860 	bl	800e504 <raise>
 800e444:	2001      	movs	r0, #1
 800e446:	f000 f8d5 	bl	800e5f4 <_exit>
	...

0800e44c <_fstat_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	4d07      	ldr	r5, [pc, #28]	; (800e46c <_fstat_r+0x20>)
 800e450:	2300      	movs	r3, #0
 800e452:	4604      	mov	r4, r0
 800e454:	4608      	mov	r0, r1
 800e456:	4611      	mov	r1, r2
 800e458:	602b      	str	r3, [r5, #0]
 800e45a:	f000 f885 	bl	800e568 <_fstat>
 800e45e:	1c43      	adds	r3, r0, #1
 800e460:	d102      	bne.n	800e468 <_fstat_r+0x1c>
 800e462:	682b      	ldr	r3, [r5, #0]
 800e464:	b103      	cbz	r3, 800e468 <_fstat_r+0x1c>
 800e466:	6023      	str	r3, [r4, #0]
 800e468:	bd38      	pop	{r3, r4, r5, pc}
 800e46a:	bf00      	nop
 800e46c:	20008f00 	.word	0x20008f00

0800e470 <_isatty_r>:
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	4d06      	ldr	r5, [pc, #24]	; (800e48c <_isatty_r+0x1c>)
 800e474:	2300      	movs	r3, #0
 800e476:	4604      	mov	r4, r0
 800e478:	4608      	mov	r0, r1
 800e47a:	602b      	str	r3, [r5, #0]
 800e47c:	f000 f884 	bl	800e588 <_isatty>
 800e480:	1c43      	adds	r3, r0, #1
 800e482:	d102      	bne.n	800e48a <_isatty_r+0x1a>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	b103      	cbz	r3, 800e48a <_isatty_r+0x1a>
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	bd38      	pop	{r3, r4, r5, pc}
 800e48c:	20008f00 	.word	0x20008f00

0800e490 <__ascii_mbtowc>:
 800e490:	b082      	sub	sp, #8
 800e492:	b901      	cbnz	r1, 800e496 <__ascii_mbtowc+0x6>
 800e494:	a901      	add	r1, sp, #4
 800e496:	b142      	cbz	r2, 800e4aa <__ascii_mbtowc+0x1a>
 800e498:	b14b      	cbz	r3, 800e4ae <__ascii_mbtowc+0x1e>
 800e49a:	7813      	ldrb	r3, [r2, #0]
 800e49c:	600b      	str	r3, [r1, #0]
 800e49e:	7812      	ldrb	r2, [r2, #0]
 800e4a0:	1e10      	subs	r0, r2, #0
 800e4a2:	bf18      	it	ne
 800e4a4:	2001      	movne	r0, #1
 800e4a6:	b002      	add	sp, #8
 800e4a8:	4770      	bx	lr
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	e7fb      	b.n	800e4a6 <__ascii_mbtowc+0x16>
 800e4ae:	f06f 0001 	mvn.w	r0, #1
 800e4b2:	e7f8      	b.n	800e4a6 <__ascii_mbtowc+0x16>

0800e4b4 <_raise_r>:
 800e4b4:	291f      	cmp	r1, #31
 800e4b6:	b538      	push	{r3, r4, r5, lr}
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	460d      	mov	r5, r1
 800e4bc:	d904      	bls.n	800e4c8 <_raise_r+0x14>
 800e4be:	2316      	movs	r3, #22
 800e4c0:	6003      	str	r3, [r0, #0]
 800e4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c6:	bd38      	pop	{r3, r4, r5, pc}
 800e4c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4ca:	b112      	cbz	r2, 800e4d2 <_raise_r+0x1e>
 800e4cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4d0:	b94b      	cbnz	r3, 800e4e6 <_raise_r+0x32>
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f000 f830 	bl	800e538 <_getpid_r>
 800e4d8:	462a      	mov	r2, r5
 800e4da:	4601      	mov	r1, r0
 800e4dc:	4620      	mov	r0, r4
 800e4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4e2:	f000 b817 	b.w	800e514 <_kill_r>
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d00a      	beq.n	800e500 <_raise_r+0x4c>
 800e4ea:	1c59      	adds	r1, r3, #1
 800e4ec:	d103      	bne.n	800e4f6 <_raise_r+0x42>
 800e4ee:	2316      	movs	r3, #22
 800e4f0:	6003      	str	r3, [r0, #0]
 800e4f2:	2001      	movs	r0, #1
 800e4f4:	e7e7      	b.n	800e4c6 <_raise_r+0x12>
 800e4f6:	2400      	movs	r4, #0
 800e4f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	4798      	blx	r3
 800e500:	2000      	movs	r0, #0
 800e502:	e7e0      	b.n	800e4c6 <_raise_r+0x12>

0800e504 <raise>:
 800e504:	4b02      	ldr	r3, [pc, #8]	; (800e510 <raise+0xc>)
 800e506:	4601      	mov	r1, r0
 800e508:	6818      	ldr	r0, [r3, #0]
 800e50a:	f7ff bfd3 	b.w	800e4b4 <_raise_r>
 800e50e:	bf00      	nop
 800e510:	20000078 	.word	0x20000078

0800e514 <_kill_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	4d07      	ldr	r5, [pc, #28]	; (800e534 <_kill_r+0x20>)
 800e518:	2300      	movs	r3, #0
 800e51a:	4604      	mov	r4, r0
 800e51c:	4608      	mov	r0, r1
 800e51e:	4611      	mov	r1, r2
 800e520:	602b      	str	r3, [r5, #0]
 800e522:	f000 f839 	bl	800e598 <_kill>
 800e526:	1c43      	adds	r3, r0, #1
 800e528:	d102      	bne.n	800e530 <_kill_r+0x1c>
 800e52a:	682b      	ldr	r3, [r5, #0]
 800e52c:	b103      	cbz	r3, 800e530 <_kill_r+0x1c>
 800e52e:	6023      	str	r3, [r4, #0]
 800e530:	bd38      	pop	{r3, r4, r5, pc}
 800e532:	bf00      	nop
 800e534:	20008f00 	.word	0x20008f00

0800e538 <_getpid_r>:
 800e538:	f000 b81e 	b.w	800e578 <_getpid>

0800e53c <__ascii_wctomb>:
 800e53c:	b149      	cbz	r1, 800e552 <__ascii_wctomb+0x16>
 800e53e:	2aff      	cmp	r2, #255	; 0xff
 800e540:	bf85      	ittet	hi
 800e542:	238a      	movhi	r3, #138	; 0x8a
 800e544:	6003      	strhi	r3, [r0, #0]
 800e546:	700a      	strbls	r2, [r1, #0]
 800e548:	f04f 30ff 	movhi.w	r0, #4294967295
 800e54c:	bf98      	it	ls
 800e54e:	2001      	movls	r0, #1
 800e550:	4770      	bx	lr
 800e552:	4608      	mov	r0, r1
 800e554:	4770      	bx	lr
	...

0800e558 <_close>:
 800e558:	4b02      	ldr	r3, [pc, #8]	; (800e564 <_close+0xc>)
 800e55a:	2258      	movs	r2, #88	; 0x58
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	f04f 30ff 	mov.w	r0, #4294967295
 800e562:	4770      	bx	lr
 800e564:	20008f00 	.word	0x20008f00

0800e568 <_fstat>:
 800e568:	4b02      	ldr	r3, [pc, #8]	; (800e574 <_fstat+0xc>)
 800e56a:	2258      	movs	r2, #88	; 0x58
 800e56c:	601a      	str	r2, [r3, #0]
 800e56e:	f04f 30ff 	mov.w	r0, #4294967295
 800e572:	4770      	bx	lr
 800e574:	20008f00 	.word	0x20008f00

0800e578 <_getpid>:
 800e578:	4b02      	ldr	r3, [pc, #8]	; (800e584 <_getpid+0xc>)
 800e57a:	2258      	movs	r2, #88	; 0x58
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	f04f 30ff 	mov.w	r0, #4294967295
 800e582:	4770      	bx	lr
 800e584:	20008f00 	.word	0x20008f00

0800e588 <_isatty>:
 800e588:	4b02      	ldr	r3, [pc, #8]	; (800e594 <_isatty+0xc>)
 800e58a:	2258      	movs	r2, #88	; 0x58
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	2000      	movs	r0, #0
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	20008f00 	.word	0x20008f00

0800e598 <_kill>:
 800e598:	4b02      	ldr	r3, [pc, #8]	; (800e5a4 <_kill+0xc>)
 800e59a:	2258      	movs	r2, #88	; 0x58
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a2:	4770      	bx	lr
 800e5a4:	20008f00 	.word	0x20008f00

0800e5a8 <_lseek>:
 800e5a8:	4b02      	ldr	r3, [pc, #8]	; (800e5b4 <_lseek+0xc>)
 800e5aa:	2258      	movs	r2, #88	; 0x58
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b2:	4770      	bx	lr
 800e5b4:	20008f00 	.word	0x20008f00

0800e5b8 <_read>:
 800e5b8:	4b02      	ldr	r3, [pc, #8]	; (800e5c4 <_read+0xc>)
 800e5ba:	2258      	movs	r2, #88	; 0x58
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c2:	4770      	bx	lr
 800e5c4:	20008f00 	.word	0x20008f00

0800e5c8 <_sbrk>:
 800e5c8:	4a04      	ldr	r2, [pc, #16]	; (800e5dc <_sbrk+0x14>)
 800e5ca:	6811      	ldr	r1, [r2, #0]
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	b909      	cbnz	r1, 800e5d4 <_sbrk+0xc>
 800e5d0:	4903      	ldr	r1, [pc, #12]	; (800e5e0 <_sbrk+0x18>)
 800e5d2:	6011      	str	r1, [r2, #0]
 800e5d4:	6810      	ldr	r0, [r2, #0]
 800e5d6:	4403      	add	r3, r0
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	4770      	bx	lr
 800e5dc:	20008f04 	.word	0x20008f04
 800e5e0:	20008f08 	.word	0x20008f08

0800e5e4 <_write>:
 800e5e4:	4b02      	ldr	r3, [pc, #8]	; (800e5f0 <_write+0xc>)
 800e5e6:	2258      	movs	r2, #88	; 0x58
 800e5e8:	601a      	str	r2, [r3, #0]
 800e5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ee:	4770      	bx	lr
 800e5f0:	20008f00 	.word	0x20008f00

0800e5f4 <_exit>:
 800e5f4:	e7fe      	b.n	800e5f4 <_exit>
	...

0800e5f8 <_init>:
 800e5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fa:	bf00      	nop
 800e5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5fe:	bc08      	pop	{r3}
 800e600:	469e      	mov	lr, r3
 800e602:	4770      	bx	lr

0800e604 <_fini>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	bf00      	nop
 800e608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e60a:	bc08      	pop	{r3}
 800e60c:	469e      	mov	lr, r3
 800e60e:	4770      	bx	lr
