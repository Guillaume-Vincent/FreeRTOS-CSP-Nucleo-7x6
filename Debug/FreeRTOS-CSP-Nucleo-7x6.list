
FreeRTOS-CSP-Nucleo-7x6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001460c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f90  080147e0  080147e0  000247e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016770  08016770  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08016770  08016770  00026770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016778  08016778  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016778  08016778  00026778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801677c  0801677c  0002677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08016780  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a714  20000350  08016ad0  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000aa64  08016ad0  0003aa64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032e3a  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007eb0  00000000  00000000  000631ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002548  00000000  00000000  0006b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002298  00000000  00000000  0006d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c926  00000000  00000000  0006f850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034284  00000000  00000000  0007c176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001085a4  00000000  00000000  000b03fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b899e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac08  00000000  00000000  001b89f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c35f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c36c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000350 	.word	0x20000350
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080147c4 	.word	0x080147c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000354 	.word	0x20000354
 800020c:	080147c4 	.word	0x080147c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <csp_conf_get_defaults+0x60>)
 8000efe:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <csp_conf_get_defaults+0x64>)
 8000f04:	609a      	str	r2, [r3, #8]
	conf->revision = "revision";
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <csp_conf_get_defaults+0x68>)
 8000f0a:	60da      	str	r2, [r3, #12]
	conf->conn_max = 6;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2206      	movs	r2, #6
 8000f10:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 6;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2206      	movs	r2, #6
 8000f16:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2219      	movs	r2, #25
 8000f1c:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2218      	movs	r2, #24
 8000f22:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2214      	movs	r2, #20
 8000f28:	751a      	strb	r2, [r3, #20]
	conf->buffers = 6;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2206      	movs	r2, #6
 8000f2e:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f36:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	080147e0 	.word	0x080147e0
 8000f50:	080147ec 	.word	0x080147ec
 8000f54:	080147f4 	.word	0x080147f4

08000f58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09c      	sub	sp, #112	; 0x70
 8000f5c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f5e:	f000 fd74 	bl	8001a4a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f62:	f000 f8d3 	bl	800110c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f66:	f000 f9c9 	bl	80012fc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000f6a:	f000 f997 	bl	800129c <MX_USART3_UART_Init>
	MX_CAN1_Init();
 8000f6e:	f000 f935 	bl	80011dc <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8000f72:	f00b fd73 	bl	800ca5c <MX_USB_DEVICE_Init>

	uint8_t address = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	csp_debug_level_t debug_level = CSP_INFO;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000f88:	e013      	b.n	8000fb2 <main+0x5a>
		csp_debug_set_level(i, (i <= debug_level) ? true : false);
 8000f8a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f8e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000f92:	429a      	cmp	r2, r3
 8000f94:	bf94      	ite	ls
 8000f96:	2301      	movls	r3, #1
 8000f98:	2300      	movhi	r3, #0
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f00d fb04 	bl	800e5b0 <csp_debug_set_level>
	for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 8000fa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fac:	3301      	adds	r3, #1
 8000fae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000fb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d9e7      	bls.n	8000f8a <main+0x32>
	}
	csp_log_info("Initialising CSP");
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <main+0x160>)
 8000fbc:	789b      	ldrb	r3, [r3, #2]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <main+0x72>
 8000fc2:	493e      	ldr	r1, [pc, #248]	; (80010bc <main+0x164>)
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f00d fa89 	bl	800e4dc <do_csp_debug>
	csp_conf_t csp_conf;
	csp_conf_get_defaults(&csp_conf);
 8000fca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff8c 	bl	8000eec <csp_conf_get_defaults>
	csp_conf.address = address;
 8000fd4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000fd8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	int error = csp_init(&csp_conf);
 8000fdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00d fb93 	bl	800e70c <csp_init>
 8000fe6:	66b8      	str	r0, [r7, #104]	; 0x68
	if (error != CSP_ERR_NONE) {
 8000fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <main+0xae>
		csp_log_error("csp_init() failed, error: %d", error);
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <main+0x160>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <main+0xa8>
 8000ff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000ff8:	4931      	ldr	r1, [pc, #196]	; (80010c0 <main+0x168>)
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f00d fa6e 	bl	800e4dc <do_csp_debug>
		exit(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f010 fa9d 	bl	8011540 <exit>
	}
	/* Start router task with 1000 bytes of stack (priority is only supported on FreeRTOS) */
	csp_route_start_task(1000, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100c:	f00e f886 	bl	800f11c <csp_route_start_task>

	/* Add interface(s) */
	csp_iface_t CSP_IF_CAN = {
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2240      	movs	r2, #64	; 0x40
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f010 fbf1 	bl	8011800 <memset>
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <main+0x16c>)
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <main+0x170>)
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <main+0x174>)
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	833b      	strh	r3, [r7, #24]
			.driver_data = &hcan1,
	    .nexthop = csp_can_tx,
	    .mtu = 64,
	};

	csp_iface_t *can_iface = &CSP_IF_CAN;
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	607b      	str	r3, [r7, #4]

	error = csp_can_stm32_open_and_add_interface(CSP_IF_CAN.name, &can_iface);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1d3a      	adds	r2, r7, #4
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f00e f940 	bl	800f2c0 <csp_can_stm32_open_and_add_interface>
 8001040:	66b8      	str	r0, [r7, #104]	; 0x68

	if (can_iface) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <main+0xfe>
		csp_rtable_set(CSP_DEFAULT_ROUTE, 0, can_iface, CSP_NO_VIA_ADDRESS);
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	23ff      	movs	r3, #255	; 0xff
 800104c:	2100      	movs	r1, #0
 800104e:	2020      	movs	r0, #32
 8001050:	f00e fab8 	bl	800f5c4 <csp_rtable_set>
 8001054:	e003      	b.n	800105e <main+0x106>
	} else {
		server_address = address;
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <main+0x178>)
 8001058:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800105c:	7013      	strb	r3, [r2, #0]
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800105e:	f008 fa35 	bl	80094cc <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of USB_Message_Queue */
	USB_Message_QueueHandle = osMessageQueueNew (6, sizeof(char*), &USB_Message_Queue_attributes);
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <main+0x17c>)
 8001064:	2104      	movs	r1, #4
 8001066:	2006      	movs	r0, #6
 8001068:	f008 fb6e 	bl	8009748 <osMessageQueueNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <main+0x180>)
 8001070:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of USB_Send */
	USB_SendHandle = osThreadNew(Start_USB_Send, NULL, &USB_Send_attributes);
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <main+0x184>)
 8001074:	2100      	movs	r1, #0
 8001076:	481a      	ldr	r0, [pc, #104]	; (80010e0 <main+0x188>)
 8001078:	f008 fa92 	bl	80095a0 <osThreadNew>
 800107c:	4603      	mov	r3, r0
 800107e:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <main+0x18c>)
 8001080:	6013      	str	r3, [r2, #0]

	/* creation of CAN_Send_Ping */
	CAN_Send_PingHandle = osThreadNew(Start_CAN_Send_Ping, NULL, &CAN_Send_Ping_attributes);
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <main+0x190>)
 8001084:	2100      	movs	r1, #0
 8001086:	4819      	ldr	r0, [pc, #100]	; (80010ec <main+0x194>)
 8001088:	f008 fa8a 	bl	80095a0 <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <main+0x198>)
 8001090:	6013      	str	r3, [r2, #0]

	/* creation of Blink */
	BlinkHandle = osThreadNew(Start_Blink, NULL, &Blink_attributes);
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <main+0x19c>)
 8001094:	2100      	movs	r1, #0
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <main+0x1a0>)
 8001098:	f008 fa82 	bl	80095a0 <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <main+0x1a4>)
 80010a0:	6013      	str	r3, [r2, #0]

	/* creation of USB_Receive */
	USB_ReceiveHandle = osThreadNew(Start_USB_Receive, NULL, &USB_Receive_attributes);
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <main+0x1a8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <main+0x1ac>)
 80010a8:	f008 fa7a 	bl	80095a0 <osThreadNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <main+0x1b0>)
 80010b0:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80010b2:	f008 fa3f 	bl	8009534 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010b6:	e7fe      	b.n	80010b6 <main+0x15e>
 80010b8:	2000011c 	.word	0x2000011c
 80010bc:	08014844 	.word	0x08014844
 80010c0:	08014858 	.word	0x08014858
 80010c4:	08014878 	.word	0x08014878
 80010c8:	2000036c 	.word	0x2000036c
 80010cc:	0800f351 	.word	0x0800f351
 80010d0:	20000000 	.word	0x20000000
 80010d4:	080162fc 	.word	0x080162fc
 80010d8:	2000042c 	.word	0x2000042c
 80010dc:	0801626c 	.word	0x0801626c
 80010e0:	080014c9 	.word	0x080014c9
 80010e4:	2000041c 	.word	0x2000041c
 80010e8:	08016290 	.word	0x08016290
 80010ec:	08001545 	.word	0x08001545
 80010f0:	20000420 	.word	0x20000420
 80010f4:	080162b4 	.word	0x080162b4
 80010f8:	080015b5 	.word	0x080015b5
 80010fc:	20000424 	.word	0x20000424
 8001100:	080162d8 	.word	0x080162d8
 8001104:	0800162d 	.word	0x0800162d
 8001108:	20000428 	.word	0x20000428

0800110c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	; 0x50
 8001110:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	; 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f010 fb70 	bl	8011800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001130:	f002 fd5e 	bl	8003bf0 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <SystemClock_Config+0xc8>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <SystemClock_Config+0xc8>)
 800113a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <SystemClock_Config+0xc8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <SystemClock_Config+0xcc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <SystemClock_Config+0xcc>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <SystemClock_Config+0xcc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800116c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001172:	2302      	movs	r3, #2
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001176:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001180:	2348      	movs	r3, #72	; 0x48
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001188:	2303      	movs	r3, #3
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fd3d 	bl	8003c10 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800119c:	f000 fa92 	bl	80016c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2102      	movs	r1, #2
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 ffcb 	bl	8004158 <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80011c8:	f000 fa7c 	bl	80016c4 <Error_Handler>
	}
}
 80011cc:	bf00      	nop
 80011ce:	3750      	adds	r7, #80	; 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <MX_CAN1_Init+0xb4>)
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <MX_CAN1_Init+0xb8>)
 80011e4:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 4;
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <MX_CAN1_Init+0xb4>)
 80011e8:	2204      	movs	r2, #4
 80011ea:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_CAN1_Init+0xb4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <MX_CAN1_Init+0xb4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_CAN1_Init+0xb4>)
 80011fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011fe:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_CAN1_Init+0xb4>)
 8001202:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001206:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_CAN1_Init+0xb4>)
 800120a:	2200      	movs	r2, #0
 800120c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_CAN1_Init+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_CAN1_Init+0xb4>)
 8001216:	2200      	movs	r2, #0
 8001218:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_CAN1_Init+0xb4>)
 800121c:	2200      	movs	r2, #0
 800121e:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_CAN1_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_CAN1_Init+0xb4>)
 8001228:	2200      	movs	r2, #0
 800122a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800122c:	4818      	ldr	r0, [pc, #96]	; (8001290 <MX_CAN1_Init+0xb4>)
 800122e:	f000 fc5d 	bl	8001aec <HAL_CAN_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 8001238:	f000 fa44 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	canfil.FilterBank = 0;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_CAN1_Init+0xbc>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_CAN1_Init+0xbc>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_CAN1_Init+0xbc>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0;
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_CAN1_Init+0xbc>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_CAN1_Init+0xbc>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_CAN1_Init+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <MX_CAN1_Init+0xbc>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_CAN1_Init+0xbc>)
 8001268:	2201      	movs	r2, #1
 800126a:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = ENABLE;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <MX_CAN1_Init+0xbc>)
 800126e:	2201      	movs	r2, #1
 8001270:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 14;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_CAN1_Init+0xbc>)
 8001274:	220e      	movs	r2, #14
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1,&canfil) != HAL_OK) //Initialize CAN Filter
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <MX_CAN1_Init+0xbc>)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_CAN1_Init+0xb4>)
 800127c:	f000 fd32 	bl	8001ce4 <HAL_CAN_ConfigFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_CAN1_Init+0xae>
		Error_Handler();
 8001286:	f000 fa1d 	bl	80016c4 <Error_Handler>

	/* USER CODE END CAN1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000036c 	.word	0x2000036c
 8001294:	40006400 	.word	0x40006400
 8001298:	20000494 	.word	0x20000494

0800129c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <MX_USART3_UART_Init+0x5c>)
 80012a4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART3_UART_Init+0x58>)
 80012e0:	f004 f862 	bl	80053a8 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 80012ea:	f000 f9eb 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000394 	.word	0x20000394
 80012f8:	40004800 	.word	0x40004800

080012fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a67      	ldr	r2, [pc, #412]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a61      	ldr	r2, [pc, #388]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a49      	ldr	r2, [pc, #292]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <MX_GPIO_Init+0x1b8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80013a8:	4843      	ldr	r0, [pc, #268]	; (80014b8 <MX_GPIO_Init+0x1bc>)
 80013aa:	f001 f935 	bl	8002618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	4842      	ldr	r0, [pc, #264]	; (80014bc <MX_GPIO_Init+0x1c0>)
 80013b4:	f001 f930 	bl	8002618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	483c      	ldr	r0, [pc, #240]	; (80014c0 <MX_GPIO_Init+0x1c4>)
 80013d0:	f000 ff5e 	bl	8002290 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013d4:	2332      	movs	r3, #50	; 0x32
 80013d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4834      	ldr	r0, [pc, #208]	; (80014c0 <MX_GPIO_Init+0x1c4>)
 80013f0:	f000 ff4e 	bl	8002290 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013f4:	2386      	movs	r3, #134	; 0x86
 80013f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001404:	230b      	movs	r3, #11
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <MX_GPIO_Init+0x1c8>)
 8001410:	f000 ff3e 	bl	8002290 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001414:	f244 0381 	movw	r3, #16513	; 0x4081
 8001418:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4822      	ldr	r0, [pc, #136]	; (80014b8 <MX_GPIO_Init+0x1bc>)
 800142e:	f000 ff2f 	bl	8002290 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001444:	230b      	movs	r3, #11
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	481a      	ldr	r0, [pc, #104]	; (80014b8 <MX_GPIO_Init+0x1bc>)
 8001450:	f000 ff1e 	bl	8002290 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001454:	2340      	movs	r3, #64	; 0x40
 8001456:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_GPIO_Init+0x1c0>)
 800146c:	f000 ff10 	bl	8002290 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <MX_GPIO_Init+0x1c0>)
 8001484:	f000 ff04 	bl	8002290 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001488:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800148c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149a:	230b      	movs	r3, #11
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0x1c0>)
 80014a6:	f000 fef3 	bl	8002290 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020000 	.word	0x40020000

080014c8 <Start_USB_Send>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_USB_Send */
void Start_USB_Send(void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0c4      	sub	sp, #272	; 0x110
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014d6:	6018      	str	r0, [r3, #0]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80014d8:	f00b fac0 	bl	800ca5c <MX_USB_DEVICE_Init>
	uint8_t USB_OutputBuffer[255];
	int USB_OutBufLen;
	char *message;
	/* Infinite loop */
	while (1) {
		if (osMessageQueueGet(USB_Message_QueueHandle, &message, NULL, 1000) == osOK) {
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <Start_USB_Send+0x74>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f107 0108 	add.w	r1, r7, #8
 80014e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e8:	2200      	movs	r2, #0
 80014ea:	f008 fa27 	bl	800993c <osMessageQueueGet>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11f      	bne.n	8001534 <Start_USB_Send+0x6c>
			USB_OutBufLen = sprintf((char*) &USB_OutputBuffer, "[%lu] %s\r\n", HAL_GetTick(), message);
 80014f4:	f000 faca 	bl	8001a8c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f107 000c 	add.w	r0, r7, #12
 8001508:	490d      	ldr	r1, [pc, #52]	; (8001540 <Start_USB_Send+0x78>)
 800150a:	f011 f855 	bl	80125b8 <siprintf>
 800150e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
			CDC_Transmit_FS(USB_OutputBuffer, USB_OutBufLen);
 8001512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001516:	b29a      	uxth	r2, r3
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f00b fb84 	bl	800cc2c <CDC_Transmit_FS>
			free(message);
 8001524:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f010 f940 	bl	80117b4 <free>
		}
		osDelay(1);
 8001534:	2001      	movs	r0, #1
 8001536:	f008 f8d9 	bl	80096ec <osDelay>
		if (osMessageQueueGet(USB_Message_QueueHandle, &message, NULL, 1000) == osOK) {
 800153a:	e7cf      	b.n	80014dc <Start_USB_Send+0x14>
 800153c:	2000042c 	.word	0x2000042c
 8001540:	08014884 	.word	0x08014884

08001544 <Start_CAN_Send_Ping>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CAN_Send_Ping */
void Start_CAN_Send_Ping(void *argument)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_CAN_Send_Ping */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800154c:	4815      	ldr	r0, [pc, #84]	; (80015a4 <Start_CAN_Send_Ping+0x60>)
 800154e:	f000 fca9 	bl	8001ea4 <HAL_CAN_Start>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <Start_CAN_Send_Ping+0x18>
		Error_Handler();
 8001558:	f000 f8b4 	bl	80016c4 <Error_Handler>
	}
	/* Infinite loop */
	while (1) {

		uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <Start_CAN_Send_Ping+0x64>)
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001566:	e883 0003 	stmia.w	r3, {r0, r1}
		//HAL_CAN_AddTxMessage(&hcan1,&txHeader,csend,&canMailbox);

		if (csp_ping(server_address, 1000, 50, CSP_SO_NONE) == -1) {
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <Start_CAN_Send_Ping+0x68>)
 800156c:	7818      	ldrb	r0, [r3, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	2232      	movs	r2, #50	; 0x32
 8001572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001576:	f00d fdfd 	bl	800f174 <csp_ping>
 800157a:	4603      	mov	r3, r0
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d106      	bne.n	8001590 <Start_CAN_Send_Ping+0x4c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <Start_CAN_Send_Ping+0x6c>)
 800158a:	f001 f845 	bl	8002618 <HAL_GPIO_WritePin>
 800158e:	e005      	b.n	800159c <Start_CAN_Send_Ping+0x58>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <Start_CAN_Send_Ping+0x6c>)
 8001598:	f001 f83e 	bl	8002618 <HAL_GPIO_WritePin>
		}

		osDelay(200);
 800159c:	20c8      	movs	r0, #200	; 0xc8
 800159e:	f008 f8a5 	bl	80096ec <osDelay>
	while (1) {
 80015a2:	e7db      	b.n	800155c <Start_CAN_Send_Ping+0x18>
 80015a4:	2000036c 	.word	0x2000036c
 80015a8:	08014890 	.word	0x08014890
 80015ac:	20000000 	.word	0x20000000
 80015b0:	40020400 	.word	0x40020400

080015b4 <Start_Blink>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Blink */
void Start_Blink(void *argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Blink */
	char* message;
	/* Infinite loop */
	while (1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <Start_Blink+0x68>)
 80015c0:	f001 f843 	bl	800264a <HAL_GPIO_TogglePin>
		message = (char*) malloc(16 * sizeof(char));
 80015c4:	2010      	movs	r0, #16
 80015c6:	f010 f8ed 	bl	80117a4 <malloc>
 80015ca:	4603      	mov	r3, r0
 80015cc:	60fb      	str	r3, [r7, #12]
		if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)) {
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4812      	ldr	r0, [pc, #72]	; (800161c <Start_Blink+0x68>)
 80015d2:	f001 f809 	bl	80025e8 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <Start_Blink+0x34>
			sprintf(message, "LED ON");
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4910      	ldr	r1, [pc, #64]	; (8001620 <Start_Blink+0x6c>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f010 ffe9 	bl	80125b8 <siprintf>
 80015e6:	e004      	b.n	80015f2 <Start_Blink+0x3e>
		}
		else {
			sprintf(message, "LED OFF");
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <Start_Blink+0x70>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f010 ffe3 	bl	80125b8 <siprintf>
		}

		if (osMessageQueuePut(USB_Message_QueueHandle, (const void*) &message, 0, 0) != osOK) {
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <Start_Blink+0x74>)
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	f107 010c 	add.w	r1, r7, #12
 80015fa:	2300      	movs	r3, #0
 80015fc:	2200      	movs	r2, #0
 80015fe:	f008 f929 	bl	8009854 <osMessageQueuePut>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <Start_Blink+0x5c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001608:	2101      	movs	r1, #1
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <Start_Blink+0x68>)
 800160c:	f001 f81d 	bl	800264a <HAL_GPIO_TogglePin>
		}

		osDelay(1000);
 8001610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001614:	f008 f86a 	bl	80096ec <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001618:	e7d0      	b.n	80015bc <Start_Blink+0x8>
 800161a:	bf00      	nop
 800161c:	40020400 	.word	0x40020400
 8001620:	08014898 	.word	0x08014898
 8001624:	080148a0 	.word	0x080148a0
 8001628:	2000042c 	.word	0x2000042c

0800162c <Start_USB_Receive>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_USB_Receive */
void Start_USB_Receive(void *argument)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_USB_Receive */
	char* message;
	/* Infinite loop */
	while (1)
	{
		if (!memcmp((char*)USB_InputBuffer, "CMD_", strlen("CMD_"))) {
 8001634:	2204      	movs	r2, #4
 8001636:	4915      	ldr	r1, [pc, #84]	; (800168c <Start_USB_Receive+0x60>)
 8001638:	4815      	ldr	r0, [pc, #84]	; (8001690 <Start_USB_Receive+0x64>)
 800163a:	f010 f8c3 	bl	80117c4 <memcmp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d11e      	bne.n	8001682 <Start_USB_Receive+0x56>
			message = (char*) malloc(128 * sizeof(char));
 8001644:	2080      	movs	r0, #128	; 0x80
 8001646:	f010 f8ad 	bl	80117a4 <malloc>
 800164a:	4603      	mov	r3, r0
 800164c:	60fb      	str	r3, [r7, #12]
			sprintf(message, "Command Received : %s", USB_InputBuffer);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <Start_USB_Receive+0x64>)
 8001652:	4910      	ldr	r1, [pc, #64]	; (8001694 <Start_USB_Receive+0x68>)
 8001654:	4618      	mov	r0, r3
 8001656:	f010 ffaf 	bl	80125b8 <siprintf>

			if (osMessageQueuePut(USB_Message_QueueHandle, (const void*) &message, 0, 0) != osOK) {
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <Start_USB_Receive+0x6c>)
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	f107 010c 	add.w	r1, r7, #12
 8001662:	2300      	movs	r3, #0
 8001664:	2200      	movs	r2, #0
 8001666:	f008 f8f5 	bl	8009854 <osMessageQueuePut>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <Start_USB_Receive+0x4c>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001670:	2101      	movs	r1, #1
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <Start_USB_Receive+0x70>)
 8001674:	f000 ffe9 	bl	800264a <HAL_GPIO_TogglePin>
			}

			memset(USB_InputBuffer, '\0', 100);
 8001678:	2264      	movs	r2, #100	; 0x64
 800167a:	2100      	movs	r1, #0
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <Start_USB_Receive+0x64>)
 800167e:	f010 f8bf 	bl	8011800 <memset>
		}

		osDelay(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f008 f832 	bl	80096ec <osDelay>
		if (!memcmp((char*)USB_InputBuffer, "CMD_", strlen("CMD_"))) {
 8001688:	e7d4      	b.n	8001634 <Start_USB_Receive+0x8>
 800168a:	bf00      	nop
 800168c:	080148a8 	.word	0x080148a8
 8001690:	20000430 	.word	0x20000430
 8001694:	080148b0 	.word	0x080148b0
 8001698:	2000042c 	.word	0x2000042c
 800169c:	40020400 	.word	0x40020400

080016a0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80016b2:	f000 f9d7 	bl	8001a64 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40001000 	.word	0x40001000

080016c4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_MspInit+0x4c>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_MspInit+0x4c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_MspInit+0x4c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	210f      	movs	r1, #15
 800170a:	f06f 0001 	mvn.w	r0, #1
 800170e:	f000 fd95 	bl	800223c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_CAN_MspInit+0xa0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d139      	bne.n	80017b6 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_CAN_MspInit+0xa4>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <HAL_CAN_MspInit+0xa4>)
 8001748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_CAN_MspInit+0xa4>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_CAN_MspInit+0xa4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_CAN_MspInit+0xa4>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_CAN_MspInit+0xa4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177c:	2301      	movs	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001784:	2309      	movs	r3, #9
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <HAL_CAN_MspInit+0xa8>)
 8001790:	f000 fd7e 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017a6:	2309      	movs	r3, #9
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_CAN_MspInit+0xa8>)
 80017b2:	f000 fd6d 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40006400 	.word	0x40006400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020400 	.word	0x40020400

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0aa      	sub	sp, #168	; 0xa8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2284      	movs	r2, #132	; 0x84
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f010 f807 	bl	8011800 <memset>
  if(huart->Instance==USART3)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a22      	ldr	r2, [pc, #136]	; (8001880 <HAL_UART_MspInit+0xb4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d13c      	bne.n	8001876 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001800:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001802:	2300      	movs	r3, #0
 8001804:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fefc 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001816:	f7ff ff55 	bl	80016c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_UART_MspInit+0xb8>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_UART_MspInit+0xb8>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_UART_MspInit+0xb8>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_UART_MspInit+0xb8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_UART_MspInit+0xb8>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_UART_MspInit+0xb8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800184a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001864:	2307      	movs	r3, #7
 8001866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_UART_MspInit+0xbc>)
 8001872:	f000 fd0d 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	37a8      	adds	r7, #168	; 0xa8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40004800 	.word	0x40004800
 8001884:	40023800 	.word	0x40023800
 8001888:	40020c00 	.word	0x40020c00

0800188c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08e      	sub	sp, #56	; 0x38
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_InitTick+0xe0>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_InitTick+0xe0>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_InitTick+0xe0>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018b4:	f107 0210 	add.w	r2, r7, #16
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fe70 	bl	80045a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d103      	bne.n	80018d6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ce:	f002 fe41 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80018d2:	6378      	str	r0, [r7, #52]	; 0x34
 80018d4:	e004      	b.n	80018e0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018d6:	f002 fe3d 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80018da:	4603      	mov	r3, r0
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_InitTick+0xe4>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	0c9b      	lsrs	r3, r3, #18
 80018ea:	3b01      	subs	r3, #1
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_InitTick+0xe8>)
 80018f0:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_InitTick+0xec>)
 80018f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <HAL_InitTick+0xe8>)
 80018f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_InitTick+0xe8>)
 80018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001900:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_InitTick+0xe8>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_InitTick+0xe8>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_InitTick+0xe8>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001914:	4817      	ldr	r0, [pc, #92]	; (8001974 <HAL_InitTick+0xe8>)
 8001916:	f003 fa67 	bl	8004de8 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001924:	2b00      	cmp	r3, #0
 8001926:	d11b      	bne.n	8001960 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001928:	4812      	ldr	r0, [pc, #72]	; (8001974 <HAL_InitTick+0xe8>)
 800192a:	f003 fabf 	bl	8004eac <HAL_TIM_Base_Start_IT>
 800192e:	4603      	mov	r3, r0
 8001930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001934:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001938:	2b00      	cmp	r3, #0
 800193a:	d111      	bne.n	8001960 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800193c:	2036      	movs	r0, #54	; 0x36
 800193e:	f000 fc99 	bl	8002274 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d808      	bhi.n	800195a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	2036      	movs	r0, #54	; 0x36
 800194e:	f000 fc75 	bl	800223c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_InitTick+0xf0>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e002      	b.n	8001960 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001964:	4618      	mov	r0, r3
 8001966:	3738      	adds	r7, #56	; 0x38
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	431bde83 	.word	0x431bde83
 8001974:	200004bc 	.word	0x200004bc
 8001978:	40001000 	.word	0x40001000
 800197c:	20000008 	.word	0x20000008

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM6_DAC_IRQHandler+0x10>)
 80019b2:	f003 faf3 	bl	8004f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200004bc 	.word	0x200004bc

080019c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <OTG_FS_IRQHandler+0x10>)
 80019c6:	f000 ffa0 	bl	800290a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000a4f4 	.word	0x2000a4f4

080019d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019fe:	490e      	ldr	r1, [pc, #56]	; (8001a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a14:	4c0b      	ldr	r4, [pc, #44]	; (8001a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a22:	f7ff ffd7 	bl	80019d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f00f fe95 	bl	8011754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7ff fa95 	bl	8000f58 <main>
  bx  lr    
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001a3c:	08016780 	.word	0x08016780
  ldr r2, =_sbss
 8001a40:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001a44:	2000aa64 	.word	0x2000aa64

08001a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC_IRQHandler>

08001a4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4e:	2003      	movs	r0, #3
 8001a50:	f000 fbe9 	bl	8002226 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a54:	200f      	movs	r0, #15
 8001a56:	f7ff ff19 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5a:	f7ff fe39 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	20000508 	.word	0x20000508

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000508 	.word	0x20000508

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000000c 	.word	0x2000000c

08001aec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0ed      	b.n	8001cda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fe08 	bl	8001720 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b20:	f7ff ffb4 	bl	8001a8c <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b26:	e012      	b.n	8001b4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b28:	f7ff ffb0 	bl	8001a8c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b0a      	cmp	r3, #10
 8001b34:	d90b      	bls.n	8001b4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2205      	movs	r2, #5
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0c5      	b.n	8001cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0e5      	beq.n	8001b28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0202 	bic.w	r2, r2, #2
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff ff8e 	bl	8001a8c <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b72:	e012      	b.n	8001b9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b74:	f7ff ff8a 	bl	8001a8c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b0a      	cmp	r3, #10
 8001b80:	d90b      	bls.n	8001b9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2205      	movs	r2, #5
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e09f      	b.n	8001cda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e5      	bne.n	8001b74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e1b      	ldrb	r3, [r3, #24]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d108      	bne.n	8001bc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e007      	b.n	8001bd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7e5b      	ldrb	r3, [r3, #25]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d108      	bne.n	8001bec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e007      	b.n	8001bfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e9b      	ldrb	r3, [r3, #26]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e007      	b.n	8001c26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0220 	bic.w	r2, r2, #32
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7edb      	ldrb	r3, [r3, #27]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0210 	bic.w	r2, r2, #16
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0210 	orr.w	r2, r2, #16
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7f1b      	ldrb	r3, [r3, #28]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d108      	bne.n	8001c6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0208 	bic.w	r2, r2, #8
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7f5b      	ldrb	r3, [r3, #29]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d108      	bne.n	8001c94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0204 	orr.w	r2, r2, #4
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e007      	b.n	8001ca4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0204 	bic.w	r2, r2, #4
 8001ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	ea42 0103 	orr.w	r1, r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d003      	beq.n	8001d0a <HAL_CAN_ConfigFilter+0x26>
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	f040 80be 	bne.w	8001e86 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001d0c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d123      	bne.n	8001db4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3248      	adds	r2, #72	; 0x48
 8001d94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001da8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001daa:	6979      	ldr	r1, [r7, #20]
 8001dac:	3348      	adds	r3, #72	; 0x48
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d122      	bne.n	8001e02 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ddc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3248      	adds	r2, #72	; 0x48
 8001de2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001df6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	3348      	adds	r3, #72	; 0x48
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	401a      	ands	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e48:	e007      	b.n	8001e5a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d107      	bne.n	8001e72 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e78:	f023 0201 	bic.w	r2, r3, #1
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e006      	b.n	8001e94 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
  }
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40006400 	.word	0x40006400

08001ea4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d12e      	bne.n	8001f16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff fddc 	bl	8001a8c <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ed6:	e012      	b.n	8001efe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ed8:	f7ff fdd8 	bl	8001a8c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b0a      	cmp	r3, #10
 8001ee4:	d90b      	bls.n	8001efe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e012      	b.n	8001f24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e5      	bne.n	8001ed8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e006      	b.n	8001f24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
  }
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d003      	beq.n	8001f58 <HAL_CAN_AddTxMessage+0x2c>
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	f040 80ad 	bne.w	80020b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8095 	beq.w	80020a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	0e1b      	lsrs	r3, r3, #24
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f82:	2201      	movs	r2, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10d      	bne.n	8001fb0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	6809      	ldr	r1, [r1, #0]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	440b      	add	r3, r1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e00f      	b.n	8001fd0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001fc4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3318      	adds	r3, #24
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	440b      	add	r3, r1
 8001fce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3318      	adds	r3, #24
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	440b      	add	r3, r1
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	7d1b      	ldrb	r3, [r3, #20]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d111      	bne.n	8002010 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	6811      	ldr	r1, [r2, #0]
 8002000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3318      	adds	r3, #24
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	440b      	add	r3, r1
 800200c:	3304      	adds	r3, #4
 800200e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3307      	adds	r3, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	061a      	lsls	r2, r3, #24
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	4313      	orrs	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	3204      	adds	r2, #4
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	4610      	mov	r0, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6811      	ldr	r1, [r2, #0]
 8002038:	ea43 0200 	orr.w	r2, r3, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	440b      	add	r3, r1
 8002042:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002046:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3303      	adds	r3, #3
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	061a      	lsls	r2, r3, #24
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3302      	adds	r3, #2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3301      	adds	r3, #1
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	4313      	orrs	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	4610      	mov	r0, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6811      	ldr	r1, [r2, #0]
 800206e:	ea43 0200 	orr.w	r2, r3, r0
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	440b      	add	r3, r1
 8002078:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800207c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3318      	adds	r3, #24
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	4413      	add	r3, r2
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6811      	ldr	r1, [r2, #0]
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3318      	adds	r3, #24
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	440b      	add	r3, r1
 800209c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e00e      	b.n	80020c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e006      	b.n	80020c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3724      	adds	r7, #36	; 0x24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <__NVIC_SetPriorityGrouping+0x40>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x40>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00
 8002110:	05fa0000 	.word	0x05fa0000

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	db0b      	blt.n	800215a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4907      	ldr	r1, [pc, #28]	; (8002168 <__NVIC_EnableIRQ+0x38>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2001      	movs	r0, #1
 8002152:	fa00 f202 	lsl.w	r2, r0, r2
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db0a      	blt.n	8002196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	490c      	ldr	r1, [pc, #48]	; (80021b8 <__NVIC_SetPriority+0x4c>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	440b      	add	r3, r1
 8002190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002194:	e00a      	b.n	80021ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4908      	ldr	r1, [pc, #32]	; (80021bc <__NVIC_SetPriority+0x50>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3b04      	subs	r3, #4
 80021a4:	0112      	lsls	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	761a      	strb	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f1c3 0307 	rsb	r3, r3, #7
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf28      	it	cs
 80021de:	2304      	movcs	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d902      	bls.n	80021f0 <NVIC_EncodePriority+0x30>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3b03      	subs	r3, #3
 80021ee:	e000      	b.n	80021f2 <NVIC_EncodePriority+0x32>
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43d9      	mvns	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	4313      	orrs	r3, r2
         );
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ff4c 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800224e:	f7ff ff61 	bl	8002114 <__NVIC_GetPriorityGrouping>
 8002252:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	6978      	ldr	r0, [r7, #20]
 800225a:	f7ff ffb1 	bl	80021c0 <NVIC_EncodePriority>
 800225e:	4602      	mov	r2, r0
 8002260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff80 	bl	800216c <__NVIC_SetPriority>
}
 800226c:	bf00      	nop
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff54 	bl	8002130 <__NVIC_EnableIRQ>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e175      	b.n	800259c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 8164 	bne.w	8002596 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d005      	beq.n	80022e6 <HAL_GPIO_Init+0x56>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d130      	bne.n	8002348 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 0201 	and.w	r2, r3, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b03      	cmp	r3, #3
 8002352:	d017      	beq.n	8002384 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d123      	bne.n	80023d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0203 	and.w	r2, r3, #3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80be 	beq.w	8002596 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <HAL_GPIO_Init+0x324>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_GPIO_Init+0x324>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002432:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <HAL_GPIO_Init+0x328>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_GPIO_Init+0x32c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d037      	beq.n	80024ce <HAL_GPIO_Init+0x23e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_GPIO_Init+0x330>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d031      	beq.n	80024ca <HAL_GPIO_Init+0x23a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a56      	ldr	r2, [pc, #344]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d02b      	beq.n	80024c6 <HAL_GPIO_Init+0x236>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a55      	ldr	r2, [pc, #340]	; (80025c8 <HAL_GPIO_Init+0x338>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d025      	beq.n	80024c2 <HAL_GPIO_Init+0x232>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a54      	ldr	r2, [pc, #336]	; (80025cc <HAL_GPIO_Init+0x33c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01f      	beq.n	80024be <HAL_GPIO_Init+0x22e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a53      	ldr	r2, [pc, #332]	; (80025d0 <HAL_GPIO_Init+0x340>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d019      	beq.n	80024ba <HAL_GPIO_Init+0x22a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_GPIO_Init+0x344>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <HAL_GPIO_Init+0x348>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_GPIO_Init+0x34c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x350>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x21a>
 80024a6:	2309      	movs	r3, #9
 80024a8:	e012      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024aa:	230a      	movs	r3, #10
 80024ac:	e010      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024ae:	2308      	movs	r3, #8
 80024b0:	e00e      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00c      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024b6:	2306      	movs	r3, #6
 80024b8:	e00a      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024ba:	2305      	movs	r3, #5
 80024bc:	e008      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024be:	2304      	movs	r3, #4
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024c2:	2303      	movs	r3, #3
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x240>
 80024ce:	2300      	movs	r3, #0
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024e0:	4935      	ldr	r1, [pc, #212]	; (80025b8 <HAL_GPIO_Init+0x328>)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_GPIO_Init+0x354>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002512:	4a34      	ldr	r2, [pc, #208]	; (80025e4 <HAL_GPIO_Init+0x354>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_GPIO_Init+0x354>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800253c:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <HAL_GPIO_Init+0x354>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_GPIO_Init+0x354>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002566:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <HAL_GPIO_Init+0x354>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_GPIO_Init+0x354>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <HAL_GPIO_Init+0x354>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	f67f ae86 	bls.w	80022b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40021400 	.word	0x40021400
 80025d4:	40021800 	.word	0x40021800
 80025d8:	40021c00 	.word	0x40021c00
 80025dc:	40022000 	.word	0x40022000
 80025e0:	40022400 	.word	0x40022400
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43d9      	mvns	r1, r3
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	400b      	ands	r3, r1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800267e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002680:	b08f      	sub	sp, #60	; 0x3c
 8002682:	af0a      	add	r7, sp, #40	; 0x28
 8002684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e116      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f00a fc18 	bl	800cee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fbc7 	bl	8005e62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	687e      	ldr	r6, [r7, #4]
 80026dc:	466d      	mov	r5, sp
 80026de:	f106 0410 	add.w	r4, r6, #16
 80026e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f2:	1d33      	adds	r3, r6, #4
 80026f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f003 faa8 	bl	8005c4c <USB_CoreInit>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0d7      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fbb5 	bl	8005e84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e04a      	b.n	80027b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	333d      	adds	r3, #61	; 0x3d
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	333c      	adds	r3, #60	; 0x3c
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	b298      	uxth	r0, r3
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3344      	adds	r3, #68	; 0x44
 800275c:	4602      	mov	r2, r0
 800275e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3340      	adds	r3, #64	; 0x40
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3348      	adds	r3, #72	; 0x48
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	; 0x4c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3354      	adds	r3, #84	; 0x54
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3af      	bcc.n	8002720 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e044      	b.n	8002850 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	3301      	adds	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3b5      	bcc.n	80027c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	687e      	ldr	r6, [r7, #4]
 8002862:	466d      	mov	r5, sp
 8002864:	f106 0410 	add.w	r4, r6, #16
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002874:	e885 0003 	stmia.w	r5, {r0, r1}
 8002878:	1d33      	adds	r3, r6, #4
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	6838      	ldr	r0, [r7, #0]
 800287e:	f003 fb4d 	bl	8005f1c <USB_DevInit>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e014      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f001 f97b 	bl	8003ba8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 fc9b 	bl	80071f2 <USB_DevDisconnect>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_PCD_Start+0x16>
 80028d8:	2302      	movs	r3, #2
 80028da:	e012      	b.n	8002902 <HAL_PCD_Start+0x3c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 faa9 	bl	8005e40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fc5c 	bl	80071b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800290a:	b590      	push	{r4, r7, lr}
 800290c:	b08d      	sub	sp, #52	; 0x34
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fd1a 	bl	800735a <USB_GetMode>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 84b7 	bne.w	800329c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fc7e 	bl	8007234 <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 84ad 	beq.w	800329a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f004 fc6b 	bl	8007234 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d107      	bne.n	8002978 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f002 0202 	and.w	r2, r2, #2
 8002976:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fc59 	bl	8007234 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b10      	cmp	r3, #16
 800298a:	d161      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0210 	bic.w	r2, r2, #16
 800299a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	0c5b      	lsrs	r3, r3, #17
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d124      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d035      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	6a38      	ldr	r0, [r7, #32]
 80029e8:	f004 fa90 	bl	8006f0c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	441a      	add	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6a1a      	ldr	r2, [r3, #32]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0a:	441a      	add	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	e016      	b.n	8002a40 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	0c5b      	lsrs	r3, r3, #17
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d110      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a24:	2208      	movs	r2, #8
 8002a26:	4619      	mov	r1, r3
 8002a28:	6a38      	ldr	r0, [r7, #32]
 8002a2a:	f004 fa6f 	bl	8006f0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a3a:	441a      	add	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0210 	orr.w	r2, r2, #16
 8002a4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fbed 	bl	8007234 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a64:	f040 80a7 	bne.w	8002bb6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 fbf2 	bl	800725a <USB_ReadDevAllOutEpInterrupt>
 8002a76:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a78:	e099      	b.n	8002bae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 808e 	beq.w	8002ba2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fc16 	bl	80072c2 <USB_ReadDevOutEPInterrupt>
 8002a96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fef0 	bl	800389c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 ffc6 	bl	8003a6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af6:	461a      	mov	r2, r3
 8002af8:	2310      	movs	r3, #16
 8002afa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d030      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b80      	cmp	r3, #128	; 0x80
 8002b10:	d109      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b24:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f00a faf9 	bl	800d148 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b62:	461a      	mov	r2, r3
 8002b64:	2302      	movs	r3, #2
 8002b66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2320      	movs	r3, #32
 8002b82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f af62 	bne.w	8002a7a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f004 fb3a 	bl	8007234 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bca:	f040 80db 	bne.w	8002d84 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fb5b 	bl	800728e <USB_ReadDevAllInEpInterrupt>
 8002bd8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bde:	e0cd      	b.n	8002d7c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80c2 	beq.w	8002d70 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 fb81 	bl	80072fe <USB_ReadDevInEPInterrupt>
 8002bfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d057      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	2201      	movs	r2, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69f9      	ldr	r1, [r7, #28]
 8002c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c28:	4013      	ands	r3, r2
 8002c2a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d132      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	334c      	adds	r3, #76	; 0x4c
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	3348      	adds	r3, #72	; 0x48
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4419      	add	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	334c      	adds	r3, #76	; 0x4c
 8002c7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d113      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3354      	adds	r3, #84	; 0x54
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	f004 fb8a 	bl	80073c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f00a f9c3 	bl	800d03e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cea:	461a      	mov	r2, r3
 8002cec:	2310      	movs	r3, #16
 8002cee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d06:	461a      	mov	r2, r3
 8002d08:	2340      	movs	r3, #64	; 0x40
 8002d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d18:	6a38      	ldr	r0, [r7, #32]
 8002d1a:	f003 fa5d 	bl	80061d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	3338      	adds	r3, #56	; 0x38
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3304      	adds	r3, #4
 8002d30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	78db      	ldrb	r3, [r3, #3]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f00a fa10 	bl	800d16c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fd08 	bl	8003780 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f47f af2e 	bne.w	8002be0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 fa53 	bl	8007234 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d98:	d122      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f00a fb8a 	bl	800d4dc <HAL_PCDEx_LPM_Callback>
 8002dc8:	e002      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f00a f9ae 	bl	800d12c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 fa25 	bl	8007234 <USB_ReadInterrupts>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df4:	d112      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f00a f96a 	bl	800d0e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 fa07 	bl	8007234 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e30:	d121      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e40:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e66:	2101      	movs	r1, #1
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f00a fb37 	bl	800d4dc <HAL_PCDEx_LPM_Callback>
 8002e6e:	e002      	b.n	8002e76 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f00a f935 	bl	800d0e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 f9da 	bl	8007234 <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	f040 80b7 	bne.w	8002ffc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 f995 	bl	80061d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb2:	e046      	b.n	8002f42 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed8:	0151      	lsls	r1, r2, #5
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	440a      	add	r2, r1
 8002ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002efa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0c:	0151      	lsls	r1, r2, #5
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	440a      	add	r2, r1
 8002f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2c:	0151      	lsls	r1, r2, #5
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	440a      	add	r2, r1
 8002f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	3301      	adds	r3, #1
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d3b3      	bcc.n	8002eb4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d016      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f78:	f043 030b 	orr.w	r3, r3, #11
 8002f7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8e:	f043 030b 	orr.w	r3, r3, #11
 8002f92:	6453      	str	r3, [r2, #68]	; 0x44
 8002f94:	e015      	b.n	8002fc2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f242 032b 	movw	r3, #8235	; 0x202b
 8002faa:	4313      	orrs	r3, r2
 8002fac:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbc:	f043 030b 	orr.w	r3, r3, #11
 8002fc0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fd4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f004 f9ea 	bl	80073c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f004 f917 	bl	8007234 <USB_ReadInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003010:	d124      	bne.n	800305c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f004 f9ae 	bl	8007378 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 f956 	bl	80062d2 <USB_GetDevSpeed>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681c      	ldr	r4, [r3, #0]
 8003032:	f001 fa83 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8003036:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	4620      	mov	r0, r4
 8003042:	f002 fe5b 	bl	8005cfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f00a f821 	bl	800d08e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800305a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f004 f8e7 	bl	8007234 <USB_ReadInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d10a      	bne.n	8003086 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f009 fffe 	bl	800d072 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f002 0208 	and.w	r2, r2, #8
 8003084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f004 f8d2 	bl	8007234 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d122      	bne.n	80030e0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a6:	2301      	movs	r3, #1
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	e014      	b.n	80030d6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fb27 	bl	800371e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	3301      	adds	r3, #1
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	429a      	cmp	r2, r3
 80030de:	d3e5      	bcc.n	80030ac <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 f8a5 	bl	8007234 <USB_ReadInterrupts>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f4:	d13b      	bne.n	800316e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f6:	2301      	movs	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
 80030fa:	e02b      	b.n	8003154 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3340      	adds	r3, #64	; 0x40
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d115      	bne.n	800314e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003122:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	da12      	bge.n	800314e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333f      	adds	r3, #63	; 0x3f
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fae8 	bl	800371e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	3301      	adds	r3, #1
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	429a      	cmp	r2, r3
 800315c:	d3ce      	bcc.n	80030fc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800316c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f004 f85e 	bl	8007234 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003182:	d155      	bne.n	8003230 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003184:	2301      	movs	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	e045      	b.n	8003216 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d12e      	bne.n	8003210 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da2b      	bge.n	8003210 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80031c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d121      	bne.n	8003210 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320c:	6053      	str	r3, [r2, #4]
            break;
 800320e:	e007      	b.n	8003220 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	3301      	adds	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	429a      	cmp	r2, r3
 800321e:	d3b4      	bcc.n	800318a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800322e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fffd 	bl	8007234 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d10a      	bne.n	800325c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f009 ffa2 	bl	800d190 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800325a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 ffe7 	bl	8007234 <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b04      	cmp	r3, #4
 800326e:	d115      	bne.n	800329c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f009 ff92 	bl	800d1ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	e000      	b.n	800329c <HAL_PCD_IRQHandler+0x992>
      return;
 800329a:	bf00      	nop
    }
  }
}
 800329c:	3734      	adds	r7, #52	; 0x34
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd90      	pop	{r4, r7, pc}

080032a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_PCD_SetAddress+0x1a>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e013      	b.n	80032e4 <HAL_PCD_SetAddress+0x42>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 ff45 	bl	8007164 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	70fb      	strb	r3, [r7, #3]
 80032fe:	460b      	mov	r3, r1
 8003300:	803b      	strh	r3, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800330a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330e:	2b00      	cmp	r3, #0
 8003310:	da0f      	bge.n	8003332 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	3338      	adds	r3, #56	; 0x38
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	705a      	strb	r2, [r3, #1]
 8003330:	e00f      	b.n	8003352 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800335e:	883a      	ldrh	r2, [r7, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	78ba      	ldrb	r2, [r7, #2]
 8003368:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800337c:	78bb      	ldrb	r3, [r7, #2]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d102      	bne.n	8003388 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_PCD_EP_Open+0xaa>
 8003392:	2302      	movs	r3, #2
 8003394:	e00e      	b.n	80033b4 <HAL_PCD_EP_Open+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68f9      	ldr	r1, [r7, #12]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f002 ffb9 	bl	800631c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80033b2:	7afb      	ldrb	r3, [r7, #11]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da0f      	bge.n	80033f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3338      	adds	r3, #56	; 0x38
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	705a      	strb	r2, [r3, #1]
 80033ee:	e00f      	b.n	8003410 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_PCD_EP_Close+0x6e>
 8003426:	2302      	movs	r3, #2
 8003428:	e00e      	b.n	8003448 <HAL_PCD_EP_Close+0x8c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	4618      	mov	r0, r3
 800343a:	f002 fff7 	bl	800642c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	460b      	mov	r3, r1
 800345e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ac:	7afb      	ldrb	r3, [r7, #11]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	6979      	ldr	r1, [r7, #20]
 80034c4:	f003 fade 	bl	8006a84 <USB_EP0StartXfer>
 80034c8:	e008      	b.n	80034dc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	6979      	ldr	r1, [r7, #20]
 80034d8:	f003 f884 	bl	80065e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003508:	681b      	ldr	r3, [r3, #0]
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	460b      	mov	r3, r1
 8003524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	7afb      	ldrb	r3, [r7, #11]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3338      	adds	r3, #56	; 0x38
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2201      	movs	r2, #1
 8003554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003556:	7afb      	ldrb	r3, [r7, #11]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	b2da      	uxtb	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003570:	7afb      	ldrb	r3, [r7, #11]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	6979      	ldr	r1, [r7, #20]
 8003588:	f003 fa7c 	bl	8006a84 <USB_EP0StartXfer>
 800358c:	e008      	b.n	80035a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	6979      	ldr	r1, [r7, #20]
 800359c:	f003 f822 	bl	80065e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d901      	bls.n	80035c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e050      	b.n	800366a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da0f      	bge.n	80035f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	f003 020f 	and.w	r2, r3, #15
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	3338      	adds	r3, #56	; 0x38
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	705a      	strb	r2, [r3, #1]
 80035ee:	e00d      	b.n	800360c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	3304      	adds	r3, #4
 8003604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_PCD_EP_SetStall+0x82>
 8003628:	2302      	movs	r3, #2
 800362a:	e01e      	b.n	800366a <HAL_PCD_EP_SetStall+0xc0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fcbe 	bl	8006fbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	b2d9      	uxtb	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800365a:	461a      	mov	r2, r3
 800365c:	f003 feb0 	bl	80073c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d901      	bls.n	8003690 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e042      	b.n	8003716 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003694:	2b00      	cmp	r3, #0
 8003696:	da0f      	bge.n	80036b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	3338      	adds	r3, #56	; 0x38
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	705a      	strb	r2, [r3, #1]
 80036b6:	e00f      	b.n	80036d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3304      	adds	r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_PCD_EP_ClrStall+0x86>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e00e      	b.n	8003716 <HAL_PCD_EP_ClrStall+0xa4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fcc6 	bl	8007098 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800372a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800372e:	2b00      	cmp	r3, #0
 8003730:	da0c      	bge.n	800374c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3338      	adds	r3, #56	; 0x38
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e00c      	b.n	8003766 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 020f 	and.w	r2, r3, #15
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	3304      	adds	r3, #4
 8003764:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	4618      	mov	r0, r3
 800376e:	f003 fae5 	bl	8006d3c <USB_EPStopXfer>
 8003772:	4603      	mov	r3, r0
 8003774:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003776:	7afb      	ldrb	r3, [r7, #11]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	3338      	adds	r3, #56	; 0x38
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	3304      	adds	r3, #4
 80037a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d901      	bls.n	80037b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e06c      	b.n	8003892 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d902      	bls.n	80037d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	3303      	adds	r3, #3
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037dc:	e02b      	b.n	8003836 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d902      	bls.n	80037fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3303      	adds	r3, #3
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003812:	b2db      	uxtb	r3, r3
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4603      	mov	r3, r0
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	f003 fb39 	bl	8006e90 <USB_WritePacket>

    ep->xfer_buff  += len;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	441a      	add	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	441a      	add	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	b29b      	uxth	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	429a      	cmp	r2, r3
 800384a:	d809      	bhi.n	8003860 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003854:	429a      	cmp	r2, r3
 8003856:	d203      	bcs.n	8003860 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1be      	bne.n	80037de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	429a      	cmp	r2, r3
 800386a:	d811      	bhi.n	8003890 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	2201      	movs	r2, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	43db      	mvns	r3, r3
 8003886:	6939      	ldr	r1, [r7, #16]
 8003888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800388c:	4013      	ands	r3, r2
 800388e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	333c      	adds	r3, #60	; 0x3c
 80038b4:	3304      	adds	r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d17b      	bne.n	80039ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d015      	beq.n	8003908 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4a61      	ldr	r2, [pc, #388]	; (8003a64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	f240 80b9 	bls.w	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80b3 	beq.w	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003904:	6093      	str	r3, [r2, #8]
 8003906:	e0a7      	b.n	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	461a      	mov	r2, r3
 8003920:	2320      	movs	r3, #32
 8003922:	6093      	str	r3, [r2, #8]
 8003924:	e098      	b.n	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 8093 	bne.w	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	4a4b      	ldr	r2, [pc, #300]	; (8003a64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d90f      	bls.n	800395a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	6093      	str	r3, [r2, #8]
 8003958:	e07e      	b.n	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4413      	add	r3, r2
 800396c:	3304      	adds	r3, #4
 800396e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	0159      	lsls	r1, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	440b      	add	r3, r1
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	1ad2      	subs	r2, r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d114      	bne.n	80039bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a4:	461a      	mov	r2, r3
 80039a6:	2101      	movs	r1, #1
 80039a8:	f003 fd0a 	bl	80073c0 <USB_EP0_OutStart>
 80039ac:	e006      	b.n	80039bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f009 fb20 	bl	800d008 <HAL_PCD_DataOutStageCallback>
 80039c8:	e046      	b.n	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d124      	bne.n	8003a1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e8:	461a      	mov	r2, r3
 80039ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ee:	6093      	str	r3, [r2, #8]
 80039f0:	e032      	b.n	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f009 faf7 	bl	800d008 <HAL_PCD_DataOutStageCallback>
 8003a1a:	e01d      	b.n	8003a58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d114      	bne.n	8003a4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d108      	bne.n	8003a4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a44:	461a      	mov	r2, r3
 8003a46:	2100      	movs	r1, #0
 8003a48:	f003 fcba 	bl	80073c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f009 fad8 	bl	800d008 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	4f54300a 	.word	0x4f54300a
 8003a68:	4f54310a 	.word	0x4f54310a

08003a6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	333c      	adds	r3, #60	; 0x3c
 8003a84:	3304      	adds	r3, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d90e      	bls.n	8003ac0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003abe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f009 fa8f 	bl	800cfe4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d90c      	bls.n	8003ae8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d108      	bne.n	8003ae8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	f003 fc6c 	bl	80073c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	4f54300a 	.word	0x4f54300a

08003af8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
 8003b04:	4613      	mov	r3, r2
 8003b06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d107      	bne.n	8003b26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b16:	883b      	ldrh	r3, [r7, #0]
 8003b18:	0419      	lsls	r1, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
 8003b24:	e028      	b.n	8003b78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4413      	add	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	e00d      	b.n	8003b56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	3340      	adds	r3, #64	; 0x40
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	3301      	adds	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d3ec      	bcc.n	8003b3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b60:	883b      	ldrh	r3, [r7, #0]
 8003b62:	0418      	lsls	r0, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	4302      	orrs	r2, r0
 8003b70:	3340      	adds	r3, #64	; 0x40
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_PCDEx_ActivateLPM+0x44>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	10000003 	.word	0x10000003

08003bf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40007000 	.word	0x40007000

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e291      	b.n	800414a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8087 	beq.w	8003d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c34:	4b96      	ldr	r3, [pc, #600]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d00c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c40:	4b93      	ldr	r3, [pc, #588]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d112      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62>
 8003c4c:	4b90      	ldr	r3, [pc, #576]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5a:	4b8d      	ldr	r3, [pc, #564]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x130>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d168      	bne.n	8003d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e26b      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x7a>
 8003c7c:	4b84      	ldr	r3, [pc, #528]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a83      	ldr	r2, [pc, #524]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	e02e      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x9c>
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7b      	ldr	r2, [pc, #492]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xc0>
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a75      	ldr	r2, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a72      	ldr	r2, [pc, #456]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xd8>
 8003cd0:	4b6f      	ldr	r3, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b6c      	ldr	r3, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6b      	ldr	r2, [pc, #428]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fecc 	bl	8001a8c <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fd fec8 	bl	8001a8c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e21f      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xe8>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd feb8 	bl	8001a8c <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fd feb4 	bl	8001a8c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e20b      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x110>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d069      	beq.n	8003e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d4e:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b4d      	ldr	r3, [pc, #308]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x190>
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d116      	bne.n	8003da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x17a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e1df      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	493d      	ldr	r1, [pc, #244]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	e040      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d023      	beq.n	8003df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da8:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a38      	ldr	r2, [pc, #224]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fe6a 	bl	8001a8c <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbc:	f7fd fe66 	bl	8001a8c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1bd      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4929      	ldr	r1, [pc, #164]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
 8003dee:	e018      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fe46 	bl	8001a8c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fd fe42 	bl	8001a8c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e199      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d038      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d019      	beq.n	8003e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd fe23 	bl	8001a8c <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4a:	f7fd fe1f 	bl	8001a8c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e176      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x23a>
 8003e68:	e01a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <HAL_RCC_OscConfig+0x280>)
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fd fe09 	bl	8001a8c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7e:	f7fd fe05 	bl	8001a8c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d903      	bls.n	8003e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e15c      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
 8003e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	4b91      	ldr	r3, [pc, #580]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a4 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eae:	4b8b      	ldr	r3, [pc, #556]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b88      	ldr	r3, [pc, #544]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a87      	ldr	r2, [pc, #540]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec6:	4b85      	ldr	r3, [pc, #532]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed6:	4b82      	ldr	r3, [pc, #520]	; (80040e0 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7e      	ldr	r2, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fd fdcd 	bl	8001a8c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fd fdc9 	bl	8001a8c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b64      	cmp	r3, #100	; 0x64
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e120      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	4b75      	ldr	r3, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x4d0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x31a>
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a6e      	ldr	r2, [pc, #440]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e02d      	b.n	8003f86 <HAL_RCC_OscConfig+0x376>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x33c>
 8003f32:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a69      	ldr	r2, [pc, #420]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3e:	4b67      	ldr	r3, [pc, #412]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a66      	ldr	r2, [pc, #408]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	f023 0304 	bic.w	r3, r3, #4
 8003f48:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCC_OscConfig+0x376>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x35e>
 8003f54:	4b61      	ldr	r3, [pc, #388]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a60      	ldr	r2, [pc, #384]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	4b5e      	ldr	r3, [pc, #376]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6c:	e00b      	b.n	8003f86 <HAL_RCC_OscConfig+0x376>
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a5a      	ldr	r2, [pc, #360]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7a:	4b58      	ldr	r3, [pc, #352]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a57      	ldr	r2, [pc, #348]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fd fd7d 	bl	8001a8c <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fd fd79 	bl	8001a8c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e0ce      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ee      	beq.n	8003f96 <HAL_RCC_OscConfig+0x386>
 8003fb8:	e014      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7fd fd67 	bl	8001a8c <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fd fd63 	bl	8001a8c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e0b8      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	4b40      	ldr	r3, [pc, #256]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ee      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fea:	4b3c      	ldr	r3, [pc, #240]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80a4 	beq.w	8004148 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d06b      	beq.n	80040e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d149      	bne.n	80040a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b31      	ldr	r3, [pc, #196]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a30      	ldr	r2, [pc, #192]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 800401a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd fd34 	bl	8001a8c <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fd30 	bl	8001a8c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e087      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	4b28      	ldr	r3, [pc, #160]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	019b      	lsls	r3, r3, #6
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	085b      	lsrs	r3, r3, #1
 800405e:	3b01      	subs	r3, #1
 8004060:	041b      	lsls	r3, r3, #16
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	061b      	lsls	r3, r3, #24
 800406a:	4313      	orrs	r3, r2
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 800406e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004072:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a18      	ldr	r2, [pc, #96]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd fd04 	bl	8001a8c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd fd00 	bl	8001a8c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e057      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x478>
 80040a6:	e04f      	b.n	8004148 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0b      	ldr	r2, [pc, #44]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 80040ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fd fcea 	bl	8001a8c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd fce6 	bl	8001a8c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e03d      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_RCC_OscConfig+0x4cc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x4ac>
 80040da:	e035      	b.n	8004148 <HAL_RCC_OscConfig+0x538>
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x544>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d028      	beq.n	8004144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d121      	bne.n	8004144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d11a      	bne.n	8004144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800411a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800411c:	4293      	cmp	r3, r2
 800411e:	d111      	bne.n	8004144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	085b      	lsrs	r3, r3, #1
 800412c:	3b01      	subs	r3, #1
 800412e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d107      	bne.n	8004144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800

08004158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0d0      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d910      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b67      	ldr	r3, [pc, #412]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 020f 	bic.w	r2, r3, #15
 8004186:	4965      	ldr	r1, [pc, #404]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b8      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a58      	ldr	r2, [pc, #352]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a52      	ldr	r2, [pc, #328]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b50      	ldr	r3, [pc, #320]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	494d      	ldr	r1, [pc, #308]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d040      	beq.n	800427c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b47      	ldr	r3, [pc, #284]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d115      	bne.n	800423a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d107      	bne.n	800422a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e073      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422a:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e06b      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423a:	4b39      	ldr	r3, [pc, #228]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f023 0203 	bic.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4936      	ldr	r1, [pc, #216]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424c:	f7fd fc1e 	bl	8001a8c <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	e00a      	b.n	800426a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004254:	f7fd fc1a 	bl	8001a8c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e053      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 020c 	and.w	r2, r3, #12
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	429a      	cmp	r2, r3
 800427a:	d1eb      	bne.n	8004254 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800427c:	4b27      	ldr	r3, [pc, #156]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d210      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 020f 	bic.w	r2, r3, #15
 8004292:	4922      	ldr	r1, [pc, #136]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e032      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4916      	ldr	r1, [pc, #88]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ea:	f000 f821 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	490a      	ldr	r1, [pc, #40]	; (8004324 <HAL_RCC_ClockConfig+0x1cc>)
 80042fc:	5ccb      	ldrb	r3, [r1, r3]
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1d0>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1d4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fabe 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00
 8004320:	40023800 	.word	0x40023800
 8004324:	08016314 	.word	0x08016314
 8004328:	20000004 	.word	0x20000004
 800432c:	20000008 	.word	0x20000008

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b094      	sub	sp, #80	; 0x50
 8004336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	647b      	str	r3, [r7, #68]	; 0x44
 800433c:	2300      	movs	r3, #0
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004340:	2300      	movs	r3, #0
 8004342:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004348:	4b79      	ldr	r3, [pc, #484]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d00d      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x40>
 8004354:	2b08      	cmp	r3, #8
 8004356:	f200 80e1 	bhi.w	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x34>
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3a>
 8004362:	e0db      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b73      	ldr	r3, [pc, #460]	; (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004368:	e0db      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436a:	4b73      	ldr	r3, [pc, #460]	; (8004538 <HAL_RCC_GetSysClockFreq+0x208>)
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800436e:	e0d8      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004370:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800437a:	4b6d      	ldr	r3, [pc, #436]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	2200      	movs	r2, #0
 800438e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004390:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
 800439e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b4:	0150      	lsls	r0, r2, #5
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4621      	mov	r1, r4
 80043bc:	1a51      	subs	r1, r2, r1
 80043be:	6139      	str	r1, [r7, #16]
 80043c0:	4629      	mov	r1, r5
 80043c2:	eb63 0301 	sbc.w	r3, r3, r1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d4:	4659      	mov	r1, fp
 80043d6:	018b      	lsls	r3, r1, #6
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043de:	4651      	mov	r1, sl
 80043e0:	018a      	lsls	r2, r1, #6
 80043e2:	4651      	mov	r1, sl
 80043e4:	ebb2 0801 	subs.w	r8, r2, r1
 80043e8:	4659      	mov	r1, fp
 80043ea:	eb63 0901 	sbc.w	r9, r3, r1
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004402:	4690      	mov	r8, r2
 8004404:	4699      	mov	r9, r3
 8004406:	4623      	mov	r3, r4
 8004408:	eb18 0303 	adds.w	r3, r8, r3
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	462b      	mov	r3, r5
 8004410:	eb49 0303 	adc.w	r3, r9, r3
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004422:	4629      	mov	r1, r5
 8004424:	024b      	lsls	r3, r1, #9
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800442c:	4621      	mov	r1, r4
 800442e:	024a      	lsls	r2, r1, #9
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004436:	2200      	movs	r2, #0
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
 800443a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800443c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004440:	f7fc fbd2 	bl	8000be8 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800444c:	e058      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b38      	ldr	r3, [pc, #224]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	2200      	movs	r2, #0
 8004456:	4618      	mov	r0, r3
 8004458:	4611      	mov	r1, r2
 800445a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
 8004464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447a:	0150      	lsls	r0, r2, #5
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4641      	mov	r1, r8
 8004482:	ebb2 0a01 	subs.w	sl, r2, r1
 8004486:	4649      	mov	r1, r9
 8004488:	eb63 0b01 	sbc.w	fp, r3, r1
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800449c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a0:	ebb2 040a 	subs.w	r4, r2, sl
 80044a4:	eb63 050b 	sbc.w	r5, r3, fp
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	00eb      	lsls	r3, r5, #3
 80044b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b6:	00e2      	lsls	r2, r4, #3
 80044b8:	4614      	mov	r4, r2
 80044ba:	461d      	mov	r5, r3
 80044bc:	4643      	mov	r3, r8
 80044be:	18e3      	adds	r3, r4, r3
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	464b      	mov	r3, r9
 80044c4:	eb45 0303 	adc.w	r3, r5, r3
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d6:	4629      	mov	r1, r5
 80044d8:	028b      	lsls	r3, r1, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e0:	4621      	mov	r1, r4
 80044e2:	028a      	lsls	r2, r1, #10
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	61fa      	str	r2, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	f7fc fb78 	bl	8000be8 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004524:	4618      	mov	r0, r3
 8004526:	3750      	adds	r7, #80	; 0x50
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	007a1200 	.word	0x007a1200

0800453c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000004 	.word	0x20000004

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08016324 	.word	0x08016324

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004580:	f7ff ffdc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	08016324 	.word	0x08016324

080045a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	220f      	movs	r2, #15
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <HAL_RCC_GetClockConfig+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40023c00 	.word	0x40023c00

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d012      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004630:	4b69      	ldr	r3, [pc, #420]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a68      	ldr	r2, [pc, #416]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	4b66      	ldr	r3, [pc, #408]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	4964      	ldr	r1, [pc, #400]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d017      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004662:	4b5d      	ldr	r3, [pc, #372]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	4959      	ldr	r1, [pc, #356]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004680:	d101      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800468e:	2301      	movs	r3, #1
 8004690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d017      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800469e:	4b4e      	ldr	r3, [pc, #312]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	494a      	ldr	r1, [pc, #296]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046bc:	d101      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046be:	2301      	movs	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046ca:	2301      	movs	r3, #1
 80046cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046da:	2301      	movs	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 808b 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ec:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	4a39      	ldr	r2, [pc, #228]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f6:	6413      	str	r3, [r2, #64]	; 0x40
 80046f8:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a34      	ldr	r2, [pc, #208]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800470a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004710:	f7fd f9bc 	bl	8001a8c <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004718:	f7fd f9b8 	bl	8001a8c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e357      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004736:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d035      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	429a      	cmp	r2, r3
 8004752:	d02e      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004754:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800475e:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004776:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800477c:	4b16      	ldr	r3, [pc, #88]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d114      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd f980 	bl	8001a8c <HAL_GetTick>
 800478c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478e:	e00a      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd f97c 	bl	8001a8c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e319      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ee      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d111      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ce:	400b      	ands	r3, r1
 80047d0:	4901      	ldr	r1, [pc, #4]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
 80047d6:	e00b      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
 80047e0:	0ffffcff 	.word	0x0ffffcff
 80047e4:	4baa      	ldr	r3, [pc, #680]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4aa9      	ldr	r2, [pc, #676]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ee:	6093      	str	r3, [r2, #8]
 80047f0:	4ba7      	ldr	r3, [pc, #668]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	49a4      	ldr	r1, [pc, #656]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480e:	4ba0      	ldr	r3, [pc, #640]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004814:	4a9e      	ldr	r2, [pc, #632]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800481a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800481e:	4b9c      	ldr	r3, [pc, #624]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004820:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	4999      	ldr	r1, [pc, #612]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800483c:	4b94      	ldr	r3, [pc, #592]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800484a:	4991      	ldr	r1, [pc, #580]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800485e:	4b8c      	ldr	r3, [pc, #560]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486c:	4988      	ldr	r1, [pc, #544]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004880:	4b83      	ldr	r3, [pc, #524]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488e:	4980      	ldr	r1, [pc, #512]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048a2:	4b7b      	ldr	r3, [pc, #492]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	4977      	ldr	r1, [pc, #476]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048c4:	4b72      	ldr	r3, [pc, #456]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f023 0203 	bic.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	496f      	ldr	r1, [pc, #444]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048e6:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ec:	f023 020c 	bic.w	r2, r3, #12
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f4:	4966      	ldr	r1, [pc, #408]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004908:	4b61      	ldr	r3, [pc, #388]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	495e      	ldr	r1, [pc, #376]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800492a:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004930:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	4955      	ldr	r1, [pc, #340]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800494c:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	494d      	ldr	r1, [pc, #308]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800496e:	4b48      	ldr	r3, [pc, #288]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	4944      	ldr	r1, [pc, #272]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004990:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	493c      	ldr	r1, [pc, #240]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049b2:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c0:	4933      	ldr	r1, [pc, #204]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049d4:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e2:	492b      	ldr	r1, [pc, #172]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049f6:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a04:	4922      	ldr	r1, [pc, #136]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a14:	d101      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a44:	4912      	ldr	r1, [pc, #72]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00b      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a68:	4909      	ldr	r1, [pc, #36]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d006      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80d9 	beq.w	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a01      	ldr	r2, [pc, #4]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a8e:	e001      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a90:	40023800 	.word	0x40023800
 8004a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a96:	f7fc fff9 	bl	8001a8c <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a9e:	f7fc fff5 	bl	8001a8c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	; 0x64
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e194      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab0:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f0      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d021      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11d      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ad0:	4b64      	ldr	r3, [pc, #400]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ade:	4b61      	ldr	r3, [pc, #388]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae4:	0e1b      	lsrs	r3, r3, #24
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	019a      	lsls	r2, r3, #6
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	071b      	lsls	r3, r3, #28
 8004b04:	4957      	ldr	r1, [pc, #348]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02e      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b36:	d129      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b38:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b46:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4c:	0f1b      	lsrs	r3, r3, #28
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	019a      	lsls	r2, r3, #6
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	071b      	lsls	r3, r3, #28
 8004b6c:	493d      	ldr	r1, [pc, #244]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7a:	f023 021f 	bic.w	r2, r3, #31
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4937      	ldr	r1, [pc, #220]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01d      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b98:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9e:	0e1b      	lsrs	r3, r3, #24
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bac:	0f1b      	lsrs	r3, r3, #28
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	019a      	lsls	r2, r3, #6
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	071b      	lsls	r3, r3, #28
 8004bcc:	4925      	ldr	r1, [pc, #148]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d011      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	019a      	lsls	r2, r3, #6
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	041b      	lsls	r3, r3, #16
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	061b      	lsls	r3, r3, #24
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	071b      	lsls	r3, r3, #28
 8004bfc:	4919      	ldr	r1, [pc, #100]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c10:	f7fc ff3c 	bl	8001a8c <HAL_GetTick>
 8004c14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c18:	f7fc ff38 	bl	8001a8c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0d7      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	f040 80cd 	bne.w	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4a:	f7fc ff1f 	bl	8001a8c <HAL_GetTick>
 8004c4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c50:	e00a      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c52:	f7fc ff1b 	bl	8001a8c <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b64      	cmp	r3, #100	; 0x64
 8004c5e:	d903      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e0ba      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c68:	4b5e      	ldr	r3, [pc, #376]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c74:	d0ed      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02e      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d12a      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c9e:	4b51      	ldr	r3, [pc, #324]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cac:	4b4d      	ldr	r3, [pc, #308]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	0f1b      	lsrs	r3, r3, #28
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	019a      	lsls	r2, r3, #6
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	061b      	lsls	r3, r3, #24
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	071b      	lsls	r3, r3, #28
 8004cd2:	4944      	ldr	r1, [pc, #272]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cda:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	493d      	ldr	r1, [pc, #244]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d022      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d08:	d11d      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d0a:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	0e1b      	lsrs	r3, r3, #24
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d18:	4b32      	ldr	r3, [pc, #200]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	0f1b      	lsrs	r3, r3, #28
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	019a      	lsls	r2, r3, #6
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	431a      	orrs	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	071b      	lsls	r3, r3, #28
 8004d3e:	4929      	ldr	r1, [pc, #164]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d028      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d60:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	019a      	lsls	r2, r3, #6
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	071b      	lsls	r3, r3, #28
 8004d86:	4917      	ldr	r1, [pc, #92]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d8e:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	4911      	ldr	r1, [pc, #68]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a0e      	ldr	r2, [pc, #56]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db0:	f7fc fe6c 	bl	8001a8c <HAL_GetTick>
 8004db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004db8:	f7fc fe68 	bl	8001a8c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e007      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd6:	d1ef      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e049      	b.n	8004e8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f841 	bl	8004e96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 fa00 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d001      	beq.n	8004ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e054      	b.n	8004f6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d022      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eee:	d01d      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d018      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a21      	ldr	r2, [pc, #132]	; (8004f84 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00e      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <HAL_TIM_Base_Start_IT+0xe0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x80>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1b      	ldr	r2, [pc, #108]	; (8004f94 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d115      	bne.n	8004f58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_TIM_Base_Start_IT+0xec>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d015      	beq.n	8004f6a <HAL_TIM_Base_Start_IT+0xbe>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d011      	beq.n	8004f6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f56:	e008      	b.n	8004f6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	e000      	b.n	8004f6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40001800 	.word	0x40001800
 8004f98:	00010007 	.word	0x00010007

08004f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d122      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0202 	mvn.w	r2, #2
 8004fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f905 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8f7 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f908 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b04      	cmp	r3, #4
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0204 	mvn.w	r2, #4
 800501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8db 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8cd 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8de 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b08      	cmp	r3, #8
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0208 	mvn.w	r2, #8
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2204      	movs	r2, #4
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f8b1 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f8a3 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8b4 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0210 	mvn.w	r2, #16
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2208      	movs	r2, #8
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f887 	bl	80051ee <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f879 	bl	80051da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f88a 	bl	8005202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d10e      	bne.n	8005120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0201 	mvn.w	r2, #1
 8005118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fc fac0 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d10e      	bne.n	800514c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005138:	2b80      	cmp	r3, #128	; 0x80
 800513a:	d107      	bne.n	800514c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f91a 	bl	8005380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515a:	d10e      	bne.n	800517a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d107      	bne.n	800517a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f90d 	bl	8005394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d10e      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d107      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800519e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f838 	bl	8005216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d10e      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d107      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f06f 0220 	mvn.w	r2, #32
 80051ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f8cd 	bl	800536c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a40      	ldr	r2, [pc, #256]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a3d      	ldr	r2, [pc, #244]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3b      	ldr	r2, [pc, #236]	; (800534c <TIM_Base_SetConfig+0x120>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3a      	ldr	r2, [pc, #232]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d027      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2c      	ldr	r2, [pc, #176]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d023      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	; (800534c <TIM_Base_SetConfig+0x120>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a29      	ldr	r2, [pc, #164]	; (8005350 <TIM_Base_SetConfig+0x124>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d017      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <TIM_Base_SetConfig+0x128>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a27      	ldr	r2, [pc, #156]	; (8005358 <TIM_Base_SetConfig+0x12c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a26      	ldr	r2, [pc, #152]	; (800535c <TIM_Base_SetConfig+0x130>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <TIM_Base_SetConfig+0x134>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a24      	ldr	r2, [pc, #144]	; (8005364 <TIM_Base_SetConfig+0x138>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a23      	ldr	r2, [pc, #140]	; (8005368 <TIM_Base_SetConfig+0x13c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0xf8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800
 8005360:	40001800 	.word	0x40001800
 8005364:	40001c00 	.word	0x40001c00
 8005368:	40002000 	.word	0x40002000

0800536c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e040      	b.n	800543c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fc f9fe 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2224      	movs	r2, #36	; 0x24
 80053d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f82c 	bl	8005444 <UART_SetConfig>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e022      	b.n	800543c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa84 	bl	800590c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fb0b 	bl	8005a50 <UART_CheckIdleState>
 800543a:	4603      	mov	r3, r0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4ba6      	ldr	r3, [pc, #664]	; (8005708 <UART_SetConfig+0x2c4>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	430b      	orrs	r3, r1
 800547a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a94      	ldr	r2, [pc, #592]	; (800570c <UART_SetConfig+0x2c8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d120      	bne.n	8005502 <UART_SetConfig+0xbe>
 80054c0:	4b93      	ldr	r3, [pc, #588]	; (8005710 <UART_SetConfig+0x2cc>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d816      	bhi.n	80054fc <UART_SetConfig+0xb8>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <UART_SetConfig+0x90>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054e5 	.word	0x080054e5
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	080054eb 	.word	0x080054eb
 80054e0:	080054f7 	.word	0x080054f7
 80054e4:	2301      	movs	r3, #1
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e150      	b.n	800578c <UART_SetConfig+0x348>
 80054ea:	2302      	movs	r3, #2
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e14d      	b.n	800578c <UART_SetConfig+0x348>
 80054f0:	2304      	movs	r3, #4
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e14a      	b.n	800578c <UART_SetConfig+0x348>
 80054f6:	2308      	movs	r3, #8
 80054f8:	77fb      	strb	r3, [r7, #31]
 80054fa:	e147      	b.n	800578c <UART_SetConfig+0x348>
 80054fc:	2310      	movs	r3, #16
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e144      	b.n	800578c <UART_SetConfig+0x348>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a83      	ldr	r2, [pc, #524]	; (8005714 <UART_SetConfig+0x2d0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d132      	bne.n	8005572 <UART_SetConfig+0x12e>
 800550c:	4b80      	ldr	r3, [pc, #512]	; (8005710 <UART_SetConfig+0x2cc>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	2b0c      	cmp	r3, #12
 8005518:	d828      	bhi.n	800556c <UART_SetConfig+0x128>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <UART_SetConfig+0xdc>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005555 	.word	0x08005555
 8005524:	0800556d 	.word	0x0800556d
 8005528:	0800556d 	.word	0x0800556d
 800552c:	0800556d 	.word	0x0800556d
 8005530:	08005561 	.word	0x08005561
 8005534:	0800556d 	.word	0x0800556d
 8005538:	0800556d 	.word	0x0800556d
 800553c:	0800556d 	.word	0x0800556d
 8005540:	0800555b 	.word	0x0800555b
 8005544:	0800556d 	.word	0x0800556d
 8005548:	0800556d 	.word	0x0800556d
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005567 	.word	0x08005567
 8005554:	2300      	movs	r3, #0
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e118      	b.n	800578c <UART_SetConfig+0x348>
 800555a:	2302      	movs	r3, #2
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e115      	b.n	800578c <UART_SetConfig+0x348>
 8005560:	2304      	movs	r3, #4
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e112      	b.n	800578c <UART_SetConfig+0x348>
 8005566:	2308      	movs	r3, #8
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e10f      	b.n	800578c <UART_SetConfig+0x348>
 800556c:	2310      	movs	r3, #16
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e10c      	b.n	800578c <UART_SetConfig+0x348>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a68      	ldr	r2, [pc, #416]	; (8005718 <UART_SetConfig+0x2d4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d120      	bne.n	80055be <UART_SetConfig+0x17a>
 800557c:	4b64      	ldr	r3, [pc, #400]	; (8005710 <UART_SetConfig+0x2cc>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005582:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005586:	2b30      	cmp	r3, #48	; 0x30
 8005588:	d013      	beq.n	80055b2 <UART_SetConfig+0x16e>
 800558a:	2b30      	cmp	r3, #48	; 0x30
 800558c:	d814      	bhi.n	80055b8 <UART_SetConfig+0x174>
 800558e:	2b20      	cmp	r3, #32
 8005590:	d009      	beq.n	80055a6 <UART_SetConfig+0x162>
 8005592:	2b20      	cmp	r3, #32
 8005594:	d810      	bhi.n	80055b8 <UART_SetConfig+0x174>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <UART_SetConfig+0x15c>
 800559a:	2b10      	cmp	r3, #16
 800559c:	d006      	beq.n	80055ac <UART_SetConfig+0x168>
 800559e:	e00b      	b.n	80055b8 <UART_SetConfig+0x174>
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e0f2      	b.n	800578c <UART_SetConfig+0x348>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e0ef      	b.n	800578c <UART_SetConfig+0x348>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e0ec      	b.n	800578c <UART_SetConfig+0x348>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e0e9      	b.n	800578c <UART_SetConfig+0x348>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e0e6      	b.n	800578c <UART_SetConfig+0x348>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a56      	ldr	r2, [pc, #344]	; (800571c <UART_SetConfig+0x2d8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d120      	bne.n	800560a <UART_SetConfig+0x1c6>
 80055c8:	4b51      	ldr	r3, [pc, #324]	; (8005710 <UART_SetConfig+0x2cc>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055d2:	2bc0      	cmp	r3, #192	; 0xc0
 80055d4:	d013      	beq.n	80055fe <UART_SetConfig+0x1ba>
 80055d6:	2bc0      	cmp	r3, #192	; 0xc0
 80055d8:	d814      	bhi.n	8005604 <UART_SetConfig+0x1c0>
 80055da:	2b80      	cmp	r3, #128	; 0x80
 80055dc:	d009      	beq.n	80055f2 <UART_SetConfig+0x1ae>
 80055de:	2b80      	cmp	r3, #128	; 0x80
 80055e0:	d810      	bhi.n	8005604 <UART_SetConfig+0x1c0>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <UART_SetConfig+0x1a8>
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d006      	beq.n	80055f8 <UART_SetConfig+0x1b4>
 80055ea:	e00b      	b.n	8005604 <UART_SetConfig+0x1c0>
 80055ec:	2300      	movs	r3, #0
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e0cc      	b.n	800578c <UART_SetConfig+0x348>
 80055f2:	2302      	movs	r3, #2
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e0c9      	b.n	800578c <UART_SetConfig+0x348>
 80055f8:	2304      	movs	r3, #4
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e0c6      	b.n	800578c <UART_SetConfig+0x348>
 80055fe:	2308      	movs	r3, #8
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e0c3      	b.n	800578c <UART_SetConfig+0x348>
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e0c0      	b.n	800578c <UART_SetConfig+0x348>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a44      	ldr	r2, [pc, #272]	; (8005720 <UART_SetConfig+0x2dc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d125      	bne.n	8005660 <UART_SetConfig+0x21c>
 8005614:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <UART_SetConfig+0x2cc>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005622:	d017      	beq.n	8005654 <UART_SetConfig+0x210>
 8005624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005628:	d817      	bhi.n	800565a <UART_SetConfig+0x216>
 800562a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562e:	d00b      	beq.n	8005648 <UART_SetConfig+0x204>
 8005630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005634:	d811      	bhi.n	800565a <UART_SetConfig+0x216>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <UART_SetConfig+0x1fe>
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d006      	beq.n	800564e <UART_SetConfig+0x20a>
 8005640:	e00b      	b.n	800565a <UART_SetConfig+0x216>
 8005642:	2300      	movs	r3, #0
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e0a1      	b.n	800578c <UART_SetConfig+0x348>
 8005648:	2302      	movs	r3, #2
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e09e      	b.n	800578c <UART_SetConfig+0x348>
 800564e:	2304      	movs	r3, #4
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e09b      	b.n	800578c <UART_SetConfig+0x348>
 8005654:	2308      	movs	r3, #8
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e098      	b.n	800578c <UART_SetConfig+0x348>
 800565a:	2310      	movs	r3, #16
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e095      	b.n	800578c <UART_SetConfig+0x348>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2f      	ldr	r2, [pc, #188]	; (8005724 <UART_SetConfig+0x2e0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d125      	bne.n	80056b6 <UART_SetConfig+0x272>
 800566a:	4b29      	ldr	r3, [pc, #164]	; (8005710 <UART_SetConfig+0x2cc>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005678:	d017      	beq.n	80056aa <UART_SetConfig+0x266>
 800567a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800567e:	d817      	bhi.n	80056b0 <UART_SetConfig+0x26c>
 8005680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005684:	d00b      	beq.n	800569e <UART_SetConfig+0x25a>
 8005686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568a:	d811      	bhi.n	80056b0 <UART_SetConfig+0x26c>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <UART_SetConfig+0x254>
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005694:	d006      	beq.n	80056a4 <UART_SetConfig+0x260>
 8005696:	e00b      	b.n	80056b0 <UART_SetConfig+0x26c>
 8005698:	2301      	movs	r3, #1
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e076      	b.n	800578c <UART_SetConfig+0x348>
 800569e:	2302      	movs	r3, #2
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e073      	b.n	800578c <UART_SetConfig+0x348>
 80056a4:	2304      	movs	r3, #4
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e070      	b.n	800578c <UART_SetConfig+0x348>
 80056aa:	2308      	movs	r3, #8
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e06d      	b.n	800578c <UART_SetConfig+0x348>
 80056b0:	2310      	movs	r3, #16
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e06a      	b.n	800578c <UART_SetConfig+0x348>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <UART_SetConfig+0x2e4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d138      	bne.n	8005732 <UART_SetConfig+0x2ee>
 80056c0:	4b13      	ldr	r3, [pc, #76]	; (8005710 <UART_SetConfig+0x2cc>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80056ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ce:	d017      	beq.n	8005700 <UART_SetConfig+0x2bc>
 80056d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056d4:	d82a      	bhi.n	800572c <UART_SetConfig+0x2e8>
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056da:	d00b      	beq.n	80056f4 <UART_SetConfig+0x2b0>
 80056dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e0:	d824      	bhi.n	800572c <UART_SetConfig+0x2e8>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <UART_SetConfig+0x2aa>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	d006      	beq.n	80056fa <UART_SetConfig+0x2b6>
 80056ec:	e01e      	b.n	800572c <UART_SetConfig+0x2e8>
 80056ee:	2300      	movs	r3, #0
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e04b      	b.n	800578c <UART_SetConfig+0x348>
 80056f4:	2302      	movs	r3, #2
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e048      	b.n	800578c <UART_SetConfig+0x348>
 80056fa:	2304      	movs	r3, #4
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e045      	b.n	800578c <UART_SetConfig+0x348>
 8005700:	2308      	movs	r3, #8
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e042      	b.n	800578c <UART_SetConfig+0x348>
 8005706:	bf00      	nop
 8005708:	efff69f3 	.word	0xefff69f3
 800570c:	40011000 	.word	0x40011000
 8005710:	40023800 	.word	0x40023800
 8005714:	40004400 	.word	0x40004400
 8005718:	40004800 	.word	0x40004800
 800571c:	40004c00 	.word	0x40004c00
 8005720:	40005000 	.word	0x40005000
 8005724:	40011400 	.word	0x40011400
 8005728:	40007800 	.word	0x40007800
 800572c:	2310      	movs	r3, #16
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e02c      	b.n	800578c <UART_SetConfig+0x348>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a72      	ldr	r2, [pc, #456]	; (8005900 <UART_SetConfig+0x4bc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d125      	bne.n	8005788 <UART_SetConfig+0x344>
 800573c:	4b71      	ldr	r3, [pc, #452]	; (8005904 <UART_SetConfig+0x4c0>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800574a:	d017      	beq.n	800577c <UART_SetConfig+0x338>
 800574c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005750:	d817      	bhi.n	8005782 <UART_SetConfig+0x33e>
 8005752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005756:	d00b      	beq.n	8005770 <UART_SetConfig+0x32c>
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575c:	d811      	bhi.n	8005782 <UART_SetConfig+0x33e>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <UART_SetConfig+0x326>
 8005762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005766:	d006      	beq.n	8005776 <UART_SetConfig+0x332>
 8005768:	e00b      	b.n	8005782 <UART_SetConfig+0x33e>
 800576a:	2300      	movs	r3, #0
 800576c:	77fb      	strb	r3, [r7, #31]
 800576e:	e00d      	b.n	800578c <UART_SetConfig+0x348>
 8005770:	2302      	movs	r3, #2
 8005772:	77fb      	strb	r3, [r7, #31]
 8005774:	e00a      	b.n	800578c <UART_SetConfig+0x348>
 8005776:	2304      	movs	r3, #4
 8005778:	77fb      	strb	r3, [r7, #31]
 800577a:	e007      	b.n	800578c <UART_SetConfig+0x348>
 800577c:	2308      	movs	r3, #8
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e004      	b.n	800578c <UART_SetConfig+0x348>
 8005782:	2310      	movs	r3, #16
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e001      	b.n	800578c <UART_SetConfig+0x348>
 8005788:	2310      	movs	r3, #16
 800578a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005794:	d15b      	bne.n	800584e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005796:	7ffb      	ldrb	r3, [r7, #31]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d828      	bhi.n	80057ee <UART_SetConfig+0x3aa>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <UART_SetConfig+0x360>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d9 	.word	0x080057d9
 80057b0:	080057ef 	.word	0x080057ef
 80057b4:	080057df 	.word	0x080057df
 80057b8:	080057ef 	.word	0x080057ef
 80057bc:	080057ef 	.word	0x080057ef
 80057c0:	080057ef 	.word	0x080057ef
 80057c4:	080057e7 	.word	0x080057e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fe fec4 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80057cc:	61b8      	str	r0, [r7, #24]
        break;
 80057ce:	e013      	b.n	80057f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d0:	f7fe fed4 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 80057d4:	61b8      	str	r0, [r7, #24]
        break;
 80057d6:	e00f      	b.n	80057f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d8:	4b4b      	ldr	r3, [pc, #300]	; (8005908 <UART_SetConfig+0x4c4>)
 80057da:	61bb      	str	r3, [r7, #24]
        break;
 80057dc:	e00c      	b.n	80057f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057de:	f7fe fda7 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80057e2:	61b8      	str	r0, [r7, #24]
        break;
 80057e4:	e008      	b.n	80057f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ea:	61bb      	str	r3, [r7, #24]
        break;
 80057ec:	e004      	b.n	80057f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	77bb      	strb	r3, [r7, #30]
        break;
 80057f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d074      	beq.n	80058e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	005a      	lsls	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	441a      	add	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b0f      	cmp	r3, #15
 8005818:	d916      	bls.n	8005848 <UART_SetConfig+0x404>
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d212      	bcs.n	8005848 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f023 030f 	bic.w	r3, r3, #15
 800582a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	b29b      	uxth	r3, r3
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	b29a      	uxth	r2, r3
 8005838:	89fb      	ldrh	r3, [r7, #14]
 800583a:	4313      	orrs	r3, r2
 800583c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	89fa      	ldrh	r2, [r7, #14]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	e04f      	b.n	80058e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77bb      	strb	r3, [r7, #30]
 800584c:	e04c      	b.n	80058e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800584e:	7ffb      	ldrb	r3, [r7, #31]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d828      	bhi.n	80058a6 <UART_SetConfig+0x462>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x418>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005881 	.word	0x08005881
 8005860:	08005889 	.word	0x08005889
 8005864:	08005891 	.word	0x08005891
 8005868:	080058a7 	.word	0x080058a7
 800586c:	08005897 	.word	0x08005897
 8005870:	080058a7 	.word	0x080058a7
 8005874:	080058a7 	.word	0x080058a7
 8005878:	080058a7 	.word	0x080058a7
 800587c:	0800589f 	.word	0x0800589f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005880:	f7fe fe68 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005884:	61b8      	str	r0, [r7, #24]
        break;
 8005886:	e013      	b.n	80058b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005888:	f7fe fe78 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 800588c:	61b8      	str	r0, [r7, #24]
        break;
 800588e:	e00f      	b.n	80058b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <UART_SetConfig+0x4c4>)
 8005892:	61bb      	str	r3, [r7, #24]
        break;
 8005894:	e00c      	b.n	80058b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005896:	f7fe fd4b 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 800589a:	61b8      	str	r0, [r7, #24]
        break;
 800589c:	e008      	b.n	80058b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a2:	61bb      	str	r3, [r7, #24]
        break;
 80058a4:	e004      	b.n	80058b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	77bb      	strb	r3, [r7, #30]
        break;
 80058ae:	bf00      	nop
    }

    if (pclk != 0U)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d018      	beq.n	80058e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	085a      	lsrs	r2, r3, #1
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	441a      	add	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d909      	bls.n	80058e4 <UART_SetConfig+0x4a0>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d6:	d205      	bcs.n	80058e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e001      	b.n	80058e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40007c00 	.word	0x40007c00
 8005904:	40023800 	.word	0x40023800
 8005908:	00f42400 	.word	0x00f42400

0800590c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a0a:	d10a      	bne.n	8005a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a60:	f7fc f814 	bl	8001a8c <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d10e      	bne.n	8005a92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f81b 	bl	8005abe <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e011      	b.n	8005ab6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b09c      	sub	sp, #112	; 0x70
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	e0a7      	b.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	f000 80a3 	beq.w	8005c20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7fb ffd7 	bl	8001a8c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d13f      	bne.n	8005b70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b04:	667b      	str	r3, [r7, #100]	; 0x64
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e6      	bne.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	663b      	str	r3, [r7, #96]	; 0x60
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b42:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e5      	bne.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e068      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d050      	beq.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b8c:	d148      	bne.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e6      	bne.n	8005b98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bea:	623a      	str	r2, [r7, #32]
 8005bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	69f9      	ldr	r1, [r7, #28]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e010      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	bf0c      	ite	eq
 8005c30:	2301      	moveq	r3, #1
 8005c32:	2300      	movne	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	f43f af48 	beq.w	8005ad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3770      	adds	r7, #112	; 0x70
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	f107 001c 	add.w	r0, r7, #28
 8005c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d120      	bne.n	8005ca6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <USB_CoreInit+0xac>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d105      	bne.n	8005c9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fbee 	bl	800747c <USB_CoreReset>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
 8005ca4:	e010      	b.n	8005cc8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 fbe2 	bl	800747c <USB_CoreReset>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10b      	bne.n	8005ce6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f043 0206 	orr.w	r2, r3, #6
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f043 0220 	orr.w	r2, r3, #32
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cf2:	b004      	add	sp, #16
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	ffbdffbf 	.word	0xffbdffbf

08005cfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	4613      	mov	r3, r2
 8005d08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d165      	bne.n	8005ddc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4a41      	ldr	r2, [pc, #260]	; (8005e18 <USB_SetTurnaroundTime+0x11c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d906      	bls.n	8005d26 <USB_SetTurnaroundTime+0x2a>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4a40      	ldr	r2, [pc, #256]	; (8005e1c <USB_SetTurnaroundTime+0x120>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d202      	bcs.n	8005d26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d20:	230f      	movs	r3, #15
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e062      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4a3c      	ldr	r2, [pc, #240]	; (8005e1c <USB_SetTurnaroundTime+0x120>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d306      	bcc.n	8005d3c <USB_SetTurnaroundTime+0x40>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4a3b      	ldr	r2, [pc, #236]	; (8005e20 <USB_SetTurnaroundTime+0x124>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d202      	bcs.n	8005d3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d36:	230e      	movs	r3, #14
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e057      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4a38      	ldr	r2, [pc, #224]	; (8005e20 <USB_SetTurnaroundTime+0x124>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d306      	bcc.n	8005d52 <USB_SetTurnaroundTime+0x56>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4a37      	ldr	r2, [pc, #220]	; (8005e24 <USB_SetTurnaroundTime+0x128>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d202      	bcs.n	8005d52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d4c:	230d      	movs	r3, #13
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e04c      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4a33      	ldr	r2, [pc, #204]	; (8005e24 <USB_SetTurnaroundTime+0x128>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d306      	bcc.n	8005d68 <USB_SetTurnaroundTime+0x6c>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4a32      	ldr	r2, [pc, #200]	; (8005e28 <USB_SetTurnaroundTime+0x12c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d802      	bhi.n	8005d68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d62:	230c      	movs	r3, #12
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e041      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4a2f      	ldr	r2, [pc, #188]	; (8005e28 <USB_SetTurnaroundTime+0x12c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d906      	bls.n	8005d7e <USB_SetTurnaroundTime+0x82>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4a2e      	ldr	r2, [pc, #184]	; (8005e2c <USB_SetTurnaroundTime+0x130>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d802      	bhi.n	8005d7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d78:	230b      	movs	r3, #11
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e036      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4a2a      	ldr	r2, [pc, #168]	; (8005e2c <USB_SetTurnaroundTime+0x130>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d906      	bls.n	8005d94 <USB_SetTurnaroundTime+0x98>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4a29      	ldr	r2, [pc, #164]	; (8005e30 <USB_SetTurnaroundTime+0x134>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d802      	bhi.n	8005d94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d8e:	230a      	movs	r3, #10
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e02b      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4a26      	ldr	r2, [pc, #152]	; (8005e30 <USB_SetTurnaroundTime+0x134>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d906      	bls.n	8005daa <USB_SetTurnaroundTime+0xae>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <USB_SetTurnaroundTime+0x138>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d202      	bcs.n	8005daa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005da4:	2309      	movs	r3, #9
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	e020      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <USB_SetTurnaroundTime+0x138>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d306      	bcc.n	8005dc0 <USB_SetTurnaroundTime+0xc4>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4a20      	ldr	r2, [pc, #128]	; (8005e38 <USB_SetTurnaroundTime+0x13c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d802      	bhi.n	8005dc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005dba:	2308      	movs	r3, #8
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	e015      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <USB_SetTurnaroundTime+0x13c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d906      	bls.n	8005dd6 <USB_SetTurnaroundTime+0xda>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <USB_SetTurnaroundTime+0x140>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d202      	bcs.n	8005dd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005dd0:	2307      	movs	r3, #7
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e00a      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005dd6:	2306      	movs	r3, #6
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e007      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005de2:	2309      	movs	r3, #9
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e001      	b.n	8005dec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005de8:	2309      	movs	r3, #9
 8005dea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	00d8acbf 	.word	0x00d8acbf
 8005e1c:	00e4e1c0 	.word	0x00e4e1c0
 8005e20:	00f42400 	.word	0x00f42400
 8005e24:	01067380 	.word	0x01067380
 8005e28:	011a499f 	.word	0x011a499f
 8005e2c:	01312cff 	.word	0x01312cff
 8005e30:	014ca43f 	.word	0x014ca43f
 8005e34:	016e3600 	.word	0x016e3600
 8005e38:	01a6ab1f 	.word	0x01a6ab1f
 8005e3c:	01e84800 	.word	0x01e84800

08005e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f043 0201 	orr.w	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f023 0201 	bic.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d115      	bne.n	8005ed2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	f7fb fdf6 	bl	8001aa4 <HAL_Delay>
      ms++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 fa4b 	bl	800735a <USB_GetMode>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d01e      	beq.n	8005f08 <USB_SetCurrentMode+0x84>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b31      	cmp	r3, #49	; 0x31
 8005ece:	d9f0      	bls.n	8005eb2 <USB_SetCurrentMode+0x2e>
 8005ed0:	e01a      	b.n	8005f08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d115      	bne.n	8005f04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fb fddd 	bl	8001aa4 <HAL_Delay>
      ms++;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3301      	adds	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fa32 	bl	800735a <USB_GetMode>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <USB_SetCurrentMode+0x84>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b31      	cmp	r3, #49	; 0x31
 8005f00:	d9f0      	bls.n	8005ee4 <USB_SetCurrentMode+0x60>
 8005f02:	e001      	b.n	8005f08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e005      	b.n	8005f14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b32      	cmp	r3, #50	; 0x32
 8005f0c:	d101      	bne.n	8005f12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	e009      	b.n	8005f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	3340      	adds	r3, #64	; 0x40
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b0e      	cmp	r3, #14
 8005f54:	d9f2      	bls.n	8005f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11c      	bne.n	8005f96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e005      	b.n	8005fa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fa8:	461a      	mov	r2, r3
 8005faa:	2300      	movs	r3, #0
 8005fac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	680b      	ldr	r3, [r1, #0]
 8005fc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10c      	bne.n	8005fe2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fce:	2100      	movs	r1, #0
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f965 	bl	80062a0 <USB_SetDevSpeed>
 8005fd6:	e008      	b.n	8005fea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fd8:	2101      	movs	r1, #1
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f960 	bl	80062a0 <USB_SetDevSpeed>
 8005fe0:	e003      	b.n	8005fea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fe2:	2103      	movs	r1, #3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f95b 	bl	80062a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fea:	2110      	movs	r1, #16
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f8f3 	bl	80061d8 <USB_FlushTxFifo>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f91f 	bl	8006240 <USB_FlushRxFifo>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	461a      	mov	r2, r3
 8006014:	2300      	movs	r3, #0
 8006016:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601e:	461a      	mov	r2, r3
 8006020:	2300      	movs	r3, #0
 8006022:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	461a      	mov	r2, r3
 800602c:	2300      	movs	r3, #0
 800602e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e043      	b.n	80060be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604c:	d118      	bne.n	8006080 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e013      	b.n	8006092 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	461a      	mov	r2, r3
 8006078:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e008      	b.n	8006092 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	461a      	mov	r2, r3
 800608e:	2300      	movs	r3, #0
 8006090:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	461a      	mov	r2, r3
 80060a0:	2300      	movs	r3, #0
 80060a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	461a      	mov	r2, r3
 80060b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3301      	adds	r3, #1
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d3b7      	bcc.n	8006036 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e043      	b.n	8006154 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e2:	d118      	bne.n	8006116 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	461a      	mov	r2, r3
 80060f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e013      	b.n	8006128 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	461a      	mov	r2, r3
 800610e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e008      	b.n	8006128 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	461a      	mov	r2, r3
 8006136:	2300      	movs	r3, #0
 8006138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	461a      	mov	r2, r3
 8006148:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800614c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	3301      	adds	r3, #1
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	d3b7      	bcc.n	80060cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800616e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800617c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f043 0210 	orr.w	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <USB_DevInit+0x2b4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800619c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f043 0208 	orr.w	r2, r3, #8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d105      	bne.n	80061c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <USB_DevInit+0x2b8>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061cc:	b004      	add	sp, #16
 80061ce:	4770      	bx	lr
 80061d0:	803c3800 	.word	0x803c3800
 80061d4:	40000004 	.word	0x40000004

080061d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a13      	ldr	r2, [pc, #76]	; (800623c <USB_FlushTxFifo+0x64>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d901      	bls.n	80061f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e01b      	b.n	8006230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	daf2      	bge.n	80061e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	019b      	lsls	r3, r3, #6
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <USB_FlushTxFifo+0x64>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b20      	cmp	r3, #32
 800622c:	d0f0      	beq.n	8006210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	00030d40 	.word	0x00030d40

08006240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a11      	ldr	r2, [pc, #68]	; (800629c <USB_FlushRxFifo+0x5c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e018      	b.n	8006290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	daf2      	bge.n	800624c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2210      	movs	r2, #16
 800626e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a08      	ldr	r2, [pc, #32]	; (800629c <USB_FlushRxFifo+0x5c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e006      	b.n	8006290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b10      	cmp	r3, #16
 800628c:	d0f0      	beq.n	8006270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	00030d40 	.word	0x00030d40

080062a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c0:	4313      	orrs	r3, r2
 80062c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b087      	sub	sp, #28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0306 	and.w	r3, r3, #6
 80062ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80062f2:	2300      	movs	r3, #0
 80062f4:	75fb      	strb	r3, [r7, #23]
 80062f6:	e00a      	b.n	800630e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d002      	beq.n	8006304 <USB_GetDevSpeed+0x32>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b06      	cmp	r3, #6
 8006302:	d102      	bne.n	800630a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006304:	2302      	movs	r3, #2
 8006306:	75fb      	strb	r3, [r7, #23]
 8006308:	e001      	b.n	800630e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800630a:	230f      	movs	r3, #15
 800630c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d139      	bne.n	80063ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	69da      	ldr	r2, [r3, #28]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	2101      	movs	r1, #1
 800634a:	fa01 f303 	lsl.w	r3, r1, r3
 800634e:	b29b      	uxth	r3, r3
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006356:	4313      	orrs	r3, r2
 8006358:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d153      	bne.n	8006418 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	791b      	ldrb	r3, [r3, #4]
 800638a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800638c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	059b      	lsls	r3, r3, #22
 8006392:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006394:	431a      	orrs	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	0159      	lsls	r1, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	440b      	add	r3, r1
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	4619      	mov	r1, r3
 80063a4:	4b20      	ldr	r3, [pc, #128]	; (8006428 <USB_ActivateEndpoint+0x10c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	600b      	str	r3, [r1, #0]
 80063aa:	e035      	b.n	8006418 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	2101      	movs	r1, #1
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ca:	4313      	orrs	r3, r2
 80063cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d119      	bne.n	8006418 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006400:	430b      	orrs	r3, r1
 8006402:	431a      	orrs	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	0159      	lsls	r1, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	440b      	add	r3, r1
 800640c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006410:	4619      	mov	r1, r3
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <USB_ActivateEndpoint+0x10c>)
 8006414:	4313      	orrs	r3, r2
 8006416:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	10008000 	.word	0x10008000

0800642c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d161      	bne.n	800650c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800645a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645e:	d11f      	bne.n	80064a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800647e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800649e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	2101      	movs	r1, #1
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	43db      	mvns	r3, r3
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c0:	4013      	ands	r3, r2
 80064c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	2101      	movs	r1, #1
 80064d6:	fa01 f303 	lsl.w	r3, r1, r3
 80064da:	b29b      	uxth	r3, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064e4:	4013      	ands	r3, r2
 80064e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	0159      	lsls	r1, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	440b      	add	r3, r1
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	4619      	mov	r1, r3
 8006504:	4b35      	ldr	r3, [pc, #212]	; (80065dc <USB_DeactivateEndpoint+0x1b0>)
 8006506:	4013      	ands	r3, r2
 8006508:	600b      	str	r3, [r1, #0]
 800650a:	e060      	b.n	80065ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800651e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006522:	d11f      	bne.n	8006564 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006542:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006562:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	2101      	movs	r1, #1
 8006576:	fa01 f303 	lsl.w	r3, r1, r3
 800657a:	041b      	lsls	r3, r3, #16
 800657c:	43db      	mvns	r3, r3
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006584:	4013      	ands	r3, r2
 8006586:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	2101      	movs	r1, #1
 800659a:	fa01 f303 	lsl.w	r3, r1, r3
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	43db      	mvns	r3, r3
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a8:	4013      	ands	r3, r2
 80065aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	0159      	lsls	r1, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	440b      	add	r3, r1
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	4619      	mov	r1, r3
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <USB_DeactivateEndpoint+0x1b4>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	ec337800 	.word	0xec337800
 80065e0:	eff37800 	.word	0xeff37800

080065e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b01      	cmp	r3, #1
 8006602:	f040 8163 	bne.w	80068cc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d132      	bne.n	8006674 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	0159      	lsls	r1, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	440b      	add	r3, r1
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	4619      	mov	r1, r3
 800662a:	4ba5      	ldr	r3, [pc, #660]	; (80068c0 <USB_EPStartXfer+0x2dc>)
 800662c:	4013      	ands	r3, r2
 800662e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800664e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	0159      	lsls	r1, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	440b      	add	r3, r1
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	4619      	mov	r1, r3
 800666c:	4b95      	ldr	r3, [pc, #596]	; (80068c4 <USB_EPStartXfer+0x2e0>)
 800666e:	4013      	ands	r3, r2
 8006670:	610b      	str	r3, [r1, #16]
 8006672:	e074      	b.n	800675e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	0159      	lsls	r1, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	440b      	add	r3, r1
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	4619      	mov	r1, r3
 8006690:	4b8c      	ldr	r3, [pc, #560]	; (80068c4 <USB_EPStartXfer+0x2e0>)
 8006692:	4013      	ands	r3, r2
 8006694:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	0159      	lsls	r1, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	440b      	add	r3, r1
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	4619      	mov	r1, r3
 80066b2:	4b83      	ldr	r3, [pc, #524]	; (80068c0 <USB_EPStartXfer+0x2dc>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	440b      	add	r3, r1
 80066d0:	1e59      	subs	r1, r3, #1
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80066dc:	4b7a      	ldr	r3, [pc, #488]	; (80068c8 <USB_EPStartXfer+0x2e4>)
 80066de:	400b      	ands	r3, r1
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	0148      	lsls	r0, r1, #5
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	4401      	add	r1, r0
 80066e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066ec:	4313      	orrs	r3, r2
 80066ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	0148      	lsls	r0, r1, #5
 800670a:	69f9      	ldr	r1, [r7, #28]
 800670c:	4401      	add	r1, r0
 800670e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006712:	4313      	orrs	r3, r2
 8006714:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	791b      	ldrb	r3, [r3, #4]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d11f      	bne.n	800675e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800673c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800675c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d14b      	bne.n	80067fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	461a      	mov	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d128      	bne.n	80067da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d110      	bne.n	80067ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	e00f      	b.n	80067da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e137      	b.n	8006a6c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800681a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	791b      	ldrb	r3, [r3, #4]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d015      	beq.n	8006850 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 811f 	beq.w	8006a6c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	2101      	movs	r1, #1
 8006840:	fa01 f303 	lsl.w	r3, r1, r3
 8006844:	69f9      	ldr	r1, [r7, #28]
 8006846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800684a:	4313      	orrs	r3, r2
 800684c:	634b      	str	r3, [r1, #52]	; 0x34
 800684e:	e10d      	b.n	8006a6c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d110      	bne.n	8006882 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	e00f      	b.n	80068a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	0151      	lsls	r1, r2, #5
 8006894:	69fa      	ldr	r2, [r7, #28]
 8006896:	440a      	add	r2, r1
 8006898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	6919      	ldr	r1, [r3, #16]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	b298      	uxth	r0, r3
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4603      	mov	r3, r0
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 faea 	bl	8006e90 <USB_WritePacket>
 80068bc:	e0d6      	b.n	8006a6c <USB_EPStartXfer+0x488>
 80068be:	bf00      	nop
 80068c0:	e007ffff 	.word	0xe007ffff
 80068c4:	fff80000 	.word	0xfff80000
 80068c8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	0159      	lsls	r1, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	4619      	mov	r1, r3
 80068e8:	4b63      	ldr	r3, [pc, #396]	; (8006a78 <USB_EPStartXfer+0x494>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	0159      	lsls	r1, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	440b      	add	r3, r1
 8006904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006908:	4619      	mov	r1, r3
 800690a:	4b5c      	ldr	r3, [pc, #368]	; (8006a7c <USB_EPStartXfer+0x498>)
 800690c:	4013      	ands	r3, r2
 800690e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d123      	bne.n	8006960 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800692e:	69b9      	ldr	r1, [r7, #24]
 8006930:	0148      	lsls	r0, r1, #5
 8006932:	69f9      	ldr	r1, [r7, #28]
 8006934:	4401      	add	r1, r0
 8006936:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800693a:	4313      	orrs	r3, r2
 800693c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800695c:	6113      	str	r3, [r2, #16]
 800695e:	e037      	b.n	80069d0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	4413      	add	r3, r2
 800696a:	1e5a      	subs	r2, r3, #1
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	fbb2 f3f3 	udiv	r3, r2, r3
 8006974:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	8afa      	ldrh	r2, [r7, #22]
 800697c:	fb03 f202 	mul.w	r2, r3, r2
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	8afb      	ldrh	r3, [r7, #22]
 8006994:	04d9      	lsls	r1, r3, #19
 8006996:	4b3a      	ldr	r3, [pc, #232]	; (8006a80 <USB_EPStartXfer+0x49c>)
 8006998:	400b      	ands	r3, r1
 800699a:	69b9      	ldr	r1, [r7, #24]
 800699c:	0148      	lsls	r0, r1, #5
 800699e:	69f9      	ldr	r1, [r7, #28]
 80069a0:	4401      	add	r1, r0
 80069a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069a6:	4313      	orrs	r3, r2
 80069a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	0148      	lsls	r0, r1, #5
 80069c4:	69f9      	ldr	r1, [r7, #28]
 80069c6:	4401      	add	r1, r0
 80069c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069cc:	4313      	orrs	r3, r2
 80069ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10d      	bne.n	80069f2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6919      	ldr	r1, [r3, #16]
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	460a      	mov	r2, r1
 80069f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d128      	bne.n	8006a4c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d110      	bne.n	8006a2c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e00f      	b.n	8006a4c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	fff80000 	.word	0xfff80000
 8006a7c:	e007ffff 	.word	0xe007ffff
 8006a80:	1ff80000 	.word	0x1ff80000

08006a84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	f040 80ce 	bne.w	8006c42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d132      	bne.n	8006b14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	0159      	lsls	r1, r3, #5
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	440b      	add	r3, r1
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4b9a      	ldr	r3, [pc, #616]	; (8006d34 <USB_EP0StartXfer+0x2b0>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	0159      	lsls	r1, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	440b      	add	r3, r1
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4b8a      	ldr	r3, [pc, #552]	; (8006d38 <USB_EP0StartXfer+0x2b4>)
 8006b0e:	4013      	ands	r3, r2
 8006b10:	610b      	str	r3, [r1, #16]
 8006b12:	e04e      	b.n	8006bb2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	0159      	lsls	r1, r3, #5
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	440b      	add	r3, r1
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4b81      	ldr	r3, [pc, #516]	; (8006d38 <USB_EP0StartXfer+0x2b4>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	0159      	lsls	r1, r3, #5
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	440b      	add	r3, r1
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	4619      	mov	r1, r3
 8006b52:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <USB_EP0StartXfer+0x2b0>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	699a      	ldr	r2, [r3, #24]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d903      	bls.n	8006b6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba2:	6939      	ldr	r1, [r7, #16]
 8006ba4:	0148      	lsls	r0, r1, #5
 8006ba6:	6979      	ldr	r1, [r7, #20]
 8006ba8:	4401      	add	r1, r0
 8006baa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d11e      	bne.n	8006bf6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	461a      	mov	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e097      	b.n	8006d26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 8083 	beq.w	8006d26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	2101      	movs	r1, #1
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	6979      	ldr	r1, [r7, #20]
 8006c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	634b      	str	r3, [r1, #52]	; 0x34
 8006c40:	e071      	b.n	8006d26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	0159      	lsls	r1, r3, #5
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	440b      	add	r3, r1
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4b36      	ldr	r3, [pc, #216]	; (8006d38 <USB_EP0StartXfer+0x2b4>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	0159      	lsls	r1, r3, #5
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	440b      	add	r3, r1
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <USB_EP0StartXfer+0x2b0>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd4:	6939      	ldr	r1, [r7, #16]
 8006cd6:	0148      	lsls	r0, r1, #5
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	4401      	add	r1, r0
 8006cdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d10d      	bne.n	8006d06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6919      	ldr	r1, [r3, #16]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d02:	460a      	mov	r2, r1
 8006d04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	e007ffff 	.word	0xe007ffff
 8006d38:	fff80000 	.word	0xfff80000

08006d3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d14a      	bne.n	8006df0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d72:	f040 8086 	bne.w	8006e82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	7812      	ldrb	r2, [r2, #0]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	7812      	ldrb	r2, [r2, #0]
 8006dae:	0151      	lsls	r1, r2, #5
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	440a      	add	r2, r1
 8006db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d902      	bls.n	8006dd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8006dd2:	e056      	b.n	8006e82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dec:	d0e7      	beq.n	8006dbe <USB_EPStopXfer+0x82>
 8006dee:	e048      	b.n	8006e82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d13b      	bne.n	8006e82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	7812      	ldrb	r2, [r2, #0]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d902      	bls.n	8006e68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	75fb      	strb	r3, [r7, #23]
          break;
 8006e66:	e00c      	b.n	8006e82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e80:	d0e7      	beq.n	8006e52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b089      	sub	sp, #36	; 0x24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	71fb      	strb	r3, [r7, #7]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006eae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d123      	bne.n	8006efe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006eb6:	88bb      	ldrh	r3, [r7, #4]
 8006eb8:	3303      	adds	r3, #3
 8006eba:	089b      	lsrs	r3, r3, #2
 8006ebc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	e018      	b.n	8006ef6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	031a      	lsls	r2, r3, #12
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	3301      	adds	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	3301      	adds	r3, #1
 8006eee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d3e2      	bcc.n	8006ec4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3724      	adds	r7, #36	; 0x24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b08b      	sub	sp, #44	; 0x2c
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	089b      	lsrs	r3, r3, #2
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f32:	2300      	movs	r3, #0
 8006f34:	623b      	str	r3, [r7, #32]
 8006f36:	e014      	b.n	8006f62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	3301      	adds	r3, #1
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	3301      	adds	r3, #1
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	3301      	adds	r3, #1
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	623b      	str	r3, [r7, #32]
 8006f62:	6a3a      	ldr	r2, [r7, #32]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d3e6      	bcc.n	8006f38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f6a:	8bfb      	ldrh	r3, [r7, #30]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01e      	beq.n	8006fae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f107 0310 	add.w	r3, r7, #16
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	701a      	strb	r2, [r3, #0]
      i++;
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006fa2:	8bfb      	ldrh	r3, [r7, #30]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fa8:	8bfb      	ldrh	r3, [r7, #30]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ea      	bne.n	8006f84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	372c      	adds	r7, #44	; 0x2c
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d12c      	bne.n	8007032 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	db12      	blt.n	8007010 <USB_EPSetStall+0x54>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00f      	beq.n	8007010 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800700e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	e02b      	b.n	800708a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db12      	blt.n	800706a <USB_EPSetStall+0xae>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00f      	beq.n	800706a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	440a      	add	r2, r1
 8007060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007064:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007068:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007088:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d128      	bne.n	8007106 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	791b      	ldrb	r3, [r3, #4]
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d003      	beq.n	80070e4 <USB_EPClearStall+0x4c>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	791b      	ldrb	r3, [r3, #4]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d138      	bne.n	8007156 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	e027      	b.n	8007156 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007120:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007124:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	2b03      	cmp	r3, #3
 800712c:	d003      	beq.n	8007136 <USB_EPClearStall+0x9e>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	791b      	ldrb	r3, [r3, #4]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d10f      	bne.n	8007156 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007154:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007182:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007186:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007198:	68f9      	ldr	r1, [r7, #12]
 800719a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800719e:	4313      	orrs	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071ca:	f023 0303 	bic.w	r3, r3, #3
 80071ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071de:	f023 0302 	bic.w	r3, r3, #2
 80071e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b085      	sub	sp, #20
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800720c:	f023 0303 	bic.w	r3, r3, #3
 8007210:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007220:	f043 0302 	orr.w	r3, r3, #2
 8007224:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	4013      	ands	r3, r2
 800727c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	0c1b      	lsrs	r3, r3, #16
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	4013      	ands	r3, r2
 80072b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	b29b      	uxth	r3, r3
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	4013      	ands	r3, r2
 80072ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072f0:	68bb      	ldr	r3, [r7, #8]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072fe:	b480      	push	{r7}
 8007300:	b087      	sub	sp, #28
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	fa22 f303 	lsr.w	r3, r2, r3
 800732e:	01db      	lsls	r3, r3, #7
 8007330:	b2db      	uxtb	r3, r3
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4013      	ands	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800734c:	68bb      	ldr	r3, [r7, #8]
}
 800734e:	4618      	mov	r0, r3
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	f003 0301 	and.w	r3, r3, #1
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
	...

08007378 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007392:	4619      	mov	r1, r3
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <USB_ActivateSetup+0x44>)
 8007396:	4013      	ands	r3, r2
 8007398:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	fffff800 	.word	0xfffff800

080073c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	460b      	mov	r3, r1
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	333c      	adds	r3, #60	; 0x3c
 80073d6:	3304      	adds	r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4a26      	ldr	r2, [pc, #152]	; (8007478 <USB_EP0_OutStart+0xb8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d90a      	bls.n	80073fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f4:	d101      	bne.n	80073fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e037      	b.n	800746a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007400:	461a      	mov	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007428:	f043 0318 	orr.w	r3, r3, #24
 800742c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007440:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d10f      	bne.n	8007468 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007462:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	4f54300a 	.word	0x4f54300a

0800747c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <USB_CoreReset+0x64>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e01b      	b.n	80074d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	daf2      	bge.n	8007488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f043 0201 	orr.w	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <USB_CoreReset+0x64>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d901      	bls.n	80074c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e006      	b.n	80074d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d0f0      	beq.n	80074b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	00030d40 	.word	0x00030d40

080074e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074f4:	f00a f956 	bl	80117a4 <malloc>
 80074f8:	4603      	mov	r3, r0
 80074fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	32b0      	adds	r2, #176	; 0xb0
 800750c:	2100      	movs	r1, #0
 800750e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007512:	2302      	movs	r3, #2
 8007514:	e0d4      	b.n	80076c0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007516:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800751a:	2100      	movs	r1, #0
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f00a f96f 	bl	8011800 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	32b0      	adds	r2, #176	; 0xb0
 800752c:	68f9      	ldr	r1, [r7, #12]
 800752e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	32b0      	adds	r2, #176	; 0xb0
 800753c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7c1b      	ldrb	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d138      	bne.n	80075c0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800754e:	4b5e      	ldr	r3, [pc, #376]	; (80076c8 <USBD_CDC_Init+0x1e4>)
 8007550:	7819      	ldrb	r1, [r3, #0]
 8007552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007556:	2202      	movs	r2, #2
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f005 fe9c 	bl	800d296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800755e:	4b5a      	ldr	r3, [pc, #360]	; (80076c8 <USBD_CDC_Init+0x1e4>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f003 020f 	and.w	r2, r3, #15
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3324      	adds	r3, #36	; 0x24
 8007574:	2201      	movs	r2, #1
 8007576:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007578:	4b54      	ldr	r3, [pc, #336]	; (80076cc <USBD_CDC_Init+0x1e8>)
 800757a:	7819      	ldrb	r1, [r3, #0]
 800757c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007580:	2202      	movs	r2, #2
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f005 fe87 	bl	800d296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007588:	4b50      	ldr	r3, [pc, #320]	; (80076cc <USBD_CDC_Init+0x1e8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075a0:	2201      	movs	r2, #1
 80075a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075a4:	4b4a      	ldr	r3, [pc, #296]	; (80076d0 <USBD_CDC_Init+0x1ec>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 020f 	and.w	r2, r3, #15
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	440b      	add	r3, r1
 80075b8:	3326      	adds	r3, #38	; 0x26
 80075ba:	2210      	movs	r2, #16
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e035      	b.n	800762c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80075c0:	4b41      	ldr	r3, [pc, #260]	; (80076c8 <USBD_CDC_Init+0x1e4>)
 80075c2:	7819      	ldrb	r1, [r3, #0]
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	2202      	movs	r2, #2
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f005 fe64 	bl	800d296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80075ce:	4b3e      	ldr	r3, [pc, #248]	; (80076c8 <USBD_CDC_Init+0x1e4>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 020f 	and.w	r2, r3, #15
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	4613      	mov	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	3324      	adds	r3, #36	; 0x24
 80075e4:	2201      	movs	r2, #1
 80075e6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075e8:	4b38      	ldr	r3, [pc, #224]	; (80076cc <USBD_CDC_Init+0x1e8>)
 80075ea:	7819      	ldrb	r1, [r3, #0]
 80075ec:	2340      	movs	r3, #64	; 0x40
 80075ee:	2202      	movs	r2, #2
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f005 fe50 	bl	800d296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075f6:	4b35      	ldr	r3, [pc, #212]	; (80076cc <USBD_CDC_Init+0x1e8>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 020f 	and.w	r2, r3, #15
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800760e:	2201      	movs	r2, #1
 8007610:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007612:	4b2f      	ldr	r3, [pc, #188]	; (80076d0 <USBD_CDC_Init+0x1ec>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	3326      	adds	r3, #38	; 0x26
 8007628:	2210      	movs	r2, #16
 800762a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800762c:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <USBD_CDC_Init+0x1ec>)
 800762e:	7819      	ldrb	r1, [r3, #0]
 8007630:	2308      	movs	r3, #8
 8007632:	2203      	movs	r2, #3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f005 fe2e 	bl	800d296 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800763a:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <USBD_CDC_Init+0x1ec>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	f003 020f 	and.w	r2, r3, #15
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	3324      	adds	r3, #36	; 0x24
 8007650:	2201      	movs	r2, #1
 8007652:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	33b0      	adds	r3, #176	; 0xb0
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800768a:	2302      	movs	r3, #2
 800768c:	e018      	b.n	80076c0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	7c1b      	ldrb	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <USBD_CDC_Init+0x1e8>)
 8007698:	7819      	ldrb	r1, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f005 fee5 	bl	800d474 <USBD_LL_PrepareReceive>
 80076aa:	e008      	b.n	80076be <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <USBD_CDC_Init+0x1e8>)
 80076ae:	7819      	ldrb	r1, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076b6:	2340      	movs	r3, #64	; 0x40
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f005 fedb 	bl	800d474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000097 	.word	0x20000097
 80076cc:	20000098 	.word	0x20000098
 80076d0:	20000099 	.word	0x20000099

080076d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80076e0:	4b3a      	ldr	r3, [pc, #232]	; (80077cc <USBD_CDC_DeInit+0xf8>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f005 fdfb 	bl	800d2e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80076ec:	4b37      	ldr	r3, [pc, #220]	; (80077cc <USBD_CDC_DeInit+0xf8>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	3324      	adds	r3, #36	; 0x24
 8007702:	2200      	movs	r2, #0
 8007704:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007706:	4b32      	ldr	r3, [pc, #200]	; (80077d0 <USBD_CDC_DeInit+0xfc>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f005 fde8 	bl	800d2e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007712:	4b2f      	ldr	r3, [pc, #188]	; (80077d0 <USBD_CDC_DeInit+0xfc>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 020f 	and.w	r2, r3, #15
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800772a:	2200      	movs	r2, #0
 800772c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800772e:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <USBD_CDC_DeInit+0x100>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f005 fdd4 	bl	800d2e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800773a:	4b26      	ldr	r3, [pc, #152]	; (80077d4 <USBD_CDC_DeInit+0x100>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	f003 020f 	and.w	r2, r3, #15
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	440b      	add	r3, r1
 800774e:	3324      	adds	r3, #36	; 0x24
 8007750:	2200      	movs	r2, #0
 8007752:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007754:	4b1f      	ldr	r3, [pc, #124]	; (80077d4 <USBD_CDC_DeInit+0x100>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 020f 	and.w	r2, r3, #15
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	3326      	adds	r3, #38	; 0x26
 800776a:	2200      	movs	r2, #0
 800776c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	32b0      	adds	r2, #176	; 0xb0
 8007778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01f      	beq.n	80077c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	33b0      	adds	r3, #176	; 0xb0
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	32b0      	adds	r2, #176	; 0xb0
 800779e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f00a f806 	bl	80117b4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	32b0      	adds	r2, #176	; 0xb0
 80077b2:	2100      	movs	r1, #0
 80077b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000097 	.word	0x20000097
 80077d0:	20000098 	.word	0x20000098
 80077d4:	20000099 	.word	0x20000099

080077d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	32b0      	adds	r2, #176	; 0xb0
 80077ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007804:	2303      	movs	r3, #3
 8007806:	e0bf      	b.n	8007988 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007810:	2b00      	cmp	r3, #0
 8007812:	d050      	beq.n	80078b6 <USBD_CDC_Setup+0xde>
 8007814:	2b20      	cmp	r3, #32
 8007816:	f040 80af 	bne.w	8007978 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	88db      	ldrh	r3, [r3, #6]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d03a      	beq.n	8007898 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b25b      	sxtb	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	da1b      	bge.n	8007864 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	33b0      	adds	r3, #176	; 0xb0
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007842:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	88d2      	ldrh	r2, [r2, #6]
 8007848:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88db      	ldrh	r3, [r3, #6]
 800784e:	2b07      	cmp	r3, #7
 8007850:	bf28      	it	cs
 8007852:	2307      	movcs	r3, #7
 8007854:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	89fa      	ldrh	r2, [r7, #14]
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 fdad 	bl	80093bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007862:	e090      	b.n	8007986 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785a      	ldrb	r2, [r3, #1]
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b3f      	cmp	r3, #63	; 0x3f
 8007874:	d803      	bhi.n	800787e <USBD_CDC_Setup+0xa6>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	88db      	ldrh	r3, [r3, #6]
 800787a:	b2da      	uxtb	r2, r3
 800787c:	e000      	b.n	8007880 <USBD_CDC_Setup+0xa8>
 800787e:	2240      	movs	r2, #64	; 0x40
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007886:	6939      	ldr	r1, [r7, #16]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800788e:	461a      	mov	r2, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fdbf 	bl	8009414 <USBD_CtlPrepareRx>
      break;
 8007896:	e076      	b.n	8007986 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	33b0      	adds	r3, #176	; 0xb0
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	7850      	ldrb	r0, [r2, #1]
 80078ae:	2200      	movs	r2, #0
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	4798      	blx	r3
      break;
 80078b4:	e067      	b.n	8007986 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b0b      	cmp	r3, #11
 80078bc:	d851      	bhi.n	8007962 <USBD_CDC_Setup+0x18a>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <USBD_CDC_Setup+0xec>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078f5 	.word	0x080078f5
 80078c8:	08007971 	.word	0x08007971
 80078cc:	08007963 	.word	0x08007963
 80078d0:	08007963 	.word	0x08007963
 80078d4:	08007963 	.word	0x08007963
 80078d8:	08007963 	.word	0x08007963
 80078dc:	08007963 	.word	0x08007963
 80078e0:	08007963 	.word	0x08007963
 80078e4:	08007963 	.word	0x08007963
 80078e8:	08007963 	.word	0x08007963
 80078ec:	0800791f 	.word	0x0800791f
 80078f0:	08007949 	.word	0x08007949
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d107      	bne.n	8007910 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007900:	f107 030a 	add.w	r3, r7, #10
 8007904:	2202      	movs	r2, #2
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fd57 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800790e:	e032      	b.n	8007976 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fce1 	bl	80092da <USBD_CtlError>
            ret = USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	75fb      	strb	r3, [r7, #23]
          break;
 800791c:	e02b      	b.n	8007976 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d107      	bne.n	800793a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800792a:	f107 030d 	add.w	r3, r7, #13
 800792e:	2201      	movs	r2, #1
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fd42 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007938:	e01d      	b.n	8007976 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fccc 	bl	80092da <USBD_CtlError>
            ret = USBD_FAIL;
 8007942:	2303      	movs	r3, #3
 8007944:	75fb      	strb	r3, [r7, #23]
          break;
 8007946:	e016      	b.n	8007976 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b03      	cmp	r3, #3
 8007952:	d00f      	beq.n	8007974 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fcbf 	bl	80092da <USBD_CtlError>
            ret = USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007960:	e008      	b.n	8007974 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 fcb8 	bl	80092da <USBD_CtlError>
          ret = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	75fb      	strb	r3, [r7, #23]
          break;
 800796e:	e002      	b.n	8007976 <USBD_CDC_Setup+0x19e>
          break;
 8007970:	bf00      	nop
 8007972:	e008      	b.n	8007986 <USBD_CDC_Setup+0x1ae>
          break;
 8007974:	bf00      	nop
      }
      break;
 8007976:	e006      	b.n	8007986 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fcad 	bl	80092da <USBD_CtlError>
      ret = USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	75fb      	strb	r3, [r7, #23]
      break;
 8007984:	bf00      	nop
  }

  return (uint8_t)ret;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	32b0      	adds	r2, #176	; 0xb0
 80079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e065      	b.n	8007a86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	32b0      	adds	r2, #176	; 0xb0
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	3318      	adds	r3, #24
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d02f      	beq.n	8007a44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	f003 020f 	and.w	r2, r3, #15
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	3318      	adds	r3, #24
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	f003 010f 	and.w	r1, r3, #15
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	460b      	mov	r3, r1
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	440b      	add	r3, r1
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4403      	add	r3, r0
 8007a0c:	3348      	adds	r3, #72	; 0x48
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a14:	fb01 f303 	mul.w	r3, r1, r3
 8007a18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d112      	bne.n	8007a44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	f003 020f 	and.w	r2, r3, #15
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	3318      	adds	r3, #24
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a36:	78f9      	ldrb	r1, [r7, #3]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f005 fcf8 	bl	800d432 <USBD_LL_Transmit>
 8007a42:	e01f      	b.n	8007a84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	33b0      	adds	r3, #176	; 0xb0
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d010      	beq.n	8007a84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	33b0      	adds	r3, #176	; 0xb0
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007a80:	78fa      	ldrb	r2, [r7, #3]
 8007a82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	460b      	mov	r3, r1
 8007a98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32b0      	adds	r2, #176	; 0xb0
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	32b0      	adds	r2, #176	; 0xb0
 8007ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e01a      	b.n	8007af6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f005 fcf6 	bl	800d4b6 <USBD_LL_GetRxDataSize>
 8007aca:	4602      	mov	r2, r0
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	33b0      	adds	r3, #176	; 0xb0
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007af0:	4611      	mov	r1, r2
 8007af2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	32b0      	adds	r2, #176	; 0xb0
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e025      	b.n	8007b6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	33b0      	adds	r3, #176	; 0xb0
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01a      	beq.n	8007b6a <USBD_CDC_EP0_RxReady+0x6c>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b3a:	2bff      	cmp	r3, #255	; 0xff
 8007b3c:	d015      	beq.n	8007b6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	33b0      	adds	r3, #176	; 0xb0
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007b56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b5e:	b292      	uxth	r2, r2
 8007b60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	22ff      	movs	r2, #255	; 0xff
 8007b66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b7c:	2182      	movs	r1, #130	; 0x82
 8007b7e:	4818      	ldr	r0, [pc, #96]	; (8007be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b80:	f000 fd49 	bl	8008616 <USBD_GetEpDesc>
 8007b84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b86:	2101      	movs	r1, #1
 8007b88:	4815      	ldr	r0, [pc, #84]	; (8007be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b8a:	f000 fd44 	bl	8008616 <USBD_GetEpDesc>
 8007b8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b90:	2181      	movs	r1, #129	; 0x81
 8007b92:	4813      	ldr	r0, [pc, #76]	; (8007be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007b94:	f000 fd3f 	bl	8008616 <USBD_GetEpDesc>
 8007b98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2210      	movs	r2, #16
 8007ba4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bb4:	711a      	strb	r2, [r3, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d006      	beq.n	8007bce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bc8:	711a      	strb	r2, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2243      	movs	r2, #67	; 0x43
 8007bd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000054 	.word	0x20000054

08007be4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bec:	2182      	movs	r1, #130	; 0x82
 8007bee:	4818      	ldr	r0, [pc, #96]	; (8007c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bf0:	f000 fd11 	bl	8008616 <USBD_GetEpDesc>
 8007bf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	4815      	ldr	r0, [pc, #84]	; (8007c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007bfa:	f000 fd0c 	bl	8008616 <USBD_GetEpDesc>
 8007bfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c00:	2181      	movs	r1, #129	; 0x81
 8007c02:	4813      	ldr	r0, [pc, #76]	; (8007c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c04:	f000 fd07 	bl	8008616 <USBD_GetEpDesc>
 8007c08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2210      	movs	r2, #16
 8007c14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d006      	beq.n	8007c2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	711a      	strb	r2, [r3, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f042 0202 	orr.w	r2, r2, #2
 8007c28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d006      	beq.n	8007c3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	711a      	strb	r2, [r3, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f042 0202 	orr.w	r2, r2, #2
 8007c3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2243      	movs	r2, #67	; 0x43
 8007c42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c44:	4b02      	ldr	r3, [pc, #8]	; (8007c50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000054 	.word	0x20000054

08007c54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c5c:	2182      	movs	r1, #130	; 0x82
 8007c5e:	4818      	ldr	r0, [pc, #96]	; (8007cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c60:	f000 fcd9 	bl	8008616 <USBD_GetEpDesc>
 8007c64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c66:	2101      	movs	r1, #1
 8007c68:	4815      	ldr	r0, [pc, #84]	; (8007cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c6a:	f000 fcd4 	bl	8008616 <USBD_GetEpDesc>
 8007c6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c70:	2181      	movs	r1, #129	; 0x81
 8007c72:	4813      	ldr	r0, [pc, #76]	; (8007cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c74:	f000 fccf 	bl	8008616 <USBD_GetEpDesc>
 8007c78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2210      	movs	r2, #16
 8007c84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d006      	beq.n	8007c9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c94:	711a      	strb	r2, [r3, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca8:	711a      	strb	r2, [r3, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2243      	movs	r2, #67	; 0x43
 8007cb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000054 	.word	0x20000054

08007cc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007cd2:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20000010 	.word	0x20000010

08007ce4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e009      	b.n	8007d0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	33b0      	adds	r3, #176	; 0xb0
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	32b0      	adds	r2, #176	; 0xb0
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e008      	b.n	8007d50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	32b0      	adds	r2, #176	; 0xb0
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e004      	b.n	8007d8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	32b0      	adds	r2, #176	; 0xb0
 8007daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007db0:	2301      	movs	r3, #1
 8007db2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e025      	b.n	8007e0a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d11f      	bne.n	8007e08 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007dd0:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <USBD_CDC_TransmitPacket+0x7c>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	f003 020f 	and.w	r2, r3, #15
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4403      	add	r3, r0
 8007dea:	3318      	adds	r3, #24
 8007dec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <USBD_CDC_TransmitPacket+0x7c>)
 8007df0:	7819      	ldrb	r1, [r3, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f005 fb17 	bl	800d432 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000097 	.word	0x20000097

08007e18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	32b0      	adds	r2, #176	; 0xb0
 8007e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	32b0      	adds	r2, #176	; 0xb0
 8007e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e018      	b.n	8007e78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	7c1b      	ldrb	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <USBD_CDC_ReceivePacket+0x68>)
 8007e50:	7819      	ldrb	r1, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f005 fb09 	bl	800d474 <USBD_LL_PrepareReceive>
 8007e62:	e008      	b.n	8007e76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <USBD_CDC_ReceivePacket+0x68>)
 8007e66:	7819      	ldrb	r1, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e6e:	2340      	movs	r3, #64	; 0x40
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f005 faff 	bl	800d474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000098 	.word	0x20000098

08007e84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e01f      	b.n	8007edc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	79fa      	ldrb	r2, [r7, #7]
 8007ece:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f005 f979 	bl	800d1c8 <USBD_LL_Init>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e025      	b.n	8007f48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	32ae      	adds	r2, #174	; 0xae
 8007f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00f      	beq.n	8007f38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32ae      	adds	r2, #174	; 0xae
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	f107 020e 	add.w	r2, r7, #14
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
 8007f30:	4602      	mov	r2, r0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f005 f981 	bl	800d260 <USBD_LL_Start>
 8007f5e:	4603      	mov	r3, r0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d009      	beq.n	8007fac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 f932 	bl	8009266 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008010:	461a      	mov	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	2b02      	cmp	r3, #2
 8008024:	d01a      	beq.n	800805c <USBD_LL_SetupStage+0x72>
 8008026:	2b02      	cmp	r3, #2
 8008028:	d822      	bhi.n	8008070 <USBD_LL_SetupStage+0x86>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <USBD_LL_SetupStage+0x4a>
 800802e:	2b01      	cmp	r3, #1
 8008030:	d00a      	beq.n	8008048 <USBD_LL_SetupStage+0x5e>
 8008032:	e01d      	b.n	8008070 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb5f 	bl	8008700 <USBD_StdDevReq>
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]
      break;
 8008046:	e020      	b.n	800808a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fbc7 	bl	80087e4 <USBD_StdItfReq>
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]
      break;
 800805a:	e016      	b.n	800808a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fc29 	bl	80088bc <USBD_StdEPReq>
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
      break;
 800806e:	e00c      	b.n	800808a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008076:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800807a:	b2db      	uxtb	r3, r3
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f005 f94e 	bl	800d320 <USBD_LL_StallEP>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]
      break;
 8008088:	bf00      	nop
  }

  return ret;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	460b      	mov	r3, r1
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080a6:	7afb      	ldrb	r3, [r7, #11]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d16e      	bne.n	800818a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	f040 8098 	bne.w	80081f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d913      	bls.n	80080f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	1ad2      	subs	r2, r2, r3
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	4293      	cmp	r3, r2
 80080e4:	bf28      	it	cs
 80080e6:	4613      	movcs	r3, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f001 f9ae 	bl	800944e <USBD_CtlContinueRx>
 80080f2:	e07d      	b.n	80081f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d014      	beq.n	800812c <USBD_LL_DataOutStage+0x98>
 8008102:	2b02      	cmp	r3, #2
 8008104:	d81d      	bhi.n	8008142 <USBD_LL_DataOutStage+0xae>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <USBD_LL_DataOutStage+0x7c>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d003      	beq.n	8008116 <USBD_LL_DataOutStage+0x82>
 800810e:	e018      	b.n	8008142 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	75bb      	strb	r3, [r7, #22]
            break;
 8008114:	e018      	b.n	8008148 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800811c:	b2db      	uxtb	r3, r3
 800811e:	4619      	mov	r1, r3
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fa5e 	bl	80085e2 <USBD_CoreFindIF>
 8008126:	4603      	mov	r3, r0
 8008128:	75bb      	strb	r3, [r7, #22]
            break;
 800812a:	e00d      	b.n	8008148 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008132:	b2db      	uxtb	r3, r3
 8008134:	4619      	mov	r1, r3
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fa60 	bl	80085fc <USBD_CoreFindEP>
 800813c:	4603      	mov	r3, r0
 800813e:	75bb      	strb	r3, [r7, #22]
            break;
 8008140:	e002      	b.n	8008148 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	75bb      	strb	r3, [r7, #22]
            break;
 8008146:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008148:	7dbb      	ldrb	r3, [r7, #22]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d119      	bne.n	8008182 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b03      	cmp	r3, #3
 8008158:	d113      	bne.n	8008182 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800815a:	7dba      	ldrb	r2, [r7, #22]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	32ae      	adds	r2, #174	; 0xae
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00b      	beq.n	8008182 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800816a:	7dba      	ldrb	r2, [r7, #22]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008172:	7dba      	ldrb	r2, [r7, #22]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	32ae      	adds	r2, #174	; 0xae
 8008178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f001 f974 	bl	8009470 <USBD_CtlSendStatus>
 8008188:	e032      	b.n	80081f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008190:	b2db      	uxtb	r3, r3
 8008192:	4619      	mov	r1, r3
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fa31 	bl	80085fc <USBD_CoreFindEP>
 800819a:	4603      	mov	r3, r0
 800819c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800819e:	7dbb      	ldrb	r3, [r7, #22]
 80081a0:	2bff      	cmp	r3, #255	; 0xff
 80081a2:	d025      	beq.n	80081f0 <USBD_LL_DataOutStage+0x15c>
 80081a4:	7dbb      	ldrb	r3, [r7, #22]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d122      	bne.n	80081f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d117      	bne.n	80081e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80081b6:	7dba      	ldrb	r2, [r7, #22]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	32ae      	adds	r2, #174	; 0xae
 80081bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00f      	beq.n	80081e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80081c6:	7dba      	ldrb	r2, [r7, #22]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80081ce:	7dba      	ldrb	r2, [r7, #22]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	32ae      	adds	r2, #174	; 0xae
 80081d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	7afa      	ldrb	r2, [r7, #11]
 80081dc:	4611      	mov	r1, r2
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	4798      	blx	r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	e000      	b.n	80081f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b086      	sub	sp, #24
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	460b      	mov	r3, r1
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d16f      	bne.n	80082ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3314      	adds	r3, #20
 8008212:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800821a:	2b02      	cmp	r3, #2
 800821c:	d15a      	bne.n	80082d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	689a      	ldr	r2, [r3, #8]
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	429a      	cmp	r2, r3
 8008228:	d914      	bls.n	8008254 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	1ad2      	subs	r2, r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	461a      	mov	r2, r3
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f001 f8d6 	bl	80093f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008246:	2300      	movs	r3, #0
 8008248:	2200      	movs	r2, #0
 800824a:	2100      	movs	r1, #0
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f005 f911 	bl	800d474 <USBD_LL_PrepareReceive>
 8008252:	e03f      	b.n	80082d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	429a      	cmp	r2, r3
 800825e:	d11c      	bne.n	800829a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008268:	429a      	cmp	r2, r3
 800826a:	d316      	bcc.n	800829a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008276:	429a      	cmp	r2, r3
 8008278:	d20f      	bcs.n	800829a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800827a:	2200      	movs	r2, #0
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f001 f8b7 	bl	80093f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800828c:	2300      	movs	r3, #0
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f005 f8ee 	bl	800d474 <USBD_LL_PrepareReceive>
 8008298:	e01c      	b.n	80082d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d10f      	bne.n	80082c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c6:	2180      	movs	r1, #128	; 0x80
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f005 f829 	bl	800d320 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f001 f8e1 	bl	8009496 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d03a      	beq.n	8008354 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff fe42 	bl	8007f68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082ec:	e032      	b.n	8008354 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80082ee:	7afb      	ldrb	r3, [r7, #11]
 80082f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f97f 	bl	80085fc <USBD_CoreFindEP>
 80082fe:	4603      	mov	r3, r0
 8008300:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	2bff      	cmp	r3, #255	; 0xff
 8008306:	d025      	beq.n	8008354 <USBD_LL_DataInStage+0x15a>
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d122      	bne.n	8008354 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b03      	cmp	r3, #3
 8008318:	d11c      	bne.n	8008354 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800831a:	7dfa      	ldrb	r2, [r7, #23]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	32ae      	adds	r2, #174	; 0xae
 8008320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d014      	beq.n	8008354 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800832a:	7dfa      	ldrb	r2, [r7, #23]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008332:	7dfa      	ldrb	r2, [r7, #23]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	32ae      	adds	r2, #174	; 0xae
 8008338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	7afa      	ldrb	r2, [r7, #11]
 8008340:	4611      	mov	r1, r2
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	4798      	blx	r3
 8008346:	4603      	mov	r3, r0
 8008348:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800834a:	7dbb      	ldrb	r3, [r7, #22]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008350:	7dbb      	ldrb	r3, [r7, #22]
 8008352:	e000      	b.n	8008356 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d014      	beq.n	80083c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00e      	beq.n	80083c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6852      	ldr	r2, [r2, #4]
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	4611      	mov	r1, r2
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083c4:	2340      	movs	r3, #64	; 0x40
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f004 ff63 	bl	800d296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2240      	movs	r2, #64	; 0x40
 80083dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083e0:	2340      	movs	r3, #64	; 0x40
 80083e2:	2200      	movs	r2, #0
 80083e4:	2180      	movs	r1, #128	; 0x80
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f004 ff55 	bl	800d296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2240      	movs	r2, #64	; 0x40
 80083f6:	621a      	str	r2, [r3, #32]

  return ret;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008430:	b2da      	uxtb	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2204      	movs	r2, #4
 800843c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b04      	cmp	r3, #4
 8008460:	d106      	bne.n	8008470 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008468:	b2da      	uxtb	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b03      	cmp	r3, #3
 8008490:	d110      	bne.n	80084b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00b      	beq.n	80084b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	32ae      	adds	r2, #174	; 0xae
 80084d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80084dc:	2303      	movs	r3, #3
 80084de:	e01c      	b.n	800851a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d115      	bne.n	8008518 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	32ae      	adds	r2, #174	; 0xae
 80084f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	32ae      	adds	r2, #174	; 0xae
 800850a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	4611      	mov	r1, r2
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	32ae      	adds	r2, #174	; 0xae
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e01c      	b.n	800857e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b03      	cmp	r3, #3
 800854e:	d115      	bne.n	800857c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	32ae      	adds	r2, #174	; 0xae
 800855a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	32ae      	adds	r2, #174	; 0xae
 800856e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	78fa      	ldrb	r2, [r7, #3]
 8008576:	4611      	mov	r1, r2
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00e      	beq.n	80085d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6852      	ldr	r2, [r2, #4]
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	4611      	mov	r1, r2
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80085d4:	2303      	movs	r3, #3
 80085d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008608:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b086      	sub	sp, #24
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	885b      	ldrh	r3, [r3, #2]
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	429a      	cmp	r2, r3
 800863c:	d920      	bls.n	8008680 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008646:	e013      	b.n	8008670 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008648:	f107 030a 	add.w	r3, r7, #10
 800864c:	4619      	mov	r1, r3
 800864e:	6978      	ldr	r0, [r7, #20]
 8008650:	f000 f81b 	bl	800868a <USBD_GetNextDesc>
 8008654:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b05      	cmp	r3, #5
 800865c:	d108      	bne.n	8008670 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	789b      	ldrb	r3, [r3, #2]
 8008666:	78fa      	ldrb	r2, [r7, #3]
 8008668:	429a      	cmp	r2, r3
 800866a:	d008      	beq.n	800867e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	b29a      	uxth	r2, r3
 8008676:	897b      	ldrh	r3, [r7, #10]
 8008678:	429a      	cmp	r2, r3
 800867a:	d8e5      	bhi.n	8008648 <USBD_GetEpDesc+0x32>
 800867c:	e000      	b.n	8008680 <USBD_GetEpDesc+0x6a>
          break;
 800867e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008680:	693b      	ldr	r3, [r7, #16]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	3301      	adds	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086e2:	8a3b      	ldrh	r3, [r7, #16]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	b21a      	sxth	r2, r3
 80086e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	b21b      	sxth	r3, r3
 80086f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086f2:	89fb      	ldrh	r3, [r7, #14]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d005      	beq.n	8008726 <USBD_StdDevReq+0x26>
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d857      	bhi.n	80087ce <USBD_StdDevReq+0xce>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <USBD_StdDevReq+0x42>
 8008722:	2b20      	cmp	r3, #32
 8008724:	d153      	bne.n	80087ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	32ae      	adds	r2, #174	; 0xae
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	4798      	blx	r3
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
      break;
 8008740:	e04a      	b.n	80087d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	2b09      	cmp	r3, #9
 8008748:	d83b      	bhi.n	80087c2 <USBD_StdDevReq+0xc2>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <USBD_StdDevReq+0x50>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	080087a5 	.word	0x080087a5
 8008754:	080087b9 	.word	0x080087b9
 8008758:	080087c3 	.word	0x080087c3
 800875c:	080087af 	.word	0x080087af
 8008760:	080087c3 	.word	0x080087c3
 8008764:	08008783 	.word	0x08008783
 8008768:	08008779 	.word	0x08008779
 800876c:	080087c3 	.word	0x080087c3
 8008770:	0800879b 	.word	0x0800879b
 8008774:	0800878d 	.word	0x0800878d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa3c 	bl	8008bf8 <USBD_GetDescriptor>
          break;
 8008780:	e024      	b.n	80087cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fbcb 	bl	8008f20 <USBD_SetAddress>
          break;
 800878a:	e01f      	b.n	80087cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fc0a 	bl	8008fa8 <USBD_SetConfig>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
          break;
 8008798:	e018      	b.n	80087cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fcad 	bl	80090fc <USBD_GetConfig>
          break;
 80087a2:	e013      	b.n	80087cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fcde 	bl	8009168 <USBD_GetStatus>
          break;
 80087ac:	e00e      	b.n	80087cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fd0d 	bl	80091d0 <USBD_SetFeature>
          break;
 80087b6:	e009      	b.n	80087cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fd31 	bl	8009222 <USBD_ClrFeature>
          break;
 80087c0:	e004      	b.n	80087cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fd88 	bl	80092da <USBD_CtlError>
          break;
 80087ca:	bf00      	nop
      }
      break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fd82 	bl	80092da <USBD_CtlError>
      break;
 80087d6:	bf00      	nop
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop

080087e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d005      	beq.n	800880a <USBD_StdItfReq+0x26>
 80087fe:	2b40      	cmp	r3, #64	; 0x40
 8008800:	d852      	bhi.n	80088a8 <USBD_StdItfReq+0xc4>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <USBD_StdItfReq+0x26>
 8008806:	2b20      	cmp	r3, #32
 8008808:	d14e      	bne.n	80088a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008810:	b2db      	uxtb	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	2b02      	cmp	r3, #2
 8008816:	d840      	bhi.n	800889a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	889b      	ldrh	r3, [r3, #4]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b01      	cmp	r3, #1
 8008820:	d836      	bhi.n	8008890 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	889b      	ldrh	r3, [r3, #4]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff fed9 	bl	80085e2 <USBD_CoreFindIF>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2bff      	cmp	r3, #255	; 0xff
 8008838:	d01d      	beq.n	8008876 <USBD_StdItfReq+0x92>
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d11a      	bne.n	8008876 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008840:	7bba      	ldrb	r2, [r7, #14]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	32ae      	adds	r2, #174	; 0xae
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00f      	beq.n	8008870 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008850:	7bba      	ldrb	r2, [r7, #14]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008858:	7bba      	ldrb	r2, [r7, #14]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32ae      	adds	r2, #174	; 0xae
 800885e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800886e:	e004      	b.n	800887a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008870:	2303      	movs	r3, #3
 8008872:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008874:	e001      	b.n	800887a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d110      	bne.n	80088a4 <USBD_StdItfReq+0xc0>
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10d      	bne.n	80088a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fdf1 	bl	8009470 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800888e:	e009      	b.n	80088a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fd21 	bl	80092da <USBD_CtlError>
          break;
 8008898:	e004      	b.n	80088a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fd1c 	bl	80092da <USBD_CtlError>
          break;
 80088a2:	e000      	b.n	80088a6 <USBD_StdItfReq+0xc2>
          break;
 80088a4:	bf00      	nop
      }
      break;
 80088a6:	e004      	b.n	80088b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fd15 	bl	80092da <USBD_CtlError>
      break;
 80088b0:	bf00      	nop
  }

  return ret;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	889b      	ldrh	r3, [r3, #4]
 80088ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d007      	beq.n	80088ec <USBD_StdEPReq+0x30>
 80088dc:	2b40      	cmp	r3, #64	; 0x40
 80088de:	f200 817f 	bhi.w	8008be0 <USBD_StdEPReq+0x324>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d02a      	beq.n	800893c <USBD_StdEPReq+0x80>
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	f040 817a 	bne.w	8008be0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff fe83 	bl	80085fc <USBD_CoreFindEP>
 80088f6:	4603      	mov	r3, r0
 80088f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088fa:	7b7b      	ldrb	r3, [r7, #13]
 80088fc:	2bff      	cmp	r3, #255	; 0xff
 80088fe:	f000 8174 	beq.w	8008bea <USBD_StdEPReq+0x32e>
 8008902:	7b7b      	ldrb	r3, [r7, #13]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f040 8170 	bne.w	8008bea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800890a:	7b7a      	ldrb	r2, [r7, #13]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008912:	7b7a      	ldrb	r2, [r7, #13]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	32ae      	adds	r2, #174	; 0xae
 8008918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 8163 	beq.w	8008bea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008924:	7b7a      	ldrb	r2, [r7, #13]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32ae      	adds	r2, #174	; 0xae
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800893a:	e156      	b.n	8008bea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b03      	cmp	r3, #3
 8008942:	d008      	beq.n	8008956 <USBD_StdEPReq+0x9a>
 8008944:	2b03      	cmp	r3, #3
 8008946:	f300 8145 	bgt.w	8008bd4 <USBD_StdEPReq+0x318>
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 809b 	beq.w	8008a86 <USBD_StdEPReq+0x1ca>
 8008950:	2b01      	cmp	r3, #1
 8008952:	d03c      	beq.n	80089ce <USBD_StdEPReq+0x112>
 8008954:	e13e      	b.n	8008bd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d002      	beq.n	8008968 <USBD_StdEPReq+0xac>
 8008962:	2b03      	cmp	r3, #3
 8008964:	d016      	beq.n	8008994 <USBD_StdEPReq+0xd8>
 8008966:	e02c      	b.n	80089c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00d      	beq.n	800898a <USBD_StdEPReq+0xce>
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	2b80      	cmp	r3, #128	; 0x80
 8008972:	d00a      	beq.n	800898a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f004 fcd1 	bl	800d320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800897e:	2180      	movs	r1, #128	; 0x80
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f004 fccd 	bl	800d320 <USBD_LL_StallEP>
 8008986:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008988:	e020      	b.n	80089cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fca4 	bl	80092da <USBD_CtlError>
              break;
 8008992:	e01b      	b.n	80089cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	885b      	ldrh	r3, [r3, #2]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10e      	bne.n	80089ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00b      	beq.n	80089ba <USBD_StdEPReq+0xfe>
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b80      	cmp	r3, #128	; 0x80
 80089a6:	d008      	beq.n	80089ba <USBD_StdEPReq+0xfe>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	88db      	ldrh	r3, [r3, #6]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f004 fcb3 	bl	800d320 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fd58 	bl	8009470 <USBD_CtlSendStatus>

              break;
 80089c0:	e004      	b.n	80089cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fc88 	bl	80092da <USBD_CtlError>
              break;
 80089ca:	bf00      	nop
          }
          break;
 80089cc:	e107      	b.n	8008bde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d002      	beq.n	80089e0 <USBD_StdEPReq+0x124>
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d016      	beq.n	8008a0c <USBD_StdEPReq+0x150>
 80089de:	e04b      	b.n	8008a78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <USBD_StdEPReq+0x146>
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b80      	cmp	r3, #128	; 0x80
 80089ea:	d00a      	beq.n	8008a02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f004 fc95 	bl	800d320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089f6:	2180      	movs	r1, #128	; 0x80
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f004 fc91 	bl	800d320 <USBD_LL_StallEP>
 80089fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a00:	e040      	b.n	8008a84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fc68 	bl	80092da <USBD_CtlError>
              break;
 8008a0a:	e03b      	b.n	8008a84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	885b      	ldrh	r3, [r3, #2]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d136      	bne.n	8008a82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d004      	beq.n	8008a28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f004 fc9b 	bl	800d35e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd21 	bl	8009470 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fde2 	bl	80085fc <USBD_CoreFindEP>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a3c:	7b7b      	ldrb	r3, [r7, #13]
 8008a3e:	2bff      	cmp	r3, #255	; 0xff
 8008a40:	d01f      	beq.n	8008a82 <USBD_StdEPReq+0x1c6>
 8008a42:	7b7b      	ldrb	r3, [r7, #13]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d11c      	bne.n	8008a82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a48:	7b7a      	ldrb	r2, [r7, #13]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a50:	7b7a      	ldrb	r2, [r7, #13]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	32ae      	adds	r2, #174	; 0xae
 8008a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d010      	beq.n	8008a82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a60:	7b7a      	ldrb	r2, [r7, #13]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	32ae      	adds	r2, #174	; 0xae
 8008a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	4798      	blx	r3
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008a76:	e004      	b.n	8008a82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc2d 	bl	80092da <USBD_CtlError>
              break;
 8008a80:	e000      	b.n	8008a84 <USBD_StdEPReq+0x1c8>
              break;
 8008a82:	bf00      	nop
          }
          break;
 8008a84:	e0ab      	b.n	8008bde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d002      	beq.n	8008a98 <USBD_StdEPReq+0x1dc>
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d032      	beq.n	8008afc <USBD_StdEPReq+0x240>
 8008a96:	e097      	b.n	8008bc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <USBD_StdEPReq+0x1f2>
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b80      	cmp	r3, #128	; 0x80
 8008aa2:	d004      	beq.n	8008aae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fc17 	bl	80092da <USBD_CtlError>
                break;
 8008aac:	e091      	b.n	8008bd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	da0b      	bge.n	8008ace <USBD_StdEPReq+0x212>
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	3310      	adds	r3, #16
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	3304      	adds	r3, #4
 8008acc:	e00b      	b.n	8008ae6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2202      	movs	r2, #2
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fc61 	bl	80093bc <USBD_CtlSendData>
              break;
 8008afa:	e06a      	b.n	8008bd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	da11      	bge.n	8008b28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	f003 020f 	and.w	r2, r3, #15
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	3324      	adds	r3, #36	; 0x24
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d117      	bne.n	8008b4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fbda 	bl	80092da <USBD_CtlError>
                  break;
 8008b26:	e054      	b.n	8008bd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	f003 020f 	and.w	r2, r3, #15
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fbc7 	bl	80092da <USBD_CtlError>
                  break;
 8008b4c:	e041      	b.n	8008bd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da0b      	bge.n	8008b6e <USBD_StdEPReq+0x2b2>
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	3310      	adds	r3, #16
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	4413      	add	r3, r2
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	e00b      	b.n	8008b86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <USBD_StdEPReq+0x2d8>
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	2b80      	cmp	r3, #128	; 0x80
 8008b92:	d103      	bne.n	8008b9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	e00e      	b.n	8008bba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f004 fbfb 	bl	800d39c <USBD_LL_IsStallEP>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	e002      	b.n	8008bba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fbfb 	bl	80093bc <USBD_CtlSendData>
              break;
 8008bc6:	e004      	b.n	8008bd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fb85 	bl	80092da <USBD_CtlError>
              break;
 8008bd0:	bf00      	nop
          }
          break;
 8008bd2:	e004      	b.n	8008bde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fb7f 	bl	80092da <USBD_CtlError>
          break;
 8008bdc:	bf00      	nop
      }
      break;
 8008bde:	e005      	b.n	8008bec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fb79 	bl	80092da <USBD_CtlError>
      break;
 8008be8:	e000      	b.n	8008bec <USBD_StdEPReq+0x330>
      break;
 8008bea:	bf00      	nop
  }

  return ret;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	885b      	ldrh	r3, [r3, #2]
 8008c12:	0a1b      	lsrs	r3, r3, #8
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	2b0e      	cmp	r3, #14
 8008c1a:	f200 8152 	bhi.w	8008ec2 <USBD_GetDescriptor+0x2ca>
 8008c1e:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <USBD_GetDescriptor+0x2c>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008c95 	.word	0x08008c95
 8008c28:	08008cad 	.word	0x08008cad
 8008c2c:	08008ced 	.word	0x08008ced
 8008c30:	08008ec3 	.word	0x08008ec3
 8008c34:	08008ec3 	.word	0x08008ec3
 8008c38:	08008e63 	.word	0x08008e63
 8008c3c:	08008e8f 	.word	0x08008e8f
 8008c40:	08008ec3 	.word	0x08008ec3
 8008c44:	08008ec3 	.word	0x08008ec3
 8008c48:	08008ec3 	.word	0x08008ec3
 8008c4c:	08008ec3 	.word	0x08008ec3
 8008c50:	08008ec3 	.word	0x08008ec3
 8008c54:	08008ec3 	.word	0x08008ec3
 8008c58:	08008ec3 	.word	0x08008ec3
 8008c5c:	08008c61 	.word	0x08008c61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	7c12      	ldrb	r2, [r2, #16]
 8008c78:	f107 0108 	add.w	r1, r7, #8
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
 8008c80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c82:	e126      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fb27 	bl	80092da <USBD_CtlError>
        err++;
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	72fb      	strb	r3, [r7, #11]
      break;
 8008c92:	e11e      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	7c12      	ldrb	r2, [r2, #16]
 8008ca0:	f107 0108 	add.w	r1, r7, #8
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	60f8      	str	r0, [r7, #12]
      break;
 8008caa:	e112      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7c1b      	ldrb	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10d      	bne.n	8008cd0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	f107 0208 	add.w	r2, r7, #8
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	2202      	movs	r2, #2
 8008ccc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cce:	e100      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	f107 0208 	add.w	r2, r7, #8
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
 8008ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	701a      	strb	r2, [r3, #0]
      break;
 8008cea:	e0f2      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	f200 80ac 	bhi.w	8008e50 <USBD_GetDescriptor+0x258>
 8008cf8:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <USBD_GetDescriptor+0x108>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d19 	.word	0x08008d19
 8008d04:	08008d4d 	.word	0x08008d4d
 8008d08:	08008d81 	.word	0x08008d81
 8008d0c:	08008db5 	.word	0x08008db5
 8008d10:	08008de9 	.word	0x08008de9
 8008d14:	08008e1d 	.word	0x08008e1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7c12      	ldrb	r2, [r2, #16]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3a:	e091      	b.n	8008e60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 facb 	bl	80092da <USBD_CtlError>
            err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4a:	e089      	b.n	8008e60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7c12      	ldrb	r2, [r2, #16]
 8008d64:	f107 0108 	add.w	r1, r7, #8
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6e:	e077      	b.n	8008e60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fab1 	bl	80092da <USBD_CtlError>
            err++;
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7e:	e06f      	b.n	8008e60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008da2:	e05d      	b.n	8008e60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa97 	bl	80092da <USBD_CtlError>
            err++;
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	3301      	adds	r3, #1
 8008db0:	72fb      	strb	r3, [r7, #11]
          break;
 8008db2:	e055      	b.n	8008e60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7c12      	ldrb	r2, [r2, #16]
 8008dcc:	f107 0108 	add.w	r1, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd6:	e043      	b.n	8008e60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa7d 	bl	80092da <USBD_CtlError>
            err++;
 8008de0:	7afb      	ldrb	r3, [r7, #11]
 8008de2:	3301      	adds	r3, #1
 8008de4:	72fb      	strb	r3, [r7, #11]
          break;
 8008de6:	e03b      	b.n	8008e60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7c12      	ldrb	r2, [r2, #16]
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
 8008e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0a:	e029      	b.n	8008e60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa63 	bl	80092da <USBD_CtlError>
            err++;
 8008e14:	7afb      	ldrb	r3, [r7, #11]
 8008e16:	3301      	adds	r3, #1
 8008e18:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1a:	e021      	b.n	8008e60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	7c12      	ldrb	r2, [r2, #16]
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3e:	e00f      	b.n	8008e60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa49 	bl	80092da <USBD_CtlError>
            err++;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4e:	e007      	b.n	8008e60 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa41 	bl	80092da <USBD_CtlError>
          err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e5e:	bf00      	nop
      }
      break;
 8008e60:	e037      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7c1b      	ldrb	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e72:	f107 0208 	add.w	r2, r7, #8
 8008e76:	4610      	mov	r0, r2
 8008e78:	4798      	blx	r3
 8008e7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e7c:	e029      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fa2a 	bl	80092da <USBD_CtlError>
        err++;
 8008e86:	7afb      	ldrb	r3, [r7, #11]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e8c:	e021      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7c1b      	ldrb	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10d      	bne.n	8008eb2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	f107 0208 	add.w	r2, r7, #8
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	4798      	blx	r3
 8008ea6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	2207      	movs	r2, #7
 8008eae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eb0:	e00f      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa10 	bl	80092da <USBD_CtlError>
        err++;
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec0:	e007      	b.n	8008ed2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa08 	bl	80092da <USBD_CtlError>
      err++;
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed0:	bf00      	nop
  }

  if (err != 0U)
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11e      	bne.n	8008f16 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	88db      	ldrh	r3, [r3, #6]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d016      	beq.n	8008f0e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008ee0:	893b      	ldrh	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00e      	beq.n	8008f04 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	88da      	ldrh	r2, [r3, #6]
 8008eea:	893b      	ldrh	r3, [r7, #8]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	bf28      	it	cs
 8008ef0:	4613      	movcs	r3, r2
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ef6:	893b      	ldrh	r3, [r7, #8]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa5d 	bl	80093bc <USBD_CtlSendData>
 8008f02:	e009      	b.n	8008f18 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9e7 	bl	80092da <USBD_CtlError>
 8008f0c:	e004      	b.n	8008f18 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 faae 	bl	8009470 <USBD_CtlSendStatus>
 8008f14:	e000      	b.n	8008f18 <USBD_GetDescriptor+0x320>
    return;
 8008f16:	bf00      	nop
  }
}
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop

08008f20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	889b      	ldrh	r3, [r3, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d131      	bne.n	8008f96 <USBD_SetAddress+0x76>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	88db      	ldrh	r3, [r3, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d12d      	bne.n	8008f96 <USBD_SetAddress+0x76>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f40:	d829      	bhi.n	8008f96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d104      	bne.n	8008f64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9bc 	bl	80092da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f62:	e01d      	b.n	8008fa0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7bfa      	ldrb	r2, [r7, #15]
 8008f68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f004 fa3f 	bl	800d3f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa7a 	bl	8009470 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8a:	e009      	b.n	8008fa0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f94:	e004      	b.n	8008fa0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f99e 	bl	80092da <USBD_CtlError>
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	885b      	ldrh	r3, [r3, #2]
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	4b4e      	ldr	r3, [pc, #312]	; (80090f8 <USBD_SetConfig+0x150>)
 8008fbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <USBD_SetConfig+0x150>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d905      	bls.n	8008fd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f985 	bl	80092da <USBD_CtlError>
    return USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e08c      	b.n	80090ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d002      	beq.n	8008fe6 <USBD_SetConfig+0x3e>
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d029      	beq.n	8009038 <USBD_SetConfig+0x90>
 8008fe4:	e075      	b.n	80090d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fe6:	4b44      	ldr	r3, [pc, #272]	; (80090f8 <USBD_SetConfig+0x150>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d020      	beq.n	8009030 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fee:	4b42      	ldr	r3, [pc, #264]	; (80090f8 <USBD_SetConfig+0x150>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ff8:	4b3f      	ldr	r3, [pc, #252]	; (80090f8 <USBD_SetConfig+0x150>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7fe ffbd 	bl	8007f7e <USBD_SetClassConfig>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f962 	bl	80092da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2202      	movs	r2, #2
 800901a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800901e:	e065      	b.n	80090ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa25 	bl	8009470 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2203      	movs	r2, #3
 800902a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800902e:	e05d      	b.n	80090ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa1d 	bl	8009470 <USBD_CtlSendStatus>
      break;
 8009036:	e059      	b.n	80090ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009038:	4b2f      	ldr	r3, [pc, #188]	; (80090f8 <USBD_SetConfig+0x150>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d112      	bne.n	8009066 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009048:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <USBD_SetConfig+0x150>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009052:	4b29      	ldr	r3, [pc, #164]	; (80090f8 <USBD_SetConfig+0x150>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7fe ffac 	bl	8007fb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa06 	bl	8009470 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009064:	e042      	b.n	80090ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009066:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <USBD_SetConfig+0x150>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d02a      	beq.n	80090ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fe ff9a 	bl	8007fb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009082:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <USBD_SetConfig+0x150>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800908c:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <USBD_SetConfig+0x150>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fe ff73 	bl	8007f7e <USBD_SetClassConfig>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00f      	beq.n	80090c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090a2:	6839      	ldr	r1, [r7, #0]
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f918 	bl	80092da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fe ff7f 	bl	8007fb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090c0:	e014      	b.n	80090ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f9d4 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090c8:	e010      	b.n	80090ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f9d0 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090d0:	e00c      	b.n	80090ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f900 	bl	80092da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090da:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <USBD_SetConfig+0x150>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7fe ff68 	bl	8007fb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090e6:	2303      	movs	r3, #3
 80090e8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ea:	bf00      	nop
  }

  return ret;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	2000050c 	.word	0x2000050c

080090fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	88db      	ldrh	r3, [r3, #6]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d004      	beq.n	8009118 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f8e2 	bl	80092da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009116:	e023      	b.n	8009160 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	dc02      	bgt.n	800912a <USBD_GetConfig+0x2e>
 8009124:	2b00      	cmp	r3, #0
 8009126:	dc03      	bgt.n	8009130 <USBD_GetConfig+0x34>
 8009128:	e015      	b.n	8009156 <USBD_GetConfig+0x5a>
 800912a:	2b03      	cmp	r3, #3
 800912c:	d00b      	beq.n	8009146 <USBD_GetConfig+0x4a>
 800912e:	e012      	b.n	8009156 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3308      	adds	r3, #8
 800913a:	2201      	movs	r2, #1
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f93c 	bl	80093bc <USBD_CtlSendData>
        break;
 8009144:	e00c      	b.n	8009160 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3304      	adds	r3, #4
 800914a:	2201      	movs	r2, #1
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f934 	bl	80093bc <USBD_CtlSendData>
        break;
 8009154:	e004      	b.n	8009160 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f8be 	bl	80092da <USBD_CtlError>
        break;
 800915e:	bf00      	nop
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009178:	b2db      	uxtb	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	2b02      	cmp	r3, #2
 800917e:	d81e      	bhi.n	80091be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	88db      	ldrh	r3, [r3, #6]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d004      	beq.n	8009192 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f8a5 	bl	80092da <USBD_CtlError>
        break;
 8009190:	e01a      	b.n	80091c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f043 0202 	orr.w	r2, r3, #2
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	330c      	adds	r3, #12
 80091b2:	2202      	movs	r2, #2
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f900 	bl	80093bc <USBD_CtlSendData>
      break;
 80091bc:	e004      	b.n	80091c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f88a 	bl	80092da <USBD_CtlError>
      break;
 80091c6:	bf00      	nop
  }
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d107      	bne.n	80091f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f940 	bl	8009470 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091f0:	e013      	b.n	800921a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	885b      	ldrh	r3, [r3, #2]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d10b      	bne.n	8009212 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	889b      	ldrh	r3, [r3, #4]
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	b29b      	uxth	r3, r3
 8009202:	b2da      	uxtb	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f930 	bl	8009470 <USBD_CtlSendStatus>
}
 8009210:	e003      	b.n	800921a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f860 	bl	80092da <USBD_CtlError>
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009232:	b2db      	uxtb	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	2b02      	cmp	r3, #2
 8009238:	d80b      	bhi.n	8009252 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	885b      	ldrh	r3, [r3, #2]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d10c      	bne.n	800925c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f910 	bl	8009470 <USBD_CtlSendStatus>
      }
      break;
 8009250:	e004      	b.n	800925c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f840 	bl	80092da <USBD_CtlError>
      break;
 800925a:	e000      	b.n	800925e <USBD_ClrFeature+0x3c>
      break;
 800925c:	bf00      	nop
  }
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	781a      	ldrb	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff fa17 	bl	80086c4 <SWAPBYTE>
 8009296:	4603      	mov	r3, r0
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fa0a 	bl	80086c4 <SWAPBYTE>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3301      	adds	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff f9fd 	bl	80086c4 <SWAPBYTE>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461a      	mov	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	80da      	strh	r2, [r3, #6]
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b082      	sub	sp, #8
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e4:	2180      	movs	r1, #128	; 0x80
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f004 f81a 	bl	800d320 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092ec:	2100      	movs	r1, #0
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f004 f816 	bl	800d320 <USBD_LL_StallEP>
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d036      	beq.n	8009380 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009316:	6938      	ldr	r0, [r7, #16]
 8009318:	f000 f836 	bl	8009388 <USBD_GetLen>
 800931c:	4603      	mov	r3, r0
 800931e:	3301      	adds	r3, #1
 8009320:	b29b      	uxth	r3, r3
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	4413      	add	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	7812      	ldrb	r2, [r2, #0]
 8009334:	701a      	strb	r2, [r3, #0]
  idx++;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	3301      	adds	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4413      	add	r3, r2
 8009342:	2203      	movs	r2, #3
 8009344:	701a      	strb	r2, [r3, #0]
  idx++;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	3301      	adds	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800934c:	e013      	b.n	8009376 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	4413      	add	r3, r2
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3301      	adds	r3, #1
 800935e:	613b      	str	r3, [r7, #16]
    idx++;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	3301      	adds	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	4413      	add	r3, r2
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	3301      	adds	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e7      	bne.n	800934e <USBD_GetString+0x52>
 800937e:	e000      	b.n	8009382 <USBD_GetString+0x86>
    return;
 8009380:	bf00      	nop
  }
}
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009398:	e005      	b.n	80093a6 <USBD_GetLen+0x1e>
  {
    len++;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	3301      	adds	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f5      	bne.n	800939a <USBD_GetLen+0x12>
  }

  return len;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	2100      	movs	r1, #0
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f004 f825 	bl	800d432 <USBD_LL_Transmit>

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f004 f814 	bl	800d432 <USBD_LL_Transmit>

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2203      	movs	r2, #3
 8009424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	2100      	movs	r1, #0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f004 f818 	bl	800d474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	2100      	movs	r1, #0
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f004 f807 	bl	800d474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2204      	movs	r2, #4
 800947c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f003 ffd3 	bl	800d432 <USBD_LL_Transmit>

  return USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2205      	movs	r2, #5
 80094a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094a6:	2300      	movs	r3, #0
 80094a8:	2200      	movs	r2, #0
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f003 ffe1 	bl	800d474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80094c0:	bf00      	nop
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094d2:	f3ef 8305 	mrs	r3, IPSR
 80094d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80094d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10f      	bne.n	80094fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094de:	f3ef 8310 	mrs	r3, PRIMASK
 80094e2:	607b      	str	r3, [r7, #4]
  return(result);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d105      	bne.n	80094f6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094ea:	f3ef 8311 	mrs	r3, BASEPRI
 80094ee:	603b      	str	r3, [r7, #0]
  return(result);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <osKernelInitialize+0x3a>
 80094f6:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <osKernelInitialize+0x64>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d103      	bne.n	8009506 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80094fe:	f06f 0305 	mvn.w	r3, #5
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	e00c      	b.n	8009520 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009506:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <osKernelInitialize+0x64>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d105      	bne.n	800951a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800950e:	4b08      	ldr	r3, [pc, #32]	; (8009530 <osKernelInitialize+0x64>)
 8009510:	2201      	movs	r2, #1
 8009512:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	e002      	b.n	8009520 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009520:	68fb      	ldr	r3, [r7, #12]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	20000510 	.word	0x20000510

08009534 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800953a:	f3ef 8305 	mrs	r3, IPSR
 800953e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009540:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10f      	bne.n	8009566 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009546:	f3ef 8310 	mrs	r3, PRIMASK
 800954a:	607b      	str	r3, [r7, #4]
  return(result);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d105      	bne.n	800955e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009552:	f3ef 8311 	mrs	r3, BASEPRI
 8009556:	603b      	str	r3, [r7, #0]
  return(result);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d007      	beq.n	800956e <osKernelStart+0x3a>
 800955e:	4b0f      	ldr	r3, [pc, #60]	; (800959c <osKernelStart+0x68>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d103      	bne.n	800956e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009566:	f06f 0305 	mvn.w	r3, #5
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e010      	b.n	8009590 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800956e:	4b0b      	ldr	r3, [pc, #44]	; (800959c <osKernelStart+0x68>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d109      	bne.n	800958a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009576:	f7ff ffa1 	bl	80094bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800957a:	4b08      	ldr	r3, [pc, #32]	; (800959c <osKernelStart+0x68>)
 800957c:	2202      	movs	r2, #2
 800957e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009580:	f001 fc9a 	bl	800aeb8 <vTaskStartScheduler>
      stat = osOK;
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	e002      	b.n	8009590 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800958a:	f04f 33ff 	mov.w	r3, #4294967295
 800958e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009590:	68fb      	ldr	r3, [r7, #12]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000510 	.word	0x20000510

080095a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b090      	sub	sp, #64	; 0x40
 80095a4:	af04      	add	r7, sp, #16
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095b0:	f3ef 8305 	mrs	r3, IPSR
 80095b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80095b6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f040 808f 	bne.w	80096dc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095be:	f3ef 8310 	mrs	r3, PRIMASK
 80095c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095ca:	f3ef 8311 	mrs	r3, BASEPRI
 80095ce:	617b      	str	r3, [r7, #20]
  return(result);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <osThreadNew+0x3e>
 80095d6:	4b44      	ldr	r3, [pc, #272]	; (80096e8 <osThreadNew+0x148>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d07e      	beq.n	80096dc <osThreadNew+0x13c>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d07b      	beq.n	80096dc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80095e4:	2380      	movs	r3, #128	; 0x80
 80095e6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80095e8:	2318      	movs	r3, #24
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80095ec:	2300      	movs	r3, #0
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295
 80095f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d045      	beq.n	8009688 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <osThreadNew+0x6a>
        name = attr->name;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	2b00      	cmp	r3, #0
 800961c:	d008      	beq.n	8009630 <osThreadNew+0x90>
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	2b38      	cmp	r3, #56	; 0x38
 8009622:	d805      	bhi.n	8009630 <osThreadNew+0x90>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <osThreadNew+0x94>
        return (NULL);
 8009630:	2300      	movs	r3, #0
 8009632:	e054      	b.n	80096de <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	089b      	lsrs	r3, r3, #2
 8009642:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00e      	beq.n	800966a <osThreadNew+0xca>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2bbb      	cmp	r3, #187	; 0xbb
 8009652:	d90a      	bls.n	800966a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009658:	2b00      	cmp	r3, #0
 800965a:	d006      	beq.n	800966a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <osThreadNew+0xca>
        mem = 1;
 8009664:	2301      	movs	r3, #1
 8009666:	623b      	str	r3, [r7, #32]
 8009668:	e010      	b.n	800968c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10c      	bne.n	800968c <osThreadNew+0xec>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d108      	bne.n	800968c <osThreadNew+0xec>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d104      	bne.n	800968c <osThreadNew+0xec>
          mem = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	623b      	str	r3, [r7, #32]
 8009686:	e001      	b.n	800968c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d110      	bne.n	80096b4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800969a:	9202      	str	r2, [sp, #8]
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f001 fa0f 	bl	800aacc <xTaskCreateStatic>
 80096ae:	4603      	mov	r3, r0
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	e013      	b.n	80096dc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d110      	bne.n	80096dc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f107 0310 	add.w	r3, r7, #16
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f001 fa60 	bl	800ab92 <xTaskCreate>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d001      	beq.n	80096dc <osThreadNew+0x13c>
          hTask = NULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80096dc:	693b      	ldr	r3, [r7, #16]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3730      	adds	r7, #48	; 0x30
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000510 	.word	0x20000510

080096ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f4:	f3ef 8305 	mrs	r3, IPSR
 80096f8:	613b      	str	r3, [r7, #16]
  return(result);
 80096fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10f      	bne.n	8009720 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009700:	f3ef 8310 	mrs	r3, PRIMASK
 8009704:	60fb      	str	r3, [r7, #12]
  return(result);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d105      	bne.n	8009718 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800970c:	f3ef 8311 	mrs	r3, BASEPRI
 8009710:	60bb      	str	r3, [r7, #8]
  return(result);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <osDelay+0x3c>
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <osDelay+0x58>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d103      	bne.n	8009728 <osDelay+0x3c>
    stat = osErrorISR;
 8009720:	f06f 0305 	mvn.w	r3, #5
 8009724:	617b      	str	r3, [r7, #20]
 8009726:	e007      	b.n	8009738 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 fb8a 	bl	800ae4c <vTaskDelay>
    }
  }

  return (stat);
 8009738:	697b      	ldr	r3, [r7, #20]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000510 	.word	0x20000510

08009748 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009748:	b580      	push	{r7, lr}
 800974a:	b08c      	sub	sp, #48	; 0x30
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009754:	2300      	movs	r3, #0
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009758:	f3ef 8305 	mrs	r3, IPSR
 800975c:	61bb      	str	r3, [r7, #24]
  return(result);
 800975e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009760:	2b00      	cmp	r3, #0
 8009762:	d16f      	bne.n	8009844 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009764:	f3ef 8310 	mrs	r3, PRIMASK
 8009768:	617b      	str	r3, [r7, #20]
  return(result);
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d105      	bne.n	800977c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009770:	f3ef 8311 	mrs	r3, BASEPRI
 8009774:	613b      	str	r3, [r7, #16]
  return(result);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <osMessageQueueNew+0x3c>
 800977c:	4b34      	ldr	r3, [pc, #208]	; (8009850 <osMessageQueueNew+0x108>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d05f      	beq.n	8009844 <osMessageQueueNew+0xfc>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d05c      	beq.n	8009844 <osMessageQueueNew+0xfc>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d059      	beq.n	8009844 <osMessageQueueNew+0xfc>
    mem = -1;
 8009790:	f04f 33ff 	mov.w	r3, #4294967295
 8009794:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d029      	beq.n	80097f0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d012      	beq.n	80097ca <osMessageQueueNew+0x82>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	2b4f      	cmp	r3, #79	; 0x4f
 80097aa:	d90e      	bls.n	80097ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695a      	ldr	r2, [r3, #20]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d302      	bcc.n	80097ca <osMessageQueueNew+0x82>
        mem = 1;
 80097c4:	2301      	movs	r3, #1
 80097c6:	623b      	str	r3, [r7, #32]
 80097c8:	e014      	b.n	80097f4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d110      	bne.n	80097f4 <osMessageQueueNew+0xac>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10c      	bne.n	80097f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d108      	bne.n	80097f4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d104      	bne.n	80097f4 <osMessageQueueNew+0xac>
          mem = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	623b      	str	r3, [r7, #32]
 80097ee:	e001      	b.n	80097f4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d10b      	bne.n	8009812 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691a      	ldr	r2, [r3, #16]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	2100      	movs	r1, #0
 8009804:	9100      	str	r1, [sp, #0]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fa5b 	bl	8009cc4 <xQueueGenericCreateStatic>
 800980e:	6278      	str	r0, [r7, #36]	; 0x24
 8009810:	e008      	b.n	8009824 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009818:	2200      	movs	r2, #0
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 fad3 	bl	8009dc8 <xQueueGenericCreate>
 8009822:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00c      	beq.n	8009844 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	61fb      	str	r3, [r7, #28]
 8009836:	e001      	b.n	800983c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800983c:	69f9      	ldr	r1, [r7, #28]
 800983e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009840:	f001 f8bc 	bl	800a9bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009846:	4618      	mov	r0, r3
 8009848:	3728      	adds	r7, #40	; 0x28
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20000510 	.word	0x20000510

08009854 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	; 0x28
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	4613      	mov	r3, r2
 8009862:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009868:	2300      	movs	r3, #0
 800986a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800986c:	f3ef 8305 	mrs	r3, IPSR
 8009870:	61fb      	str	r3, [r7, #28]
  return(result);
 8009872:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10f      	bne.n	8009898 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009878:	f3ef 8310 	mrs	r3, PRIMASK
 800987c:	61bb      	str	r3, [r7, #24]
  return(result);
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009884:	f3ef 8311 	mrs	r3, BASEPRI
 8009888:	617b      	str	r3, [r7, #20]
  return(result);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d02c      	beq.n	80098ea <osMessageQueuePut+0x96>
 8009890:	4b28      	ldr	r3, [pc, #160]	; (8009934 <osMessageQueuePut+0xe0>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d128      	bne.n	80098ea <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <osMessageQueuePut+0x56>
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <osMessageQueuePut+0x56>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80098aa:	f06f 0303 	mvn.w	r3, #3
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80098b0:	e039      	b.n	8009926 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80098b6:	f107 0210 	add.w	r2, r7, #16
 80098ba:	2300      	movs	r3, #0
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	6a38      	ldr	r0, [r7, #32]
 80098c0:	f000 fbee 	bl	800a0a0 <xQueueGenericSendFromISR>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d003      	beq.n	80098d2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80098ca:	f06f 0302 	mvn.w	r3, #2
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80098d0:	e029      	b.n	8009926 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d026      	beq.n	8009926 <osMessageQueuePut+0xd2>
 80098d8:	4b17      	ldr	r3, [pc, #92]	; (8009938 <osMessageQueuePut+0xe4>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80098e8:	e01d      	b.n	8009926 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <osMessageQueuePut+0xa2>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80098f6:	f06f 0303 	mvn.w	r3, #3
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
 80098fc:	e014      	b.n	8009928 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80098fe:	2300      	movs	r3, #0
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	6a38      	ldr	r0, [r7, #32]
 8009906:	f000 fac5 	bl	8009e94 <xQueueGenericSend>
 800990a:	4603      	mov	r3, r0
 800990c:	2b01      	cmp	r3, #1
 800990e:	d00b      	beq.n	8009928 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009916:	f06f 0301 	mvn.w	r3, #1
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
 800991c:	e004      	b.n	8009928 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800991e:	f06f 0302 	mvn.w	r3, #2
 8009922:	627b      	str	r3, [r7, #36]	; 0x24
 8009924:	e000      	b.n	8009928 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009926:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800992a:	4618      	mov	r0, r3
 800992c:	3728      	adds	r7, #40	; 0x28
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000510 	.word	0x20000510
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800993c:	b580      	push	{r7, lr}
 800993e:	b08a      	sub	sp, #40	; 0x28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800994e:	2300      	movs	r3, #0
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009952:	f3ef 8305 	mrs	r3, IPSR
 8009956:	61fb      	str	r3, [r7, #28]
  return(result);
 8009958:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10f      	bne.n	800997e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800995e:	f3ef 8310 	mrs	r3, PRIMASK
 8009962:	61bb      	str	r3, [r7, #24]
  return(result);
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800996a:	f3ef 8311 	mrs	r3, BASEPRI
 800996e:	617b      	str	r3, [r7, #20]
  return(result);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d02c      	beq.n	80099d0 <osMessageQueueGet+0x94>
 8009976:	4b28      	ldr	r3, [pc, #160]	; (8009a18 <osMessageQueueGet+0xdc>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b02      	cmp	r3, #2
 800997c:	d128      	bne.n	80099d0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <osMessageQueueGet+0x54>
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <osMessageQueueGet+0x54>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009990:	f06f 0303 	mvn.w	r3, #3
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009996:	e038      	b.n	8009a0a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009998:	2300      	movs	r3, #0
 800999a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800999c:	f107 0310 	add.w	r3, r7, #16
 80099a0:	461a      	mov	r2, r3
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	6a38      	ldr	r0, [r7, #32]
 80099a6:	f000 fe15 	bl	800a5d4 <xQueueReceiveFromISR>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d003      	beq.n	80099b8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80099b0:	f06f 0302 	mvn.w	r3, #2
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099b6:	e028      	b.n	8009a0a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d025      	beq.n	8009a0a <osMessageQueueGet+0xce>
 80099be:	4b17      	ldr	r3, [pc, #92]	; (8009a1c <osMessageQueueGet+0xe0>)
 80099c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099ce:	e01c      	b.n	8009a0a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <osMessageQueueGet+0xa0>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d103      	bne.n	80099e4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80099dc:	f06f 0303 	mvn.w	r3, #3
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
 80099e2:	e013      	b.n	8009a0c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	6a38      	ldr	r0, [r7, #32]
 80099ea:	f000 fbf9 	bl	800a1e0 <xQueueReceive>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d00b      	beq.n	8009a0c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80099fa:	f06f 0301 	mvn.w	r3, #1
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009a00:	e004      	b.n	8009a0c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009a02:	f06f 0302 	mvn.w	r3, #2
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
 8009a08:	e000      	b.n	8009a0c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3728      	adds	r7, #40	; 0x28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000510 	.word	0x20000510
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4a07      	ldr	r2, [pc, #28]	; (8009a4c <vApplicationGetIdleTaskMemory+0x2c>)
 8009a30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	4a06      	ldr	r2, [pc, #24]	; (8009a50 <vApplicationGetIdleTaskMemory+0x30>)
 8009a36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2280      	movs	r2, #128	; 0x80
 8009a3c:	601a      	str	r2, [r3, #0]
}
 8009a3e:	bf00      	nop
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20000514 	.word	0x20000514
 8009a50:	200005d0 	.word	0x200005d0

08009a54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a07      	ldr	r2, [pc, #28]	; (8009a80 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	4a06      	ldr	r2, [pc, #24]	; (8009a84 <vApplicationGetTimerTaskMemory+0x30>)
 8009a6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a72:	601a      	str	r2, [r3, #0]
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	200007d0 	.word	0x200007d0
 8009a84:	2000088c 	.word	0x2000088c

08009a88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f103 0208 	add.w	r2, r3, #8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f103 0208 	add.w	r2, r3, #8
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f103 0208 	add.w	r2, r3, #8
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b085      	sub	sp, #20
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d103      	bne.n	8009b4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e00c      	b.n	8009b64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	e002      	b.n	8009b58 <vListInsert+0x2e>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d2f6      	bcs.n	8009b52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	601a      	str	r2, [r3, #0]
}
 8009b90:	bf00      	nop
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6892      	ldr	r2, [r2, #8]
 8009bb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6852      	ldr	r2, [r2, #4]
 8009bbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d103      	bne.n	8009bd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	1e5a      	subs	r2, r3, #1
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10c      	bne.n	8009c1e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	b672      	cpsid	i
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	b662      	cpsie	i
 8009c18:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c1a:	bf00      	nop
 8009c1c:	e7fe      	b.n	8009c1c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009c1e:	f002 fc0d 	bl	800c43c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2a:	68f9      	ldr	r1, [r7, #12]
 8009c2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	441a      	add	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	68f9      	ldr	r1, [r7, #12]
 8009c52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	441a      	add	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	22ff      	movs	r2, #255	; 0xff
 8009c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	22ff      	movs	r2, #255	; 0xff
 8009c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d114      	bne.n	8009c9e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01a      	beq.n	8009cb2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3310      	adds	r3, #16
 8009c80:	4618      	mov	r0, r3
 8009c82:	f001 fbc1 	bl	800b408 <xTaskRemoveFromEventList>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d012      	beq.n	8009cb2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <xQueueGenericReset+0xd0>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	e009      	b.n	8009cb2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3310      	adds	r3, #16
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff fef0 	bl	8009a88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3324      	adds	r3, #36	; 0x24
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff feeb 	bl	8009a88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cb2:	f002 fbf7 	bl	800c4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cb6:	2301      	movs	r3, #1
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08e      	sub	sp, #56	; 0x38
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10c      	bne.n	8009cf2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	b672      	cpsid	i
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	b662      	cpsie	i
 8009cec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10c      	bne.n	8009d12 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	b672      	cpsid	i
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	b662      	cpsie	i
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <xQueueGenericCreateStatic+0x5a>
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <xQueueGenericCreateStatic+0x5e>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <xQueueGenericCreateStatic+0x60>
 8009d22:	2300      	movs	r3, #0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10c      	bne.n	8009d42 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	b672      	cpsid	i
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	b662      	cpsie	i
 8009d3c:	623b      	str	r3, [r7, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <xQueueGenericCreateStatic+0x8a>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <xQueueGenericCreateStatic+0x8e>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <xQueueGenericCreateStatic+0x90>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10c      	bne.n	8009d72 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	b672      	cpsid	i
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	b662      	cpsie	i
 8009d6c:	61fb      	str	r3, [r7, #28]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d72:	2350      	movs	r3, #80	; 0x50
 8009d74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b50      	cmp	r3, #80	; 0x50
 8009d7a:	d00c      	beq.n	8009d96 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	b672      	cpsid	i
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	b662      	cpsie	i
 8009d90:	61bb      	str	r3, [r7, #24]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00d      	beq.n	8009dbe <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009daa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4613      	mov	r3, r2
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f847 	bl	8009e4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3730      	adds	r7, #48	; 0x30
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	; 0x28
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10c      	bne.n	8009df6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	b672      	cpsid	i
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	b662      	cpsie	i
 8009df0:	613b      	str	r3, [r7, #16]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	61fb      	str	r3, [r7, #28]
 8009e00:	e004      	b.n	8009e0c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	fb02 f303 	mul.w	r3, r2, r3
 8009e0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	3350      	adds	r3, #80	; 0x50
 8009e10:	4618      	mov	r0, r3
 8009e12:	f002 fc3f 	bl	800c694 <pvPortMalloc>
 8009e16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	3350      	adds	r3, #80	; 0x50
 8009e26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e30:	79fa      	ldrb	r2, [r7, #7]
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	4613      	mov	r3, r2
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	68b9      	ldr	r1, [r7, #8]
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 f805 	bl	8009e4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e42:	69bb      	ldr	r3, [r7, #24]
	}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d103      	bne.n	8009e68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	69ba      	ldr	r2, [r7, #24]
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	e002      	b.n	8009e6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	69b8      	ldr	r0, [r7, #24]
 8009e7e:	f7ff feb7 	bl	8009bf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	78fa      	ldrb	r2, [r7, #3]
 8009e86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08e      	sub	sp, #56	; 0x38
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10c      	bne.n	8009eca <xQueueGenericSend+0x36>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	b672      	cpsid	i
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	b662      	cpsie	i
 8009ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <xQueueGenericSend+0x44>
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <xQueueGenericSend+0x48>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e000      	b.n	8009ede <xQueueGenericSend+0x4a>
 8009edc:	2300      	movs	r3, #0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10c      	bne.n	8009efc <xQueueGenericSend+0x68>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	b672      	cpsid	i
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	b662      	cpsie	i
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d103      	bne.n	8009f0a <xQueueGenericSend+0x76>
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <xQueueGenericSend+0x7a>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e000      	b.n	8009f10 <xQueueGenericSend+0x7c>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10c      	bne.n	8009f2e <xQueueGenericSend+0x9a>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	b672      	cpsid	i
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	b662      	cpsie	i
 8009f28:	623b      	str	r3, [r7, #32]
}
 8009f2a:	bf00      	nop
 8009f2c:	e7fe      	b.n	8009f2c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f2e:	f001 fc35 	bl	800b79c <xTaskGetSchedulerState>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <xQueueGenericSend+0xaa>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <xQueueGenericSend+0xae>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <xQueueGenericSend+0xb0>
 8009f42:	2300      	movs	r3, #0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10c      	bne.n	8009f62 <xQueueGenericSend+0xce>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	b672      	cpsid	i
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	b662      	cpsie	i
 8009f5c:	61fb      	str	r3, [r7, #28]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f62:	f002 fa6b 	bl	800c43c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d302      	bcc.n	8009f78 <xQueueGenericSend+0xe4>
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d129      	bne.n	8009fcc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f7e:	f000 fc0c 	bl	800a79a <prvCopyDataToQueue>
 8009f82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d010      	beq.n	8009fae <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	3324      	adds	r3, #36	; 0x24
 8009f90:	4618      	mov	r0, r3
 8009f92:	f001 fa39 	bl	800b408 <xTaskRemoveFromEventList>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d013      	beq.n	8009fc4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f9c:	4b3f      	ldr	r3, [pc, #252]	; (800a09c <xQueueGenericSend+0x208>)
 8009f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	e00a      	b.n	8009fc4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d007      	beq.n	8009fc4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fb4:	4b39      	ldr	r3, [pc, #228]	; (800a09c <xQueueGenericSend+0x208>)
 8009fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fc4:	f002 fa6e 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e063      	b.n	800a094 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d103      	bne.n	8009fda <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fd2:	f002 fa67 	bl	800c4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e05c      	b.n	800a094 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fe0:	f107 0314 	add.w	r3, r7, #20
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fa75 	bl	800b4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fea:	2301      	movs	r3, #1
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fee:	f002 fa59 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ff2:	f000 ffd5 	bl	800afa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ff6:	f002 fa21 	bl	800c43c <vPortEnterCritical>
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a000:	b25b      	sxtb	r3, r3
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d103      	bne.n	800a010 <xQueueGenericSend+0x17c>
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a016:	b25b      	sxtb	r3, r3
 800a018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01c:	d103      	bne.n	800a026 <xQueueGenericSend+0x192>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a026:	f002 fa3d 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a02a:	1d3a      	adds	r2, r7, #4
 800a02c:	f107 0314 	add.w	r3, r7, #20
 800a030:	4611      	mov	r1, r2
 800a032:	4618      	mov	r0, r3
 800a034:	f001 fa64 	bl	800b500 <xTaskCheckForTimeOut>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d124      	bne.n	800a088 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a03e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a040:	f000 fca3 	bl	800a98a <prvIsQueueFull>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d018      	beq.n	800a07c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	3310      	adds	r3, #16
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f984 	bl	800b360 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a05a:	f000 fc2e 	bl	800a8ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a05e:	f000 ffad 	bl	800afbc <xTaskResumeAll>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	f47f af7c 	bne.w	8009f62 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a06a:	4b0c      	ldr	r3, [pc, #48]	; (800a09c <xQueueGenericSend+0x208>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	e772      	b.n	8009f62 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a07c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a07e:	f000 fc1c 	bl	800a8ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a082:	f000 ff9b 	bl	800afbc <xTaskResumeAll>
 800a086:	e76c      	b.n	8009f62 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08a:	f000 fc16 	bl	800a8ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a08e:	f000 ff95 	bl	800afbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a092:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a094:	4618      	mov	r0, r3
 800a096:	3738      	adds	r7, #56	; 0x38
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	e000ed04 	.word	0xe000ed04

0800a0a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b08e      	sub	sp, #56	; 0x38
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10c      	bne.n	800a0d2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	b672      	cpsid	i
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	b662      	cpsie	i
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <xQueueGenericSendFromISR+0x40>
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <xQueueGenericSendFromISR+0x44>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e000      	b.n	800a0e6 <xQueueGenericSendFromISR+0x46>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10c      	bne.n	800a104 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	b672      	cpsid	i
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	b662      	cpsie	i
 800a0fe:	623b      	str	r3, [r7, #32]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b02      	cmp	r3, #2
 800a108:	d103      	bne.n	800a112 <xQueueGenericSendFromISR+0x72>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d101      	bne.n	800a116 <xQueueGenericSendFromISR+0x76>
 800a112:	2301      	movs	r3, #1
 800a114:	e000      	b.n	800a118 <xQueueGenericSendFromISR+0x78>
 800a116:	2300      	movs	r3, #0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10c      	bne.n	800a136 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	b672      	cpsid	i
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	b662      	cpsie	i
 800a130:	61fb      	str	r3, [r7, #28]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a136:	f002 fa69 	bl	800c60c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a13a:	f3ef 8211 	mrs	r2, BASEPRI
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	b672      	cpsid	i
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	b662      	cpsie	i
 800a152:	61ba      	str	r2, [r7, #24]
 800a154:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a156:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a158:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a162:	429a      	cmp	r2, r3
 800a164:	d302      	bcc.n	800a16c <xQueueGenericSendFromISR+0xcc>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d12c      	bne.n	800a1c6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a17c:	f000 fb0d 	bl	800a79a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a180:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d112      	bne.n	800a1b0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d016      	beq.n	800a1c0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	3324      	adds	r3, #36	; 0x24
 800a196:	4618      	mov	r0, r3
 800a198:	f001 f936 	bl	800b408 <xTaskRemoveFromEventList>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00e      	beq.n	800a1c0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00b      	beq.n	800a1c0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e007      	b.n	800a1c0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	b25a      	sxtb	r2, r3
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a1c4:	e001      	b.n	800a1ca <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1cc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3738      	adds	r7, #56	; 0x38
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08c      	sub	sp, #48	; 0x30
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10c      	bne.n	800a214 <xQueueReceive+0x34>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	b672      	cpsid	i
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	b662      	cpsie	i
 800a20e:	623b      	str	r3, [r7, #32]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d103      	bne.n	800a222 <xQueueReceive+0x42>
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <xQueueReceive+0x46>
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <xQueueReceive+0x48>
 800a226:	2300      	movs	r3, #0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10c      	bne.n	800a246 <xQueueReceive+0x66>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	b672      	cpsid	i
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	b662      	cpsie	i
 800a240:	61fb      	str	r3, [r7, #28]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a246:	f001 faa9 	bl	800b79c <xTaskGetSchedulerState>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <xQueueReceive+0x76>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <xQueueReceive+0x7a>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <xQueueReceive+0x7c>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10c      	bne.n	800a27a <xQueueReceive+0x9a>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	b672      	cpsid	i
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	b662      	cpsie	i
 800a274:	61bb      	str	r3, [r7, #24]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a27a:	f002 f8df 	bl	800c43c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a282:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01f      	beq.n	800a2ca <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a28e:	f000 faee 	bl	800a86e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00f      	beq.n	800a2c2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	3310      	adds	r3, #16
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 f8ae 	bl	800b408 <xTaskRemoveFromEventList>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d007      	beq.n	800a2c2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2b2:	4b3d      	ldr	r3, [pc, #244]	; (800a3a8 <xQueueReceive+0x1c8>)
 800a2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2c2:	f002 f8ef 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e069      	b.n	800a39e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d103      	bne.n	800a2d8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2d0:	f002 f8e8 	bl	800c4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	e062      	b.n	800a39e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d106      	bne.n	800a2ec <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2de:	f107 0310 	add.w	r3, r7, #16
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f001 f8f6 	bl	800b4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ec:	f002 f8da 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2f0:	f000 fe56 	bl	800afa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2f4:	f002 f8a2 	bl	800c43c <vPortEnterCritical>
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2fe:	b25b      	sxtb	r3, r3
 800a300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a304:	d103      	bne.n	800a30e <xQueueReceive+0x12e>
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a314:	b25b      	sxtb	r3, r3
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31a:	d103      	bne.n	800a324 <xQueueReceive+0x144>
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a324:	f002 f8be 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a328:	1d3a      	adds	r2, r7, #4
 800a32a:	f107 0310 	add.w	r3, r7, #16
 800a32e:	4611      	mov	r1, r2
 800a330:	4618      	mov	r0, r3
 800a332:	f001 f8e5 	bl	800b500 <xTaskCheckForTimeOut>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d123      	bne.n	800a384 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33e:	f000 fb0e 	bl	800a95e <prvIsQueueEmpty>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d017      	beq.n	800a378 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	3324      	adds	r3, #36	; 0x24
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	4611      	mov	r1, r2
 800a350:	4618      	mov	r0, r3
 800a352:	f001 f805 	bl	800b360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a358:	f000 faaf 	bl	800a8ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a35c:	f000 fe2e 	bl	800afbc <xTaskResumeAll>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d189      	bne.n	800a27a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <xQueueReceive+0x1c8>)
 800a368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	e780      	b.n	800a27a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a37a:	f000 fa9e 	bl	800a8ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a37e:	f000 fe1d 	bl	800afbc <xTaskResumeAll>
 800a382:	e77a      	b.n	800a27a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a386:	f000 fa98 	bl	800a8ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a38a:	f000 fe17 	bl	800afbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a38e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a390:	f000 fae5 	bl	800a95e <prvIsQueueEmpty>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	f43f af6f 	beq.w	800a27a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a39c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3730      	adds	r7, #48	; 0x30
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08e      	sub	sp, #56	; 0x38
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10c      	bne.n	800a3e2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	b672      	cpsid	i
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	b662      	cpsie	i
 800a3dc:	623b      	str	r3, [r7, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	b672      	cpsid	i
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	b662      	cpsie	i
 800a3fe:	61fb      	str	r3, [r7, #28]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a404:	f001 f9ca 	bl	800b79c <xTaskGetSchedulerState>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d102      	bne.n	800a414 <xQueueSemaphoreTake+0x68>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <xQueueSemaphoreTake+0x6c>
 800a414:	2301      	movs	r3, #1
 800a416:	e000      	b.n	800a41a <xQueueSemaphoreTake+0x6e>
 800a418:	2300      	movs	r3, #0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10c      	bne.n	800a438 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	b672      	cpsid	i
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	b662      	cpsie	i
 800a432:	61bb      	str	r3, [r7, #24]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a438:	f002 f800 	bl	800c43c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a440:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	2b00      	cmp	r3, #0
 800a446:	d024      	beq.n	800a492 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	1e5a      	subs	r2, r3, #1
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d104      	bne.n	800a462 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a458:	f001 fb1e 	bl	800ba98 <pvTaskIncrementMutexHeldCount>
 800a45c:	4602      	mov	r2, r0
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00f      	beq.n	800a48a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	3310      	adds	r3, #16
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 ffca 	bl	800b408 <xTaskRemoveFromEventList>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d007      	beq.n	800a48a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a47a:	4b55      	ldr	r3, [pc, #340]	; (800a5d0 <xQueueSemaphoreTake+0x224>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a48a:	f002 f80b 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a48e:	2301      	movs	r3, #1
 800a490:	e099      	b.n	800a5c6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d113      	bne.n	800a4c0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00c      	beq.n	800a4b8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	b672      	cpsid	i
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	b662      	cpsie	i
 800a4b2:	617b      	str	r3, [r7, #20]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a4b8:	f001 fff4 	bl	800c4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e082      	b.n	800a5c6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4c6:	f107 030c 	add.w	r3, r7, #12
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 f802 	bl	800b4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4d4:	f001 ffe6 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4d8:	f000 fd62 	bl	800afa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4dc:	f001 ffae 	bl	800c43c <vPortEnterCritical>
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4e6:	b25b      	sxtb	r3, r3
 800a4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ec:	d103      	bne.n	800a4f6 <xQueueSemaphoreTake+0x14a>
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4fc:	b25b      	sxtb	r3, r3
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a502:	d103      	bne.n	800a50c <xQueueSemaphoreTake+0x160>
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a50c:	f001 ffca 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a510:	463a      	mov	r2, r7
 800a512:	f107 030c 	add.w	r3, r7, #12
 800a516:	4611      	mov	r1, r2
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fff1 	bl	800b500 <xTaskCheckForTimeOut>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d132      	bne.n	800a58a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a526:	f000 fa1a 	bl	800a95e <prvIsQueueEmpty>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d026      	beq.n	800a57e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a538:	f001 ff80 	bl	800c43c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	4618      	mov	r0, r3
 800a542:	f001 f949 	bl	800b7d8 <xTaskPriorityInherit>
 800a546:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a548:	f001 ffac 	bl	800c4a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	3324      	adds	r3, #36	; 0x24
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f000 ff03 	bl	800b360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a55a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a55c:	f000 f9ad 	bl	800a8ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a560:	f000 fd2c 	bl	800afbc <xTaskResumeAll>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	f47f af66 	bne.w	800a438 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a56c:	4b18      	ldr	r3, [pc, #96]	; (800a5d0 <xQueueSemaphoreTake+0x224>)
 800a56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	e75c      	b.n	800a438 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a57e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a580:	f000 f99b 	bl	800a8ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a584:	f000 fd1a 	bl	800afbc <xTaskResumeAll>
 800a588:	e756      	b.n	800a438 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a58a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a58c:	f000 f995 	bl	800a8ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a590:	f000 fd14 	bl	800afbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a596:	f000 f9e2 	bl	800a95e <prvIsQueueEmpty>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f43f af4b 	beq.w	800a438 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00d      	beq.n	800a5c4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800a5a8:	f001 ff48 	bl	800c43c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a5ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5ae:	f000 f8dc 	bl	800a76a <prvGetDisinheritPriorityAfterTimeout>
 800a5b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f001 f9e6 	bl	800b98c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a5c0:	f001 ff70 	bl	800c4a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3738      	adds	r7, #56	; 0x38
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	e000ed04 	.word	0xe000ed04

0800a5d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08e      	sub	sp, #56	; 0x38
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10c      	bne.n	800a604 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	b672      	cpsid	i
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	b662      	cpsie	i
 800a5fe:	623b      	str	r3, [r7, #32]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d103      	bne.n	800a612 <xQueueReceiveFromISR+0x3e>
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <xQueueReceiveFromISR+0x42>
 800a612:	2301      	movs	r3, #1
 800a614:	e000      	b.n	800a618 <xQueueReceiveFromISR+0x44>
 800a616:	2300      	movs	r3, #0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10c      	bne.n	800a636 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	b672      	cpsid	i
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	b662      	cpsie	i
 800a630:	61fb      	str	r3, [r7, #28]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a636:	f001 ffe9 	bl	800c60c <vPortValidateInterruptPriority>
	__asm volatile
 800a63a:	f3ef 8211 	mrs	r2, BASEPRI
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	b672      	cpsid	i
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	b662      	cpsie	i
 800a652:	61ba      	str	r2, [r7, #24]
 800a654:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a656:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a658:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	2b00      	cmp	r3, #0
 800a664:	d02f      	beq.n	800a6c6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a66c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a674:	f000 f8fb 	bl	800a86e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	1e5a      	subs	r2, r3, #1
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a688:	d112      	bne.n	800a6b0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d016      	beq.n	800a6c0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	3310      	adds	r3, #16
 800a696:	4618      	mov	r0, r3
 800a698:	f000 feb6 	bl	800b408 <xTaskRemoveFromEventList>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00e      	beq.n	800a6c0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e007      	b.n	800a6c0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	b25a      	sxtb	r2, r3
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c4:	e001      	b.n	800a6ca <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f383 8811 	msr	BASEPRI, r3
}
 800a6d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3738      	adds	r7, #56	; 0x38
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10c      	bne.n	800a708 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f2:	b672      	cpsid	i
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	b662      	cpsie	i
 800a702:	60bb      	str	r3, [r7, #8]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a708:	f001 fe98 	bl	800c43c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a712:	f001 fec7 	bl	800c4a4 <vPortExitCritical>

	return uxReturn;
 800a716:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10c      	bne.n	800a74c <vQueueDelete+0x2c>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	b672      	cpsid	i
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	b662      	cpsie	i
 800a746:	60bb      	str	r3, [r7, #8]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f95f 	bl	800aa10 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d102      	bne.n	800a762 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f002 f863 	bl	800c828 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a76a:	b480      	push	{r7}
 800a76c:	b085      	sub	sp, #20
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d006      	beq.n	800a788 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a784:	60fb      	str	r3, [r7, #12]
 800a786:	e001      	b.n	800a78c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a78c:	68fb      	ldr	r3, [r7, #12]
	}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b086      	sub	sp, #24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10d      	bne.n	800a7d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d14d      	bne.n	800a85c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f001 f86f 	bl	800b8a8 <xTaskPriorityDisinherit>
 800a7ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	609a      	str	r2, [r3, #8]
 800a7d2:	e043      	b.n	800a85c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d119      	bne.n	800a80e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6858      	ldr	r0, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	f006 fffd 	bl	80117e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	441a      	add	r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	429a      	cmp	r2, r3
 800a802:	d32b      	bcc.n	800a85c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	605a      	str	r2, [r3, #4]
 800a80c:	e026      	b.n	800a85c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	68d8      	ldr	r0, [r3, #12]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	461a      	mov	r2, r3
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	f006 ffe3 	bl	80117e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	68da      	ldr	r2, [r3, #12]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	425b      	negs	r3, r3
 800a828:	441a      	add	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	429a      	cmp	r2, r3
 800a838:	d207      	bcs.n	800a84a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a842:	425b      	negs	r3, r3
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d105      	bne.n	800a85c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	3b01      	subs	r3, #1
 800a85a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a864:	697b      	ldr	r3, [r7, #20]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d018      	beq.n	800a8b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a888:	441a      	add	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	429a      	cmp	r2, r3
 800a898:	d303      	bcc.n	800a8a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68d9      	ldr	r1, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6838      	ldr	r0, [r7, #0]
 800a8ae:	f006 ff99 	bl	80117e4 <memcpy>
	}
}
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8c2:	f001 fdbb 	bl	800c43c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8ce:	e011      	b.n	800a8f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d012      	beq.n	800a8fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3324      	adds	r3, #36	; 0x24
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fd93 	bl	800b408 <xTaskRemoveFromEventList>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8e8:	f000 fe70 	bl	800b5cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dce9      	bgt.n	800a8d0 <prvUnlockQueue+0x16>
 800a8fc:	e000      	b.n	800a900 <prvUnlockQueue+0x46>
					break;
 800a8fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	22ff      	movs	r2, #255	; 0xff
 800a904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a908:	f001 fdcc 	bl	800c4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a90c:	f001 fd96 	bl	800c43c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a916:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a918:	e011      	b.n	800a93e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d012      	beq.n	800a948 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3310      	adds	r3, #16
 800a926:	4618      	mov	r0, r3
 800a928:	f000 fd6e 	bl	800b408 <xTaskRemoveFromEventList>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a932:	f000 fe4b 	bl	800b5cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	3b01      	subs	r3, #1
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a93e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dce9      	bgt.n	800a91a <prvUnlockQueue+0x60>
 800a946:	e000      	b.n	800a94a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a948:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	22ff      	movs	r2, #255	; 0xff
 800a94e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a952:	f001 fda7 	bl	800c4a4 <vPortExitCritical>
}
 800a956:	bf00      	nop
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a966:	f001 fd69 	bl	800c43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d102      	bne.n	800a978 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a972:	2301      	movs	r3, #1
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	e001      	b.n	800a97c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a97c:	f001 fd92 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800a980:	68fb      	ldr	r3, [r7, #12]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a992:	f001 fd53 	bl	800c43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d102      	bne.n	800a9a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	e001      	b.n	800a9ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9ac:	f001 fd7a 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
 800a9ca:	e014      	b.n	800a9f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9cc:	4a0f      	ldr	r2, [pc, #60]	; (800aa0c <vQueueAddToRegistry+0x50>)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10b      	bne.n	800a9f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9d8:	490c      	ldr	r1, [pc, #48]	; (800aa0c <vQueueAddToRegistry+0x50>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9e2:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <vQueueAddToRegistry+0x50>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9ee:	e006      	b.n	800a9fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	60fb      	str	r3, [r7, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2b07      	cmp	r3, #7
 800a9fa:	d9e7      	bls.n	800a9cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	20000c8c 	.word	0x20000c8c

0800aa10 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	e016      	b.n	800aa4c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa1e:	4a10      	ldr	r2, [pc, #64]	; (800aa60 <vQueueUnregisterQueue+0x50>)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	4413      	add	r3, r2
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d10b      	bne.n	800aa46 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa2e:	4a0c      	ldr	r2, [pc, #48]	; (800aa60 <vQueueUnregisterQueue+0x50>)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2100      	movs	r1, #0
 800aa34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa38:	4a09      	ldr	r2, [pc, #36]	; (800aa60 <vQueueUnregisterQueue+0x50>)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	4413      	add	r3, r2
 800aa40:	2200      	movs	r2, #0
 800aa42:	605a      	str	r2, [r3, #4]
				break;
 800aa44:	e006      	b.n	800aa54 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b07      	cmp	r3, #7
 800aa50:	d9e5      	bls.n	800aa1e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa52:	bf00      	nop
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	20000c8c 	.word	0x20000c8c

0800aa64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa74:	f001 fce2 	bl	800c43c <vPortEnterCritical>
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa7e:	b25b      	sxtb	r3, r3
 800aa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa84:	d103      	bne.n	800aa8e <vQueueWaitForMessageRestricted+0x2a>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d103      	bne.n	800aaa4 <vQueueWaitForMessageRestricted+0x40>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaa4:	f001 fcfe 	bl	800c4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	3324      	adds	r3, #36	; 0x24
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 fc77 	bl	800b3ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aabe:	6978      	ldr	r0, [r7, #20]
 800aac0:	f7ff fefb 	bl	800a8ba <prvUnlockQueue>
	}
 800aac4:	bf00      	nop
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08e      	sub	sp, #56	; 0x38
 800aad0:	af04      	add	r7, sp, #16
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10c      	bne.n	800aafa <xTaskCreateStatic+0x2e>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	b672      	cpsid	i
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	b662      	cpsie	i
 800aaf4:	623b      	str	r3, [r7, #32]
}
 800aaf6:	bf00      	nop
 800aaf8:	e7fe      	b.n	800aaf8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800aafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10c      	bne.n	800ab1a <xTaskCreateStatic+0x4e>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	b672      	cpsid	i
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	b662      	cpsie	i
 800ab14:	61fb      	str	r3, [r7, #28]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab1a:	23bc      	movs	r3, #188	; 0xbc
 800ab1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2bbc      	cmp	r3, #188	; 0xbc
 800ab22:	d00c      	beq.n	800ab3e <xTaskCreateStatic+0x72>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	b672      	cpsid	i
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	b662      	cpsie	i
 800ab38:	61bb      	str	r3, [r7, #24]
}
 800ab3a:	bf00      	nop
 800ab3c:	e7fe      	b.n	800ab3c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01e      	beq.n	800ab84 <xTaskCreateStatic+0xb8>
 800ab46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01b      	beq.n	800ab84 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	2202      	movs	r2, #2
 800ab5a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9303      	str	r3, [sp, #12]
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	f107 0314 	add.w	r3, r7, #20
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	68b9      	ldr	r1, [r7, #8]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f850 	bl	800ac1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab7e:	f000 f8f5 	bl	800ad6c <prvAddNewTaskToReadyList>
 800ab82:	e001      	b.n	800ab88 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ab84:	2300      	movs	r3, #0
 800ab86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab88:	697b      	ldr	r3, [r7, #20]
	}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3728      	adds	r7, #40	; 0x28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b08c      	sub	sp, #48	; 0x30
 800ab96:	af04      	add	r7, sp, #16
 800ab98:	60f8      	str	r0, [r7, #12]
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	603b      	str	r3, [r7, #0]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aba2:	88fb      	ldrh	r3, [r7, #6]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 fd74 	bl	800c694 <pvPortMalloc>
 800abac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00e      	beq.n	800abd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abb4:	20bc      	movs	r0, #188	; 0xbc
 800abb6:	f001 fd6d 	bl	800c694 <pvPortMalloc>
 800abba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	631a      	str	r2, [r3, #48]	; 0x30
 800abc8:	e005      	b.n	800abd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abca:	6978      	ldr	r0, [r7, #20]
 800abcc:	f001 fe2c 	bl	800c828 <vPortFree>
 800abd0:	e001      	b.n	800abd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d017      	beq.n	800ac0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abe4:	88fa      	ldrh	r2, [r7, #6]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9303      	str	r3, [sp, #12]
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	9302      	str	r3, [sp, #8]
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	9301      	str	r3, [sp, #4]
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f000 f80e 	bl	800ac1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac00:	69f8      	ldr	r0, [r7, #28]
 800ac02:	f000 f8b3 	bl	800ad6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac06:	2301      	movs	r3, #1
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	e002      	b.n	800ac12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac12:	69bb      	ldr	r3, [r7, #24]
	}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3720      	adds	r7, #32
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	461a      	mov	r2, r3
 800ac34:	21a5      	movs	r1, #165	; 0xa5
 800ac36:	f006 fde3 	bl	8011800 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ac44:	440b      	add	r3, r1
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	f023 0307 	bic.w	r3, r3, #7
 800ac52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00c      	beq.n	800ac78 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	b672      	cpsid	i
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	b662      	cpsie	i
 800ac72:	617b      	str	r3, [r7, #20]
}
 800ac74:	bf00      	nop
 800ac76:	e7fe      	b.n	800ac76 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01f      	beq.n	800acbe <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac7e:	2300      	movs	r3, #0
 800ac80:	61fb      	str	r3, [r7, #28]
 800ac82:	e012      	b.n	800acaa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	4413      	add	r3, r2
 800ac8a:	7819      	ldrb	r1, [r3, #0]
 800ac8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	4413      	add	r3, r2
 800ac92:	3334      	adds	r3, #52	; 0x34
 800ac94:	460a      	mov	r2, r1
 800ac96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d006      	beq.n	800acb2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	3301      	adds	r3, #1
 800aca8:	61fb      	str	r3, [r7, #28]
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	2b0f      	cmp	r3, #15
 800acae:	d9e9      	bls.n	800ac84 <prvInitialiseNewTask+0x68>
 800acb0:	e000      	b.n	800acb4 <prvInitialiseNewTask+0x98>
			{
				break;
 800acb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acbc:	e003      	b.n	800acc6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	2b37      	cmp	r3, #55	; 0x37
 800acca:	d901      	bls.n	800acd0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800accc:	2337      	movs	r3, #55	; 0x37
 800acce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	2200      	movs	r2, #0
 800ace0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	3304      	adds	r3, #4
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe feee 	bl	8009ac8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	3318      	adds	r3, #24
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fe fee9 	bl	8009ac8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	3354      	adds	r3, #84	; 0x54
 800ad20:	2260      	movs	r2, #96	; 0x60
 800ad22:	2100      	movs	r1, #0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f006 fd6b 	bl	8011800 <memset>
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2c:	4a0c      	ldr	r2, [pc, #48]	; (800ad60 <prvInitialiseNewTask+0x144>)
 800ad2e:	659a      	str	r2, [r3, #88]	; 0x58
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	4a0c      	ldr	r2, [pc, #48]	; (800ad64 <prvInitialiseNewTask+0x148>)
 800ad34:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	4a0b      	ldr	r2, [pc, #44]	; (800ad68 <prvInitialiseNewTask+0x14c>)
 800ad3a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	68f9      	ldr	r1, [r7, #12]
 800ad40:	69b8      	ldr	r0, [r7, #24]
 800ad42:	f001 fa6d 	bl	800c220 <pxPortInitialiseStack>
 800ad46:	4602      	mov	r2, r0
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad58:	bf00      	nop
 800ad5a:	3720      	adds	r7, #32
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	0801635c 	.word	0x0801635c
 800ad64:	0801637c 	.word	0x0801637c
 800ad68:	0801633c 	.word	0x0801633c

0800ad6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad74:	f001 fb62 	bl	800c43c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad78:	4b2d      	ldr	r3, [pc, #180]	; (800ae30 <prvAddNewTaskToReadyList+0xc4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	4a2c      	ldr	r2, [pc, #176]	; (800ae30 <prvAddNewTaskToReadyList+0xc4>)
 800ad80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad82:	4b2c      	ldr	r3, [pc, #176]	; (800ae34 <prvAddNewTaskToReadyList+0xc8>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d109      	bne.n	800ad9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad8a:	4a2a      	ldr	r2, [pc, #168]	; (800ae34 <prvAddNewTaskToReadyList+0xc8>)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad90:	4b27      	ldr	r3, [pc, #156]	; (800ae30 <prvAddNewTaskToReadyList+0xc4>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d110      	bne.n	800adba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad98:	f000 fc3c 	bl	800b614 <prvInitialiseTaskLists>
 800ad9c:	e00d      	b.n	800adba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad9e:	4b26      	ldr	r3, [pc, #152]	; (800ae38 <prvAddNewTaskToReadyList+0xcc>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d109      	bne.n	800adba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ada6:	4b23      	ldr	r3, [pc, #140]	; (800ae34 <prvAddNewTaskToReadyList+0xc8>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d802      	bhi.n	800adba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adb4:	4a1f      	ldr	r2, [pc, #124]	; (800ae34 <prvAddNewTaskToReadyList+0xc8>)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adba:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <prvAddNewTaskToReadyList+0xd0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3301      	adds	r3, #1
 800adc0:	4a1e      	ldr	r2, [pc, #120]	; (800ae3c <prvAddNewTaskToReadyList+0xd0>)
 800adc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adc4:	4b1d      	ldr	r3, [pc, #116]	; (800ae3c <prvAddNewTaskToReadyList+0xd0>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add0:	4b1b      	ldr	r3, [pc, #108]	; (800ae40 <prvAddNewTaskToReadyList+0xd4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d903      	bls.n	800ade0 <prvAddNewTaskToReadyList+0x74>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	4a18      	ldr	r2, [pc, #96]	; (800ae40 <prvAddNewTaskToReadyList+0xd4>)
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4a15      	ldr	r2, [pc, #84]	; (800ae44 <prvAddNewTaskToReadyList+0xd8>)
 800adee:	441a      	add	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3304      	adds	r3, #4
 800adf4:	4619      	mov	r1, r3
 800adf6:	4610      	mov	r0, r2
 800adf8:	f7fe fe73 	bl	8009ae2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adfc:	f001 fb52 	bl	800c4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae00:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <prvAddNewTaskToReadyList+0xcc>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00e      	beq.n	800ae26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae08:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <prvAddNewTaskToReadyList+0xc8>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d207      	bcs.n	800ae26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae16:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <prvAddNewTaskToReadyList+0xdc>)
 800ae18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200011a0 	.word	0x200011a0
 800ae34:	20000ccc 	.word	0x20000ccc
 800ae38:	200011ac 	.word	0x200011ac
 800ae3c:	200011bc 	.word	0x200011bc
 800ae40:	200011a8 	.word	0x200011a8
 800ae44:	20000cd0 	.word	0x20000cd0
 800ae48:	e000ed04 	.word	0xe000ed04

0800ae4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae54:	2300      	movs	r3, #0
 800ae56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d019      	beq.n	800ae92 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <vTaskDelay+0x64>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00c      	beq.n	800ae80 <vTaskDelay+0x34>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6a:	b672      	cpsid	i
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	b662      	cpsie	i
 800ae7a:	60bb      	str	r3, [r7, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ae80:	f000 f88e 	bl	800afa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae84:	2100      	movs	r1, #0
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fe1a 	bl	800bac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae8c:	f000 f896 	bl	800afbc <xTaskResumeAll>
 800ae90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d107      	bne.n	800aea8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ae98:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <vTaskDelay+0x68>)
 800ae9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aea8:	bf00      	nop
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	200011c8 	.word	0x200011c8
 800aeb4:	e000ed04 	.word	0xe000ed04

0800aeb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	; 0x28
 800aebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aec6:	463a      	mov	r2, r7
 800aec8:	1d39      	adds	r1, r7, #4
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fda6 	bl	8009a20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	9202      	str	r2, [sp, #8]
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	2300      	movs	r3, #0
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	2300      	movs	r3, #0
 800aee4:	460a      	mov	r2, r1
 800aee6:	4926      	ldr	r1, [pc, #152]	; (800af80 <vTaskStartScheduler+0xc8>)
 800aee8:	4826      	ldr	r0, [pc, #152]	; (800af84 <vTaskStartScheduler+0xcc>)
 800aeea:	f7ff fdef 	bl	800aacc <xTaskCreateStatic>
 800aeee:	4603      	mov	r3, r0
 800aef0:	4a25      	ldr	r2, [pc, #148]	; (800af88 <vTaskStartScheduler+0xd0>)
 800aef2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aef4:	4b24      	ldr	r3, [pc, #144]	; (800af88 <vTaskStartScheduler+0xd0>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aefc:	2301      	movs	r3, #1
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	e001      	b.n	800af06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af02:	2300      	movs	r3, #0
 800af04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d102      	bne.n	800af12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af0c:	f000 fe2c 	bl	800bb68 <xTimerCreateTimerTask>
 800af10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d11d      	bne.n	800af54 <vTaskStartScheduler+0x9c>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	b672      	cpsid	i
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	b662      	cpsie	i
 800af2c:	613b      	str	r3, [r7, #16]
}
 800af2e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af30:	4b16      	ldr	r3, [pc, #88]	; (800af8c <vTaskStartScheduler+0xd4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3354      	adds	r3, #84	; 0x54
 800af36:	4a16      	ldr	r2, [pc, #88]	; (800af90 <vTaskStartScheduler+0xd8>)
 800af38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af3a:	4b16      	ldr	r3, [pc, #88]	; (800af94 <vTaskStartScheduler+0xdc>)
 800af3c:	f04f 32ff 	mov.w	r2, #4294967295
 800af40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af42:	4b15      	ldr	r3, [pc, #84]	; (800af98 <vTaskStartScheduler+0xe0>)
 800af44:	2201      	movs	r2, #1
 800af46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af48:	4b14      	ldr	r3, [pc, #80]	; (800af9c <vTaskStartScheduler+0xe4>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af4e:	f001 f9f7 	bl	800c340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af52:	e010      	b.n	800af76 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5a:	d10c      	bne.n	800af76 <vTaskStartScheduler+0xbe>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	b672      	cpsid	i
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	b662      	cpsie	i
 800af70:	60fb      	str	r3, [r7, #12]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <vTaskStartScheduler+0xbc>
}
 800af76:	bf00      	nop
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	080148c8 	.word	0x080148c8
 800af84:	0800b5e5 	.word	0x0800b5e5
 800af88:	200011c4 	.word	0x200011c4
 800af8c:	20000ccc 	.word	0x20000ccc
 800af90:	20000180 	.word	0x20000180
 800af94:	200011c0 	.word	0x200011c0
 800af98:	200011ac 	.word	0x200011ac
 800af9c:	200011a4 	.word	0x200011a4

0800afa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800afa4:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <vTaskSuspendAll+0x18>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3301      	adds	r3, #1
 800afaa:	4a03      	ldr	r2, [pc, #12]	; (800afb8 <vTaskSuspendAll+0x18>)
 800afac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800afae:	bf00      	nop
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	200011c8 	.word	0x200011c8

0800afbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afc2:	2300      	movs	r3, #0
 800afc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afca:	4b43      	ldr	r3, [pc, #268]	; (800b0d8 <xTaskResumeAll+0x11c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10c      	bne.n	800afec <xTaskResumeAll+0x30>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	b672      	cpsid	i
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	b662      	cpsie	i
 800afe6:	603b      	str	r3, [r7, #0]
}
 800afe8:	bf00      	nop
 800afea:	e7fe      	b.n	800afea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afec:	f001 fa26 	bl	800c43c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aff0:	4b39      	ldr	r3, [pc, #228]	; (800b0d8 <xTaskResumeAll+0x11c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	4a38      	ldr	r2, [pc, #224]	; (800b0d8 <xTaskResumeAll+0x11c>)
 800aff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800affa:	4b37      	ldr	r3, [pc, #220]	; (800b0d8 <xTaskResumeAll+0x11c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d162      	bne.n	800b0c8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b002:	4b36      	ldr	r3, [pc, #216]	; (800b0dc <xTaskResumeAll+0x120>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d05e      	beq.n	800b0c8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b00a:	e02f      	b.n	800b06c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00c:	4b34      	ldr	r3, [pc, #208]	; (800b0e0 <xTaskResumeAll+0x124>)
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3318      	adds	r3, #24
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe fdbf 	bl	8009b9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3304      	adds	r3, #4
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe fdba 	bl	8009b9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b02c:	4b2d      	ldr	r3, [pc, #180]	; (800b0e4 <xTaskResumeAll+0x128>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d903      	bls.n	800b03c <xTaskResumeAll+0x80>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b038:	4a2a      	ldr	r2, [pc, #168]	; (800b0e4 <xTaskResumeAll+0x128>)
 800b03a:	6013      	str	r3, [r2, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4a27      	ldr	r2, [pc, #156]	; (800b0e8 <xTaskResumeAll+0x12c>)
 800b04a:	441a      	add	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3304      	adds	r3, #4
 800b050:	4619      	mov	r1, r3
 800b052:	4610      	mov	r0, r2
 800b054:	f7fe fd45 	bl	8009ae2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05c:	4b23      	ldr	r3, [pc, #140]	; (800b0ec <xTaskResumeAll+0x130>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	429a      	cmp	r2, r3
 800b064:	d302      	bcc.n	800b06c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b066:	4b22      	ldr	r3, [pc, #136]	; (800b0f0 <xTaskResumeAll+0x134>)
 800b068:	2201      	movs	r2, #1
 800b06a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b06c:	4b1c      	ldr	r3, [pc, #112]	; (800b0e0 <xTaskResumeAll+0x124>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1cb      	bne.n	800b00c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b07a:	f000 fb6f 	bl	800b75c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b07e:	4b1d      	ldr	r3, [pc, #116]	; (800b0f4 <xTaskResumeAll+0x138>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d010      	beq.n	800b0ac <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b08a:	f000 f847 	bl	800b11c <xTaskIncrementTick>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b094:	4b16      	ldr	r3, [pc, #88]	; (800b0f0 <xTaskResumeAll+0x134>)
 800b096:	2201      	movs	r2, #1
 800b098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1f1      	bne.n	800b08a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b0a6:	4b13      	ldr	r3, [pc, #76]	; (800b0f4 <xTaskResumeAll+0x138>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0ac:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <xTaskResumeAll+0x134>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d009      	beq.n	800b0c8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0b8:	4b0f      	ldr	r3, [pc, #60]	; (800b0f8 <xTaskResumeAll+0x13c>)
 800b0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0c8:	f001 f9ec 	bl	800c4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b0cc:	68bb      	ldr	r3, [r7, #8]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	200011c8 	.word	0x200011c8
 800b0dc:	200011a0 	.word	0x200011a0
 800b0e0:	20001160 	.word	0x20001160
 800b0e4:	200011a8 	.word	0x200011a8
 800b0e8:	20000cd0 	.word	0x20000cd0
 800b0ec:	20000ccc 	.word	0x20000ccc
 800b0f0:	200011b4 	.word	0x200011b4
 800b0f4:	200011b0 	.word	0x200011b0
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <xTaskGetTickCount+0x1c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b108:	687b      	ldr	r3, [r7, #4]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	200011a4 	.word	0x200011a4

0800b11c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b126:	4b50      	ldr	r3, [pc, #320]	; (800b268 <xTaskIncrementTick+0x14c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f040 808b 	bne.w	800b246 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b130:	4b4e      	ldr	r3, [pc, #312]	; (800b26c <xTaskIncrementTick+0x150>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	3301      	adds	r3, #1
 800b136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b138:	4a4c      	ldr	r2, [pc, #304]	; (800b26c <xTaskIncrementTick+0x150>)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d122      	bne.n	800b18a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b144:	4b4a      	ldr	r3, [pc, #296]	; (800b270 <xTaskIncrementTick+0x154>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00c      	beq.n	800b168 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	b672      	cpsid	i
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	b662      	cpsie	i
 800b162:	603b      	str	r3, [r7, #0]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <xTaskIncrementTick+0x4a>
 800b168:	4b41      	ldr	r3, [pc, #260]	; (800b270 <xTaskIncrementTick+0x154>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	4b41      	ldr	r3, [pc, #260]	; (800b274 <xTaskIncrementTick+0x158>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a3f      	ldr	r2, [pc, #252]	; (800b270 <xTaskIncrementTick+0x154>)
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	4a3f      	ldr	r2, [pc, #252]	; (800b274 <xTaskIncrementTick+0x158>)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	4b3e      	ldr	r3, [pc, #248]	; (800b278 <xTaskIncrementTick+0x15c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	4a3d      	ldr	r2, [pc, #244]	; (800b278 <xTaskIncrementTick+0x15c>)
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	f000 fae9 	bl	800b75c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b18a:	4b3c      	ldr	r3, [pc, #240]	; (800b27c <xTaskIncrementTick+0x160>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	429a      	cmp	r2, r3
 800b192:	d349      	bcc.n	800b228 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b194:	4b36      	ldr	r3, [pc, #216]	; (800b270 <xTaskIncrementTick+0x154>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d104      	bne.n	800b1a8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b19e:	4b37      	ldr	r3, [pc, #220]	; (800b27c <xTaskIncrementTick+0x160>)
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a4:	601a      	str	r2, [r3, #0]
					break;
 800b1a6:	e03f      	b.n	800b228 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a8:	4b31      	ldr	r3, [pc, #196]	; (800b270 <xTaskIncrementTick+0x154>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d203      	bcs.n	800b1c8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1c0:	4a2e      	ldr	r2, [pc, #184]	; (800b27c <xTaskIncrementTick+0x160>)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1c6:	e02f      	b.n	800b228 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fce5 	bl	8009b9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d004      	beq.n	800b1e4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3318      	adds	r3, #24
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe fcdc 	bl	8009b9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e8:	4b25      	ldr	r3, [pc, #148]	; (800b280 <xTaskIncrementTick+0x164>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d903      	bls.n	800b1f8 <xTaskIncrementTick+0xdc>
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f4:	4a22      	ldr	r2, [pc, #136]	; (800b280 <xTaskIncrementTick+0x164>)
 800b1f6:	6013      	str	r3, [r2, #0]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4a1f      	ldr	r2, [pc, #124]	; (800b284 <xTaskIncrementTick+0x168>)
 800b206:	441a      	add	r2, r3
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	3304      	adds	r3, #4
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7fe fc67 	bl	8009ae2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b218:	4b1b      	ldr	r3, [pc, #108]	; (800b288 <xTaskIncrementTick+0x16c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21e:	429a      	cmp	r2, r3
 800b220:	d3b8      	bcc.n	800b194 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b222:	2301      	movs	r3, #1
 800b224:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b226:	e7b5      	b.n	800b194 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b228:	4b17      	ldr	r3, [pc, #92]	; (800b288 <xTaskIncrementTick+0x16c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22e:	4915      	ldr	r1, [pc, #84]	; (800b284 <xTaskIncrementTick+0x168>)
 800b230:	4613      	mov	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	440b      	add	r3, r1
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d907      	bls.n	800b250 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b240:	2301      	movs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e004      	b.n	800b250 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b246:	4b11      	ldr	r3, [pc, #68]	; (800b28c <xTaskIncrementTick+0x170>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3301      	adds	r3, #1
 800b24c:	4a0f      	ldr	r2, [pc, #60]	; (800b28c <xTaskIncrementTick+0x170>)
 800b24e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b250:	4b0f      	ldr	r3, [pc, #60]	; (800b290 <xTaskIncrementTick+0x174>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b258:	2301      	movs	r3, #1
 800b25a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b25c:	697b      	ldr	r3, [r7, #20]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	200011c8 	.word	0x200011c8
 800b26c:	200011a4 	.word	0x200011a4
 800b270:	20001158 	.word	0x20001158
 800b274:	2000115c 	.word	0x2000115c
 800b278:	200011b8 	.word	0x200011b8
 800b27c:	200011c0 	.word	0x200011c0
 800b280:	200011a8 	.word	0x200011a8
 800b284:	20000cd0 	.word	0x20000cd0
 800b288:	20000ccc 	.word	0x20000ccc
 800b28c:	200011b0 	.word	0x200011b0
 800b290:	200011b4 	.word	0x200011b4

0800b294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b29a:	4b2b      	ldr	r3, [pc, #172]	; (800b348 <vTaskSwitchContext+0xb4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2a2:	4b2a      	ldr	r3, [pc, #168]	; (800b34c <vTaskSwitchContext+0xb8>)
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2a8:	e048      	b.n	800b33c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b2aa:	4b28      	ldr	r3, [pc, #160]	; (800b34c <vTaskSwitchContext+0xb8>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b0:	4b27      	ldr	r3, [pc, #156]	; (800b350 <vTaskSwitchContext+0xbc>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	60fb      	str	r3, [r7, #12]
 800b2b6:	e012      	b.n	800b2de <vTaskSwitchContext+0x4a>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10c      	bne.n	800b2d8 <vTaskSwitchContext+0x44>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	b672      	cpsid	i
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	b662      	cpsie	i
 800b2d2:	607b      	str	r3, [r7, #4]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <vTaskSwitchContext+0x42>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	60fb      	str	r3, [r7, #12]
 800b2de:	491d      	ldr	r1, [pc, #116]	; (800b354 <vTaskSwitchContext+0xc0>)
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	440b      	add	r3, r1
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0e2      	beq.n	800b2b8 <vTaskSwitchContext+0x24>
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4a15      	ldr	r2, [pc, #84]	; (800b354 <vTaskSwitchContext+0xc0>)
 800b2fe:	4413      	add	r3, r2
 800b300:	60bb      	str	r3, [r7, #8]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	605a      	str	r2, [r3, #4]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	3308      	adds	r3, #8
 800b314:	429a      	cmp	r2, r3
 800b316:	d104      	bne.n	800b322 <vTaskSwitchContext+0x8e>
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	605a      	str	r2, [r3, #4]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	4a0b      	ldr	r2, [pc, #44]	; (800b358 <vTaskSwitchContext+0xc4>)
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	4a08      	ldr	r2, [pc, #32]	; (800b350 <vTaskSwitchContext+0xbc>)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b332:	4b09      	ldr	r3, [pc, #36]	; (800b358 <vTaskSwitchContext+0xc4>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3354      	adds	r3, #84	; 0x54
 800b338:	4a08      	ldr	r2, [pc, #32]	; (800b35c <vTaskSwitchContext+0xc8>)
 800b33a:	6013      	str	r3, [r2, #0]
}
 800b33c:	bf00      	nop
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	200011c8 	.word	0x200011c8
 800b34c:	200011b4 	.word	0x200011b4
 800b350:	200011a8 	.word	0x200011a8
 800b354:	20000cd0 	.word	0x20000cd0
 800b358:	20000ccc 	.word	0x20000ccc
 800b35c:	20000180 	.word	0x20000180

0800b360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10c      	bne.n	800b38a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	b672      	cpsid	i
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	b662      	cpsie	i
 800b384:	60fb      	str	r3, [r7, #12]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b38a:	4b07      	ldr	r3, [pc, #28]	; (800b3a8 <vTaskPlaceOnEventList+0x48>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3318      	adds	r3, #24
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fe fbc9 	bl	8009b2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b398:	2101      	movs	r1, #1
 800b39a:	6838      	ldr	r0, [r7, #0]
 800b39c:	f000 fb90 	bl	800bac0 <prvAddCurrentTaskToDelayedList>
}
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000ccc 	.word	0x20000ccc

0800b3ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10c      	bne.n	800b3d8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	b672      	cpsid	i
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	b662      	cpsie	i
 800b3d2:	617b      	str	r3, [r7, #20]
}
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <vTaskPlaceOnEventListRestricted+0x58>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3318      	adds	r3, #24
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7fe fb7e 	bl	8009ae2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3f2:	6879      	ldr	r1, [r7, #4]
 800b3f4:	68b8      	ldr	r0, [r7, #8]
 800b3f6:	f000 fb63 	bl	800bac0 <prvAddCurrentTaskToDelayedList>
	}
 800b3fa:	bf00      	nop
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000ccc 	.word	0x20000ccc

0800b408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10c      	bne.n	800b438 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	b672      	cpsid	i
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	b662      	cpsie	i
 800b432:	60fb      	str	r3, [r7, #12]
}
 800b434:	bf00      	nop
 800b436:	e7fe      	b.n	800b436 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	3318      	adds	r3, #24
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fbad 	bl	8009b9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b442:	4b1e      	ldr	r3, [pc, #120]	; (800b4bc <xTaskRemoveFromEventList+0xb4>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d11d      	bne.n	800b486 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe fba4 	bl	8009b9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4b19      	ldr	r3, [pc, #100]	; (800b4c0 <xTaskRemoveFromEventList+0xb8>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d903      	bls.n	800b468 <xTaskRemoveFromEventList+0x60>
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	4a16      	ldr	r2, [pc, #88]	; (800b4c0 <xTaskRemoveFromEventList+0xb8>)
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4a13      	ldr	r2, [pc, #76]	; (800b4c4 <xTaskRemoveFromEventList+0xbc>)
 800b476:	441a      	add	r2, r3
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	3304      	adds	r3, #4
 800b47c:	4619      	mov	r1, r3
 800b47e:	4610      	mov	r0, r2
 800b480:	f7fe fb2f 	bl	8009ae2 <vListInsertEnd>
 800b484:	e005      	b.n	800b492 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	3318      	adds	r3, #24
 800b48a:	4619      	mov	r1, r3
 800b48c:	480e      	ldr	r0, [pc, #56]	; (800b4c8 <xTaskRemoveFromEventList+0xc0>)
 800b48e:	f7fe fb28 	bl	8009ae2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b496:	4b0d      	ldr	r3, [pc, #52]	; (800b4cc <xTaskRemoveFromEventList+0xc4>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d905      	bls.n	800b4ac <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4a4:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <xTaskRemoveFromEventList+0xc8>)
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	e001      	b.n	800b4b0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4b0:	697b      	ldr	r3, [r7, #20]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	200011c8 	.word	0x200011c8
 800b4c0:	200011a8 	.word	0x200011a8
 800b4c4:	20000cd0 	.word	0x20000cd0
 800b4c8:	20001160 	.word	0x20001160
 800b4cc:	20000ccc 	.word	0x20000ccc
 800b4d0:	200011b4 	.word	0x200011b4

0800b4d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4dc:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <vTaskInternalSetTimeOutState+0x24>)
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <vTaskInternalSetTimeOutState+0x28>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	605a      	str	r2, [r3, #4]
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	200011b8 	.word	0x200011b8
 800b4fc:	200011a4 	.word	0x200011a4

0800b500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10c      	bne.n	800b52a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	b672      	cpsid	i
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	b662      	cpsie	i
 800b524:	613b      	str	r3, [r7, #16]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10c      	bne.n	800b54a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	b672      	cpsid	i
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	b662      	cpsie	i
 800b544:	60fb      	str	r3, [r7, #12]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b54a:	f000 ff77 	bl	800c43c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b54e:	4b1d      	ldr	r3, [pc, #116]	; (800b5c4 <xTaskCheckForTimeOut+0xc4>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	69ba      	ldr	r2, [r7, #24]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b566:	d102      	bne.n	800b56e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b568:	2300      	movs	r3, #0
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	e023      	b.n	800b5b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <xTaskCheckForTimeOut+0xc8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	429a      	cmp	r2, r3
 800b578:	d007      	beq.n	800b58a <xTaskCheckForTimeOut+0x8a>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	429a      	cmp	r2, r3
 800b582:	d302      	bcc.n	800b58a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b584:	2301      	movs	r3, #1
 800b586:	61fb      	str	r3, [r7, #28]
 800b588:	e015      	b.n	800b5b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	429a      	cmp	r2, r3
 800b592:	d20b      	bcs.n	800b5ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	1ad2      	subs	r2, r2, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7ff ff97 	bl	800b4d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	e004      	b.n	800b5b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5b6:	f000 ff75 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800b5ba:	69fb      	ldr	r3, [r7, #28]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	200011a4 	.word	0x200011a4
 800b5c8:	200011b8 	.word	0x200011b8

0800b5cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5d0:	4b03      	ldr	r3, [pc, #12]	; (800b5e0 <vTaskMissedYield+0x14>)
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	601a      	str	r2, [r3, #0]
}
 800b5d6:	bf00      	nop
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	200011b4 	.word	0x200011b4

0800b5e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5ec:	f000 f852 	bl	800b694 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5f0:	4b06      	ldr	r3, [pc, #24]	; (800b60c <prvIdleTask+0x28>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d9f9      	bls.n	800b5ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5f8:	4b05      	ldr	r3, [pc, #20]	; (800b610 <prvIdleTask+0x2c>)
 800b5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b608:	e7f0      	b.n	800b5ec <prvIdleTask+0x8>
 800b60a:	bf00      	nop
 800b60c:	20000cd0 	.word	0x20000cd0
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b61a:	2300      	movs	r3, #0
 800b61c:	607b      	str	r3, [r7, #4]
 800b61e:	e00c      	b.n	800b63a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4a12      	ldr	r2, [pc, #72]	; (800b674 <prvInitialiseTaskLists+0x60>)
 800b62c:	4413      	add	r3, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe fa2a 	bl	8009a88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3301      	adds	r3, #1
 800b638:	607b      	str	r3, [r7, #4]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b37      	cmp	r3, #55	; 0x37
 800b63e:	d9ef      	bls.n	800b620 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b640:	480d      	ldr	r0, [pc, #52]	; (800b678 <prvInitialiseTaskLists+0x64>)
 800b642:	f7fe fa21 	bl	8009a88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b646:	480d      	ldr	r0, [pc, #52]	; (800b67c <prvInitialiseTaskLists+0x68>)
 800b648:	f7fe fa1e 	bl	8009a88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b64c:	480c      	ldr	r0, [pc, #48]	; (800b680 <prvInitialiseTaskLists+0x6c>)
 800b64e:	f7fe fa1b 	bl	8009a88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b652:	480c      	ldr	r0, [pc, #48]	; (800b684 <prvInitialiseTaskLists+0x70>)
 800b654:	f7fe fa18 	bl	8009a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b658:	480b      	ldr	r0, [pc, #44]	; (800b688 <prvInitialiseTaskLists+0x74>)
 800b65a:	f7fe fa15 	bl	8009a88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b65e:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <prvInitialiseTaskLists+0x78>)
 800b660:	4a05      	ldr	r2, [pc, #20]	; (800b678 <prvInitialiseTaskLists+0x64>)
 800b662:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <prvInitialiseTaskLists+0x7c>)
 800b666:	4a05      	ldr	r2, [pc, #20]	; (800b67c <prvInitialiseTaskLists+0x68>)
 800b668:	601a      	str	r2, [r3, #0]
}
 800b66a:	bf00      	nop
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	20000cd0 	.word	0x20000cd0
 800b678:	20001130 	.word	0x20001130
 800b67c:	20001144 	.word	0x20001144
 800b680:	20001160 	.word	0x20001160
 800b684:	20001174 	.word	0x20001174
 800b688:	2000118c 	.word	0x2000118c
 800b68c:	20001158 	.word	0x20001158
 800b690:	2000115c 	.word	0x2000115c

0800b694 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b69a:	e019      	b.n	800b6d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b69c:	f000 fece 	bl	800c43c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a0:	4b10      	ldr	r3, [pc, #64]	; (800b6e4 <prvCheckTasksWaitingTermination+0x50>)
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe fa75 	bl	8009b9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <prvCheckTasksWaitingTermination+0x54>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	4a0b      	ldr	r2, [pc, #44]	; (800b6e8 <prvCheckTasksWaitingTermination+0x54>)
 800b6ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6bc:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <prvCheckTasksWaitingTermination+0x58>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	4a0a      	ldr	r2, [pc, #40]	; (800b6ec <prvCheckTasksWaitingTermination+0x58>)
 800b6c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6c6:	f000 feed 	bl	800c4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f810 	bl	800b6f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6d0:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <prvCheckTasksWaitingTermination+0x58>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1e1      	bne.n	800b69c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20001174 	.word	0x20001174
 800b6e8:	200011a0 	.word	0x200011a0
 800b6ec:	20001188 	.word	0x20001188

0800b6f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3354      	adds	r3, #84	; 0x54
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f006 feef 	bl	80124e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d108      	bne.n	800b71e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b710:	4618      	mov	r0, r3
 800b712:	f001 f889 	bl	800c828 <vPortFree>
				vPortFree( pxTCB );
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f001 f886 	bl	800c828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b71c:	e01a      	b.n	800b754 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b724:	2b01      	cmp	r3, #1
 800b726:	d103      	bne.n	800b730 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f001 f87d 	bl	800c828 <vPortFree>
	}
 800b72e:	e011      	b.n	800b754 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b736:	2b02      	cmp	r3, #2
 800b738:	d00c      	beq.n	800b754 <prvDeleteTCB+0x64>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	b672      	cpsid	i
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	b662      	cpsie	i
 800b74e:	60fb      	str	r3, [r7, #12]
}
 800b750:	bf00      	nop
 800b752:	e7fe      	b.n	800b752 <prvDeleteTCB+0x62>
	}
 800b754:	bf00      	nop
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b762:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <prvResetNextTaskUnblockTime+0x38>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d104      	bne.n	800b776 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b76c:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <prvResetNextTaskUnblockTime+0x3c>)
 800b76e:	f04f 32ff 	mov.w	r2, #4294967295
 800b772:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b774:	e008      	b.n	800b788 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b776:	4b07      	ldr	r3, [pc, #28]	; (800b794 <prvResetNextTaskUnblockTime+0x38>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4a04      	ldr	r2, [pc, #16]	; (800b798 <prvResetNextTaskUnblockTime+0x3c>)
 800b786:	6013      	str	r3, [r2, #0]
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	20001158 	.word	0x20001158
 800b798:	200011c0 	.word	0x200011c0

0800b79c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7a2:	4b0b      	ldr	r3, [pc, #44]	; (800b7d0 <xTaskGetSchedulerState+0x34>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	607b      	str	r3, [r7, #4]
 800b7ae:	e008      	b.n	800b7c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7b0:	4b08      	ldr	r3, [pc, #32]	; (800b7d4 <xTaskGetSchedulerState+0x38>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d102      	bne.n	800b7be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	607b      	str	r3, [r7, #4]
 800b7bc:	e001      	b.n	800b7c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7c2:	687b      	ldr	r3, [r7, #4]
	}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	200011ac 	.word	0x200011ac
 800b7d4:	200011c8 	.word	0x200011c8

0800b7d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d051      	beq.n	800b892 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	4b2a      	ldr	r3, [pc, #168]	; (800b89c <xTaskPriorityInherit+0xc4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d241      	bcs.n	800b880 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	db06      	blt.n	800b812 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b804:	4b25      	ldr	r3, [pc, #148]	; (800b89c <xTaskPriorityInherit+0xc4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	6959      	ldr	r1, [r3, #20]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81a:	4613      	mov	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4a1f      	ldr	r2, [pc, #124]	; (800b8a0 <xTaskPriorityInherit+0xc8>)
 800b824:	4413      	add	r3, r2
 800b826:	4299      	cmp	r1, r3
 800b828:	d122      	bne.n	800b870 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	3304      	adds	r3, #4
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe f9b4 	bl	8009b9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b834:	4b19      	ldr	r3, [pc, #100]	; (800b89c <xTaskPriorityInherit+0xc4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b842:	4b18      	ldr	r3, [pc, #96]	; (800b8a4 <xTaskPriorityInherit+0xcc>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	d903      	bls.n	800b852 <xTaskPriorityInherit+0x7a>
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84e:	4a15      	ldr	r2, [pc, #84]	; (800b8a4 <xTaskPriorityInherit+0xcc>)
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b856:	4613      	mov	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4a10      	ldr	r2, [pc, #64]	; (800b8a0 <xTaskPriorityInherit+0xc8>)
 800b860:	441a      	add	r2, r3
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	3304      	adds	r3, #4
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f7fe f93a 	bl	8009ae2 <vListInsertEnd>
 800b86e:	e004      	b.n	800b87a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b870:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <xTaskPriorityInherit+0xc4>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e008      	b.n	800b892 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b884:	4b05      	ldr	r3, [pc, #20]	; (800b89c <xTaskPriorityInherit+0xc4>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d201      	bcs.n	800b892 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b88e:	2301      	movs	r3, #1
 800b890:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b892:	68fb      	ldr	r3, [r7, #12]
	}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000ccc 	.word	0x20000ccc
 800b8a0:	20000cd0 	.word	0x20000cd0
 800b8a4:	200011a8 	.word	0x200011a8

0800b8a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d05a      	beq.n	800b974 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b8be:	4b30      	ldr	r3, [pc, #192]	; (800b980 <xTaskPriorityDisinherit+0xd8>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d00c      	beq.n	800b8e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	b672      	cpsid	i
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	b662      	cpsie	i
 800b8dc:	60fb      	str	r3, [r7, #12]
}
 800b8de:	bf00      	nop
 800b8e0:	e7fe      	b.n	800b8e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10c      	bne.n	800b904 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	b672      	cpsid	i
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	b662      	cpsie	i
 800b8fe:	60bb      	str	r3, [r7, #8]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b916:	429a      	cmp	r2, r3
 800b918:	d02c      	beq.n	800b974 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d128      	bne.n	800b974 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3304      	adds	r3, #4
 800b926:	4618      	mov	r0, r3
 800b928:	f7fe f938 	bl	8009b9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b938:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <xTaskPriorityDisinherit+0xdc>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d903      	bls.n	800b954 <xTaskPriorityDisinherit+0xac>
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	4a0c      	ldr	r2, [pc, #48]	; (800b984 <xTaskPriorityDisinherit+0xdc>)
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4613      	mov	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4a09      	ldr	r2, [pc, #36]	; (800b988 <xTaskPriorityDisinherit+0xe0>)
 800b962:	441a      	add	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fe f8b9 	bl	8009ae2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b970:	2301      	movs	r3, #1
 800b972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b974:	697b      	ldr	r3, [r7, #20]
	}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000ccc 	.word	0x20000ccc
 800b984:	200011a8 	.word	0x200011a8
 800b988:	20000cd0 	.word	0x20000cd0

0800b98c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d06e      	beq.n	800ba82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10c      	bne.n	800b9c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	b672      	cpsid	i
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	b662      	cpsie	i
 800b9c0:	60fb      	str	r3, [r7, #12]
}
 800b9c2:	bf00      	nop
 800b9c4:	e7fe      	b.n	800b9c4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d902      	bls.n	800b9d6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	61fb      	str	r3, [r7, #28]
 800b9d4:	e002      	b.n	800b9dc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d04d      	beq.n	800ba82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d148      	bne.n	800ba82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b9f0:	4b26      	ldr	r3, [pc, #152]	; (800ba8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d10c      	bne.n	800ba14 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	b672      	cpsid	i
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	b662      	cpsie	i
 800ba0e:	60bb      	str	r3, [r7, #8]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	69fa      	ldr	r2, [r7, #28]
 800ba1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	db04      	blt.n	800ba32 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	6959      	ldr	r1, [r3, #20]
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4a13      	ldr	r2, [pc, #76]	; (800ba90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ba42:	4413      	add	r3, r2
 800ba44:	4299      	cmp	r1, r3
 800ba46:	d11c      	bne.n	800ba82 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe f8a5 	bl	8009b9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba56:	4b0f      	ldr	r3, [pc, #60]	; (800ba94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d903      	bls.n	800ba66 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba62:	4a0c      	ldr	r2, [pc, #48]	; (800ba94 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4413      	add	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4a07      	ldr	r2, [pc, #28]	; (800ba90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ba74:	441a      	add	r2, r3
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	3304      	adds	r3, #4
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	f7fe f830 	bl	8009ae2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba82:	bf00      	nop
 800ba84:	3720      	adds	r7, #32
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000ccc 	.word	0x20000ccc
 800ba90:	20000cd0 	.word	0x20000cd0
 800ba94:	200011a8 	.word	0x200011a8

0800ba98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba98:	b480      	push	{r7}
 800ba9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba9c:	4b07      	ldr	r3, [pc, #28]	; (800babc <pvTaskIncrementMutexHeldCount+0x24>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d004      	beq.n	800baae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800baa4:	4b05      	ldr	r3, [pc, #20]	; (800babc <pvTaskIncrementMutexHeldCount+0x24>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baaa:	3201      	adds	r2, #1
 800baac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800baae:	4b03      	ldr	r3, [pc, #12]	; (800babc <pvTaskIncrementMutexHeldCount+0x24>)
 800bab0:	681b      	ldr	r3, [r3, #0]
	}
 800bab2:	4618      	mov	r0, r3
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	20000ccc 	.word	0x20000ccc

0800bac0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800baca:	4b21      	ldr	r3, [pc, #132]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x90>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bad0:	4b20      	ldr	r3, [pc, #128]	; (800bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3304      	adds	r3, #4
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe f860 	bl	8009b9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae2:	d10a      	bne.n	800bafa <prvAddCurrentTaskToDelayedList+0x3a>
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d007      	beq.n	800bafa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baea:	4b1a      	ldr	r3, [pc, #104]	; (800bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3304      	adds	r3, #4
 800baf0:	4619      	mov	r1, r3
 800baf2:	4819      	ldr	r0, [pc, #100]	; (800bb58 <prvAddCurrentTaskToDelayedList+0x98>)
 800baf4:	f7fd fff5 	bl	8009ae2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800baf8:	e026      	b.n	800bb48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4413      	add	r3, r2
 800bb00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb02:	4b14      	ldr	r3, [pc, #80]	; (800bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d209      	bcs.n	800bb26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb12:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f7fe f803 	bl	8009b2a <vListInsert>
}
 800bb24:	e010      	b.n	800bb48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb26:	4b0e      	ldr	r3, [pc, #56]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3304      	adds	r3, #4
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f7fd fff9 	bl	8009b2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb38:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d202      	bcs.n	800bb48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb42:	4a08      	ldr	r2, [pc, #32]	; (800bb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	6013      	str	r3, [r2, #0]
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	200011a4 	.word	0x200011a4
 800bb54:	20000ccc 	.word	0x20000ccc
 800bb58:	2000118c 	.word	0x2000118c
 800bb5c:	2000115c 	.word	0x2000115c
 800bb60:	20001158 	.word	0x20001158
 800bb64:	200011c0 	.word	0x200011c0

0800bb68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b08a      	sub	sp, #40	; 0x28
 800bb6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb72:	f000 fb15 	bl	800c1a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb76:	4b1d      	ldr	r3, [pc, #116]	; (800bbec <xTimerCreateTimerTask+0x84>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d021      	beq.n	800bbc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb86:	1d3a      	adds	r2, r7, #4
 800bb88:	f107 0108 	add.w	r1, r7, #8
 800bb8c:	f107 030c 	add.w	r3, r7, #12
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fd ff5f 	bl	8009a54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb96:	6879      	ldr	r1, [r7, #4]
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	9202      	str	r2, [sp, #8]
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	2302      	movs	r3, #2
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	2300      	movs	r3, #0
 800bba6:	460a      	mov	r2, r1
 800bba8:	4911      	ldr	r1, [pc, #68]	; (800bbf0 <xTimerCreateTimerTask+0x88>)
 800bbaa:	4812      	ldr	r0, [pc, #72]	; (800bbf4 <xTimerCreateTimerTask+0x8c>)
 800bbac:	f7fe ff8e 	bl	800aacc <xTaskCreateStatic>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4a11      	ldr	r2, [pc, #68]	; (800bbf8 <xTimerCreateTimerTask+0x90>)
 800bbb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bbb6:	4b10      	ldr	r3, [pc, #64]	; (800bbf8 <xTimerCreateTimerTask+0x90>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10c      	bne.n	800bbe2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	b672      	cpsid	i
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	b662      	cpsie	i
 800bbdc:	613b      	str	r3, [r7, #16]
}
 800bbde:	bf00      	nop
 800bbe0:	e7fe      	b.n	800bbe0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bbe2:	697b      	ldr	r3, [r7, #20]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	200011fc 	.word	0x200011fc
 800bbf0:	080148d0 	.word	0x080148d0
 800bbf4:	0800bd39 	.word	0x0800bd39
 800bbf8:	20001200 	.word	0x20001200

0800bbfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08a      	sub	sp, #40	; 0x28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10c      	bne.n	800bc2e <xTimerGenericCommand+0x32>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	b672      	cpsid	i
 800bc1a:	f383 8811 	msr	BASEPRI, r3
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	b662      	cpsie	i
 800bc28:	623b      	str	r3, [r7, #32]
}
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc2e:	4b1a      	ldr	r3, [pc, #104]	; (800bc98 <xTimerGenericCommand+0x9c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d02a      	beq.n	800bc8c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b05      	cmp	r3, #5
 800bc46:	dc18      	bgt.n	800bc7a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc48:	f7ff fda8 	bl	800b79c <xTaskGetSchedulerState>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d109      	bne.n	800bc66 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc52:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <xTimerGenericCommand+0x9c>)
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	f107 0110 	add.w	r1, r7, #16
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc5e:	f7fe f919 	bl	8009e94 <xQueueGenericSend>
 800bc62:	6278      	str	r0, [r7, #36]	; 0x24
 800bc64:	e012      	b.n	800bc8c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <xTimerGenericCommand+0x9c>)
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	f107 0110 	add.w	r1, r7, #16
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2200      	movs	r2, #0
 800bc72:	f7fe f90f 	bl	8009e94 <xQueueGenericSend>
 800bc76:	6278      	str	r0, [r7, #36]	; 0x24
 800bc78:	e008      	b.n	800bc8c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc7a:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <xTimerGenericCommand+0x9c>)
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	f107 0110 	add.w	r1, r7, #16
 800bc82:	2300      	movs	r3, #0
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	f7fe fa0b 	bl	800a0a0 <xQueueGenericSendFromISR>
 800bc8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3728      	adds	r7, #40	; 0x28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	200011fc 	.word	0x200011fc

0800bc9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca6:	4b23      	ldr	r3, [pc, #140]	; (800bd34 <prvProcessExpiredTimer+0x98>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fd ff71 	bl	8009b9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d024      	beq.n	800bd12 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	699a      	ldr	r2, [r3, #24]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	18d1      	adds	r1, r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	6978      	ldr	r0, [r7, #20]
 800bcd6:	f000 f8d3 	bl	800be80 <prvInsertTimerInActiveList>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d021      	beq.n	800bd24 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bce0:	2300      	movs	r3, #0
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	2300      	movs	r3, #0
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	2100      	movs	r1, #0
 800bcea:	6978      	ldr	r0, [r7, #20]
 800bcec:	f7ff ff86 	bl	800bbfc <xTimerGenericCommand>
 800bcf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d115      	bne.n	800bd24 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfc:	b672      	cpsid	i
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	b662      	cpsie	i
 800bd0c:	60fb      	str	r3, [r7, #12]
}
 800bd0e:	bf00      	nop
 800bd10:	e7fe      	b.n	800bd10 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd18:	f023 0301 	bic.w	r3, r3, #1
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	6a1b      	ldr	r3, [r3, #32]
 800bd28:	6978      	ldr	r0, [r7, #20]
 800bd2a:	4798      	blx	r3
}
 800bd2c:	bf00      	nop
 800bd2e:	3718      	adds	r7, #24
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	200011f4 	.word	0x200011f4

0800bd38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd40:	f107 0308 	add.w	r3, r7, #8
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 f857 	bl	800bdf8 <prvGetNextExpireTime>
 800bd4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f803 	bl	800bd5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd56:	f000 f8d5 	bl	800bf04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd5a:	e7f1      	b.n	800bd40 <prvTimerTask+0x8>

0800bd5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd66:	f7ff f91b 	bl	800afa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd6a:	f107 0308 	add.w	r3, r7, #8
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f866 	bl	800be40 <prvSampleTimeNow>
 800bd74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d130      	bne.n	800bdde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <prvProcessTimerOrBlockTask+0x3c>
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d806      	bhi.n	800bd98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd8a:	f7ff f917 	bl	800afbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd8e:	68f9      	ldr	r1, [r7, #12]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff ff83 	bl	800bc9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd96:	e024      	b.n	800bde2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d008      	beq.n	800bdb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd9e:	4b13      	ldr	r3, [pc, #76]	; (800bdec <prvProcessTimerOrBlockTask+0x90>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <prvProcessTimerOrBlockTask+0x50>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e000      	b.n	800bdae <prvProcessTimerOrBlockTask+0x52>
 800bdac:	2300      	movs	r3, #0
 800bdae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bdb0:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <prvProcessTimerOrBlockTask+0x94>)
 800bdb2:	6818      	ldr	r0, [r3, #0]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	f7fe fe51 	bl	800aa64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdc2:	f7ff f8fb 	bl	800afbc <xTaskResumeAll>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10a      	bne.n	800bde2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdcc:	4b09      	ldr	r3, [pc, #36]	; (800bdf4 <prvProcessTimerOrBlockTask+0x98>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
}
 800bddc:	e001      	b.n	800bde2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bdde:	f7ff f8ed 	bl	800afbc <xTaskResumeAll>
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200011f8 	.word	0x200011f8
 800bdf0:	200011fc 	.word	0x200011fc
 800bdf4:	e000ed04 	.word	0xe000ed04

0800bdf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be00:	4b0e      	ldr	r3, [pc, #56]	; (800be3c <prvGetNextExpireTime+0x44>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d101      	bne.n	800be0e <prvGetNextExpireTime+0x16>
 800be0a:	2201      	movs	r2, #1
 800be0c:	e000      	b.n	800be10 <prvGetNextExpireTime+0x18>
 800be0e:	2200      	movs	r2, #0
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d105      	bne.n	800be28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be1c:	4b07      	ldr	r3, [pc, #28]	; (800be3c <prvGetNextExpireTime+0x44>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	60fb      	str	r3, [r7, #12]
 800be26:	e001      	b.n	800be2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be28:	2300      	movs	r3, #0
 800be2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be2c:	68fb      	ldr	r3, [r7, #12]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	200011f4 	.word	0x200011f4

0800be40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be48:	f7ff f958 	bl	800b0fc <xTaskGetTickCount>
 800be4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be4e:	4b0b      	ldr	r3, [pc, #44]	; (800be7c <prvSampleTimeNow+0x3c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	429a      	cmp	r2, r3
 800be56:	d205      	bcs.n	800be64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be58:	f000 f93c 	bl	800c0d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	e002      	b.n	800be6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be6a:	4a04      	ldr	r2, [pc, #16]	; (800be7c <prvSampleTimeNow+0x3c>)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be70:	68fb      	ldr	r3, [r7, #12]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20001204 	.word	0x20001204

0800be80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d812      	bhi.n	800becc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	1ad2      	subs	r2, r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d302      	bcc.n	800beba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800beb4:	2301      	movs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	e01b      	b.n	800bef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800beba:	4b10      	ldr	r3, [pc, #64]	; (800befc <prvInsertTimerInActiveList+0x7c>)
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3304      	adds	r3, #4
 800bec2:	4619      	mov	r1, r3
 800bec4:	4610      	mov	r0, r2
 800bec6:	f7fd fe30 	bl	8009b2a <vListInsert>
 800beca:	e012      	b.n	800bef2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d206      	bcs.n	800bee2 <prvInsertTimerInActiveList+0x62>
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d302      	bcc.n	800bee2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bedc:	2301      	movs	r3, #1
 800bede:	617b      	str	r3, [r7, #20]
 800bee0:	e007      	b.n	800bef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bee2:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <prvInsertTimerInActiveList+0x80>)
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3304      	adds	r3, #4
 800beea:	4619      	mov	r1, r3
 800beec:	4610      	mov	r0, r2
 800beee:	f7fd fe1c 	bl	8009b2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bef2:	697b      	ldr	r3, [r7, #20]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3718      	adds	r7, #24
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	200011f8 	.word	0x200011f8
 800bf00:	200011f4 	.word	0x200011f4

0800bf04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08e      	sub	sp, #56	; 0x38
 800bf08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf0a:	e0d0      	b.n	800c0ae <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	da1a      	bge.n	800bf48 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf12:	1d3b      	adds	r3, r7, #4
 800bf14:	3304      	adds	r3, #4
 800bf16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10c      	bne.n	800bf38 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	b672      	cpsid	i
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	b662      	cpsie	i
 800bf32:	61fb      	str	r3, [r7, #28]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3e:	6850      	ldr	r0, [r2, #4]
 800bf40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf42:	6892      	ldr	r2, [r2, #8]
 800bf44:	4611      	mov	r1, r2
 800bf46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f2c0 80ae 	blt.w	800c0ac <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d004      	beq.n	800bf66 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	3304      	adds	r3, #4
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fd fe1b 	bl	8009b9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf66:	463b      	mov	r3, r7
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff ff69 	bl	800be40 <prvSampleTimeNow>
 800bf6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b09      	cmp	r3, #9
 800bf74:	f200 809b 	bhi.w	800c0ae <prvProcessReceivedCommands+0x1aa>
 800bf78:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <prvProcessReceivedCommands+0x7c>)
 800bf7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7e:	bf00      	nop
 800bf80:	0800bfa9 	.word	0x0800bfa9
 800bf84:	0800bfa9 	.word	0x0800bfa9
 800bf88:	0800bfa9 	.word	0x0800bfa9
 800bf8c:	0800c021 	.word	0x0800c021
 800bf90:	0800c035 	.word	0x0800c035
 800bf94:	0800c083 	.word	0x0800c083
 800bf98:	0800bfa9 	.word	0x0800bfa9
 800bf9c:	0800bfa9 	.word	0x0800bfa9
 800bfa0:	0800c021 	.word	0x0800c021
 800bfa4:	0800c035 	.word	0x0800c035
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfae:	f043 0301 	orr.w	r3, r3, #1
 800bfb2:	b2da      	uxtb	r2, r3
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	18d1      	adds	r1, r2, r3
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfc8:	f7ff ff5a 	bl	800be80 <prvInsertTimerInActiveList>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d06d      	beq.n	800c0ae <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfe0:	f003 0304 	and.w	r3, r3, #4
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d062      	beq.n	800c0ae <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	441a      	add	r2, r3
 800bff0:	2300      	movs	r3, #0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2300      	movs	r3, #0
 800bff6:	2100      	movs	r1, #0
 800bff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bffa:	f7ff fdff 	bl	800bbfc <xTimerGenericCommand>
 800bffe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d153      	bne.n	800c0ae <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	b672      	cpsid	i
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	b662      	cpsie	i
 800c01a:	61bb      	str	r3, [r7, #24]
}
 800c01c:	bf00      	nop
 800c01e:	e7fe      	b.n	800c01e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c026:	f023 0301 	bic.w	r3, r3, #1
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c032:	e03c      	b.n	800c0ae <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c03a:	f043 0301 	orr.w	r3, r3, #1
 800c03e:	b2da      	uxtb	r2, r3
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	699b      	ldr	r3, [r3, #24]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10c      	bne.n	800c06e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c058:	b672      	cpsid	i
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	b662      	cpsie	i
 800c068:	617b      	str	r3, [r7, #20]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c070:	699a      	ldr	r2, [r3, #24]
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	18d1      	adds	r1, r2, r3
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c07c:	f7ff ff00 	bl	800be80 <prvInsertTimerInActiveList>
					break;
 800c080:	e015      	b.n	800c0ae <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c088:	f003 0302 	and.w	r3, r3, #2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d103      	bne.n	800c098 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c092:	f000 fbc9 	bl	800c828 <vPortFree>
 800c096:	e00a      	b.n	800c0ae <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c09e:	f023 0301 	bic.w	r3, r3, #1
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0aa:	e000      	b.n	800c0ae <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c0ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0ae:	4b08      	ldr	r3, [pc, #32]	; (800c0d0 <prvProcessReceivedCommands+0x1cc>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	1d39      	adds	r1, r7, #4
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe f892 	bl	800a1e0 <xQueueReceive>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f47f af24 	bne.w	800bf0c <prvProcessReceivedCommands+0x8>
	}
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop
 800c0c8:	3730      	adds	r7, #48	; 0x30
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	200011fc 	.word	0x200011fc

0800c0d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0da:	e04a      	b.n	800c172 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0dc:	4b2e      	ldr	r3, [pc, #184]	; (800c198 <prvSwitchTimerLists+0xc4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0e6:	4b2c      	ldr	r3, [pc, #176]	; (800c198 <prvSwitchTimerLists+0xc4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fd fd51 	bl	8009b9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d030      	beq.n	800c172 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	4413      	add	r3, r2
 800c118:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d90e      	bls.n	800c140 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c12e:	4b1a      	ldr	r3, [pc, #104]	; (800c198 <prvSwitchTimerLists+0xc4>)
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3304      	adds	r3, #4
 800c136:	4619      	mov	r1, r3
 800c138:	4610      	mov	r0, r2
 800c13a:	f7fd fcf6 	bl	8009b2a <vListInsert>
 800c13e:	e018      	b.n	800c172 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c140:	2300      	movs	r3, #0
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	2300      	movs	r3, #0
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	2100      	movs	r1, #0
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f7ff fd56 	bl	800bbfc <xTimerGenericCommand>
 800c150:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10c      	bne.n	800c172 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	b672      	cpsid	i
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	b662      	cpsie	i
 800c16c:	603b      	str	r3, [r7, #0]
}
 800c16e:	bf00      	nop
 800c170:	e7fe      	b.n	800c170 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c172:	4b09      	ldr	r3, [pc, #36]	; (800c198 <prvSwitchTimerLists+0xc4>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1af      	bne.n	800c0dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c17c:	4b06      	ldr	r3, [pc, #24]	; (800c198 <prvSwitchTimerLists+0xc4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c182:	4b06      	ldr	r3, [pc, #24]	; (800c19c <prvSwitchTimerLists+0xc8>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a04      	ldr	r2, [pc, #16]	; (800c198 <prvSwitchTimerLists+0xc4>)
 800c188:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c18a:	4a04      	ldr	r2, [pc, #16]	; (800c19c <prvSwitchTimerLists+0xc8>)
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	6013      	str	r3, [r2, #0]
}
 800c190:	bf00      	nop
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	200011f4 	.word	0x200011f4
 800c19c:	200011f8 	.word	0x200011f8

0800c1a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c1a6:	f000 f949 	bl	800c43c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1aa:	4b15      	ldr	r3, [pc, #84]	; (800c200 <prvCheckForValidListAndQueue+0x60>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d120      	bne.n	800c1f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1b2:	4814      	ldr	r0, [pc, #80]	; (800c204 <prvCheckForValidListAndQueue+0x64>)
 800c1b4:	f7fd fc68 	bl	8009a88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1b8:	4813      	ldr	r0, [pc, #76]	; (800c208 <prvCheckForValidListAndQueue+0x68>)
 800c1ba:	f7fd fc65 	bl	8009a88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1be:	4b13      	ldr	r3, [pc, #76]	; (800c20c <prvCheckForValidListAndQueue+0x6c>)
 800c1c0:	4a10      	ldr	r2, [pc, #64]	; (800c204 <prvCheckForValidListAndQueue+0x64>)
 800c1c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1c4:	4b12      	ldr	r3, [pc, #72]	; (800c210 <prvCheckForValidListAndQueue+0x70>)
 800c1c6:	4a10      	ldr	r2, [pc, #64]	; (800c208 <prvCheckForValidListAndQueue+0x68>)
 800c1c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	4b11      	ldr	r3, [pc, #68]	; (800c214 <prvCheckForValidListAndQueue+0x74>)
 800c1d0:	4a11      	ldr	r2, [pc, #68]	; (800c218 <prvCheckForValidListAndQueue+0x78>)
 800c1d2:	2110      	movs	r1, #16
 800c1d4:	200a      	movs	r0, #10
 800c1d6:	f7fd fd75 	bl	8009cc4 <xQueueGenericCreateStatic>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4a08      	ldr	r2, [pc, #32]	; (800c200 <prvCheckForValidListAndQueue+0x60>)
 800c1de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c1e0:	4b07      	ldr	r3, [pc, #28]	; (800c200 <prvCheckForValidListAndQueue+0x60>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d005      	beq.n	800c1f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1e8:	4b05      	ldr	r3, [pc, #20]	; (800c200 <prvCheckForValidListAndQueue+0x60>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	490b      	ldr	r1, [pc, #44]	; (800c21c <prvCheckForValidListAndQueue+0x7c>)
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fbe4 	bl	800a9bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1f4:	f000 f956 	bl	800c4a4 <vPortExitCritical>
}
 800c1f8:	bf00      	nop
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	200011fc 	.word	0x200011fc
 800c204:	200011cc 	.word	0x200011cc
 800c208:	200011e0 	.word	0x200011e0
 800c20c:	200011f4 	.word	0x200011f4
 800c210:	200011f8 	.word	0x200011f8
 800c214:	200012a8 	.word	0x200012a8
 800c218:	20001208 	.word	0x20001208
 800c21c:	080148d8 	.word	0x080148d8

0800c220 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3b04      	subs	r3, #4
 800c230:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3b04      	subs	r3, #4
 800c23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	f023 0201 	bic.w	r2, r3, #1
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3b04      	subs	r3, #4
 800c24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c250:	4a0c      	ldr	r2, [pc, #48]	; (800c284 <pxPortInitialiseStack+0x64>)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3b14      	subs	r3, #20
 800c25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3b04      	subs	r3, #4
 800c266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f06f 0202 	mvn.w	r2, #2
 800c26e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	3b20      	subs	r3, #32
 800c274:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c276:	68fb      	ldr	r3, [r7, #12]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3714      	adds	r7, #20
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	0800c289 	.word	0x0800c289

0800c288 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c292:	4b14      	ldr	r3, [pc, #80]	; (800c2e4 <prvTaskExitError+0x5c>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29a:	d00c      	beq.n	800c2b6 <prvTaskExitError+0x2e>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	b672      	cpsid	i
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	b662      	cpsie	i
 800c2b0:	60fb      	str	r3, [r7, #12]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <prvTaskExitError+0x2c>
	__asm volatile
 800c2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ba:	b672      	cpsid	i
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	b662      	cpsie	i
 800c2ca:	60bb      	str	r3, [r7, #8]
}
 800c2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2ce:	bf00      	nop
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0fc      	beq.n	800c2d0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	2000009c 	.word	0x2000009c
	...

0800c2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2f0:	4b07      	ldr	r3, [pc, #28]	; (800c310 <pxCurrentTCBConst2>)
 800c2f2:	6819      	ldr	r1, [r3, #0]
 800c2f4:	6808      	ldr	r0, [r1, #0]
 800c2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f380 8809 	msr	PSP, r0
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f04f 0000 	mov.w	r0, #0
 800c306:	f380 8811 	msr	BASEPRI, r0
 800c30a:	4770      	bx	lr
 800c30c:	f3af 8000 	nop.w

0800c310 <pxCurrentTCBConst2>:
 800c310:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c318:	4808      	ldr	r0, [pc, #32]	; (800c33c <prvPortStartFirstTask+0x24>)
 800c31a:	6800      	ldr	r0, [r0, #0]
 800c31c:	6800      	ldr	r0, [r0, #0]
 800c31e:	f380 8808 	msr	MSP, r0
 800c322:	f04f 0000 	mov.w	r0, #0
 800c326:	f380 8814 	msr	CONTROL, r0
 800c32a:	b662      	cpsie	i
 800c32c:	b661      	cpsie	f
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	df00      	svc	0
 800c338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c33a:	bf00      	nop
 800c33c:	e000ed08 	.word	0xe000ed08

0800c340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c346:	4b37      	ldr	r3, [pc, #220]	; (800c424 <xPortStartScheduler+0xe4>)
 800c348:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	22ff      	movs	r2, #255	; 0xff
 800c356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c360:	78fb      	ldrb	r3, [r7, #3]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	4b2f      	ldr	r3, [pc, #188]	; (800c428 <xPortStartScheduler+0xe8>)
 800c36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c36e:	4b2f      	ldr	r3, [pc, #188]	; (800c42c <xPortStartScheduler+0xec>)
 800c370:	2207      	movs	r2, #7
 800c372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c374:	e009      	b.n	800c38a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c376:	4b2d      	ldr	r3, [pc, #180]	; (800c42c <xPortStartScheduler+0xec>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	4a2b      	ldr	r2, [pc, #172]	; (800c42c <xPortStartScheduler+0xec>)
 800c37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	b2db      	uxtb	r3, r3
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	b2db      	uxtb	r3, r3
 800c388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c38a:	78fb      	ldrb	r3, [r7, #3]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c392:	2b80      	cmp	r3, #128	; 0x80
 800c394:	d0ef      	beq.n	800c376 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c396:	4b25      	ldr	r3, [pc, #148]	; (800c42c <xPortStartScheduler+0xec>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f1c3 0307 	rsb	r3, r3, #7
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d00c      	beq.n	800c3bc <xPortStartScheduler+0x7c>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	b672      	cpsid	i
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	b662      	cpsie	i
 800c3b6:	60bb      	str	r3, [r7, #8]
}
 800c3b8:	bf00      	nop
 800c3ba:	e7fe      	b.n	800c3ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3bc:	4b1b      	ldr	r3, [pc, #108]	; (800c42c <xPortStartScheduler+0xec>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	021b      	lsls	r3, r3, #8
 800c3c2:	4a1a      	ldr	r2, [pc, #104]	; (800c42c <xPortStartScheduler+0xec>)
 800c3c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3c6:	4b19      	ldr	r3, [pc, #100]	; (800c42c <xPortStartScheduler+0xec>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3ce:	4a17      	ldr	r2, [pc, #92]	; (800c42c <xPortStartScheduler+0xec>)
 800c3d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3da:	4b15      	ldr	r3, [pc, #84]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a14      	ldr	r2, [pc, #80]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3e6:	4b12      	ldr	r3, [pc, #72]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a11      	ldr	r2, [pc, #68]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3f2:	f000 f8dd 	bl	800c5b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3f6:	4b0f      	ldr	r3, [pc, #60]	; (800c434 <xPortStartScheduler+0xf4>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3fc:	f000 f8fc 	bl	800c5f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c400:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <xPortStartScheduler+0xf8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a0c      	ldr	r2, [pc, #48]	; (800c438 <xPortStartScheduler+0xf8>)
 800c406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c40a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c40c:	f7ff ff84 	bl	800c318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c410:	f7fe ff40 	bl	800b294 <vTaskSwitchContext>
	prvTaskExitError();
 800c414:	f7ff ff38 	bl	800c288 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000e400 	.word	0xe000e400
 800c428:	200012f8 	.word	0x200012f8
 800c42c:	200012fc 	.word	0x200012fc
 800c430:	e000ed20 	.word	0xe000ed20
 800c434:	2000009c 	.word	0x2000009c
 800c438:	e000ef34 	.word	0xe000ef34

0800c43c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	b672      	cpsid	i
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	b662      	cpsie	i
 800c456:	607b      	str	r3, [r7, #4]
}
 800c458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c45a:	4b10      	ldr	r3, [pc, #64]	; (800c49c <vPortEnterCritical+0x60>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3301      	adds	r3, #1
 800c460:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <vPortEnterCritical+0x60>)
 800c462:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c464:	4b0d      	ldr	r3, [pc, #52]	; (800c49c <vPortEnterCritical+0x60>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d111      	bne.n	800c490 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c46c:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <vPortEnterCritical+0x64>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00c      	beq.n	800c490 <vPortEnterCritical+0x54>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	b672      	cpsid	i
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	b662      	cpsie	i
 800c48a:	603b      	str	r3, [r7, #0]
}
 800c48c:	bf00      	nop
 800c48e:	e7fe      	b.n	800c48e <vPortEnterCritical+0x52>
	}
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	2000009c 	.word	0x2000009c
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4aa:	4b13      	ldr	r3, [pc, #76]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10c      	bne.n	800c4cc <vPortExitCritical+0x28>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	b672      	cpsid	i
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	b662      	cpsie	i
 800c4c6:	607b      	str	r3, [r7, #4]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d105      	bne.n	800c4ea <vPortExitCritical+0x46>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	f383 8811 	msr	BASEPRI, r3
}
 800c4e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	2000009c 	.word	0x2000009c
 800c4fc:	00000000 	.word	0x00000000

0800c500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c500:	f3ef 8009 	mrs	r0, PSP
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <pxCurrentTCBConst>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	f01e 0f10 	tst.w	lr, #16
 800c510:	bf08      	it	eq
 800c512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	6010      	str	r0, [r2, #0]
 800c51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c524:	b672      	cpsid	i
 800c526:	f380 8811 	msr	BASEPRI, r0
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	b662      	cpsie	i
 800c534:	f7fe feae 	bl	800b294 <vTaskSwitchContext>
 800c538:	f04f 0000 	mov.w	r0, #0
 800c53c:	f380 8811 	msr	BASEPRI, r0
 800c540:	bc09      	pop	{r0, r3}
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	6808      	ldr	r0, [r1, #0]
 800c546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	f01e 0f10 	tst.w	lr, #16
 800c54e:	bf08      	it	eq
 800c550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c554:	f380 8809 	msr	PSP, r0
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop

0800c560 <pxCurrentTCBConst>:
 800c560:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop

0800c568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	b672      	cpsid	i
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	b662      	cpsie	i
 800c582:	607b      	str	r3, [r7, #4]
}
 800c584:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c586:	f7fe fdc9 	bl	800b11c <xTaskIncrementTick>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c590:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <SysTick_Handler+0x44>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	2300      	movs	r3, #0
 800c59a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f383 8811 	msr	BASEPRI, r3
}
 800c5a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5a4:	bf00      	nop
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5b4:	4b0b      	ldr	r3, [pc, #44]	; (800c5e4 <vPortSetupTimerInterrupt+0x34>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5ba:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <vPortSetupTimerInterrupt+0x38>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5c0:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <vPortSetupTimerInterrupt+0x3c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a0a      	ldr	r2, [pc, #40]	; (800c5f0 <vPortSetupTimerInterrupt+0x40>)
 800c5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ca:	099b      	lsrs	r3, r3, #6
 800c5cc:	4a09      	ldr	r2, [pc, #36]	; (800c5f4 <vPortSetupTimerInterrupt+0x44>)
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5d2:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <vPortSetupTimerInterrupt+0x34>)
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	601a      	str	r2, [r3, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	e000e010 	.word	0xe000e010
 800c5e8:	e000e018 	.word	0xe000e018
 800c5ec:	20000004 	.word	0x20000004
 800c5f0:	10624dd3 	.word	0x10624dd3
 800c5f4:	e000e014 	.word	0xe000e014

0800c5f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c608 <vPortEnableVFP+0x10>
 800c5fc:	6801      	ldr	r1, [r0, #0]
 800c5fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c602:	6001      	str	r1, [r0, #0]
 800c604:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c606:	bf00      	nop
 800c608:	e000ed88 	.word	0xe000ed88

0800c60c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c612:	f3ef 8305 	mrs	r3, IPSR
 800c616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b0f      	cmp	r3, #15
 800c61c:	d916      	bls.n	800c64c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c61e:	4a19      	ldr	r2, [pc, #100]	; (800c684 <vPortValidateInterruptPriority+0x78>)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c628:	4b17      	ldr	r3, [pc, #92]	; (800c688 <vPortValidateInterruptPriority+0x7c>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	7afa      	ldrb	r2, [r7, #11]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d20c      	bcs.n	800c64c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	b672      	cpsid	i
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	b662      	cpsie	i
 800c646:	607b      	str	r3, [r7, #4]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c64c:	4b0f      	ldr	r3, [pc, #60]	; (800c68c <vPortValidateInterruptPriority+0x80>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c654:	4b0e      	ldr	r3, [pc, #56]	; (800c690 <vPortValidateInterruptPriority+0x84>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d90c      	bls.n	800c676 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	603b      	str	r3, [r7, #0]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <vPortValidateInterruptPriority+0x68>
	}
 800c676:	bf00      	nop
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	e000e3f0 	.word	0xe000e3f0
 800c688:	200012f8 	.word	0x200012f8
 800c68c:	e000ed0c 	.word	0xe000ed0c
 800c690:	200012fc 	.word	0x200012fc

0800c694 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08a      	sub	sp, #40	; 0x28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c6a0:	f7fe fc7e 	bl	800afa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c6a4:	4b5b      	ldr	r3, [pc, #364]	; (800c814 <pvPortMalloc+0x180>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6ac:	f000 f91a 	bl	800c8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6b0:	4b59      	ldr	r3, [pc, #356]	; (800c818 <pvPortMalloc+0x184>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f040 8092 	bne.w	800c7e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01f      	beq.n	800c704 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d016      	beq.n	800c704 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f023 0307 	bic.w	r3, r3, #7
 800c6dc:	3308      	adds	r3, #8
 800c6de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00c      	beq.n	800c704 <pvPortMalloc+0x70>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	b672      	cpsid	i
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	b662      	cpsie	i
 800c6fe:	617b      	str	r3, [r7, #20]
}
 800c700:	bf00      	nop
 800c702:	e7fe      	b.n	800c702 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d06b      	beq.n	800c7e2 <pvPortMalloc+0x14e>
 800c70a:	4b44      	ldr	r3, [pc, #272]	; (800c81c <pvPortMalloc+0x188>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	429a      	cmp	r2, r3
 800c712:	d866      	bhi.n	800c7e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c714:	4b42      	ldr	r3, [pc, #264]	; (800c820 <pvPortMalloc+0x18c>)
 800c716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c718:	4b41      	ldr	r3, [pc, #260]	; (800c820 <pvPortMalloc+0x18c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c71e:	e004      	b.n	800c72a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	429a      	cmp	r2, r3
 800c732:	d903      	bls.n	800c73c <pvPortMalloc+0xa8>
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1f1      	bne.n	800c720 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c73c:	4b35      	ldr	r3, [pc, #212]	; (800c814 <pvPortMalloc+0x180>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c742:	429a      	cmp	r2, r3
 800c744:	d04d      	beq.n	800c7e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2208      	movs	r2, #8
 800c74c:	4413      	add	r3, r2
 800c74e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	2308      	movs	r3, #8
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	429a      	cmp	r2, r3
 800c766:	d921      	bls.n	800c7ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00c      	beq.n	800c794 <pvPortMalloc+0x100>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	b672      	cpsid	i
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	b662      	cpsie	i
 800c78e:	613b      	str	r3, [r7, #16]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	1ad2      	subs	r2, r2, r3
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c7a6:	69b8      	ldr	r0, [r7, #24]
 800c7a8:	f000 f8fe 	bl	800c9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7ac:	4b1b      	ldr	r3, [pc, #108]	; (800c81c <pvPortMalloc+0x188>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	4a19      	ldr	r2, [pc, #100]	; (800c81c <pvPortMalloc+0x188>)
 800c7b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7ba:	4b18      	ldr	r3, [pc, #96]	; (800c81c <pvPortMalloc+0x188>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	4b19      	ldr	r3, [pc, #100]	; (800c824 <pvPortMalloc+0x190>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d203      	bcs.n	800c7ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7c6:	4b15      	ldr	r3, [pc, #84]	; (800c81c <pvPortMalloc+0x188>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a16      	ldr	r2, [pc, #88]	; (800c824 <pvPortMalloc+0x190>)
 800c7cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	4b11      	ldr	r3, [pc, #68]	; (800c818 <pvPortMalloc+0x184>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7e2:	f7fe fbeb 	bl	800afbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00c      	beq.n	800c80a <pvPortMalloc+0x176>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	b672      	cpsid	i
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	b662      	cpsie	i
 800c804:	60fb      	str	r3, [r7, #12]
}
 800c806:	bf00      	nop
 800c808:	e7fe      	b.n	800c808 <pvPortMalloc+0x174>
	return pvReturn;
 800c80a:	69fb      	ldr	r3, [r7, #28]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3728      	adds	r7, #40	; 0x28
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20009008 	.word	0x20009008
 800c818:	20009014 	.word	0x20009014
 800c81c:	2000900c 	.word	0x2000900c
 800c820:	20009000 	.word	0x20009000
 800c824:	20009010 	.word	0x20009010

0800c828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d04c      	beq.n	800c8d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c83a:	2308      	movs	r3, #8
 800c83c:	425b      	negs	r3, r3
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4413      	add	r3, r2
 800c842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	4b23      	ldr	r3, [pc, #140]	; (800c8dc <vPortFree+0xb4>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4013      	ands	r3, r2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10c      	bne.n	800c870 <vPortFree+0x48>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	b672      	cpsid	i
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	b662      	cpsie	i
 800c86a:	60fb      	str	r3, [r7, #12]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00c      	beq.n	800c892 <vPortFree+0x6a>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	b672      	cpsid	i
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	b662      	cpsie	i
 800c88c:	60bb      	str	r3, [r7, #8]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	4b11      	ldr	r3, [pc, #68]	; (800c8dc <vPortFree+0xb4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d019      	beq.n	800c8d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d115      	bne.n	800c8d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	4b0b      	ldr	r3, [pc, #44]	; (800c8dc <vPortFree+0xb4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	43db      	mvns	r3, r3
 800c8b2:	401a      	ands	r2, r3
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8b8:	f7fe fb72 	bl	800afa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <vPortFree+0xb8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	4a06      	ldr	r2, [pc, #24]	; (800c8e0 <vPortFree+0xb8>)
 800c8c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8ca:	6938      	ldr	r0, [r7, #16]
 800c8cc:	f000 f86c 	bl	800c9a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c8d0:	f7fe fb74 	bl	800afbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8d4:	bf00      	nop
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20009014 	.word	0x20009014
 800c8e0:	2000900c 	.word	0x2000900c

0800c8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8f0:	4b27      	ldr	r3, [pc, #156]	; (800c990 <prvHeapInit+0xac>)
 800c8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00c      	beq.n	800c918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3307      	adds	r3, #7
 800c902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 0307 	bic.w	r3, r3, #7
 800c90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	4a1f      	ldr	r2, [pc, #124]	; (800c990 <prvHeapInit+0xac>)
 800c914:	4413      	add	r3, r2
 800c916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c91c:	4a1d      	ldr	r2, [pc, #116]	; (800c994 <prvHeapInit+0xb0>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <prvHeapInit+0xb0>)
 800c924:	2200      	movs	r2, #0
 800c926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c930:	2208      	movs	r2, #8
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	1a9b      	subs	r3, r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f023 0307 	bic.w	r3, r3, #7
 800c93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4a15      	ldr	r2, [pc, #84]	; (800c998 <prvHeapInit+0xb4>)
 800c944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c946:	4b14      	ldr	r3, [pc, #80]	; (800c998 <prvHeapInit+0xb4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2200      	movs	r2, #0
 800c94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <prvHeapInit+0xb4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c964:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <prvHeapInit+0xb4>)
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <prvHeapInit+0xb8>)
 800c972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	4a09      	ldr	r2, [pc, #36]	; (800c9a0 <prvHeapInit+0xbc>)
 800c97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c97c:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <prvHeapInit+0xc0>)
 800c97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c982:	601a      	str	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	20001300 	.word	0x20001300
 800c994:	20009000 	.word	0x20009000
 800c998:	20009008 	.word	0x20009008
 800c99c:	20009010 	.word	0x20009010
 800c9a0:	2000900c 	.word	0x2000900c
 800c9a4:	20009014 	.word	0x20009014

0800c9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9b0:	4b28      	ldr	r3, [pc, #160]	; (800ca54 <prvInsertBlockIntoFreeList+0xac>)
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	e002      	b.n	800c9bc <prvInsertBlockIntoFreeList+0x14>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d8f7      	bhi.n	800c9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d108      	bne.n	800c9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	441a      	add	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d118      	bne.n	800ca30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <prvInsertBlockIntoFreeList+0xb0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d00d      	beq.n	800ca26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	441a      	add	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]
 800ca24:	e008      	b.n	800ca38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <prvInsertBlockIntoFreeList+0xb0>)
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	e003      	b.n	800ca38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d002      	beq.n	800ca46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca46:	bf00      	nop
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20009000 	.word	0x20009000
 800ca58:	20009008 	.word	0x20009008

0800ca5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca60:	2200      	movs	r2, #0
 800ca62:	4912      	ldr	r1, [pc, #72]	; (800caac <MX_USB_DEVICE_Init+0x50>)
 800ca64:	4812      	ldr	r0, [pc, #72]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca66:	f7fb fa0d 	bl	8007e84 <USBD_Init>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca70:	f7f4 fe28 	bl	80016c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca74:	490f      	ldr	r1, [pc, #60]	; (800cab4 <MX_USB_DEVICE_Init+0x58>)
 800ca76:	480e      	ldr	r0, [pc, #56]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca78:	f7fb fa34 	bl	8007ee4 <USBD_RegisterClass>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca82:	f7f4 fe1f 	bl	80016c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca86:	490c      	ldr	r1, [pc, #48]	; (800cab8 <MX_USB_DEVICE_Init+0x5c>)
 800ca88:	4809      	ldr	r0, [pc, #36]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca8a:	f7fb f92b 	bl	8007ce4 <USBD_CDC_RegisterInterface>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca94:	f7f4 fe16 	bl	80016c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca98:	4805      	ldr	r0, [pc, #20]	; (800cab0 <MX_USB_DEVICE_Init+0x54>)
 800ca9a:	f7fb fa59 	bl	8007f50 <USBD_Start>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800caa4:	f7f4 fe0e 	bl	80016c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800caa8:	bf00      	nop
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	200000bc 	.word	0x200000bc
 800cab0:	20009018 	.word	0x20009018
 800cab4:	2000001c 	.word	0x2000001c
 800cab8:	200000a8 	.word	0x200000a8

0800cabc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cac0:	2200      	movs	r2, #0
 800cac2:	4905      	ldr	r1, [pc, #20]	; (800cad8 <CDC_Init_FS+0x1c>)
 800cac4:	4805      	ldr	r0, [pc, #20]	; (800cadc <CDC_Init_FS+0x20>)
 800cac6:	f7fb f927 	bl	8007d18 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800caca:	4905      	ldr	r1, [pc, #20]	; (800cae0 <CDC_Init_FS+0x24>)
 800cacc:	4803      	ldr	r0, [pc, #12]	; (800cadc <CDC_Init_FS+0x20>)
 800cace:	f7fb f945 	bl	8007d5c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800cad2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20009af4 	.word	0x20009af4
 800cadc:	20009018 	.word	0x20009018
 800cae0:	200092f4 	.word	0x200092f4

0800cae4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800cae8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800caea:	4618      	mov	r0, r3
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	6039      	str	r1, [r7, #0]
 800cafe:	71fb      	strb	r3, [r7, #7]
 800cb00:	4613      	mov	r3, r2
 800cb02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 800cb04:	79fb      	ldrb	r3, [r7, #7]
 800cb06:	2b23      	cmp	r3, #35	; 0x23
 800cb08:	d85c      	bhi.n	800cbc4 <CDC_Control_FS+0xd0>
 800cb0a:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <CDC_Control_FS+0x1c>)
 800cb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb10:	0800cbc5 	.word	0x0800cbc5
 800cb14:	0800cbc5 	.word	0x0800cbc5
 800cb18:	0800cbc5 	.word	0x0800cbc5
 800cb1c:	0800cbc5 	.word	0x0800cbc5
 800cb20:	0800cbc5 	.word	0x0800cbc5
 800cb24:	0800cbc5 	.word	0x0800cbc5
 800cb28:	0800cbc5 	.word	0x0800cbc5
 800cb2c:	0800cbc5 	.word	0x0800cbc5
 800cb30:	0800cbc5 	.word	0x0800cbc5
 800cb34:	0800cbc5 	.word	0x0800cbc5
 800cb38:	0800cbc5 	.word	0x0800cbc5
 800cb3c:	0800cbc5 	.word	0x0800cbc5
 800cb40:	0800cbc5 	.word	0x0800cbc5
 800cb44:	0800cbc5 	.word	0x0800cbc5
 800cb48:	0800cbc5 	.word	0x0800cbc5
 800cb4c:	0800cbc5 	.word	0x0800cbc5
 800cb50:	0800cbc5 	.word	0x0800cbc5
 800cb54:	0800cbc5 	.word	0x0800cbc5
 800cb58:	0800cbc5 	.word	0x0800cbc5
 800cb5c:	0800cbc5 	.word	0x0800cbc5
 800cb60:	0800cbc5 	.word	0x0800cbc5
 800cb64:	0800cbc5 	.word	0x0800cbc5
 800cb68:	0800cbc5 	.word	0x0800cbc5
 800cb6c:	0800cbc5 	.word	0x0800cbc5
 800cb70:	0800cbc5 	.word	0x0800cbc5
 800cb74:	0800cbc5 	.word	0x0800cbc5
 800cb78:	0800cbc5 	.word	0x0800cbc5
 800cb7c:	0800cbc5 	.word	0x0800cbc5
 800cb80:	0800cbc5 	.word	0x0800cbc5
 800cb84:	0800cbc5 	.word	0x0800cbc5
 800cb88:	0800cbc5 	.word	0x0800cbc5
 800cb8c:	0800cbc5 	.word	0x0800cbc5
 800cb90:	0800cba1 	.word	0x0800cba1
 800cb94:	0800cbb3 	.word	0x0800cbb3
 800cb98:	0800cbc5 	.word	0x0800cbc5
 800cb9c:	0800cbc5 	.word	0x0800cbc5
		/*                                        3 - Mark                             */
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/
	case CDC_SET_LINE_CODING:
		memcpy(lineCoding9600, pbuf, sizeof(lineCoding9600));
 800cba0:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <CDC_Control_FS+0xe0>)
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	6810      	ldr	r0, [r2, #0]
 800cba6:	6018      	str	r0, [r3, #0]
 800cba8:	8891      	ldrh	r1, [r2, #4]
 800cbaa:	7992      	ldrb	r2, [r2, #6]
 800cbac:	8099      	strh	r1, [r3, #4]
 800cbae:	719a      	strb	r2, [r3, #6]
		break;
 800cbb0:	e009      	b.n	800cbc6 <CDC_Control_FS+0xd2>

	case CDC_GET_LINE_CODING:
		memcpy(pbuf, lineCoding9600, sizeof(lineCoding9600));
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	4a07      	ldr	r2, [pc, #28]	; (800cbd4 <CDC_Control_FS+0xe0>)
 800cbb6:	6810      	ldr	r0, [r2, #0]
 800cbb8:	6018      	str	r0, [r3, #0]
 800cbba:	8891      	ldrh	r1, [r2, #4]
 800cbbc:	7992      	ldrb	r2, [r2, #6]
 800cbbe:	8099      	strh	r1, [r3, #4]
 800cbc0:	719a      	strb	r2, [r3, #6]
		break;
 800cbc2:	e000      	b.n	800cbc6 <CDC_Control_FS+0xd2>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800cbc4:	bf00      	nop
	}

	return (USBD_OK);
 800cbc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr
 800cbd4:	200000a0 	.word	0x200000a0

0800cbd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbe2:	6879      	ldr	r1, [r7, #4]
 800cbe4:	480f      	ldr	r0, [pc, #60]	; (800cc24 <CDC_Receive_FS+0x4c>)
 800cbe6:	f7fb f8b9 	bl	8007d5c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbea:	480e      	ldr	r0, [pc, #56]	; (800cc24 <CDC_Receive_FS+0x4c>)
 800cbec:	f7fb f914 	bl	8007e18 <USBD_CDC_ReceivePacket>
	uint8_t len = (uint8_t) *Len;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	73fb      	strb	r3, [r7, #15]
	memset(USB_InputBuffer, '\0', 100);
 800cbf6:	2264      	movs	r2, #100	; 0x64
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	480b      	ldr	r0, [pc, #44]	; (800cc28 <CDC_Receive_FS+0x50>)
 800cbfc:	f004 fe00 	bl	8011800 <memset>
	memcpy(USB_InputBuffer, Buf, len);
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
 800cc02:	461a      	mov	r2, r3
 800cc04:	6879      	ldr	r1, [r7, #4]
 800cc06:	4808      	ldr	r0, [pc, #32]	; (800cc28 <CDC_Receive_FS+0x50>)
 800cc08:	f004 fdec 	bl	80117e4 <memcpy>
	memset(Buf, '\0', len);
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	2100      	movs	r1, #0
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f004 fdf4 	bl	8011800 <memset>
	return (USBD_OK);
 800cc18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	20009018 	.word	0x20009018
 800cc28:	20000430 	.word	0x20000430

0800cc2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800cc3c:	4b0d      	ldr	r3, [pc, #52]	; (800cc74 <CDC_Transmit_FS+0x48>)
 800cc3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc42:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e00b      	b.n	800cc6a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cc52:	887b      	ldrh	r3, [r7, #2]
 800cc54:	461a      	mov	r2, r3
 800cc56:	6879      	ldr	r1, [r7, #4]
 800cc58:	4806      	ldr	r0, [pc, #24]	; (800cc74 <CDC_Transmit_FS+0x48>)
 800cc5a:	f7fb f85d 	bl	8007d18 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cc5e:	4805      	ldr	r0, [pc, #20]	; (800cc74 <CDC_Transmit_FS+0x48>)
 800cc60:	f7fb f89a 	bl	8007d98 <USBD_CDC_TransmitPacket>
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20009018 	.word	0x20009018

0800cc78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	4613      	mov	r3, r2
 800cc84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
	...

0800cc9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	4603      	mov	r3, r0
 800cca4:	6039      	str	r1, [r7, #0]
 800cca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	2212      	movs	r2, #18
 800ccac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ccae:	4b03      	ldr	r3, [pc, #12]	; (800ccbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	200000dc 	.word	0x200000dc

0800ccc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	6039      	str	r1, [r7, #0]
 800ccca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	2204      	movs	r2, #4
 800ccd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ccd2:	4b03      	ldr	r3, [pc, #12]	; (800cce0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	200000fc 	.word	0x200000fc

0800cce4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4603      	mov	r3, r0
 800ccec:	6039      	str	r1, [r7, #0]
 800ccee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d105      	bne.n	800cd02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	4907      	ldr	r1, [pc, #28]	; (800cd18 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccfa:	4808      	ldr	r0, [pc, #32]	; (800cd1c <USBD_FS_ProductStrDescriptor+0x38>)
 800ccfc:	f7fc fafe 	bl	80092fc <USBD_GetString>
 800cd00:	e004      	b.n	800cd0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	4904      	ldr	r1, [pc, #16]	; (800cd18 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd06:	4805      	ldr	r0, [pc, #20]	; (800cd1c <USBD_FS_ProductStrDescriptor+0x38>)
 800cd08:	f7fc faf8 	bl	80092fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd0c:	4b02      	ldr	r3, [pc, #8]	; (800cd18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	2000a2f4 	.word	0x2000a2f4
 800cd1c:	080148e0 	.word	0x080148e0

0800cd20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	4603      	mov	r3, r0
 800cd28:	6039      	str	r1, [r7, #0]
 800cd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	4904      	ldr	r1, [pc, #16]	; (800cd40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd30:	4804      	ldr	r0, [pc, #16]	; (800cd44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd32:	f7fc fae3 	bl	80092fc <USBD_GetString>
  return USBD_StrDesc;
 800cd36:	4b02      	ldr	r3, [pc, #8]	; (800cd40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	2000a2f4 	.word	0x2000a2f4
 800cd44:	080148f8 	.word	0x080148f8

0800cd48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	6039      	str	r1, [r7, #0]
 800cd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	221a      	movs	r2, #26
 800cd58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd5a:	f000 f855 	bl	800ce08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd5e:	4b02      	ldr	r3, [pc, #8]	; (800cd68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	20000100 	.word	0x20000100

0800cd6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	4603      	mov	r3, r0
 800cd74:	6039      	str	r1, [r7, #0]
 800cd76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d105      	bne.n	800cd8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	4907      	ldr	r1, [pc, #28]	; (800cda0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd82:	4808      	ldr	r0, [pc, #32]	; (800cda4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd84:	f7fc faba 	bl	80092fc <USBD_GetString>
 800cd88:	e004      	b.n	800cd94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	4904      	ldr	r1, [pc, #16]	; (800cda0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd8e:	4805      	ldr	r0, [pc, #20]	; (800cda4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd90:	f7fc fab4 	bl	80092fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd94:	4b02      	ldr	r3, [pc, #8]	; (800cda0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	2000a2f4 	.word	0x2000a2f4
 800cda4:	0801490c 	.word	0x0801490c

0800cda8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	6039      	str	r1, [r7, #0]
 800cdb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d105      	bne.n	800cdc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	4907      	ldr	r1, [pc, #28]	; (800cddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdbe:	4808      	ldr	r0, [pc, #32]	; (800cde0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdc0:	f7fc fa9c 	bl	80092fc <USBD_GetString>
 800cdc4:	e004      	b.n	800cdd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	4904      	ldr	r1, [pc, #16]	; (800cddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdca:	4805      	ldr	r0, [pc, #20]	; (800cde0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdcc:	f7fc fa96 	bl	80092fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdd0:	4b02      	ldr	r3, [pc, #8]	; (800cddc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	2000a2f4 	.word	0x2000a2f4
 800cde0:	08014918 	.word	0x08014918

0800cde4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	6039      	str	r1, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	220c      	movs	r2, #12
 800cdf4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cdf6:	4b03      	ldr	r3, [pc, #12]	; (800ce04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	200000f0 	.word	0x200000f0

0800ce08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce0e:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <Get_SerialNum+0x44>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce14:	4b0e      	ldr	r3, [pc, #56]	; (800ce50 <Get_SerialNum+0x48>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce1a:	4b0e      	ldr	r3, [pc, #56]	; (800ce54 <Get_SerialNum+0x4c>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4413      	add	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d009      	beq.n	800ce42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce2e:	2208      	movs	r2, #8
 800ce30:	4909      	ldr	r1, [pc, #36]	; (800ce58 <Get_SerialNum+0x50>)
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 f814 	bl	800ce60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce38:	2204      	movs	r2, #4
 800ce3a:	4908      	ldr	r1, [pc, #32]	; (800ce5c <Get_SerialNum+0x54>)
 800ce3c:	68b8      	ldr	r0, [r7, #8]
 800ce3e:	f000 f80f 	bl	800ce60 <IntToUnicode>
  }
}
 800ce42:	bf00      	nop
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	1ff0f420 	.word	0x1ff0f420
 800ce50:	1ff0f424 	.word	0x1ff0f424
 800ce54:	1ff0f428 	.word	0x1ff0f428
 800ce58:	20000102 	.word	0x20000102
 800ce5c:	20000112 	.word	0x20000112

0800ce60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce72:	2300      	movs	r3, #0
 800ce74:	75fb      	strb	r3, [r7, #23]
 800ce76:	e027      	b.n	800cec8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	0f1b      	lsrs	r3, r3, #28
 800ce7c:	2b09      	cmp	r3, #9
 800ce7e:	d80b      	bhi.n	800ce98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	0f1b      	lsrs	r3, r3, #28
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	440b      	add	r3, r1
 800ce90:	3230      	adds	r2, #48	; 0x30
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	701a      	strb	r2, [r3, #0]
 800ce96:	e00a      	b.n	800ceae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	0f1b      	lsrs	r3, r3, #28
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	4619      	mov	r1, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	440b      	add	r3, r1
 800cea8:	3237      	adds	r2, #55	; 0x37
 800ceaa:	b2d2      	uxtb	r2, r2
 800ceac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	011b      	lsls	r3, r3, #4
 800ceb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	3301      	adds	r3, #1
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	4413      	add	r3, r2
 800cebe:	2200      	movs	r2, #0
 800cec0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	3301      	adds	r3, #1
 800cec6:	75fb      	strb	r3, [r7, #23]
 800cec8:	7dfa      	ldrb	r2, [r7, #23]
 800ceca:	79fb      	ldrb	r3, [r7, #7]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d3d3      	bcc.n	800ce78 <IntToUnicode+0x18>
  }
}
 800ced0:	bf00      	nop
 800ced2:	bf00      	nop
 800ced4:	371c      	adds	r7, #28
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
	...

0800cee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b0ac      	sub	sp, #176	; 0xb0
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cee8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ceec:	2200      	movs	r2, #0
 800ceee:	601a      	str	r2, [r3, #0]
 800cef0:	605a      	str	r2, [r3, #4]
 800cef2:	609a      	str	r2, [r3, #8]
 800cef4:	60da      	str	r2, [r3, #12]
 800cef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cef8:	f107 0318 	add.w	r3, r7, #24
 800cefc:	2284      	movs	r2, #132	; 0x84
 800cefe:	2100      	movs	r1, #0
 800cf00:	4618      	mov	r0, r3
 800cf02:	f004 fc7d 	bl	8011800 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf0e:	d161      	bne.n	800cfd4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cf10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cf14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800cf16:	2300      	movs	r3, #0
 800cf18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cf1c:	f107 0318 	add.w	r3, r7, #24
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7f7 fb71 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800cf2c:	f7f4 fbca 	bl	80016c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf30:	4b2a      	ldr	r3, [pc, #168]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cf32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf34:	4a29      	ldr	r2, [pc, #164]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cf36:	f043 0301 	orr.w	r3, r3, #1
 800cf3a:	6313      	str	r3, [r2, #48]	; 0x30
 800cf3c:	4b27      	ldr	r3, [pc, #156]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cf3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800cf48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800cf4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf50:	2302      	movs	r3, #2
 800cf52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf56:	2300      	movs	r3, #0
 800cf58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf62:	230a      	movs	r3, #10
 800cf64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	481c      	ldr	r0, [pc, #112]	; (800cfe0 <HAL_PCD_MspInit+0x100>)
 800cf70:	f7f5 f98e 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800cf74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf82:	2300      	movs	r3, #0
 800cf84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800cf88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4814      	ldr	r0, [pc, #80]	; (800cfe0 <HAL_PCD_MspInit+0x100>)
 800cf90:	f7f5 f97e 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf94:	4b11      	ldr	r3, [pc, #68]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cf96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf98:	4a10      	ldr	r2, [pc, #64]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cf9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf9e:	6353      	str	r3, [r2, #52]	; 0x34
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfa8:	613b      	str	r3, [r7, #16]
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	4b0b      	ldr	r3, [pc, #44]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cfae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb0:	4a0a      	ldr	r2, [pc, #40]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cfb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfb6:	6453      	str	r3, [r2, #68]	; 0x44
 800cfb8:	4b08      	ldr	r3, [pc, #32]	; (800cfdc <HAL_PCD_MspInit+0xfc>)
 800cfba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2105      	movs	r1, #5
 800cfc8:	2043      	movs	r0, #67	; 0x43
 800cfca:	f7f5 f937 	bl	800223c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfce:	2043      	movs	r0, #67	; 0x43
 800cfd0:	f7f5 f950 	bl	8002274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	37b0      	adds	r7, #176	; 0xb0
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	40023800 	.word	0x40023800
 800cfe0:	40020000 	.word	0x40020000

0800cfe4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cff8:	4619      	mov	r1, r3
 800cffa:	4610      	mov	r0, r2
 800cffc:	f7fa fff5 	bl	8007fea <USBD_LL_SetupStage>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	460b      	mov	r3, r1
 800d012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d01a:	78fa      	ldrb	r2, [r7, #3]
 800d01c:	6879      	ldr	r1, [r7, #4]
 800d01e:	4613      	mov	r3, r2
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	4413      	add	r3, r2
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	440b      	add	r3, r1
 800d028:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	4619      	mov	r1, r3
 800d032:	f7fb f82f 	bl	8008094 <USBD_LL_DataOutStage>
}
 800d036:	bf00      	nop
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b082      	sub	sp, #8
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	460b      	mov	r3, r1
 800d048:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d050:	78fa      	ldrb	r2, [r7, #3]
 800d052:	6879      	ldr	r1, [r7, #4]
 800d054:	4613      	mov	r3, r2
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	4413      	add	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	440b      	add	r3, r1
 800d05e:	334c      	adds	r3, #76	; 0x4c
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	78fb      	ldrb	r3, [r7, #3]
 800d064:	4619      	mov	r1, r3
 800d066:	f7fb f8c8 	bl	80081fa <USBD_LL_DataInStage>
}
 800d06a:	bf00      	nop
 800d06c:	3708      	adds	r7, #8
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b082      	sub	sp, #8
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d080:	4618      	mov	r0, r3
 800d082:	f7fb f9fc 	bl	800847e <USBD_LL_SOF>
}
 800d086:	bf00      	nop
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d096:	2301      	movs	r3, #1
 800d098:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d102      	bne.n	800d0a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	73fb      	strb	r3, [r7, #15]
 800d0a6:	e008      	b.n	800d0ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d102      	bne.n	800d0b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	73fb      	strb	r3, [r7, #15]
 800d0b4:	e001      	b.n	800d0ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d0b6:	f7f4 fb05 	bl	80016c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d0c0:	7bfa      	ldrb	r2, [r7, #15]
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fb f99c 	bl	8008402 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fb f944 	bl	800835e <USBD_LL_Reset>
}
 800d0d6:	bf00      	nop
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fb f997 	bl	8008422 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	6812      	ldr	r2, [r2, #0]
 800d102:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6a1b      	ldr	r3, [r3, #32]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d005      	beq.n	800d120 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d114:	4b04      	ldr	r3, [pc, #16]	; (800d128 <HAL_PCD_SuspendCallback+0x48>)
 800d116:	691b      	ldr	r3, [r3, #16]
 800d118:	4a03      	ldr	r2, [pc, #12]	; (800d128 <HAL_PCD_SuspendCallback+0x48>)
 800d11a:	f043 0306 	orr.w	r3, r3, #6
 800d11e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d120:	bf00      	nop
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	e000ed00 	.word	0xe000ed00

0800d12c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fb f987 	bl	800844e <USBD_LL_Resume>
}
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d15a:	78fa      	ldrb	r2, [r7, #3]
 800d15c:	4611      	mov	r1, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fb f9df 	bl	8008522 <USBD_LL_IsoOUTIncomplete>
}
 800d164:	bf00      	nop
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d17e:	78fa      	ldrb	r2, [r7, #3]
 800d180:	4611      	mov	r1, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f7fb f99b 	bl	80084be <USBD_LL_IsoINIncomplete>
}
 800d188:	bf00      	nop
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fb f9f1 	bl	8008586 <USBD_LL_DevConnected>
}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fb f9ee 	bl	800859c <USBD_LL_DevDisconnected>
}
 800d1c0:	bf00      	nop
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d13c      	bne.n	800d252 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1d8:	4a20      	ldr	r2, [pc, #128]	; (800d25c <USBD_LL_Init+0x94>)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a1e      	ldr	r2, [pc, #120]	; (800d25c <USBD_LL_Init+0x94>)
 800d1e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d1e8:	4b1c      	ldr	r3, [pc, #112]	; (800d25c <USBD_LL_Init+0x94>)
 800d1ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d1ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d1f0:	4b1a      	ldr	r3, [pc, #104]	; (800d25c <USBD_LL_Init+0x94>)
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d1f6:	4b19      	ldr	r3, [pc, #100]	; (800d25c <USBD_LL_Init+0x94>)
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d1fc:	4b17      	ldr	r3, [pc, #92]	; (800d25c <USBD_LL_Init+0x94>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d202:	4b16      	ldr	r3, [pc, #88]	; (800d25c <USBD_LL_Init+0x94>)
 800d204:	2202      	movs	r2, #2
 800d206:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d208:	4b14      	ldr	r3, [pc, #80]	; (800d25c <USBD_LL_Init+0x94>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d20e:	4b13      	ldr	r3, [pc, #76]	; (800d25c <USBD_LL_Init+0x94>)
 800d210:	2200      	movs	r2, #0
 800d212:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d214:	4b11      	ldr	r3, [pc, #68]	; (800d25c <USBD_LL_Init+0x94>)
 800d216:	2200      	movs	r2, #0
 800d218:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d21a:	4b10      	ldr	r3, [pc, #64]	; (800d25c <USBD_LL_Init+0x94>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d220:	4b0e      	ldr	r3, [pc, #56]	; (800d25c <USBD_LL_Init+0x94>)
 800d222:	2200      	movs	r2, #0
 800d224:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d226:	480d      	ldr	r0, [pc, #52]	; (800d25c <USBD_LL_Init+0x94>)
 800d228:	f7f5 fa29 	bl	800267e <HAL_PCD_Init>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d001      	beq.n	800d236 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d232:	f7f4 fa47 	bl	80016c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d236:	2180      	movs	r1, #128	; 0x80
 800d238:	4808      	ldr	r0, [pc, #32]	; (800d25c <USBD_LL_Init+0x94>)
 800d23a:	f7f6 fca4 	bl	8003b86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d23e:	2240      	movs	r2, #64	; 0x40
 800d240:	2100      	movs	r1, #0
 800d242:	4806      	ldr	r0, [pc, #24]	; (800d25c <USBD_LL_Init+0x94>)
 800d244:	f7f6 fc58 	bl	8003af8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d248:	2280      	movs	r2, #128	; 0x80
 800d24a:	2101      	movs	r1, #1
 800d24c:	4803      	ldr	r0, [pc, #12]	; (800d25c <USBD_LL_Init+0x94>)
 800d24e:	f7f6 fc53 	bl	8003af8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	2000a4f4 	.word	0x2000a4f4

0800d260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d276:	4618      	mov	r0, r3
 800d278:	f7f5 fb25 	bl	80028c6 <HAL_PCD_Start>
 800d27c:	4603      	mov	r3, r0
 800d27e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	4618      	mov	r0, r3
 800d284:	f000 f97e 	bl	800d584 <USBD_Get_USB_Status>
 800d288:	4603      	mov	r3, r0
 800d28a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d28c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b084      	sub	sp, #16
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	4608      	mov	r0, r1
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	70fb      	strb	r3, [r7, #3]
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	70bb      	strb	r3, [r7, #2]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2be:	78bb      	ldrb	r3, [r7, #2]
 800d2c0:	883a      	ldrh	r2, [r7, #0]
 800d2c2:	78f9      	ldrb	r1, [r7, #3]
 800d2c4:	f7f6 f812 	bl	80032ec <HAL_PCD_EP_Open>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f958 	bl	800d584 <USBD_Get_USB_Status>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2fc:	78fa      	ldrb	r2, [r7, #3]
 800d2fe:	4611      	mov	r1, r2
 800d300:	4618      	mov	r0, r3
 800d302:	f7f6 f85b 	bl	80033bc <HAL_PCD_EP_Close>
 800d306:	4603      	mov	r3, r0
 800d308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 f939 	bl	800d584 <USBD_Get_USB_Status>
 800d312:	4603      	mov	r3, r0
 800d314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d316:	7bbb      	ldrb	r3, [r7, #14]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d330:	2300      	movs	r3, #0
 800d332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d33a:	78fa      	ldrb	r2, [r7, #3]
 800d33c:	4611      	mov	r1, r2
 800d33e:	4618      	mov	r0, r3
 800d340:	f7f6 f933 	bl	80035aa <HAL_PCD_EP_SetStall>
 800d344:	4603      	mov	r3, r0
 800d346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 f91a 	bl	800d584 <USBD_Get_USB_Status>
 800d350:	4603      	mov	r3, r0
 800d352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d354:	7bbb      	ldrb	r3, [r7, #14]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b084      	sub	sp, #16
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	460b      	mov	r3, r1
 800d368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d378:	78fa      	ldrb	r2, [r7, #3]
 800d37a:	4611      	mov	r1, r2
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7f6 f978 	bl	8003672 <HAL_PCD_EP_ClrStall>
 800d382:	4603      	mov	r3, r0
 800d384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d386:	7bfb      	ldrb	r3, [r7, #15]
 800d388:	4618      	mov	r0, r3
 800d38a:	f000 f8fb 	bl	800d584 <USBD_Get_USB_Status>
 800d38e:	4603      	mov	r3, r0
 800d390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d392:	7bbb      	ldrb	r3, [r7, #14]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	da0b      	bge.n	800d3d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3b8:	78fb      	ldrb	r3, [r7, #3]
 800d3ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3be:	68f9      	ldr	r1, [r7, #12]
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	00db      	lsls	r3, r3, #3
 800d3c4:	4413      	add	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	440b      	add	r3, r1
 800d3ca:	333e      	adds	r3, #62	; 0x3e
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	e00b      	b.n	800d3e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3d0:	78fb      	ldrb	r3, [r7, #3]
 800d3d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3d6:	68f9      	ldr	r1, [r7, #12]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	00db      	lsls	r3, r3, #3
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	440b      	add	r3, r1
 800d3e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d3e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3714      	adds	r7, #20
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d400:	2300      	movs	r3, #0
 800d402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d40e:	78fa      	ldrb	r2, [r7, #3]
 800d410:	4611      	mov	r1, r2
 800d412:	4618      	mov	r0, r3
 800d414:	f7f5 ff45 	bl	80032a2 <HAL_PCD_SetAddress>
 800d418:	4603      	mov	r3, r0
 800d41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 f8b0 	bl	800d584 <USBD_Get_USB_Status>
 800d424:	4603      	mov	r3, r0
 800d426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d428:	7bbb      	ldrb	r3, [r7, #14]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	607a      	str	r2, [r7, #4]
 800d43c:	603b      	str	r3, [r7, #0]
 800d43e:	460b      	mov	r3, r1
 800d440:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d450:	7af9      	ldrb	r1, [r7, #11]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	f7f6 f85e 	bl	8003516 <HAL_PCD_EP_Transmit>
 800d45a:	4603      	mov	r3, r0
 800d45c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
 800d460:	4618      	mov	r0, r3
 800d462:	f000 f88f 	bl	800d584 <USBD_Get_USB_Status>
 800d466:	4603      	mov	r3, r0
 800d468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d46a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	607a      	str	r2, [r7, #4]
 800d47e:	603b      	str	r3, [r7, #0]
 800d480:	460b      	mov	r3, r1
 800d482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d492:	7af9      	ldrb	r1, [r7, #11]
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	f7f5 ffda 	bl	8003450 <HAL_PCD_EP_Receive>
 800d49c:	4603      	mov	r3, r0
 800d49e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4a0:	7dfb      	ldrb	r3, [r7, #23]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 f86e 	bl	800d584 <USBD_Get_USB_Status>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	460b      	mov	r3, r1
 800d4c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4c8:	78fa      	ldrb	r2, [r7, #3]
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7f6 f80a 	bl	80034e6 <HAL_PCD_EP_GetRxCount>
 800d4d2:	4603      	mov	r3, r0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d4e8:	78fb      	ldrb	r3, [r7, #3]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d002      	beq.n	800d4f4 <HAL_PCDEx_LPM_Callback+0x18>
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d01f      	beq.n	800d532 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d4f2:	e03b      	b.n	800d56c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a1b      	ldr	r3, [r3, #32]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d007      	beq.n	800d50c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d4fc:	f000 f83c 	bl	800d578 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d500:	4b1c      	ldr	r3, [pc, #112]	; (800d574 <HAL_PCDEx_LPM_Callback+0x98>)
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	4a1b      	ldr	r2, [pc, #108]	; (800d574 <HAL_PCDEx_LPM_Callback+0x98>)
 800d506:	f023 0306 	bic.w	r3, r3, #6
 800d50a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	6812      	ldr	r2, [r2, #0]
 800d51a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d51e:	f023 0301 	bic.w	r3, r3, #1
 800d522:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fa ff8f 	bl	800844e <USBD_LL_Resume>
    break;
 800d530:	e01c      	b.n	800d56c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	6812      	ldr	r2, [r2, #0]
 800d540:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d544:	f043 0301 	orr.w	r3, r3, #1
 800d548:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d550:	4618      	mov	r0, r3
 800d552:	f7fa ff66 	bl	8008422 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d005      	beq.n	800d56a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d55e:	4b05      	ldr	r3, [pc, #20]	; (800d574 <HAL_PCDEx_LPM_Callback+0x98>)
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	4a04      	ldr	r2, [pc, #16]	; (800d574 <HAL_PCDEx_LPM_Callback+0x98>)
 800d564:	f043 0306 	orr.w	r3, r3, #6
 800d568:	6113      	str	r3, [r2, #16]
    break;
 800d56a:	bf00      	nop
}
 800d56c:	bf00      	nop
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	e000ed00 	.word	0xe000ed00

0800d578 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d57c:	f7f3 fdc6 	bl	800110c <SystemClock_Config>
}
 800d580:	bf00      	nop
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	2b03      	cmp	r3, #3
 800d596:	d817      	bhi.n	800d5c8 <USBD_Get_USB_Status+0x44>
 800d598:	a201      	add	r2, pc, #4	; (adr r2, 800d5a0 <USBD_Get_USB_Status+0x1c>)
 800d59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d59e:	bf00      	nop
 800d5a0:	0800d5b1 	.word	0x0800d5b1
 800d5a4:	0800d5b7 	.word	0x0800d5b7
 800d5a8:	0800d5bd 	.word	0x0800d5bd
 800d5ac:	0800d5c3 	.word	0x0800d5c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5b4:	e00b      	b.n	800d5ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ba:	e008      	b.n	800d5ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	73fb      	strb	r3, [r7, #15]
    break;
 800d5c0:	e005      	b.n	800d5ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5c6:	e002      	b.n	800d5ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d5cc:	bf00      	nop
  }
  return usb_status;
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 800d5e2:	f000 f9bd 	bl	800d960 <csp_get_s>
 800d5e6:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 800d5e8:	4b07      	ldr	r3, [pc, #28]	; (800d608 <csp_get_uptime_s+0x2c>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d102      	bne.n	800d5f6 <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 800d5f0:	4a05      	ldr	r2, [pc, #20]	; (800d608 <csp_get_uptime_s+0x2c>)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 800d5f6:	4b04      	ldr	r3, [pc, #16]	; (800d608 <csp_get_uptime_s+0x2c>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	1ad3      	subs	r3, r2, r3
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	2000a9fc 	.word	0x2000a9fc

0800d60c <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff f83d 	bl	800c694 <pvPortMalloc>
 800d61a:	4603      	mov	r3, r0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	fb02 f303 	mul.w	r3, r2, r3
 800d636:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 800d638:	6838      	ldr	r0, [r7, #0]
 800d63a:	f7ff ffe7 	bl	800d60c <csp_malloc>
 800d63e:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d004      	beq.n	800d650 <csp_calloc+0x2c>
		memset(ptr, 0, size);
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	2100      	movs	r1, #0
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f004 f8d8 	bl	8011800 <memset>
	}
	return ptr;
 800d650:	68fb      	ldr	r3, [r7, #12]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <csp_free>:

void csp_free(void *ptr) {
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b082      	sub	sp, #8
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7ff f8e0 	bl	800c828 <vPortFree>
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f7fc fba1 	bl	8009dc8 <xQueueGenericCreate>
 800d686:	4603      	mov	r3, r0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7fd f841 	bl	800a720 <vQueueDelete>
}
 800d69e:	bf00      	nop
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b084      	sub	sp, #16
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	60f8      	str	r0, [r7, #12]
 800d6ae:	60b9      	str	r1, [r7, #8]
 800d6b0:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	68b9      	ldr	r1, [r7, #8]
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f7fc fbe8 	bl	8009e94 <xQueueGenericSend>
 800d6c4:	4603      	mov	r3, r0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 800d6da:	2300      	movs	r3, #0
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	68b9      	ldr	r1, [r7, #8]
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f7fc fcdd 	bl	800a0a0 <xQueueGenericSendFromISR>
 800d6e6:	4603      	mov	r3, r0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7fc fd6a 	bl	800a1e0 <xQueueReceive>
 800d70c:	4603      	mov	r3, r0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 800d716:	b580      	push	{r7, lr}
 800d718:	b084      	sub	sp, #16
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	60f8      	str	r0, [r7, #12]
 800d71e:	60b9      	str	r1, [r7, #8]
 800d720:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	68b9      	ldr	r1, [r7, #8]
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7fc ff54 	bl	800a5d4 <xQueueReceiveFromISR>
 800d72c:	4603      	mov	r3, r0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 800d736:	b580      	push	{r7, lr}
 800d738:	b082      	sub	sp, #8
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7fc ffce 	bl	800a6e0 <uxQueueMessagesWaiting>
 800d744:	4603      	mov	r3, r0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <csp_bin_sem_create>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
	return csp_bin_sem_post(mutex);
}

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 800d74e:	b580      	push	{r7, lr}
 800d750:	b082      	sub	sp, #8
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 800d756:	2203      	movs	r2, #3
 800d758:	2100      	movs	r1, #0
 800d75a:	2001      	movs	r0, #1
 800d75c:	f7fc fb34 	bl	8009dc8 <xQueueGenericCreate>
 800d760:	4602      	mov	r2, r0
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	601a      	str	r2, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d006      	beq.n	800d77c <csp_bin_sem_create+0x2e>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6818      	ldr	r0, [r3, #0]
 800d772:	2300      	movs	r3, #0
 800d774:	2200      	movs	r2, #0
 800d776:	2100      	movs	r1, #0
 800d778:	f7fc fb8c 	bl	8009e94 <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 800d77c:	2301      	movs	r3, #1
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <csp_bin_sem_remove>:

int csp_bin_sem_remove(csp_bin_sem_handle_t * sem) {
 800d786:	b580      	push	{r7, lr}
 800d788:	b082      	sub	sp, #8
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
	if ((sem != NULL) && (*sem != NULL)) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d008      	beq.n	800d7a6 <csp_bin_sem_remove+0x20>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d004      	beq.n	800d7a6 <csp_bin_sem_remove+0x20>
		vSemaphoreDelete(*sem);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fc ffbd 	bl	800a720 <vQueueDelete>
	}
	return CSP_SEMAPHORE_OK;
 800d7a6:	2301      	movs	r3, #1
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <csp_bin_sem_wait>:

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 800d7ba:	4b0e      	ldr	r3, [pc, #56]	; (800d7f4 <csp_bin_sem_wait+0x44>)
 800d7bc:	799b      	ldrb	r3, [r3, #6]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d004      	beq.n	800d7cc <csp_bin_sem_wait+0x1c>
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	490c      	ldr	r1, [pc, #48]	; (800d7f8 <csp_bin_sem_wait+0x48>)
 800d7c6:	2006      	movs	r0, #6
 800d7c8:	f000 fe88 	bl	800e4dc <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fc fde7 	bl	800a3ac <xQueueSemaphoreTake>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d101      	bne.n	800d7e8 <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e000      	b.n	800d7ea <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	2000011c 	.word	0x2000011c
 800d7f8:	08014928 	.word	0x08014928

0800d7fc <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 800d804:	4b0c      	ldr	r3, [pc, #48]	; (800d838 <csp_bin_sem_post+0x3c>)
 800d806:	799b      	ldrb	r3, [r3, #6]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <csp_bin_sem_post+0x1a>
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	490b      	ldr	r1, [pc, #44]	; (800d83c <csp_bin_sem_post+0x40>)
 800d810:	2006      	movs	r0, #6
 800d812:	f000 fe63 	bl	800e4dc <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6818      	ldr	r0, [r3, #0]
 800d81a:	2300      	movs	r3, #0
 800d81c:	2200      	movs	r2, #0
 800d81e:	2100      	movs	r1, #0
 800d820:	f7fc fb38 	bl	8009e94 <xQueueGenericSend>
 800d824:	4603      	mov	r3, r0
 800d826:	2b01      	cmp	r3, #1
 800d828:	d101      	bne.n	800d82e <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e000      	b.n	800d830 <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	2000011c 	.word	0x2000011c
 800d83c:	08014934 	.word	0x08014934

0800d840 <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 800d84a:	79fb      	ldrb	r3, [r7, #7]
 800d84c:	f003 030f 	and.w	r3, r3, #15
 800d850:	3b01      	subs	r3, #1
 800d852:	2b07      	cmp	r3, #7
 800d854:	d82a      	bhi.n	800d8ac <csp_sys_set_color+0x6c>
 800d856:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <csp_sys_set_color+0x1c>)
 800d858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85c:	0800d87d 	.word	0x0800d87d
 800d860:	0800d883 	.word	0x0800d883
 800d864:	0800d889 	.word	0x0800d889
 800d868:	0800d88f 	.word	0x0800d88f
 800d86c:	0800d895 	.word	0x0800d895
 800d870:	0800d89b 	.word	0x0800d89b
 800d874:	0800d8a1 	.word	0x0800d8a1
 800d878:	0800d8a7 	.word	0x0800d8a7
		case COLOR_BLACK:
			color_code = 30; break;
 800d87c:	231e      	movs	r3, #30
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	e017      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 800d882:	231f      	movs	r3, #31
 800d884:	60fb      	str	r3, [r7, #12]
 800d886:	e014      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 800d888:	2320      	movs	r3, #32
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	e011      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 800d88e:	2321      	movs	r3, #33	; 0x21
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e00e      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 800d894:	2322      	movs	r3, #34	; 0x22
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	e00b      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 800d89a:	2323      	movs	r3, #35	; 0x23
 800d89c:	60fb      	str	r3, [r7, #12]
 800d89e:	e008      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 800d8a0:	2324      	movs	r3, #36	; 0x24
 800d8a2:	60fb      	str	r3, [r7, #12]
 800d8a4:	e005      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 800d8a6:	2325      	movs	r3, #37	; 0x25
 800d8a8:	60fb      	str	r3, [r7, #12]
 800d8aa:	e002      	b.n	800d8b2 <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 800d8b2:	79fb      	ldrb	r3, [r7, #7]
 800d8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8b8:	2b40      	cmp	r3, #64	; 0x40
 800d8ba:	d013      	beq.n	800d8e4 <csp_sys_set_color+0xa4>
 800d8bc:	2b40      	cmp	r3, #64	; 0x40
 800d8be:	dc14      	bgt.n	800d8ea <csp_sys_set_color+0xaa>
 800d8c0:	2b30      	cmp	r3, #48	; 0x30
 800d8c2:	d00c      	beq.n	800d8de <csp_sys_set_color+0x9e>
 800d8c4:	2b30      	cmp	r3, #48	; 0x30
 800d8c6:	dc10      	bgt.n	800d8ea <csp_sys_set_color+0xaa>
 800d8c8:	2b10      	cmp	r3, #16
 800d8ca:	d002      	beq.n	800d8d2 <csp_sys_set_color+0x92>
 800d8cc:	2b20      	cmp	r3, #32
 800d8ce:	d003      	beq.n	800d8d8 <csp_sys_set_color+0x98>
 800d8d0:	e00b      	b.n	800d8ea <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	60bb      	str	r3, [r7, #8]
 800d8d6:	e00b      	b.n	800d8f0 <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 800d8d8:	2302      	movs	r3, #2
 800d8da:	60bb      	str	r3, [r7, #8]
 800d8dc:	e008      	b.n	800d8f0 <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	60bb      	str	r3, [r7, #8]
 800d8e2:	e005      	b.n	800d8f0 <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	60bb      	str	r3, [r7, #8]
 800d8e8:	e002      	b.n	800d8f0 <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60bb      	str	r3, [r7, #8]
 800d8ee:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	68b9      	ldr	r1, [r7, #8]
 800d8f4:	4803      	ldr	r0, [pc, #12]	; (800d904 <csp_sys_set_color+0xc4>)
 800d8f6:	f004 fceb 	bl	80122d0 <iprintf>
}
 800d8fa:	bf00      	nop
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	08014940 	.word	0x08014940

0800d908 <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 800d908:	b580      	push	{r7, lr}
 800d90a:	b088      	sub	sp, #32
 800d90c:	af02      	add	r7, sp, #8
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	b29a      	uxth	r2, r3
 800d91a:	f107 0310 	add.w	r3, r7, #16
 800d91e:	9301      	str	r3, [sp, #4]
 800d920:	6a3b      	ldr	r3, [r7, #32]
 800d922:	9300      	str	r3, [sp, #0]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	68b9      	ldr	r1, [r7, #8]
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f7fd f932 	bl	800ab92 <xTaskCreate>
 800d92e:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d002      	beq.n	800d93c <csp_thread_create+0x34>
		return CSP_ERR_NOMEM;
 800d936:	f04f 33ff 	mov.w	r3, #4294967295
 800d93a:	e006      	b.n	800d94a <csp_thread_create+0x42>
	}
	if (return_handle) {
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <csp_thread_create+0x40>
		*return_handle = handle;
 800d942:	693a      	ldr	r2, [r7, #16]
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3718      	adds	r7, #24
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 800d952:	b580      	push	{r7, lr}
 800d954:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 800d956:	f7fd fbd1 	bl	800b0fc <xTaskGetTickCount>
 800d95a:	4603      	mov	r3, r0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <csp_get_s>:

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
}

uint32_t csp_get_s(void) {
 800d960:	b580      	push	{r7, lr}
 800d962:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 800d964:	f7fd fbca 	bl	800b0fc <xTaskGetTickCount>
 800d968:	4603      	mov	r3, r0
 800d96a:	4a03      	ldr	r2, [pc, #12]	; (800d978 <csp_get_s+0x18>)
 800d96c:	fba2 2303 	umull	r2, r3, r2, r3
 800d970:	099b      	lsrs	r3, r3, #6
}
 800d972:	4618      	mov	r0, r3
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	10624dd3 	.word	0x10624dd3

0800d97c <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 800d982:	f000 f9a5 	bl	800dcd0 <csp_buffer_size>
 800d986:	4603      	mov	r3, r0
 800d988:	330b      	adds	r3, #11
 800d98a:	f023 0303 	bic.w	r3, r3, #3
 800d98e:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 800d990:	4b23      	ldr	r3, [pc, #140]	; (800da20 <csp_buffer_init+0xa4>)
 800d992:	8adb      	ldrh	r3, [r3, #22]
 800d994:	461a      	mov	r2, r3
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	fb02 f303 	mul.w	r3, r2, r3
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7ff fe35 	bl	800d60c <csp_malloc>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	4a1f      	ldr	r2, [pc, #124]	; (800da24 <csp_buffer_init+0xa8>)
 800d9a6:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 800d9a8:	4b1e      	ldr	r3, [pc, #120]	; (800da24 <csp_buffer_init+0xa8>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d030      	beq.n	800da12 <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 800d9b0:	4b1b      	ldr	r3, [pc, #108]	; (800da20 <csp_buffer_init+0xa4>)
 800d9b2:	8adb      	ldrh	r3, [r3, #22]
 800d9b4:	2104      	movs	r1, #4
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fe5a 	bl	800d670 <csp_queue_create>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	4a1a      	ldr	r2, [pc, #104]	; (800da28 <csp_buffer_init+0xac>)
 800d9c0:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 800d9c2:	4b19      	ldr	r3, [pc, #100]	; (800da28 <csp_buffer_init+0xac>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d01f      	beq.n	800da0a <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60fb      	str	r3, [r7, #12]
 800d9ce:	e014      	b.n	800d9fa <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 800d9d0:	4b14      	ldr	r3, [pc, #80]	; (800da24 <csp_buffer_init+0xa8>)
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	68b9      	ldr	r1, [r7, #8]
 800d9d8:	fb01 f303 	mul.w	r3, r1, r3
 800d9dc:	4413      	add	r3, r2
 800d9de:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 800d9e6:	4b10      	ldr	r3, [pc, #64]	; (800da28 <csp_buffer_init+0xac>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	1d39      	adds	r1, r7, #4
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7ff fe59 	bl	800d6a6 <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	60fb      	str	r3, [r7, #12]
 800d9fa:	4b09      	ldr	r3, [pc, #36]	; (800da20 <csp_buffer_init+0xa4>)
 800d9fc:	8adb      	ldrh	r3, [r3, #22]
 800d9fe:	461a      	mov	r2, r3
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	4293      	cmp	r3, r2
 800da04:	d3e4      	bcc.n	800d9d0 <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 800da06:	2300      	movs	r3, #0
 800da08:	e006      	b.n	800da18 <csp_buffer_init+0x9c>
		goto fail_queue;
 800da0a:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 800da0c:	f000 f80e 	bl	800da2c <csp_buffer_free_resources>
 800da10:	e000      	b.n	800da14 <csp_buffer_init+0x98>
		goto fail_malloc;
 800da12:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 800da14:	f04f 33ff 	mov.w	r3, #4294967295

}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	2000aa24 	.word	0x2000aa24
 800da24:	2000aa04 	.word	0x2000aa04
 800da28:	2000aa00 	.word	0x2000aa00

0800da2c <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 800da30:	4b0a      	ldr	r3, [pc, #40]	; (800da5c <csp_buffer_free_resources+0x30>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d007      	beq.n	800da48 <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 800da38:	4b08      	ldr	r3, [pc, #32]	; (800da5c <csp_buffer_free_resources+0x30>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7ff fe27 	bl	800d690 <csp_queue_remove>
		csp_buffers = NULL;
 800da42:	4b06      	ldr	r3, [pc, #24]	; (800da5c <csp_buffer_free_resources+0x30>)
 800da44:	2200      	movs	r2, #0
 800da46:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 800da48:	4b05      	ldr	r3, [pc, #20]	; (800da60 <csp_buffer_free_resources+0x34>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7ff fe04 	bl	800d65a <csp_free>
	csp_buffer_pool = NULL;
 800da52:	4b03      	ldr	r3, [pc, #12]	; (800da60 <csp_buffer_free_resources+0x34>)
 800da54:	2200      	movs	r2, #0
 800da56:	601a      	str	r2, [r3, #0]

}
 800da58:	bf00      	nop
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	2000aa00 	.word	0x2000aa00
 800da60:	2000aa04 	.word	0x2000aa04

0800da64 <csp_buffer_get>:
	buffer->refcount = 1;
	return buffer->skbf_data;

}

void *csp_buffer_get(size_t _data_size) {
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 800da6c:	4b27      	ldr	r3, [pc, #156]	; (800db0c <csp_buffer_get+0xa8>)
 800da6e:	8b1b      	ldrh	r3, [r3, #24]
 800da70:	461a      	mov	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4293      	cmp	r3, r2
 800da76:	d90c      	bls.n	800da92 <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 800da78:	4b25      	ldr	r3, [pc, #148]	; (800db10 <csp_buffer_get+0xac>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d006      	beq.n	800da8e <csp_buffer_get+0x2a>
 800da80:	4b22      	ldr	r3, [pc, #136]	; (800db0c <csp_buffer_get+0xa8>)
 800da82:	8b1b      	ldrh	r3, [r3, #24]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	4923      	ldr	r1, [pc, #140]	; (800db14 <csp_buffer_get+0xb0>)
 800da88:	2000      	movs	r0, #0
 800da8a:	f000 fd27 	bl	800e4dc <do_csp_debug>
		return NULL;
 800da8e:	2300      	movs	r3, #0
 800da90:	e037      	b.n	800db02 <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 800da96:	4b20      	ldr	r3, [pc, #128]	; (800db18 <csp_buffer_get+0xb4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f107 010c 	add.w	r1, r7, #12
 800da9e:	2200      	movs	r2, #0
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fe25 	bl	800d6f0 <csp_queue_dequeue>
	if (buffer == NULL) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d109      	bne.n	800dac0 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 800daac:	4b18      	ldr	r3, [pc, #96]	; (800db10 <csp_buffer_get+0xac>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d003      	beq.n	800dabc <csp_buffer_get+0x58>
 800dab4:	4919      	ldr	r1, [pc, #100]	; (800db1c <csp_buffer_get+0xb8>)
 800dab6:	2000      	movs	r0, #0
 800dab8:	f000 fd10 	bl	800e4dc <do_csp_debug>
		return NULL;
 800dabc:	2300      	movs	r3, #0
 800dabe:	e020      	b.n	800db02 <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d00c      	beq.n	800dae4 <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 800daca:	4b11      	ldr	r3, [pc, #68]	; (800db10 <csp_buffer_get+0xac>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d006      	beq.n	800dae0 <csp_buffer_get+0x7c>
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	4911      	ldr	r1, [pc, #68]	; (800db20 <csp_buffer_get+0xbc>)
 800dada:	2000      	movs	r0, #0
 800dadc:	f000 fcfe 	bl	800e4dc <do_csp_debug>
		return NULL;
 800dae0:	2300      	movs	r3, #0
 800dae2:	e00e      	b.n	800db02 <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 800dae4:	4b0a      	ldr	r3, [pc, #40]	; (800db10 <csp_buffer_get+0xac>)
 800dae6:	78db      	ldrb	r3, [r3, #3]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d005      	beq.n	800daf8 <csp_buffer_get+0x94>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	461a      	mov	r2, r3
 800daf0:	490c      	ldr	r1, [pc, #48]	; (800db24 <csp_buffer_get+0xc0>)
 800daf2:	2003      	movs	r0, #3
 800daf4:	f000 fcf2 	bl	800e4dc <do_csp_debug>

	buffer->refcount = 1;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2201      	movs	r2, #1
 800dafc:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	3308      	adds	r3, #8
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	2000aa24 	.word	0x2000aa24
 800db10:	2000011c 	.word	0x2000011c
 800db14:	0801494c 	.word	0x0801494c
 800db18:	2000aa00 	.word	0x2000aa00
 800db1c:	08014988 	.word	0x08014988
 800db20:	0801499c 	.word	0x0801499c
 800db24:	080149c0 	.word	0x080149c0

0800db28 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d023      	beq.n	800db7e <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	3b08      	subs	r3, #8
 800db3a:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f003 0303 	and.w	r3, r3, #3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d11d      	bne.n	800db82 <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	685a      	ldr	r2, [r3, #4]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d11a      	bne.n	800db86 <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d018      	beq.n	800db8a <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	3a01      	subs	r2, #1
 800db5e:	601a      	str	r2, [r3, #0]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d113      	bne.n	800db8e <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 800db6a:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <csp_buffer_free_isr+0x70>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f107 0208 	add.w	r2, r7, #8
 800db72:	f107 010c 	add.w	r1, r7, #12
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff fda9 	bl	800d6ce <csp_queue_enqueue_isr>
 800db7c:	e008      	b.n	800db90 <csp_buffer_free_isr+0x68>
		return;
 800db7e:	bf00      	nop
 800db80:	e006      	b.n	800db90 <csp_buffer_free_isr+0x68>
		return;
 800db82:	bf00      	nop
 800db84:	e004      	b.n	800db90 <csp_buffer_free_isr+0x68>
		return;
 800db86:	bf00      	nop
 800db88:	e002      	b.n	800db90 <csp_buffer_free_isr+0x68>
		return;
 800db8a:	bf00      	nop
 800db8c:	e000      	b.n	800db90 <csp_buffer_free_isr+0x68>
		return;
 800db8e:	bf00      	nop

}
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	2000aa00 	.word	0x2000aa00

0800db9c <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d055      	beq.n	800dc56 <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	3b08      	subs	r3, #8
 800dbae:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f003 0303 	and.w	r3, r3, #3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d009      	beq.n	800dbce <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 800dbba:	4b2d      	ldr	r3, [pc, #180]	; (800dc70 <csp_buffer_free+0xd4>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d04b      	beq.n	800dc5a <csp_buffer_free+0xbe>
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	492b      	ldr	r1, [pc, #172]	; (800dc74 <csp_buffer_free+0xd8>)
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	f000 fc88 	bl	800e4dc <do_csp_debug>
		return;
 800dbcc:	e045      	b.n	800dc5a <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	685a      	ldr	r2, [r3, #4]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d009      	beq.n	800dbec <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 800dbd8:	4b25      	ldr	r3, [pc, #148]	; (800dc70 <csp_buffer_free+0xd4>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d03e      	beq.n	800dc5e <csp_buffer_free+0xc2>
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	4925      	ldr	r1, [pc, #148]	; (800dc78 <csp_buffer_free+0xdc>)
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	f000 fc79 	bl	800e4dc <do_csp_debug>
		return;
 800dbea:	e038      	b.n	800dc5e <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10a      	bne.n	800dc0a <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 800dbf4:	4b1e      	ldr	r3, [pc, #120]	; (800dc70 <csp_buffer_free+0xd4>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d032      	beq.n	800dc62 <csp_buffer_free+0xc6>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	491e      	ldr	r1, [pc, #120]	; (800dc7c <csp_buffer_free+0xe0>)
 800dc02:	2000      	movs	r0, #0
 800dc04:	f000 fc6a 	bl	800e4dc <do_csp_debug>
		return;
 800dc08:	e02b      	b.n	800dc62 <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	3a01      	subs	r2, #1
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00b      	beq.n	800dc30 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 800dc18:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <csp_buffer_free+0xd4>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d022      	beq.n	800dc66 <csp_buffer_free+0xca>
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4916      	ldr	r1, [pc, #88]	; (800dc80 <csp_buffer_free+0xe4>)
 800dc28:	2000      	movs	r0, #0
 800dc2a:	f000 fc57 	bl	800e4dc <do_csp_debug>
		return;
 800dc2e:	e01a      	b.n	800dc66 <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 800dc30:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <csp_buffer_free+0xd4>)
 800dc32:	78db      	ldrb	r3, [r3, #3]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d005      	beq.n	800dc44 <csp_buffer_free+0xa8>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	4911      	ldr	r1, [pc, #68]	; (800dc84 <csp_buffer_free+0xe8>)
 800dc3e:	2003      	movs	r0, #3
 800dc40:	f000 fc4c 	bl	800e4dc <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 800dc44:	4b10      	ldr	r3, [pc, #64]	; (800dc88 <csp_buffer_free+0xec>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f107 010c 	add.w	r1, r7, #12
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7ff fd29 	bl	800d6a6 <csp_queue_enqueue>
 800dc54:	e008      	b.n	800dc68 <csp_buffer_free+0xcc>
		return;
 800dc56:	bf00      	nop
 800dc58:	e006      	b.n	800dc68 <csp_buffer_free+0xcc>
		return;
 800dc5a:	bf00      	nop
 800dc5c:	e004      	b.n	800dc68 <csp_buffer_free+0xcc>
		return;
 800dc5e:	bf00      	nop
 800dc60:	e002      	b.n	800dc68 <csp_buffer_free+0xcc>
		return;
 800dc62:	bf00      	nop
 800dc64:	e000      	b.n	800dc68 <csp_buffer_free+0xcc>
		return;
 800dc66:	bf00      	nop

}
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	2000011c 	.word	0x2000011c
 800dc74:	080149c8 	.word	0x080149c8
 800dc78:	080149f0 	.word	0x080149f0
 800dc7c:	08014a14 	.word	0x08014a14
 800dc80:	08014a34 	.word	0x08014a34
 800dc84:	08014a58 	.word	0x08014a58
 800dc88:	2000aa00 	.word	0x2000aa00

0800dc8c <csp_buffer_clone>:

void *csp_buffer_clone(void *buffer) {
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]

	csp_packet_t *packet = (csp_packet_t *) buffer;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	60fb      	str	r3, [r7, #12]
	if (!packet) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <csp_buffer_clone+0x16>
		return NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	e011      	b.n	800dcc6 <csp_buffer_clone+0x3a>
	}

	csp_packet_t *clone = csp_buffer_get(packet->length);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	895b      	ldrh	r3, [r3, #10]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff fedc 	bl	800da64 <csp_buffer_get>
 800dcac:	60b8      	str	r0, [r7, #8]
	if (clone) {
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d007      	beq.n	800dcc4 <csp_buffer_clone+0x38>
		memcpy(clone, packet, csp_buffer_size());
 800dcb4:	f000 f80c 	bl	800dcd0 <csp_buffer_size>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	461a      	mov	r2, r3
 800dcbc:	68f9      	ldr	r1, [r7, #12]
 800dcbe:	68b8      	ldr	r0, [r7, #8]
 800dcc0:	f003 fd90 	bl	80117e4 <memcpy>
	}

	return clone;
 800dcc4:	68bb      	ldr	r3, [r7, #8]

}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
	...

0800dcd0 <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 800dcd0:	b480      	push	{r7}
 800dcd2:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 800dcd4:	4b03      	ldr	r3, [pc, #12]	; (800dce4 <csp_buffer_size+0x14>)
 800dcd6:	8b1b      	ldrh	r3, [r3, #24]
 800dcd8:	3310      	adds	r3, #16
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	2000aa24 	.word	0x2000aa24

0800dce8 <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 800dcec:	4b03      	ldr	r3, [pc, #12]	; (800dcfc <csp_buffer_data_size+0x14>)
 800dcee:	8b1b      	ldrh	r3, [r3, #24]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	2000aa24 	.word	0x2000aa24

0800dd00 <csp_conn_check_timeouts>:
static uint8_t sport;

/* Source port lock */
static csp_bin_sem_handle_t sport_lock;

void csp_conn_check_timeouts(void) {
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
#if (CSP_USE_RDP)
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800dd06:	2300      	movs	r3, #0
 800dd08:	607b      	str	r3, [r7, #4]
 800dd0a:	e022      	b.n	800dd52 <csp_conn_check_timeouts+0x52>
		if (arr_conn[i].state == CONN_OPEN) {
 800dd0c:	4b16      	ldr	r3, [pc, #88]	; (800dd68 <csp_conn_check_timeouts+0x68>)
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2154      	movs	r1, #84	; 0x54
 800dd14:	fb01 f303 	mul.w	r3, r1, r3
 800dd18:	4413      	add	r3, r2
 800dd1a:	785b      	ldrb	r3, [r3, #1]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d115      	bne.n	800dd4c <csp_conn_check_timeouts+0x4c>
			if (arr_conn[i].idin.flags & CSP_FRDP) {
 800dd20:	4b11      	ldr	r3, [pc, #68]	; (800dd68 <csp_conn_check_timeouts+0x68>)
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2154      	movs	r1, #84	; 0x54
 800dd28:	fb01 f303 	mul.w	r3, r1, r3
 800dd2c:	4413      	add	r3, r2
 800dd2e:	791b      	ldrb	r3, [r3, #4]
 800dd30:	f003 0302 	and.w	r3, r3, #2
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d009      	beq.n	800dd4c <csp_conn_check_timeouts+0x4c>
				csp_rdp_check_timeouts(&arr_conn[i]);
 800dd38:	4b0b      	ldr	r3, [pc, #44]	; (800dd68 <csp_conn_check_timeouts+0x68>)
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2154      	movs	r1, #84	; 0x54
 800dd40:	fb01 f303 	mul.w	r3, r1, r3
 800dd44:	4413      	add	r3, r2
 800dd46:	4618      	mov	r0, r3
 800dd48:	f002 faf2 	bl	8010330 <csp_rdp_check_timeouts>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	607b      	str	r3, [r7, #4]
 800dd52:	4b06      	ldr	r3, [pc, #24]	; (800dd6c <csp_conn_check_timeouts+0x6c>)
 800dd54:	7c1b      	ldrb	r3, [r3, #16]
 800dd56:	461a      	mov	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	dbd6      	blt.n	800dd0c <csp_conn_check_timeouts+0xc>
			}
		}
	}
#endif
}
 800dd5e:	bf00      	nop
 800dd60:	bf00      	nop
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	2000aa08 	.word	0x2000aa08
 800dd6c:	2000aa24 	.word	0x2000aa24

0800dd70 <csp_conn_get_rxq>:

int csp_conn_get_rxq(int prio) {
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 800dd78:	2300      	movs	r3, #0
#endif

}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	370c      	adds	r7, #12
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
	...

0800dd88 <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800dd88:	b590      	push	{r4, r7, lr}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]

	if (!conn)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 800dd98:	f06f 0301 	mvn.w	r3, #1
 800dd9c:	e039      	b.n	800de12 <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d009      	beq.n	800ddb8 <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	7bdb      	ldrb	r3, [r3, #15]
 800dda8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff ffde 	bl	800dd70 <csp_conn_get_rxq>
 800ddb4:	60f8      	str	r0, [r7, #12]
 800ddb6:	e001      	b.n	800ddbc <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3302      	adds	r3, #2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	4639      	mov	r1, r7
 800ddca:	2200      	movs	r2, #0
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7ff fc6a 	bl	800d6a6 <csp_queue_enqueue>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d01b      	beq.n	800de10 <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 800ddd8:	4b10      	ldr	r3, [pc, #64]	; (800de1c <csp_conn_enqueue_packet+0x94>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d014      	beq.n	800de0a <csp_conn_enqueue_packet+0x82>
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3302      	adds	r3, #2
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	4413      	add	r3, r2
 800ddea:	685c      	ldr	r4, [r3, #4]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7ff fc9c 	bl	800d736 <csp_queue_size>
 800ddfe:	4603      	mov	r3, r0
 800de00:	4622      	mov	r2, r4
 800de02:	4907      	ldr	r1, [pc, #28]	; (800de20 <csp_conn_enqueue_packet+0x98>)
 800de04:	2000      	movs	r0, #0
 800de06:	f000 fb69 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800de0a:	f04f 33ff 	mov.w	r3, #4294967295
 800de0e:	e000      	b.n	800de12 <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3714      	adds	r7, #20
 800de16:	46bd      	mov	sp, r7
 800de18:	bd90      	pop	{r4, r7, pc}
 800de1a:	bf00      	nop
 800de1c:	2000011c 	.word	0x2000011c
 800de20:	08014a64 	.word	0x08014a64

0800de24 <csp_conn_init>:

int csp_conn_init(void) {
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 800de2a:	4b55      	ldr	r3, [pc, #340]	; (800df80 <csp_conn_init+0x15c>)
 800de2c:	7c1b      	ldrb	r3, [r3, #16]
 800de2e:	2154      	movs	r1, #84	; 0x54
 800de30:	4618      	mov	r0, r3
 800de32:	f7ff fbf7 	bl	800d624 <csp_calloc>
 800de36:	4603      	mov	r3, r0
 800de38:	4a52      	ldr	r2, [pc, #328]	; (800df84 <csp_conn_init+0x160>)
 800de3a:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 800de3c:	4b51      	ldr	r3, [pc, #324]	; (800df84 <csp_conn_init+0x160>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10d      	bne.n	800de60 <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 800de44:	4b50      	ldr	r3, [pc, #320]	; (800df88 <csp_conn_init+0x164>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d006      	beq.n	800de5a <csp_conn_init+0x36>
 800de4c:	4b4c      	ldr	r3, [pc, #304]	; (800df80 <csp_conn_init+0x15c>)
 800de4e:	7c1b      	ldrb	r3, [r3, #16]
 800de50:	461a      	mov	r2, r3
 800de52:	494e      	ldr	r1, [pc, #312]	; (800df8c <csp_conn_init+0x168>)
 800de54:	2000      	movs	r0, #0
 800de56:	f000 fb41 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800de5a:	f04f 33ff 	mov.w	r3, #4294967295
 800de5e:	e08b      	b.n	800df78 <csp_conn_init+0x154>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 800de60:	484b      	ldr	r0, [pc, #300]	; (800df90 <csp_conn_init+0x16c>)
 800de62:	f7ff fc74 	bl	800d74e <csp_bin_sem_create>
 800de66:	4603      	mov	r3, r0
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d00a      	beq.n	800de82 <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 800de6c:	4b46      	ldr	r3, [pc, #280]	; (800df88 <csp_conn_init+0x164>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <csp_conn_init+0x58>
 800de74:	4947      	ldr	r1, [pc, #284]	; (800df94 <csp_conn_init+0x170>)
 800de76:	2000      	movs	r0, #0
 800de78:	f000 fb30 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800de7c:	f04f 33ff 	mov.w	r3, #4294967295
 800de80:	e07a      	b.n	800df78 <csp_conn_init+0x154>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 800de82:	f7ff fd66 	bl	800d952 <csp_get_ms>
 800de86:	4603      	mov	r3, r0
 800de88:	4618      	mov	r0, r3
 800de8a:	f004 faaf 	bl	80123ec <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 800de8e:	f004 fadb 	bl	8012448 <rand>
 800de92:	4602      	mov	r2, r0
 800de94:	4b3a      	ldr	r3, [pc, #232]	; (800df80 <csp_conn_init+0x15c>)
 800de96:	7cdb      	ldrb	r3, [r3, #19]
 800de98:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800de9c:	fb92 f1f3 	sdiv	r1, r2, r3
 800dea0:	fb01 f303 	mul.w	r3, r1, r3
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	4b35      	ldr	r3, [pc, #212]	; (800df80 <csp_conn_init+0x15c>)
 800deaa:	7cdb      	ldrb	r3, [r3, #19]
 800deac:	4413      	add	r3, r2
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	3301      	adds	r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	4b38      	ldr	r3, [pc, #224]	; (800df98 <csp_conn_init+0x174>)
 800deb6:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 800deb8:	4838      	ldr	r0, [pc, #224]	; (800df9c <csp_conn_init+0x178>)
 800deba:	f7ff fc48 	bl	800d74e <csp_bin_sem_create>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d00a      	beq.n	800deda <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 800dec4:	4b30      	ldr	r3, [pc, #192]	; (800df88 <csp_conn_init+0x164>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <csp_conn_init+0xb0>
 800decc:	4934      	ldr	r1, [pc, #208]	; (800dfa0 <csp_conn_init+0x17c>)
 800dece:	2000      	movs	r0, #0
 800ded0:	f000 fb04 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOMEM;
 800ded4:	f04f 33ff 	mov.w	r3, #4294967295
 800ded8:	e04e      	b.n	800df78 <csp_conn_init+0x154>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 800deda:	2300      	movs	r3, #0
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	e044      	b.n	800df6a <csp_conn_init+0x146>
		csp_conn_t * conn = &arr_conn[i];
 800dee0:	4b28      	ldr	r3, [pc, #160]	; (800df84 <csp_conn_init+0x160>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2154      	movs	r1, #84	; 0x54
 800dee8:	fb01 f303 	mul.w	r3, r1, r3
 800deec:	4413      	add	r3, r2
 800deee:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800def0:	2300      	movs	r3, #0
 800def2:	60bb      	str	r3, [r7, #8]
 800def4:	e022      	b.n	800df3c <csp_conn_init+0x118>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 800def6:	4b22      	ldr	r3, [pc, #136]	; (800df80 <csp_conn_init+0x15c>)
 800def8:	7c5b      	ldrb	r3, [r3, #17]
 800defa:	2104      	movs	r1, #4
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff fbb7 	bl	800d670 <csp_queue_create>
 800df02:	4601      	mov	r1, r0
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	3302      	adds	r3, #2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	3302      	adds	r3, #2
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	4413      	add	r3, r2
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <csp_conn_init+0x112>
				csp_log_error("rx_queue = csp_queue_create() failed");
 800df20:	4b19      	ldr	r3, [pc, #100]	; (800df88 <csp_conn_init+0x164>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <csp_conn_init+0x10c>
 800df28:	491e      	ldr	r1, [pc, #120]	; (800dfa4 <csp_conn_init+0x180>)
 800df2a:	2000      	movs	r0, #0
 800df2c:	f000 fad6 	bl	800e4dc <do_csp_debug>
				return CSP_ERR_NOMEM;
 800df30:	f04f 33ff 	mov.w	r3, #4294967295
 800df34:	e020      	b.n	800df78 <csp_conn_init+0x154>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	3301      	adds	r3, #1
 800df3a:	60bb      	str	r3, [r7, #8]
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	ddd9      	ble.n	800def6 <csp_conn_init+0xd2>
			return CSP_ERR_NOMEM;
		}
#endif

#if (CSP_USE_RDP)
		if (csp_rdp_init(conn) != CSP_ERR_NONE) {
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f003 f980 	bl	8011248 <csp_rdp_init>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00a      	beq.n	800df64 <csp_conn_init+0x140>
			csp_log_error("csp_rdp_allocate(conn) failed");
 800df4e:	4b0e      	ldr	r3, [pc, #56]	; (800df88 <csp_conn_init+0x164>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d003      	beq.n	800df5e <csp_conn_init+0x13a>
 800df56:	4914      	ldr	r1, [pc, #80]	; (800dfa8 <csp_conn_init+0x184>)
 800df58:	2000      	movs	r0, #0
 800df5a:	f000 fabf 	bl	800e4dc <do_csp_debug>
			return CSP_ERR_NOMEM;
 800df5e:	f04f 33ff 	mov.w	r3, #4294967295
 800df62:	e009      	b.n	800df78 <csp_conn_init+0x154>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	3301      	adds	r3, #1
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	4b05      	ldr	r3, [pc, #20]	; (800df80 <csp_conn_init+0x15c>)
 800df6c:	7c1b      	ldrb	r3, [r3, #16]
 800df6e:	461a      	mov	r2, r3
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	4293      	cmp	r3, r2
 800df74:	dbb4      	blt.n	800dee0 <csp_conn_init+0xbc>
		}
#endif
	}

	return CSP_ERR_NONE;
 800df76:	2300      	movs	r3, #0

}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	2000aa24 	.word	0x2000aa24
 800df84:	2000aa08 	.word	0x2000aa08
 800df88:	2000011c 	.word	0x2000011c
 800df8c:	08014a84 	.word	0x08014a84
 800df90:	2000aa0c 	.word	0x2000aa0c
 800df94:	08014aac 	.word	0x08014aac
 800df98:	2000aa10 	.word	0x2000aa10
 800df9c:	2000aa14 	.word	0x2000aa14
 800dfa0:	08014ad4 	.word	0x08014ad4
 800dfa4:	08014afc 	.word	0x08014afc
 800dfa8:	08014b24 	.word	0x08014b24

0800dfac <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	4013      	ands	r3, r2
 800dfbc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	e01b      	b.n	800dffc <csp_conn_find+0x50>
		csp_conn_t * conn = &arr_conn[i];
 800dfc4:	4b14      	ldr	r3, [pc, #80]	; (800e018 <csp_conn_find+0x6c>)
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2154      	movs	r1, #84	; 0x54
 800dfcc:	fb01 f303 	mul.w	r3, r1, r3
 800dfd0:	4413      	add	r3, r2
 800dfd2:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	785b      	ldrb	r3, [r3, #1]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d10c      	bne.n	800dff6 <csp_conn_find+0x4a>
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d108      	bne.n	800dff6 <csp_conn_find+0x4a>
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	4013      	ands	r3, r2
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d101      	bne.n	800dff6 <csp_conn_find+0x4a>
			return conn;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	e009      	b.n	800e00a <csp_conn_find+0x5e>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	3301      	adds	r3, #1
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	4b07      	ldr	r3, [pc, #28]	; (800e01c <csp_conn_find+0x70>)
 800dffe:	7c1b      	ldrb	r3, [r3, #16]
 800e000:	461a      	mov	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	4293      	cmp	r3, r2
 800e006:	dbdd      	blt.n	800dfc4 <csp_conn_find+0x18>
		}
	}

	return NULL;
 800e008:	2300      	movs	r3, #0

}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	2000aa08 	.word	0x2000aa08
 800e01c:	2000aa24 	.word	0x2000aa24

0800e020 <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800e028:	2300      	movs	r3, #0
 800e02a:	60fb      	str	r3, [r7, #12]
 800e02c:	e018      	b.n	800e060 <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d003      	beq.n	800e03c <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff fdb0 	bl	800db9c <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	3302      	adds	r3, #2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	f107 0108 	add.w	r1, r7, #8
 800e04c:	2200      	movs	r2, #0
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff fb4e 	bl	800d6f0 <csp_queue_dequeue>
 800e054:	4603      	mov	r3, r0
 800e056:	2b01      	cmp	r3, #1
 800e058:	d0e9      	beq.n	800e02e <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3301      	adds	r3, #1
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	ddea      	ble.n	800e03c <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 800e066:	2300      	movs	r3, #0

}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	4603      	mov	r3, r0
 800e078:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800e07a:	f04f 31ff 	mov.w	r1, #4294967295
 800e07e:	4837      	ldr	r0, [pc, #220]	; (800e15c <csp_conn_allocate+0xec>)
 800e080:	f7ff fb96 	bl	800d7b0 <csp_bin_sem_wait>
 800e084:	4603      	mov	r3, r0
 800e086:	2b01      	cmp	r3, #1
 800e088:	d009      	beq.n	800e09e <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 800e08a:	4b35      	ldr	r3, [pc, #212]	; (800e160 <csp_conn_allocate+0xf0>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <csp_conn_allocate+0x2a>
 800e092:	4934      	ldr	r1, [pc, #208]	; (800e164 <csp_conn_allocate+0xf4>)
 800e094:	2000      	movs	r0, #0
 800e096:	f000 fa21 	bl	800e4dc <do_csp_debug>
		return NULL;
 800e09a:	2300      	movs	r3, #0
 800e09c:	e05a      	b.n	800e154 <csp_conn_allocate+0xe4>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 800e0a2:	4b31      	ldr	r3, [pc, #196]	; (800e168 <csp_conn_allocate+0xf8>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	60fb      	str	r3, [r7, #12]
 800e0ac:	e018      	b.n	800e0e0 <csp_conn_allocate+0x70>
		i = (i + 1) % csp_conf.conn_max;
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	4a2e      	ldr	r2, [pc, #184]	; (800e16c <csp_conn_allocate+0xfc>)
 800e0b4:	7c12      	ldrb	r2, [r2, #16]
 800e0b6:	fb93 f1f2 	sdiv	r1, r3, r2
 800e0ba:	fb01 f202 	mul.w	r2, r1, r2
 800e0be:	1a9b      	subs	r3, r3, r2
 800e0c0:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 800e0c2:	4b2b      	ldr	r3, [pc, #172]	; (800e170 <csp_conn_allocate+0x100>)
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	2154      	movs	r1, #84	; 0x54
 800e0ca:	fb01 f303 	mul.w	r3, r1, r3
 800e0ce:	4413      	add	r3, r2
 800e0d0:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	785b      	ldrb	r3, [r3, #1]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d009      	beq.n	800e0ee <csp_conn_allocate+0x7e>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	60fb      	str	r3, [r7, #12]
 800e0e0:	4b22      	ldr	r3, [pc, #136]	; (800e16c <csp_conn_allocate+0xfc>)
 800e0e2:	7c1b      	ldrb	r3, [r3, #16]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	dbe0      	blt.n	800e0ae <csp_conn_allocate+0x3e>
 800e0ec:	e000      	b.n	800e0f0 <csp_conn_allocate+0x80>
			break;
 800e0ee:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d01a      	beq.n	800e12c <csp_conn_allocate+0xbc>
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	785b      	ldrb	r3, [r3, #1]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d116      	bne.n	800e12c <csp_conn_allocate+0xbc>
		conn->idin.ext = 0;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	2200      	movs	r2, #0
 800e102:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	2200      	movs	r2, #0
 800e108:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2200      	movs	r2, #0
 800e10e:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	2200      	movs	r2, #0
 800e114:	615a      	str	r2, [r3, #20]
		conn->type = type;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	79fa      	ldrb	r2, [r7, #7]
 800e11a:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	2201      	movs	r2, #1
 800e120:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	b2da      	uxtb	r2, r3
 800e126:	4b10      	ldr	r3, [pc, #64]	; (800e168 <csp_conn_allocate+0xf8>)
 800e128:	701a      	strb	r2, [r3, #0]
 800e12a:	e001      	b.n	800e130 <csp_conn_allocate+0xc0>
	} else {
		// no free connections
		conn = NULL;
 800e12c:	2300      	movs	r3, #0
 800e12e:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 800e130:	480a      	ldr	r0, [pc, #40]	; (800e15c <csp_conn_allocate+0xec>)
 800e132:	f7ff fb63 	bl	800d7fc <csp_bin_sem_post>

	if (conn == NULL) {
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d10a      	bne.n	800e152 <csp_conn_allocate+0xe2>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 800e13c:	4b08      	ldr	r3, [pc, #32]	; (800e160 <csp_conn_allocate+0xf0>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d006      	beq.n	800e152 <csp_conn_allocate+0xe2>
 800e144:	4b09      	ldr	r3, [pc, #36]	; (800e16c <csp_conn_allocate+0xfc>)
 800e146:	7c1b      	ldrb	r3, [r3, #16]
 800e148:	461a      	mov	r2, r3
 800e14a:	490a      	ldr	r1, [pc, #40]	; (800e174 <csp_conn_allocate+0x104>)
 800e14c:	2000      	movs	r0, #0
 800e14e:	f000 f9c5 	bl	800e4dc <do_csp_debug>
	}

	return conn;
 800e152:	697b      	ldr	r3, [r7, #20]

}
 800e154:	4618      	mov	r0, r3
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	2000aa0c 	.word	0x2000aa0c
 800e160:	2000011c 	.word	0x2000011c
 800e164:	08014b44 	.word	0x08014b44
 800e168:	2000aa18 	.word	0x2000aa18
 800e16c:	2000aa24 	.word	0x2000aa24
 800e170:	2000aa08 	.word	0x2000aa08
 800e174:	08014b60 	.word	0x08014b60

0800e178 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 800e182:	2000      	movs	r0, #0
 800e184:	f7ff ff74 	bl	800e070 <csp_conn_allocate>
 800e188:	60f8      	str	r0, [r7, #12]

	if (conn) {
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00d      	beq.n	800e1ac <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 800e196:	683a      	ldr	r2, [r7, #0]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 800e19c:	f7ff fbd9 	bl	800d952 <csp_get_ms>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7ff ff3a 	bl	800e020 <csp_conn_flush_rx_queue>
	}

	return conn;
 800e1ac:	68fb      	ldr	r3, [r7, #12]

}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <csp_close>:

int csp_close(csp_conn_t * conn) {
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 800e1be:	2101      	movs	r1, #1
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f805 	bl	800e1d0 <csp_conn_close>
 800e1c6:	4603      	mov	r3, r0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d101      	bne.n	800e1e6 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e060      	b.n	800e2a8 <csp_conn_close+0xd8>
	}

	if (conn->state == CONN_CLOSED) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	785b      	ldrb	r3, [r3, #1]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d109      	bne.n	800e202 <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 800e1ee:	4b30      	ldr	r3, [pc, #192]	; (800e2b0 <csp_conn_close+0xe0>)
 800e1f0:	795b      	ldrb	r3, [r3, #5]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d003      	beq.n	800e1fe <csp_conn_close+0x2e>
 800e1f6:	492f      	ldr	r1, [pc, #188]	; (800e2b4 <csp_conn_close+0xe4>)
 800e1f8:	2005      	movs	r0, #5
 800e1fa:	f000 f96f 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NONE;
 800e1fe:	2300      	movs	r3, #0
 800e200:	e052      	b.n	800e2a8 <csp_conn_close+0xd8>
	}

#if (CSP_USE_RDP)
	/* Ensure RDP knows this connection is closing */
	if ((conn->idin.flags & CSP_FRDP) || (conn->idout.flags & CSP_FRDP)) {
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	791b      	ldrb	r3, [r3, #4]
 800e206:	f003 0302 	and.w	r3, r3, #2
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d105      	bne.n	800e21a <csp_conn_close+0x4a>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	7a1b      	ldrb	r3, [r3, #8]
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00a      	beq.n	800e230 <csp_conn_close+0x60>
		if (csp_rdp_close(conn, closed_by) == CSP_ERR_AGAIN) {
 800e21a:	78fb      	ldrb	r3, [r7, #3]
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f003 f896 	bl	8011350 <csp_rdp_close>
 800e224:	4603      	mov	r3, r0
 800e226:	f113 0f0c 	cmn.w	r3, #12
 800e22a:	d101      	bne.n	800e230 <csp_conn_close+0x60>
			return CSP_ERR_NONE;
 800e22c:	2300      	movs	r3, #0
 800e22e:	e03b      	b.n	800e2a8 <csp_conn_close+0xd8>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800e230:	f04f 31ff 	mov.w	r1, #4294967295
 800e234:	4820      	ldr	r0, [pc, #128]	; (800e2b8 <csp_conn_close+0xe8>)
 800e236:	f7ff fabb 	bl	800d7b0 <csp_bin_sem_wait>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d00a      	beq.n	800e256 <csp_conn_close+0x86>
		csp_log_error("Failed to lock conn array");
 800e240:	4b1b      	ldr	r3, [pc, #108]	; (800e2b0 <csp_conn_close+0xe0>)
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d003      	beq.n	800e250 <csp_conn_close+0x80>
 800e248:	491c      	ldr	r1, [pc, #112]	; (800e2bc <csp_conn_close+0xec>)
 800e24a:	2000      	movs	r0, #0
 800e24c:	f000 f946 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 800e250:	f06f 0302 	mvn.w	r3, #2
 800e254:	e028      	b.n	800e2a8 <csp_conn_close+0xd8>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7ff fedf 	bl	800e020 <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d011      	beq.n	800e28e <csp_conn_close+0xbe>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d10d      	bne.n	800e28e <csp_conn_close+0xbe>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	699b      	ldr	r3, [r3, #24]
 800e276:	f403 5388 	and.w	r3, r3, #4352	; 0x1100
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d007      	beq.n	800e28e <csp_conn_close+0xbe>
		csp_queue_remove(conn->socket);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	4618      	mov	r0, r3
 800e284:	f7ff fa04 	bl	800d690 <csp_queue_remove>
		conn->socket = NULL;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	611a      	str	r2, [r3, #16]
        }

	/* Reset RDP state */
#if (CSP_USE_RDP)
	if (conn->idin.flags & CSP_FRDP) {
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	791b      	ldrb	r3, [r3, #4]
 800e292:	f003 0302 	and.w	r3, r3, #2
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <csp_conn_close+0xd0>
		csp_rdp_flush_all(conn);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f001 ff6e 	bl	801017c <csp_rdp_flush_all>
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 800e2a0:	4805      	ldr	r0, [pc, #20]	; (800e2b8 <csp_conn_close+0xe8>)
 800e2a2:	f7ff faab 	bl	800d7fc <csp_bin_sem_post>

	return CSP_ERR_NONE;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	2000011c 	.word	0x2000011c
 800e2b4:	08014b7c 	.word	0x08014b7c
 800e2b8:	2000aa0c 	.word	0x2000aa0c
 800e2bc:	08014b44 	.word	0x08014b44

0800e2c0 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint8_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	603b      	str	r3, [r7, #0]
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	71fb      	strb	r3, [r7, #7]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	71bb      	strb	r3, [r7, #6]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	717b      	strb	r3, [r7, #5]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 800e2d4:	4b7a      	ldr	r3, [pc, #488]	; (800e4c0 <csp_connect+0x200>)
 800e2d6:	69db      	ldr	r3, [r3, #28]
 800e2d8:	6a3a      	ldr	r2, [r7, #32]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	623b      	str	r3, [r7, #32]

	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	f003 0303 	and.w	r3, r3, #3
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	7bfb      	ldrb	r3, [r7, #15]
 800e2e8:	f362 1387 	bfi	r3, r2, #6, #2
 800e2ec:	73fb      	strb	r3, [r7, #15]
	incoming_id.dst = csp_conf.address;
 800e2ee:	4b74      	ldr	r3, [pc, #464]	; (800e4c0 <csp_connect+0x200>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	f003 031f 	and.w	r3, r3, #31
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	89fb      	ldrh	r3, [r7, #14]
 800e2fa:	f362 1308 	bfi	r3, r2, #4, #5
 800e2fe:	81fb      	strh	r3, [r7, #14]
	incoming_id.src = dest;
 800e300:	79bb      	ldrb	r3, [r7, #6]
 800e302:	f003 031f 	and.w	r3, r3, #31
 800e306:	b2da      	uxtb	r2, r3
 800e308:	7bfb      	ldrb	r3, [r7, #15]
 800e30a:	f362 0345 	bfi	r3, r2, #1, #5
 800e30e:	73fb      	strb	r3, [r7, #15]
	incoming_id.sport = dport;
 800e310:	797b      	ldrb	r3, [r7, #5]
 800e312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e316:	b2da      	uxtb	r2, r3
 800e318:	7b7b      	ldrb	r3, [r7, #13]
 800e31a:	f362 0305 	bfi	r3, r2, #0, #6
 800e31e:	737b      	strb	r3, [r7, #13]
	incoming_id.flags = 0;
 800e320:	2300      	movs	r3, #0
 800e322:	733b      	strb	r3, [r7, #12]
	outgoing_id.pri = prio;
 800e324:	79fb      	ldrb	r3, [r7, #7]
 800e326:	f003 0303 	and.w	r3, r3, #3
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	7afb      	ldrb	r3, [r7, #11]
 800e32e:	f362 1387 	bfi	r3, r2, #6, #2
 800e332:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dst = dest;
 800e334:	79bb      	ldrb	r3, [r7, #6]
 800e336:	f003 031f 	and.w	r3, r3, #31
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	897b      	ldrh	r3, [r7, #10]
 800e33e:	f362 1308 	bfi	r3, r2, #4, #5
 800e342:	817b      	strh	r3, [r7, #10]
	outgoing_id.src = csp_conf.address;
 800e344:	4b5e      	ldr	r3, [pc, #376]	; (800e4c0 <csp_connect+0x200>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 031f 	and.w	r3, r3, #31
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	7afb      	ldrb	r3, [r7, #11]
 800e350:	f362 0345 	bfi	r3, r2, #1, #5
 800e354:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dport = dport;
 800e356:	797b      	ldrb	r3, [r7, #5]
 800e358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	f362 3393 	bfi	r3, r2, #14, #6
 800e364:	60bb      	str	r3, [r7, #8]
	outgoing_id.flags = 0;
 800e366:	2300      	movs	r3, #0
 800e368:	723b      	strb	r3, [r7, #8]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e370:	2b00      	cmp	r3, #0
 800e372:	d003      	beq.n	800e37c <csp_connect+0xbc>
		opts &= ~CSP_O_CRC32;
 800e374:	6a3b      	ldr	r3, [r7, #32]
 800e376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e37a:	623b      	str	r3, [r7, #32]
	}

	if (opts & CSP_O_RDP) {
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	d009      	beq.n	800e39a <csp_connect+0xda>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
 800e386:	7b3b      	ldrb	r3, [r7, #12]
 800e388:	f043 0302 	orr.w	r3, r3, #2
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	733b      	strb	r3, [r7, #12]
		outgoing_id.flags |= CSP_FRDP;
 800e390:	7a3b      	ldrb	r3, [r7, #8]
 800e392:	f043 0302 	orr.w	r3, r3, #2
 800e396:	b2db      	uxtb	r3, r3
 800e398:	723b      	strb	r3, [r7, #8]
		csp_log_error("Attempt to create RDP connection, but CSP was compiled without RDP support");
		return NULL;
#endif
	}

	if (opts & CSP_O_HMAC) {
 800e39a:	6a3b      	ldr	r3, [r7, #32]
 800e39c:	f003 0304 	and.w	r3, r3, #4
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d009      	beq.n	800e3b8 <csp_connect+0xf8>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_log_error("Attempt to create HMAC authenticated connection, but CSP was compiled without HMAC support");
 800e3a4:	4b47      	ldr	r3, [pc, #284]	; (800e4c4 <csp_connect+0x204>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <csp_connect+0xf4>
 800e3ac:	4946      	ldr	r1, [pc, #280]	; (800e4c8 <csp_connect+0x208>)
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	f000 f894 	bl	800e4dc <do_csp_debug>
		return NULL;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e07f      	b.n	800e4b8 <csp_connect+0x1f8>
#endif
	}

	if (opts & CSP_O_XTEA) {
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	f003 0310 	and.w	r3, r3, #16
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d009      	beq.n	800e3d6 <csp_connect+0x116>
#if (CSP_USE_XTEA)
		outgoing_id.flags |= CSP_FXTEA;
		incoming_id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted connection, but CSP was compiled without XTEA support");
 800e3c2:	4b40      	ldr	r3, [pc, #256]	; (800e4c4 <csp_connect+0x204>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d003      	beq.n	800e3d2 <csp_connect+0x112>
 800e3ca:	4940      	ldr	r1, [pc, #256]	; (800e4cc <csp_connect+0x20c>)
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	f000 f885 	bl	800e4dc <do_csp_debug>
		return NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	e070      	b.n	800e4b8 <csp_connect+0x1f8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d009      	beq.n	800e3f4 <csp_connect+0x134>
#if (CSP_USE_CRC32)
		outgoing_id.flags |= CSP_FCRC32;
		incoming_id.flags |= CSP_FCRC32;
#else
		csp_log_error("Attempt to create CRC32 validated connection, but CSP was compiled without CRC32 support");
 800e3e0:	4b38      	ldr	r3, [pc, #224]	; (800e4c4 <csp_connect+0x204>)
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d003      	beq.n	800e3f0 <csp_connect+0x130>
 800e3e8:	4939      	ldr	r1, [pc, #228]	; (800e4d0 <csp_connect+0x210>)
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	f000 f876 	bl	800e4dc <do_csp_debug>
		return NULL;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	e061      	b.n	800e4b8 <csp_connect+0x1f8>
#endif
	}

	/* Find an unused ephemeral port */
	csp_conn_t * conn = NULL;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	617b      	str	r3, [r7, #20]

	/* Wait for sport lock - note that csp_conn_new(..) is called inside the lock! */
	if (csp_bin_sem_wait(&sport_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800e3f8:	f04f 31ff 	mov.w	r1, #4294967295
 800e3fc:	4835      	ldr	r0, [pc, #212]	; (800e4d4 <csp_connect+0x214>)
 800e3fe:	f7ff f9d7 	bl	800d7b0 <csp_bin_sem_wait>
 800e402:	4603      	mov	r3, r0
 800e404:	2b01      	cmp	r3, #1
 800e406:	d001      	beq.n	800e40c <csp_connect+0x14c>
		return NULL;
 800e408:	2300      	movs	r3, #0
 800e40a:	e055      	b.n	800e4b8 <csp_connect+0x1f8>
	}

	const uint8_t start = sport;
 800e40c:	4b32      	ldr	r3, [pc, #200]	; (800e4d8 <csp_connect+0x218>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	74fb      	strb	r3, [r7, #19]
	while (++sport != start) {
 800e412:	e02a      	b.n	800e46a <csp_connect+0x1aa>
		if (sport > CSP_ID_PORT_MAX)
 800e414:	4b30      	ldr	r3, [pc, #192]	; (800e4d8 <csp_connect+0x218>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b3f      	cmp	r3, #63	; 0x3f
 800e41a:	d905      	bls.n	800e428 <csp_connect+0x168>
			sport = csp_conf.port_max_bind + 1;
 800e41c:	4b28      	ldr	r3, [pc, #160]	; (800e4c0 <csp_connect+0x200>)
 800e41e:	7cdb      	ldrb	r3, [r3, #19]
 800e420:	3301      	adds	r3, #1
 800e422:	b2da      	uxtb	r2, r3
 800e424:	4b2c      	ldr	r3, [pc, #176]	; (800e4d8 <csp_connect+0x218>)
 800e426:	701a      	strb	r2, [r3, #0]

		outgoing_id.sport = sport;
 800e428:	4b2b      	ldr	r3, [pc, #172]	; (800e4d8 <csp_connect+0x218>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e430:	b2da      	uxtb	r2, r3
 800e432:	7a7b      	ldrb	r3, [r7, #9]
 800e434:	f362 0305 	bfi	r3, r2, #0, #6
 800e438:	727b      	strb	r3, [r7, #9]
		incoming_id.dport = sport;
 800e43a:	4b27      	ldr	r3, [pc, #156]	; (800e4d8 <csp_connect+0x218>)
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e442:	b2da      	uxtb	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f362 3393 	bfi	r3, r2, #14, #6
 800e44a:	60fb      	str	r3, [r7, #12]

		/* Match on destination port of _incoming_ identifier */
		if (csp_conn_find(incoming_id.ext, CSP_ID_DPORT_MASK) == NULL) {
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f44f 217c 	mov.w	r1, #1032192	; 0xfc000
 800e452:	4618      	mov	r0, r3
 800e454:	f7ff fdaa 	bl	800dfac <csp_conn_find>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d105      	bne.n	800e46a <csp_connect+0x1aa>
			/* Break - we found an unused ephemeral port
                           allocate connection while locked to mark port in use */
			conn = csp_conn_new(incoming_id, outgoing_id);
 800e45e:	68b9      	ldr	r1, [r7, #8]
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f7ff fe89 	bl	800e178 <csp_conn_new>
 800e466:	6178      	str	r0, [r7, #20]
			break;
 800e468:	e00a      	b.n	800e480 <csp_connect+0x1c0>
	while (++sport != start) {
 800e46a:	4b1b      	ldr	r3, [pc, #108]	; (800e4d8 <csp_connect+0x218>)
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	3301      	adds	r3, #1
 800e470:	b2da      	uxtb	r2, r3
 800e472:	4b19      	ldr	r3, [pc, #100]	; (800e4d8 <csp_connect+0x218>)
 800e474:	701a      	strb	r2, [r3, #0]
 800e476:	4b18      	ldr	r3, [pc, #96]	; (800e4d8 <csp_connect+0x218>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	7cfa      	ldrb	r2, [r7, #19]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d1c9      	bne.n	800e414 <csp_connect+0x154>
		}
	}

	/* Post sport lock */
	csp_bin_sem_post(&sport_lock);
 800e480:	4814      	ldr	r0, [pc, #80]	; (800e4d4 <csp_connect+0x214>)
 800e482:	f7ff f9bb 	bl	800d7fc <csp_bin_sem_post>

	if (conn == NULL) {
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <csp_connect+0x1d0>
		return NULL;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e013      	b.n	800e4b8 <csp_connect+0x1f8>
	}

	/* Set connection options */
	conn->opts = opts;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	6a3a      	ldr	r2, [r7, #32]
 800e494:	619a      	str	r2, [r3, #24]

#if (CSP_USE_RDP)
	/* Call Transport Layer connect */
	if (outgoing_id.flags & CSP_FRDP) {
 800e496:	7a3b      	ldrb	r3, [r7, #8]
 800e498:	f003 0302 	and.w	r3, r3, #2
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00a      	beq.n	800e4b6 <csp_connect+0x1f6>
		/* If the transport layer has failed to connect
		 * deallocate connection structure again and return NULL */
		if (csp_rdp_connect(conn) != CSP_ERR_NONE) {
 800e4a0:	6978      	ldr	r0, [r7, #20]
 800e4a2:	f002 fccd 	bl	8010e40 <csp_rdp_connect>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d004      	beq.n	800e4b6 <csp_connect+0x1f6>
			csp_close(conn);
 800e4ac:	6978      	ldr	r0, [r7, #20]
 800e4ae:	f7ff fe82 	bl	800e1b6 <csp_close>
			return NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e000      	b.n	800e4b8 <csp_connect+0x1f8>
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 800e4b6:	697b      	ldr	r3, [r7, #20]

}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3718      	adds	r7, #24
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	2000aa24 	.word	0x2000aa24
 800e4c4:	2000011c 	.word	0x2000011c
 800e4c8:	08014b90 	.word	0x08014b90
 800e4cc:	08014bec 	.word	0x08014bec
 800e4d0:	08014c44 	.word	0x08014c44
 800e4d4:	2000aa14 	.word	0x2000aa14
 800e4d8:	2000aa10 	.word	0x2000aa10

0800e4dc <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 800e4dc:	b40e      	push	{r1, r2, r3}
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b085      	sub	sp, #20
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 800e4e8:	23f0      	movs	r3, #240	; 0xf0
 800e4ea:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 800e4ec:	79fb      	ldrb	r3, [r7, #7]
 800e4ee:	2b06      	cmp	r3, #6
 800e4f0:	d84f      	bhi.n	800e592 <do_csp_debug+0xb6>
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	4a2b      	ldr	r2, [pc, #172]	; (800e5a4 <do_csp_debug+0xc8>)
 800e4f6:	5cd3      	ldrb	r3, [r2, r3]
 800e4f8:	f083 0301 	eor.w	r3, r3, #1
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d147      	bne.n	800e592 <do_csp_debug+0xb6>
		return;

	switch(level) {
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	2b06      	cmp	r3, #6
 800e506:	d846      	bhi.n	800e596 <do_csp_debug+0xba>
 800e508:	a201      	add	r2, pc, #4	; (adr r2, 800e510 <do_csp_debug+0x34>)
 800e50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50e:	bf00      	nop
 800e510:	0800e533 	.word	0x0800e533
 800e514:	0800e539 	.word	0x0800e539
 800e518:	0800e52d 	.word	0x0800e52d
 800e51c:	0800e53f 	.word	0x0800e53f
 800e520:	0800e545 	.word	0x0800e545
 800e524:	0800e54b 	.word	0x0800e54b
 800e528:	0800e551 	.word	0x0800e551
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 800e52c:	2313      	movs	r3, #19
 800e52e:	60fb      	str	r3, [r7, #12]
		break;
 800e530:	e011      	b.n	800e556 <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 800e532:	2312      	movs	r3, #18
 800e534:	60fb      	str	r3, [r7, #12]
		break;
 800e536:	e00e      	b.n	800e556 <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 800e538:	2314      	movs	r3, #20
 800e53a:	60fb      	str	r3, [r7, #12]
		break;
 800e53c:	e00b      	b.n	800e556 <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 800e53e:	2306      	movs	r3, #6
 800e540:	60fb      	str	r3, [r7, #12]
		break;
 800e542:	e008      	b.n	800e556 <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 800e544:	2303      	movs	r3, #3
 800e546:	60fb      	str	r3, [r7, #12]
		break;
 800e548:	e005      	b.n	800e556 <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 800e54a:	2305      	movs	r3, #5
 800e54c:	60fb      	str	r3, [r7, #12]
		break;
 800e54e:	e002      	b.n	800e556 <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 800e550:	2307      	movs	r3, #7
 800e552:	60fb      	str	r3, [r7, #12]
		break;
 800e554:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 800e556:	f107 0320 	add.w	r3, r7, #32
 800e55a:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 800e55c:	4b12      	ldr	r3, [pc, #72]	; (800e5a8 <do_csp_debug+0xcc>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d006      	beq.n	800e572 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 800e564:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <do_csp_debug+0xcc>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	79f8      	ldrb	r0, [r7, #7]
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	69f9      	ldr	r1, [r7, #28]
 800e56e:	4798      	blx	r3
 800e570:	e012      	b.n	800e598 <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	b2db      	uxtb	r3, r3
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff f962 	bl	800d840 <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 800e57c:	68b9      	ldr	r1, [r7, #8]
 800e57e:	69f8      	ldr	r0, [r7, #28]
 800e580:	f004 f8b4 	bl	80126ec <viprintf>
#endif
		printf("\r\n");
 800e584:	4809      	ldr	r0, [pc, #36]	; (800e5ac <do_csp_debug+0xd0>)
 800e586:	f003 ff29 	bl	80123dc <puts>
		csp_sys_set_color(COLOR_RESET);
 800e58a:	20f0      	movs	r0, #240	; 0xf0
 800e58c:	f7ff f958 	bl	800d840 <csp_sys_set_color>
 800e590:	e002      	b.n	800e598 <do_csp_debug+0xbc>
		return;
 800e592:	bf00      	nop
 800e594:	e000      	b.n	800e598 <do_csp_debug+0xbc>
		return;
 800e596:	bf00      	nop
	}

	va_end(args);
}
 800e598:	3714      	adds	r7, #20
 800e59a:	46bd      	mov	sp, r7
 800e59c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5a0:	b003      	add	sp, #12
 800e5a2:	4770      	bx	lr
 800e5a4:	2000011c 	.word	0x2000011c
 800e5a8:	2000aa1c 	.word	0x2000aa1c
 800e5ac:	08014cf4 	.word	0x08014cf4

0800e5b0 <csp_debug_set_level>:

void csp_debug_set_level(csp_debug_level_t level, bool value) {
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	460a      	mov	r2, r1
 800e5ba:	71fb      	strb	r3, [r7, #7]
 800e5bc:	4613      	mov	r3, r2
 800e5be:	71bb      	strb	r3, [r7, #6]

	if (level <= CSP_LOCK) {
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	2b06      	cmp	r3, #6
 800e5c4:	d803      	bhi.n	800e5ce <csp_debug_set_level+0x1e>
		csp_debug_level_enabled[level] = value;
 800e5c6:	79fb      	ldrb	r3, [r7, #7]
 800e5c8:	4904      	ldr	r1, [pc, #16]	; (800e5dc <csp_debug_set_level+0x2c>)
 800e5ca:	79ba      	ldrb	r2, [r7, #6]
 800e5cc:	54ca      	strb	r2, [r1, r3]
	}
}
 800e5ce:	bf00      	nop
 800e5d0:	370c      	adds	r7, #12
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	2000011c 	.word	0x2000011c

0800e5e0 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 800e5e0:	b480      	push	{r7}
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 800e5ea:	88fb      	ldrh	r3, [r7, #6]
 800e5ec:	0a1b      	lsrs	r3, r3, #8
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	b21a      	sxth	r2, r3
			((h16 & 0x00ff) << 8));
 800e5f2:	88fb      	ldrh	r3, [r7, #6]
 800e5f4:	021b      	lsls	r3, r3, #8
	return (((h16 & 0xff00) >> 8) |
 800e5f6:	b21b      	sxth	r3, r3
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	b21b      	sxth	r3, r3
 800e5fc:	b29b      	uxth	r3, r3
#endif
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	370c      	adds	r7, #12
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b082      	sub	sp, #8
 800e60e:	af00      	add	r7, sp, #0
 800e610:	4603      	mov	r3, r0
 800e612:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 800e614:	88fb      	ldrh	r3, [r7, #6]
 800e616:	4618      	mov	r0, r3
 800e618:	f7ff ffe2 	bl	800e5e0 <csp_hton16>
 800e61c:	4603      	mov	r3, r0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 800e626:	b480      	push	{r7}
 800e628:	b083      	sub	sp, #12
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 800e636:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	021b      	lsls	r3, r3, #8
 800e63c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			((h32 & 0x000000ff) << 24) |
 800e640:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	0a1b      	lsrs	r3, r3, #8
 800e646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			((h32 & 0x0000ff00) <<  8) |
 800e64a:	4313      	orrs	r3, r2
#endif
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7ff ffe0 	bl	800e626 <csp_hton32>
 800e666:	4603      	mov	r3, r0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 800e67e:	4b18      	ldr	r3, [pc, #96]	; (800e6e0 <csp_iflist_add+0x70>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d103      	bne.n	800e68e <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 800e686:	4a16      	ldr	r2, [pc, #88]	; (800e6e0 <csp_iflist_add+0x70>)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	e022      	b.n	800e6d4 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 800e68e:	2300      	movs	r3, #0
 800e690:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 800e692:	4b13      	ldr	r3, [pc, #76]	; (800e6e0 <csp_iflist_add+0x70>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	60bb      	str	r3, [r7, #8]
 800e698:	e016      	b.n	800e6c8 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d00a      	beq.n	800e6b8 <csp_iflist_add+0x48>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6818      	ldr	r0, [r3, #0]
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	220a      	movs	r2, #10
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	f003 ffe7 	bl	8012680 <strncasecmp>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 800e6b8:	f06f 0306 	mvn.w	r3, #6
 800e6bc:	e00b      	b.n	800e6d6 <csp_iflist_add+0x66>
			}
			last = i;
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c6:	60bb      	str	r3, [r7, #8]
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1e5      	bne.n	800e69a <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	return CSP_ERR_NONE;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	2000aa20 	.word	0x2000aa20

0800e6e4 <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	6039      	str	r1, [r7, #0]
 800e6ee:	71fb      	strb	r3, [r7, #7]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 800e6f4:	79bb      	ldrb	r3, [r7, #6]
 800e6f6:	79f8      	ldrb	r0, [r7, #7]
 800e6f8:	683a      	ldr	r2, [r7, #0]
 800e6fa:	2105      	movs	r1, #5
 800e6fc:	f000 ff62 	bl	800f5c4 <csp_rtable_set>
 800e700:	4603      	mov	r3, r0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
	...

0800e70c <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 800e714:	f7fe ff62 	bl	800d5dc <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 800e718:	2220      	movs	r2, #32
 800e71a:	6879      	ldr	r1, [r7, #4]
 800e71c:	481b      	ldr	r0, [pc, #108]	; (800e78c <csp_init+0x80>)
 800e71e:	f003 f861 	bl	80117e4 <memcpy>

	int ret = csp_buffer_init();
 800e722:	f7ff f92b 	bl	800d97c <csp_buffer_init>
 800e726:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <csp_init+0x26>
		return ret;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	e027      	b.n	800e782 <csp_init+0x76>
	}

	ret = csp_conn_init();
 800e732:	f7ff fb77 	bl	800de24 <csp_conn_init>
 800e736:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <csp_init+0x36>
		return ret;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	e01f      	b.n	800e782 <csp_init+0x76>
	}

	ret = csp_port_init();
 800e742:	f000 f9d1 	bl	800eae8 <csp_port_init>
 800e746:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <csp_init+0x46>
		return ret;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	e017      	b.n	800e782 <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 800e752:	f000 f9e3 	bl	800eb1c <csp_qfifo_init>
 800e756:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d001      	beq.n	800e762 <csp_init+0x56>
		return ret;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	e00f      	b.n	800e782 <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 800e762:	480b      	ldr	r0, [pc, #44]	; (800e790 <csp_init+0x84>)
 800e764:	f7ff ff84 	bl	800e670 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 800e768:	4b08      	ldr	r3, [pc, #32]	; (800e78c <csp_init+0x80>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	22ff      	movs	r2, #255	; 0xff
 800e76e:	4908      	ldr	r1, [pc, #32]	; (800e790 <csp_init+0x84>)
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff ffb7 	bl	800e6e4 <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 800e776:	22ff      	movs	r2, #255	; 0xff
 800e778:	4905      	ldr	r1, [pc, #20]	; (800e790 <csp_init+0x84>)
 800e77a:	2020      	movs	r0, #32
 800e77c:	f7ff ffb2 	bl	800e6e4 <csp_route_set>

	return CSP_ERR_NONE;
 800e780:	2300      	movs	r3, #0

}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	2000aa24 	.word	0x2000aa24
 800e790:	20000124 	.word	0x20000124

0800e794 <csp_read>:

	return NULL;

}

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d003      	beq.n	800e7b0 <csp_read+0x1c>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	785b      	ldrb	r3, [r3, #1]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d001      	beq.n	800e7b4 <csp_read+0x20>
		return NULL;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e02b      	b.n	800e80c <csp_read+0x78>
	}

#if (CSP_USE_RDP)
        // RDP: timeout can either be 0 (for no hang poll/check) or minimum the "connection timeout"
        if (timeout && (conn->idin.flags & CSP_FRDP) && (timeout < conn->rdp.conn_timeout)) {
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00d      	beq.n	800e7d6 <csp_read+0x42>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	791b      	ldrb	r3, [r3, #4]
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d007      	beq.n	800e7d6 <csp_read+0x42>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ca:	683a      	ldr	r2, [r7, #0]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d202      	bcs.n	800e7d6 <csp_read+0x42>
            timeout = conn->rdp.conn_timeout;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d4:	603b      	str	r3, [r7, #0]
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	f107 010c 	add.w	r1, r7, #12
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fe ff85 	bl	800d6f0 <csp_queue_dequeue>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d001      	beq.n	800e7f0 <csp_read+0x5c>
		return NULL;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	e00d      	b.n	800e80c <csp_read+0x78>
	}
#endif

#if (CSP_USE_RDP)
	/* Packet read could trigger ACK transmission */
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	791b      	ldrb	r3, [r3, #4]
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d006      	beq.n	800e80a <csp_read+0x76>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <csp_read+0x76>
		csp_rdp_check_ack(conn);
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f001 fd35 	bl	8010274 <csp_rdp_check_ack>
	}
#endif

	return packet;
 800e80a:	68fb      	ldr	r3, [r7, #12]

}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 800e814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e816:	b08f      	sub	sp, #60	; 0x3c
 800e818:	af08      	add	r7, sp, #32
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
 800e820:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d109      	bne.n	800e83c <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 800e828:	4b66      	ldr	r3, [pc, #408]	; (800e9c4 <csp_send_direct+0x1b0>)
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f000 80c0 	beq.w	800e9b2 <csp_send_direct+0x19e>
 800e832:	4965      	ldr	r1, [pc, #404]	; (800e9c8 <csp_send_direct+0x1b4>)
 800e834:	2000      	movs	r0, #0
 800e836:	f7ff fe51 	bl	800e4dc <do_csp_debug>
		goto err;
 800e83a:	e0ba      	b.n	800e9b2 <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d10f      	bne.n	800e862 <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 800e842:	4b60      	ldr	r3, [pc, #384]	; (800e9c4 <csp_send_direct+0x1b0>)
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80b5 	beq.w	800e9b6 <csp_send_direct+0x1a2>
 800e84c:	89fb      	ldrh	r3, [r7, #14]
 800e84e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800e852:	b2db      	uxtb	r3, r3
 800e854:	461a      	mov	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	495c      	ldr	r1, [pc, #368]	; (800e9cc <csp_send_direct+0x1b8>)
 800e85a:	2000      	movs	r0, #0
 800e85c:	f7ff fe3e 	bl	800e4dc <do_csp_debug>
		goto err;
 800e860:	e0a9      	b.n	800e9b6 <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 800e868:	4b56      	ldr	r3, [pc, #344]	; (800e9c4 <csp_send_direct+0x1b0>)
 800e86a:	791b      	ldrb	r3, [r3, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d037      	beq.n	800e8e0 <csp_send_direct+0xcc>
 800e870:	7bfb      	ldrb	r3, [r7, #15]
 800e872:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e876:	b2db      	uxtb	r3, r3
 800e878:	469c      	mov	ip, r3
 800e87a:	89fb      	ldrh	r3, [r7, #14]
 800e87c:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800e880:	b2db      	uxtb	r3, r3
 800e882:	469e      	mov	lr, r3
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	4619      	mov	r1, r3
 800e88e:	7b7b      	ldrb	r3, [r7, #13]
 800e890:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e894:	b2db      	uxtb	r3, r3
 800e896:	4618      	mov	r0, r3
 800e898:	7bfb      	ldrb	r3, [r7, #15]
 800e89a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	461c      	mov	r4, r3
 800e8a2:	7b3b      	ldrb	r3, [r7, #12]
 800e8a4:	461d      	mov	r5, r3
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	895b      	ldrh	r3, [r3, #10]
 800e8aa:	461e      	mov	r6, r3
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	7912      	ldrb	r2, [r2, #4]
 800e8b4:	2aff      	cmp	r2, #255	; 0xff
 800e8b6:	d002      	beq.n	800e8be <csp_send_direct+0xaa>
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	7912      	ldrb	r2, [r2, #4]
 800e8bc:	e003      	b.n	800e8c6 <csp_send_direct+0xb2>
 800e8be:	89fa      	ldrh	r2, [r7, #14]
 800e8c0:	f3c2 1204 	ubfx	r2, r2, #4, #5
 800e8c4:	b2d2      	uxtb	r2, r2
 800e8c6:	9206      	str	r2, [sp, #24]
 800e8c8:	9305      	str	r3, [sp, #20]
 800e8ca:	9604      	str	r6, [sp, #16]
 800e8cc:	9503      	str	r5, [sp, #12]
 800e8ce:	9402      	str	r4, [sp, #8]
 800e8d0:	9001      	str	r0, [sp, #4]
 800e8d2:	9100      	str	r1, [sp, #0]
 800e8d4:	4673      	mov	r3, lr
 800e8d6:	4662      	mov	r2, ip
 800e8d8:	493d      	ldr	r1, [pc, #244]	; (800e9d0 <csp_send_direct+0x1bc>)
 800e8da:	2004      	movs	r0, #4
 800e8dc:	f7ff fdfe 	bl	800e4dc <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
 800e8e8:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	4b38      	ldr	r3, [pc, #224]	; (800e9d4 <csp_send_direct+0x1c0>)
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d12d      	bne.n	800e954 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 800e8f8:	7b3b      	ldrb	r3, [r7, #12]
 800e8fa:	f003 0308 	and.w	r3, r3, #8
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d008      	beq.n	800e914 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 800e902:	4b30      	ldr	r3, [pc, #192]	; (800e9c4 <csp_send_direct+0x1b0>)
 800e904:	785b      	ldrb	r3, [r3, #1]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d046      	beq.n	800e998 <csp_send_direct+0x184>
 800e90a:	4933      	ldr	r1, [pc, #204]	; (800e9d8 <csp_send_direct+0x1c4>)
 800e90c:	2001      	movs	r0, #1
 800e90e:	f7ff fde5 	bl	800e4dc <do_csp_debug>
			goto tx_err;
 800e912:	e041      	b.n	800e998 <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 800e914:	7b3b      	ldrb	r3, [r7, #12]
 800e916:	f003 0301 	and.w	r3, r3, #1
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00c      	beq.n	800e938 <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 800e91e:	4b29      	ldr	r3, [pc, #164]	; (800e9c4 <csp_send_direct+0x1b0>)
 800e920:	785b      	ldrb	r3, [r3, #1]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <csp_send_direct+0x11a>
 800e926:	492d      	ldr	r1, [pc, #180]	; (800e9dc <csp_send_direct+0x1c8>)
 800e928:	2001      	movs	r0, #1
 800e92a:	f7ff fdd7 	bl	800e4dc <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 800e92e:	7b3b      	ldrb	r3, [r7, #12]
 800e930:	f023 0301 	bic.w	r3, r3, #1
 800e934:	b2db      	uxtb	r3, r3
 800e936:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 800e938:	7b3b      	ldrb	r3, [r7, #12]
 800e93a:	f003 0304 	and.w	r3, r3, #4
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d008      	beq.n	800e954 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 800e942:	4b20      	ldr	r3, [pc, #128]	; (800e9c4 <csp_send_direct+0x1b0>)
 800e944:	785b      	ldrb	r3, [r3, #1]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d028      	beq.n	800e99c <csp_send_direct+0x188>
 800e94a:	4925      	ldr	r1, [pc, #148]	; (800e9e0 <csp_send_direct+0x1cc>)
 800e94c:	2001      	movs	r0, #1
 800e94e:	f7ff fdc5 	bl	800e4dc <do_csp_debug>
			goto tx_err;
 800e952:	e023      	b.n	800e99c <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	895b      	ldrh	r3, [r3, #10]
 800e958:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	8a1b      	ldrh	r3, [r3, #16]
 800e95e:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 800e960:	8a3b      	ldrh	r3, [r7, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <csp_send_direct+0x15a>
 800e966:	8a7a      	ldrh	r2, [r7, #18]
 800e968:	8a3b      	ldrh	r3, [r7, #16]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d818      	bhi.n	800e9a0 <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	68b9      	ldr	r1, [r7, #8]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	4798      	blx	r3
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d112      	bne.n	800e9a4 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	695b      	ldr	r3, [r3, #20]
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e98c:	8a7b      	ldrh	r3, [r7, #18]
 800e98e:	441a      	add	r2, r3
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	631a      	str	r2, [r3, #48]	; 0x30
	return CSP_ERR_NONE;
 800e994:	2300      	movs	r3, #0
 800e996:	e011      	b.n	800e9bc <csp_send_direct+0x1a8>
			goto tx_err;
 800e998:	bf00      	nop
 800e99a:	e004      	b.n	800e9a6 <csp_send_direct+0x192>
			goto tx_err;
 800e99c:	bf00      	nop
 800e99e:	e002      	b.n	800e9a6 <csp_send_direct+0x192>
		goto tx_err;
 800e9a0:	bf00      	nop
 800e9a2:	e000      	b.n	800e9a6 <csp_send_direct+0x192>
		goto tx_err;
 800e9a4:	bf00      	nop

tx_err:
	ifout->tx_error++;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	69db      	ldr	r3, [r3, #28]
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	61da      	str	r2, [r3, #28]
 800e9b0:	e002      	b.n	800e9b8 <csp_send_direct+0x1a4>
		goto err;
 800e9b2:	bf00      	nop
 800e9b4:	e000      	b.n	800e9b8 <csp_send_direct+0x1a4>
		goto err;
 800e9b6:	bf00      	nop
err:
	return CSP_ERR_TX;
 800e9b8:	f06f 0309 	mvn.w	r3, #9

}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	371c      	adds	r7, #28
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9c4:	2000011c 	.word	0x2000011c
 800e9c8:	08014e1c 	.word	0x08014e1c
 800e9cc:	08014e44 	.word	0x08014e44
 800e9d0:	08014e64 	.word	0x08014e64
 800e9d4:	2000aa24 	.word	0x2000aa24
 800e9d8:	08014ea8 	.word	0x08014ea8
 800e9dc:	08014f08 	.word	0x08014f08
 800e9e0:	08014f70 	.word	0x08014f70

0800e9e4 <csp_send>:

int csp_send(csp_conn_t * conn, csp_packet_t * packet, uint32_t timeout) {
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]

	if ((conn == NULL) || (packet == NULL) || (conn->state != CONN_OPEN)) {
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d006      	beq.n	800ea04 <csp_send+0x20>
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d003      	beq.n	800ea04 <csp_send+0x20>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	785b      	ldrb	r3, [r3, #1]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d009      	beq.n	800ea18 <csp_send+0x34>
		csp_log_error("Invalid call to csp_send");
 800ea04:	4b19      	ldr	r3, [pc, #100]	; (800ea6c <csp_send+0x88>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <csp_send+0x30>
 800ea0c:	4918      	ldr	r1, [pc, #96]	; (800ea70 <csp_send+0x8c>)
 800ea0e:	2000      	movs	r0, #0
 800ea10:	f7ff fd64 	bl	800e4dc <do_csp_debug>
		return 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	e024      	b.n	800ea62 <csp_send+0x7e>
	}

#if (CSP_USE_RDP)
	if (conn->idout.flags & CSP_FRDP) {
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	7a1b      	ldrb	r3, [r3, #8]
 800ea1c:	f003 0302 	and.w	r3, r3, #2
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d008      	beq.n	800ea36 <csp_send+0x52>
		if (csp_rdp_send(conn, packet) != CSP_ERR_NONE) {
 800ea24:	68b9      	ldr	r1, [r7, #8]
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f002 faec 	bl	8011004 <csp_rdp_send>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <csp_send+0x52>
			return 0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e015      	b.n	800ea62 <csp_send+0x7e>
		}
	}
#endif

	int ret = csp_send_direct(conn->idout, packet, csp_rtable_find_route(conn->idout.dst), timeout);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	895b      	ldrh	r3, [r3, #10]
 800ea3a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	4618      	mov	r0, r3
 800ea42:	f000 fe61 	bl	800f708 <csp_rtable_find_route>
 800ea46:	4602      	mov	r2, r0
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	68b9      	ldr	r1, [r7, #8]
 800ea4e:	6880      	ldr	r0, [r0, #8]
 800ea50:	f7ff fee0 	bl	800e814 <csp_send_direct>
 800ea54:	6178      	str	r0, [r7, #20]

	return (ret == CSP_ERR_NONE) ? 1 : 0;
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	bf0c      	ite	eq
 800ea5c:	2301      	moveq	r3, #1
 800ea5e:	2300      	movne	r3, #0
 800ea60:	b2db      	uxtb	r3, r3

}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	2000011c 	.word	0x2000011c
 800ea70:	08014fd4 	.word	0x08014fd4

0800ea74 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 800ea7c:	4b18      	ldr	r3, [pc, #96]	; (800eae0 <csp_port_get_socket+0x6c>)
 800ea7e:	7cdb      	ldrb	r3, [r3, #19]
 800ea80:	461a      	mov	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d901      	bls.n	800ea8c <csp_port_get_socket+0x18>
		return NULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	e022      	b.n	800ead2 <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 800ea8c:	4b15      	ldr	r3, [pc, #84]	; (800eae4 <csp_port_get_socket+0x70>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	4413      	add	r3, r2
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d106      	bne.n	800eaaa <csp_port_get_socket+0x36>
		return ports[port].socket;
 800ea9c:	4b11      	ldr	r3, [pc, #68]	; (800eae4 <csp_port_get_socket+0x70>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	00db      	lsls	r3, r3, #3
 800eaa4:	4413      	add	r3, r2
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	e013      	b.n	800ead2 <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 800eaaa:	4b0e      	ldr	r3, [pc, #56]	; (800eae4 <csp_port_get_socket+0x70>)
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	4b0c      	ldr	r3, [pc, #48]	; (800eae0 <csp_port_get_socket+0x6c>)
 800eab0:	7cdb      	ldrb	r3, [r3, #19]
 800eab2:	3301      	adds	r3, #1
 800eab4:	00db      	lsls	r3, r3, #3
 800eab6:	4413      	add	r3, r2
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d108      	bne.n	800ead0 <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 800eabe:	4b09      	ldr	r3, [pc, #36]	; (800eae4 <csp_port_get_socket+0x70>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	4b07      	ldr	r3, [pc, #28]	; (800eae0 <csp_port_get_socket+0x6c>)
 800eac4:	7cdb      	ldrb	r3, [r3, #19]
 800eac6:	3301      	adds	r3, #1
 800eac8:	00db      	lsls	r3, r3, #3
 800eaca:	4413      	add	r3, r2
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	e000      	b.n	800ead2 <csp_port_get_socket+0x5e>
	}

	return NULL;
 800ead0:	2300      	movs	r3, #0

}
 800ead2:	4618      	mov	r0, r3
 800ead4:	370c      	adds	r7, #12
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	2000aa24 	.word	0x2000aa24
 800eae4:	2000aa44 	.word	0x2000aa44

0800eae8 <csp_port_init>:

int csp_port_init(void) {
 800eae8:	b580      	push	{r7, lr}
 800eaea:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 800eaec:	4b09      	ldr	r3, [pc, #36]	; (800eb14 <csp_port_init+0x2c>)
 800eaee:	7cdb      	ldrb	r3, [r3, #19]
 800eaf0:	3302      	adds	r3, #2
 800eaf2:	2108      	movs	r1, #8
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7fe fd95 	bl	800d624 <csp_calloc>
 800eafa:	4603      	mov	r3, r0
 800eafc:	4a06      	ldr	r2, [pc, #24]	; (800eb18 <csp_port_init+0x30>)
 800eafe:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 800eb00:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <csp_port_init+0x30>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d102      	bne.n	800eb0e <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 800eb08:	f04f 33ff 	mov.w	r3, #4294967295
 800eb0c:	e000      	b.n	800eb10 <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 800eb0e:	2300      	movs	r3, #0

}
 800eb10:	4618      	mov	r0, r3
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	2000aa24 	.word	0x2000aa24
 800eb18:	2000aa44 	.word	0x2000aa44

0800eb1c <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 800eb22:	2300      	movs	r3, #0
 800eb24:	607b      	str	r3, [r7, #4]
 800eb26:	e01c      	b.n	800eb62 <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 800eb28:	4a12      	ldr	r2, [pc, #72]	; (800eb74 <csp_qfifo_init+0x58>)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d113      	bne.n	800eb5c <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 800eb34:	4b10      	ldr	r3, [pc, #64]	; (800eb78 <csp_qfifo_init+0x5c>)
 800eb36:	7c9b      	ldrb	r3, [r3, #18]
 800eb38:	2108      	movs	r1, #8
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7fe fd98 	bl	800d670 <csp_queue_create>
 800eb40:	4602      	mov	r2, r0
 800eb42:	490c      	ldr	r1, [pc, #48]	; (800eb74 <csp_qfifo_init+0x58>)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 800eb4a:	4a0a      	ldr	r2, [pc, #40]	; (800eb74 <csp_qfifo_init+0x58>)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d102      	bne.n	800eb5c <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 800eb56:	f04f 33ff 	mov.w	r3, #4294967295
 800eb5a:	e006      	b.n	800eb6a <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	607b      	str	r3, [r7, #4]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	dddf      	ble.n	800eb28 <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 800eb68:	2300      	movs	r3, #0

}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	2000aa48 	.word	0x2000aa48
 800eb78:	2000aa24 	.word	0x2000aa24

0800eb7c <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 800eb84:	4b08      	ldr	r3, [pc, #32]	; (800eba8 <csp_qfifo_read+0x2c>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2264      	movs	r2, #100	; 0x64
 800eb8a:	6879      	ldr	r1, [r7, #4]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7fe fdaf 	bl	800d6f0 <csp_queue_dequeue>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d002      	beq.n	800eb9e <csp_qfifo_read+0x22>
		return CSP_ERR_TIMEDOUT;
 800eb98:	f06f 0302 	mvn.w	r3, #2
 800eb9c:	e000      	b.n	800eba0 <csp_qfifo_read+0x24>
#endif

	return CSP_ERR_NONE;
 800eb9e:	2300      	movs	r3, #0

}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	2000aa48 	.word	0x2000aa48

0800ebac <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10b      	bne.n	800ebd6 <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d15f      	bne.n	800ec84 <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 800ebc4:	4b31      	ldr	r3, [pc, #196]	; (800ec8c <csp_qfifo_write+0xe0>)
 800ebc6:	785b      	ldrb	r3, [r3, #1]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d05b      	beq.n	800ec84 <csp_qfifo_write+0xd8>
 800ebcc:	4930      	ldr	r1, [pc, #192]	; (800ec90 <csp_qfifo_write+0xe4>)
 800ebce:	2001      	movs	r0, #1
 800ebd0:	f7ff fc84 	bl	800e4dc <do_csp_debug>
		}
		return;
 800ebd4:	e056      	b.n	800ec84 <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d115      	bne.n	800ec08 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d107      	bne.n	800ebf2 <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 800ebe2:	4b2a      	ldr	r3, [pc, #168]	; (800ec8c <csp_qfifo_write+0xe0>)
 800ebe4:	785b      	ldrb	r3, [r3, #1]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d003      	beq.n	800ebf2 <csp_qfifo_write+0x46>
 800ebea:	492a      	ldr	r1, [pc, #168]	; (800ec94 <csp_qfifo_write+0xe8>)
 800ebec:	2001      	movs	r0, #1
 800ebee:	f7ff fc75 	bl	800e4dc <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d103      	bne.n	800ec00 <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f7fe ffcf 	bl	800db9c <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 800ebfe:	e042      	b.n	800ec86 <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f7fe ff91 	bl	800db28 <csp_buffer_free_isr>
		return;
 800ec06:	e03e      	b.n	800ec86 <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d10b      	bne.n	800ec32 <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 800ec1a:	4a1f      	ldr	r2, [pc, #124]	; (800ec98 <csp_qfifo_write+0xec>)
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec22:	f107 0110 	add.w	r1, r7, #16
 800ec26:	2200      	movs	r2, #0
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe fd3c 	bl	800d6a6 <csp_queue_enqueue>
 800ec2e:	61f8      	str	r0, [r7, #28]
 800ec30:	e00a      	b.n	800ec48 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 800ec32:	4a19      	ldr	r2, [pc, #100]	; (800ec98 <csp_qfifo_write+0xec>)
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec3a:	f107 0110 	add.w	r1, r7, #16
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe fd44 	bl	800d6ce <csp_queue_enqueue_isr>
 800ec46:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d01b      	beq.n	800ec86 <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d107      	bne.n	800ec64 <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 800ec54:	4b0d      	ldr	r3, [pc, #52]	; (800ec8c <csp_qfifo_write+0xe0>)
 800ec56:	785b      	ldrb	r3, [r3, #1]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <csp_qfifo_write+0xb8>
 800ec5c:	490f      	ldr	r1, [pc, #60]	; (800ec9c <csp_qfifo_write+0xf0>)
 800ec5e:	2001      	movs	r0, #1
 800ec60:	f7ff fc3c 	bl	800e4dc <do_csp_debug>
		}
		iface->drop++;
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec68:	1c5a      	adds	r2, r3, #1
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	625a      	str	r2, [r3, #36]	; 0x24
		if (pxTaskWoken == NULL)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d103      	bne.n	800ec7c <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7fe ff91 	bl	800db9c <csp_buffer_free>
 800ec7a:	e004      	b.n	800ec86 <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f7fe ff53 	bl	800db28 <csp_buffer_free_isr>
 800ec82:	e000      	b.n	800ec86 <csp_qfifo_write+0xda>
		return;
 800ec84:	bf00      	nop
	}

}
 800ec86:	3720      	adds	r7, #32
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	2000011c 	.word	0x2000011c
 800ec90:	08015148 	.word	0x08015148
 800ec94:	08015170 	.word	0x08015170
 800ec98:	2000aa48 	.word	0x2000aa48
 800ec9c:	0801519c 	.word	0x0801519c

0800eca0 <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	7b1b      	ldrb	r3, [r3, #12]
 800ecae:	f003 0304 	and.w	r3, r3, #4
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00f      	beq.n	800ecd6 <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 800ecb6:	4b15      	ldr	r3, [pc, #84]	; (800ed0c <csp_route_check_options+0x6c>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <csp_route_check_options+0x26>
 800ecbe:	4914      	ldr	r1, [pc, #80]	; (800ed10 <csp_route_check_options+0x70>)
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	f7ff fc0b 	bl	800e4dc <do_csp_debug>
		iface->autherr++;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 800ecd0:	f06f 0304 	mvn.w	r3, #4
 800ecd4:	e016      	b.n	800ed04 <csp_route_check_options+0x64>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	7b1b      	ldrb	r3, [r3, #12]
 800ecda:	f003 0308 	and.w	r3, r3, #8
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00f      	beq.n	800ed02 <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 800ece2:	4b0a      	ldr	r3, [pc, #40]	; (800ed0c <csp_route_check_options+0x6c>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d003      	beq.n	800ecf2 <csp_route_check_options+0x52>
 800ecea:	490a      	ldr	r1, [pc, #40]	; (800ed14 <csp_route_check_options+0x74>)
 800ecec:	2000      	movs	r0, #0
 800ecee:	f7ff fbf5 	bl	800e4dc <do_csp_debug>
		iface->autherr++;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf6:	1c5a      	adds	r2, r3, #1
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 800ecfc:	f06f 0304 	mvn.w	r3, #4
 800ed00:	e000      	b.n	800ed04 <csp_route_check_options+0x64>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
		iface->rx_error++;
		return CSP_ERR_NOTSUP;
	}
#endif
	return CSP_ERR_NONE;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	2000011c 	.word	0x2000011c
 800ed10:	080151d0 	.word	0x080151d0
 800ed14:	08015230 	.word	0x08015230

0800ed18 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	7b1b      	ldrb	r3, [r3, #12]
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d01a      	beq.n	800ed66 <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	895b      	ldrh	r3, [r3, #10]
 800ed34:	2b03      	cmp	r3, #3
 800ed36:	d80f      	bhi.n	800ed58 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 800ed38:	4b21      	ldr	r3, [pc, #132]	; (800edc0 <csp_route_security_check+0xa8>)
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d003      	beq.n	800ed48 <csp_route_security_check+0x30>
 800ed40:	4920      	ldr	r1, [pc, #128]	; (800edc4 <csp_route_security_check+0xac>)
 800ed42:	2000      	movs	r0, #0
 800ed44:	f7ff fbca 	bl	800e4dc <do_csp_debug>
			iface->rx_error++;
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	6a1b      	ldr	r3, [r3, #32]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 800ed52:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800ed56:	e02f      	b.n	800edb8 <csp_route_security_check+0xa0>
		}
		packet->length -= sizeof(uint32_t);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	895b      	ldrh	r3, [r3, #10]
 800ed5c:	3b04      	subs	r3, #4
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	815a      	strh	r2, [r3, #10]
 800ed64:	e00c      	b.n	800ed80 <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d007      	beq.n	800ed80 <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 800ed70:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <csp_route_security_check+0xa8>)
 800ed72:	785b      	ldrb	r3, [r3, #1]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d003      	beq.n	800ed80 <csp_route_security_check+0x68>
 800ed78:	4913      	ldr	r1, [pc, #76]	; (800edc8 <csp_route_security_check+0xb0>)
 800ed7a:	2001      	movs	r0, #1
 800ed7c:	f7ff fbae 	bl	800e4dc <do_csp_debug>
	}
#endif

#if (CSP_USE_RDP)
	/* RDP packet */
	if (!(packet->id.flags & CSP_FRDP)) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	7b1b      	ldrb	r3, [r3, #12]
 800ed84:	f003 0302 	and.w	r3, r3, #2
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d114      	bne.n	800edb6 <csp_route_security_check+0x9e>
		if (security_opts & CSP_SO_RDPREQ) {
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f003 0301 	and.w	r3, r3, #1
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d00f      	beq.n	800edb6 <csp_route_security_check+0x9e>
			csp_log_warn("Received packet without RDP header. Discarding packet");
 800ed96:	4b0a      	ldr	r3, [pc, #40]	; (800edc0 <csp_route_security_check+0xa8>)
 800ed98:	785b      	ldrb	r3, [r3, #1]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d003      	beq.n	800eda6 <csp_route_security_check+0x8e>
 800ed9e:	490b      	ldr	r1, [pc, #44]	; (800edcc <csp_route_security_check+0xb4>)
 800eda0:	2001      	movs	r0, #1
 800eda2:	f7ff fb9b 	bl	800e4dc <do_csp_debug>
			iface->rx_error++;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	6a1b      	ldr	r3, [r3, #32]
 800edaa:	1c5a      	adds	r2, r3, #1
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	621a      	str	r2, [r3, #32]
			return CSP_ERR_INVAL;
 800edb0:	f06f 0301 	mvn.w	r3, #1
 800edb4:	e000      	b.n	800edb8 <csp_route_security_check+0xa0>
		}
	}
#endif

	return CSP_ERR_NONE;
 800edb6:	2300      	movs	r3, #0

}
 800edb8:	4618      	mov	r0, r3
 800edba:	3710      	adds	r7, #16
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	2000011c 	.word	0x2000011c
 800edc4:	08015288 	.word	0x08015288
 800edc8:	080152b4 	.word	0x080152b4
 800edcc:	08015310 	.word	0x08015310

0800edd0 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 800edd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd2:	b091      	sub	sp, #68	; 0x44
 800edd4:	af06      	add	r7, sp, #24
 800edd6:	6078      	str	r0, [r7, #4]
	csp_conn_t * conn;
	csp_socket_t * socket;

#if (CSP_USE_RDP)
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
 800edd8:	f7fe ff92 	bl	800dd00 <csp_conn_check_timeouts>
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 800eddc:	f107 0310 	add.w	r3, r7, #16
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7ff fecb 	bl	800eb7c <csp_qfifo_read>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <csp_route_work+0x22>
		return CSP_ERR_TIMEDOUT;
 800edec:	f06f 0302 	mvn.w	r3, #2
 800edf0:	e187      	b.n	800f102 <csp_route_work+0x332>
	}

	packet = input.packet;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	60fb      	str	r3, [r7, #12]
	if (packet == NULL) {
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d102      	bne.n	800ee02 <csp_route_work+0x32>
		return CSP_ERR_TIMEDOUT;
 800edfc:	f06f 0302 	mvn.w	r3, #2
 800ee00:	e17f      	b.n	800f102 <csp_route_work+0x332>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 800ee02:	4ba3      	ldr	r3, [pc, #652]	; (800f090 <csp_route_work+0x2c0>)
 800ee04:	791b      	ldrb	r3, [r3, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d031      	beq.n	800ee6e <csp_route_work+0x9e>
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	7bdb      	ldrb	r3, [r3, #15]
 800ee0e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	461e      	mov	r6, r3
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	89db      	ldrh	r3, [r3, #14]
 800ee1a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	469c      	mov	ip, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	7b5b      	ldrb	r3, [r3, #13]
 800ee32:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	4619      	mov	r1, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	7bdb      	ldrb	r3, [r3, #15]
 800ee3e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	4618      	mov	r0, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	7b1b      	ldrb	r3, [r3, #12]
 800ee4a:	461c      	mov	r4, r3
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	895b      	ldrh	r3, [r3, #10]
 800ee50:	461d      	mov	r5, r3
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	9305      	str	r3, [sp, #20]
 800ee58:	9504      	str	r5, [sp, #16]
 800ee5a:	9403      	str	r4, [sp, #12]
 800ee5c:	9002      	str	r0, [sp, #8]
 800ee5e:	9101      	str	r1, [sp, #4]
 800ee60:	9200      	str	r2, [sp, #0]
 800ee62:	4663      	mov	r3, ip
 800ee64:	4632      	mov	r2, r6
 800ee66:	498b      	ldr	r1, [pc, #556]	; (800f094 <csp_route_work+0x2c4>)
 800ee68:	2004      	movs	r0, #4
 800ee6a:	f7ff fb37 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	699a      	ldr	r2, [r3, #24]
 800ee72:	3201      	adds	r2, #1
 800ee74:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	895b      	ldrh	r3, [r3, #10]
 800ee7e:	4619      	mov	r1, r3
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	440a      	add	r2, r1
 800ee84:	635a      	str	r2, [r3, #52]	; 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	89db      	ldrh	r3, [r3, #14]
 800ee8a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	461a      	mov	r2, r3
 800ee92:	4b81      	ldr	r3, [pc, #516]	; (800f098 <csp_route_work+0x2c8>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d03a      	beq.n	800ef10 <csp_route_work+0x140>
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	89db      	ldrh	r3, [r3, #14]
 800ee9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 800eea8:	d032      	beq.n	800ef10 <csp_route_work+0x140>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	89db      	ldrh	r3, [r3, #14]
 800eeae:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 fc27 	bl	800f708 <csp_rtable_find_route>
 800eeba:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d008      	beq.n	800eed4 <csp_route_work+0x104>
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d109      	bne.n	800eee0 <csp_route_work+0x110>
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	7c9b      	ldrb	r3, [r3, #18]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <csp_route_work+0x110>
			csp_buffer_free(packet);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fe fe60 	bl	800db9c <csp_buffer_free>
			return CSP_ERR_NONE;
 800eedc:	2300      	movs	r3, #0
 800eede:	e110      	b.n	800f102 <csp_route_work+0x332>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	68f9      	ldr	r1, [r7, #12]
 800eee4:	2300      	movs	r3, #0
 800eee6:	6a3a      	ldr	r2, [r7, #32]
 800eee8:	68c0      	ldr	r0, [r0, #12]
 800eeea:	f7ff fc93 	bl	800e814 <csp_send_direct>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00b      	beq.n	800ef0c <csp_route_work+0x13c>
			csp_log_warn("Router failed to send");
 800eef4:	4b66      	ldr	r3, [pc, #408]	; (800f090 <csp_route_work+0x2c0>)
 800eef6:	785b      	ldrb	r3, [r3, #1]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d003      	beq.n	800ef04 <csp_route_work+0x134>
 800eefc:	4967      	ldr	r1, [pc, #412]	; (800f09c <csp_route_work+0x2cc>)
 800eefe:	2001      	movs	r0, #1
 800ef00:	f7ff faec 	bl	800e4dc <do_csp_debug>
			csp_buffer_free(packet);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fe48 	bl	800db9c <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	e0f8      	b.n	800f102 <csp_route_work+0x332>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	4611      	mov	r1, r2
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff fec2 	bl	800eca0 <csp_route_check_options>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d005      	beq.n	800ef2e <csp_route_work+0x15e>
		csp_buffer_free(packet);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fe fe39 	bl	800db9c <csp_buffer_free>
		return CSP_ERR_NONE;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e0e9      	b.n	800f102 <csp_route_work+0x332>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff fd9b 	bl	800ea74 <csp_port_get_socket>
 800ef3e:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d030      	beq.n	800efa8 <csp_route_work+0x1d8>
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d02a      	beq.n	800efa8 <csp_route_work+0x1d8>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	6939      	ldr	r1, [r7, #16]
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7ff fedc 	bl	800ed18 <csp_route_security_check>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	da05      	bge.n	800ef72 <csp_route_work+0x1a2>
			csp_buffer_free(packet);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7fe fe17 	bl	800db9c <csp_buffer_free>
			return CSP_ERR_NONE;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e0c7      	b.n	800f102 <csp_route_work+0x332>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	f107 010c 	add.w	r1, r7, #12
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fe fb92 	bl	800d6a6 <csp_queue_enqueue>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d00d      	beq.n	800efa4 <csp_route_work+0x1d4>
			csp_log_error("Conn-less socket queue full");
 800ef88:	4b41      	ldr	r3, [pc, #260]	; (800f090 <csp_route_work+0x2c0>)
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d003      	beq.n	800ef98 <csp_route_work+0x1c8>
 800ef90:	4943      	ldr	r1, [pc, #268]	; (800f0a0 <csp_route_work+0x2d0>)
 800ef92:	2000      	movs	r0, #0
 800ef94:	f7ff faa2 	bl	800e4dc <do_csp_debug>
			csp_buffer_free(packet);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fe fdfe 	bl	800db9c <csp_buffer_free>
			return CSP_ERR_NONE;
 800efa0:	2300      	movs	r3, #0
 800efa2:	e0ae      	b.n	800f102 <csp_route_work+0x332>
		}
		return CSP_ERR_NONE;
 800efa4:	2300      	movs	r3, #0
 800efa6:	e0ac      	b.n	800f102 <csp_route_work+0x332>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	493d      	ldr	r1, [pc, #244]	; (800f0a4 <csp_route_work+0x2d4>)
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fe fffc 	bl	800dfac <csp_conn_find>
 800efb4:	6278      	str	r0, [r7, #36]	; 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d177      	bne.n	800f0ac <csp_route_work+0x2dc>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d105      	bne.n	800efce <csp_route_work+0x1fe>
			csp_buffer_free(packet);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fe fde9 	bl	800db9c <csp_buffer_free>
			return CSP_ERR_NONE;
 800efca:	2300      	movs	r3, #0
 800efcc:	e099      	b.n	800f102 <csp_route_work+0x332>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	699b      	ldr	r3, [r3, #24]
 800efd2:	6939      	ldr	r1, [r7, #16]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fe9e 	bl	800ed18 <csp_route_security_check>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	da05      	bge.n	800efee <csp_route_work+0x21e>
			csp_buffer_free(packet);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7fe fdd9 	bl	800db9c <csp_buffer_free>
			return CSP_ERR_NONE;
 800efea:	2300      	movs	r3, #0
 800efec:	e089      	b.n	800f102 <csp_route_work+0x332>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	7bdb      	ldrb	r3, [r3, #15]
 800eff2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	7afb      	ldrb	r3, [r7, #11]
 800effa:	f362 1387 	bfi	r3, r2, #6, #2
 800effe:	72fb      	strb	r3, [r7, #11]
		idout.src   = csp_conf.address;
 800f000:	4b25      	ldr	r3, [pc, #148]	; (800f098 <csp_route_work+0x2c8>)
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	f003 031f 	and.w	r3, r3, #31
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	7afb      	ldrb	r3, [r7, #11]
 800f00c:	f362 0345 	bfi	r3, r2, #1, #5
 800f010:	72fb      	strb	r3, [r7, #11]

		idout.dst   = packet->id.src;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	7bdb      	ldrb	r3, [r3, #15]
 800f016:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	897b      	ldrh	r3, [r7, #10]
 800f01e:	f362 1308 	bfi	r3, r2, #4, #5
 800f022:	817b      	strh	r3, [r7, #10]
		idout.dport = packet->id.sport;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	7b5b      	ldrb	r3, [r3, #13]
 800f028:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	f362 3393 	bfi	r3, r2, #14, #6
 800f034:	60bb      	str	r3, [r7, #8]
		idout.sport = packet->id.dport;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	7a7b      	ldrb	r3, [r7, #9]
 800f042:	f362 0305 	bfi	r3, r2, #0, #6
 800f046:	727b      	strb	r3, [r7, #9]
		idout.flags = packet->id.flags;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	7b1b      	ldrb	r3, [r3, #12]
 800f04c:	723b      	strb	r3, [r7, #8]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	68b9      	ldr	r1, [r7, #8]
 800f052:	68d8      	ldr	r0, [r3, #12]
 800f054:	f7ff f890 	bl	800e178 <csp_conn_new>
 800f058:	6278      	str	r0, [r7, #36]	; 0x24

		if (!conn) {
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10d      	bne.n	800f07c <csp_route_work+0x2ac>
			csp_log_error("No more connections available");
 800f060:	4b0b      	ldr	r3, [pc, #44]	; (800f090 <csp_route_work+0x2c0>)
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d003      	beq.n	800f070 <csp_route_work+0x2a0>
 800f068:	490f      	ldr	r1, [pc, #60]	; (800f0a8 <csp_route_work+0x2d8>)
 800f06a:	2000      	movs	r0, #0
 800f06c:	f7ff fa36 	bl	800e4dc <do_csp_debug>
			csp_buffer_free(packet);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4618      	mov	r0, r3
 800f074:	f7fe fd92 	bl	800db9c <csp_buffer_free>
			return CSP_ERR_NONE;
 800f078:	2300      	movs	r3, #0
 800f07a:	e042      	b.n	800f102 <csp_route_work+0x332>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	691a      	ldr	r2, [r3, #16]
 800f080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f082:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	699a      	ldr	r2, [r3, #24]
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	619a      	str	r2, [r3, #24]
 800f08c:	e01e      	b.n	800f0cc <csp_route_work+0x2fc>
 800f08e:	bf00      	nop
 800f090:	2000011c 	.word	0x2000011c
 800f094:	08015348 	.word	0x08015348
 800f098:	2000aa24 	.word	0x2000aa24
 800f09c:	08015388 	.word	0x08015388
 800f0a0:	080153a0 	.word	0x080153a0
 800f0a4:	3fffff00 	.word	0x3fffff00
 800f0a8:	080153bc 	.word	0x080153bc

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ae:	699b      	ldr	r3, [r3, #24]
 800f0b0:	6939      	ldr	r1, [r7, #16]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7ff fe2f 	bl	800ed18 <csp_route_security_check>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	da05      	bge.n	800f0cc <csp_route_work+0x2fc>
			csp_buffer_free(packet);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe fd6a 	bl	800db9c <csp_buffer_free>
			return CSP_ERR_NONE;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	e01a      	b.n	800f102 <csp_route_work+0x332>

	}

#if (CSP_USE_RDP)
	/* Pass packet to RDP module */
	if (packet->id.flags & CSP_FRDP) {
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	7b1b      	ldrb	r3, [r3, #12]
 800f0d0:	f003 0302 	and.w	r3, r3, #2
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00e      	beq.n	800f0f6 <csp_route_work+0x326>
		bool close_connection = csp_rdp_new_packet(conn, packet);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0de:	f001 fa55 	bl	801058c <csp_rdp_new_packet>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	76fb      	strb	r3, [r7, #27]
		if (close_connection) {
 800f0e6:	7efb      	ldrb	r3, [r7, #27]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <csp_route_work+0x322>
			csp_close(conn);
 800f0ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0ee:	f7ff f862 	bl	800e1b6 <csp_close>
		}
		return CSP_ERR_NONE;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e005      	b.n	800f102 <csp_route_work+0x332>
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0fc:	f002 f9d8 	bl	80114b0 <csp_udp_new_packet>
	return CSP_ERR_NONE;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	372c      	adds	r7, #44	; 0x2c
 800f106:	46bd      	mov	sp, r7
 800f108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f10a:	bf00      	nop

0800f10c <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 800f114:	2064      	movs	r0, #100	; 0x64
 800f116:	f7ff fe5b 	bl	800edd0 <csp_route_work>
 800f11a:	e7fb      	b.n	800f114 <csp_task_router+0x8>

0800f11c <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b086      	sub	sp, #24
 800f120:	af02      	add	r7, sp, #8
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 800f126:	2300      	movs	r3, #0
 800f128:	9301      	str	r3, [sp, #4]
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	2300      	movs	r3, #0
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	490c      	ldr	r1, [pc, #48]	; (800f164 <csp_route_start_task+0x48>)
 800f134:	480c      	ldr	r0, [pc, #48]	; (800f168 <csp_route_start_task+0x4c>)
 800f136:	f7fe fbe7 	bl	800d908 <csp_thread_create>
 800f13a:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00a      	beq.n	800f158 <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <csp_route_start_task+0x50>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d004      	beq.n	800f154 <csp_route_start_task+0x38>
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	4908      	ldr	r1, [pc, #32]	; (800f170 <csp_route_start_task+0x54>)
 800f14e:	2000      	movs	r0, #0
 800f150:	f7ff f9c4 	bl	800e4dc <do_csp_debug>
		return ret;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	e000      	b.n	800f15a <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 800f158:	2300      	movs	r3, #0

}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	080153dc 	.word	0x080153dc
 800f168:	0800f10d 	.word	0x0800f10d
 800f16c:	2000011c 	.word	0x2000011c
 800f170:	080153e0 	.word	0x080153e0

0800f174 <csp_ping>:

#include <csp/csp_cmp.h>
#include <csp/csp_endian.h>
#include <csp/arch/csp_time.h>

int csp_ping(uint8_t node, uint32_t timeout, unsigned int size, uint8_t conn_options) {
 800f174:	b580      	push	{r7, lr}
 800f176:	b08c      	sub	sp, #48	; 0x30
 800f178:	af02      	add	r7, sp, #8
 800f17a:	60b9      	str	r1, [r7, #8]
 800f17c:	607a      	str	r2, [r7, #4]
 800f17e:	461a      	mov	r2, r3
 800f180:	4603      	mov	r3, r0
 800f182:	73fb      	strb	r3, [r7, #15]
 800f184:	4613      	mov	r3, r2
 800f186:	73bb      	strb	r3, [r7, #14]

	unsigned int i;
	uint32_t start, time, status = 0;
 800f188:	2300      	movs	r3, #0
 800f18a:	623b      	str	r3, [r7, #32]

	/* Counter */
	start = csp_get_ms();
 800f18c:	f7fe fbe1 	bl	800d952 <csp_get_ms>
 800f190:	61b8      	str	r0, [r7, #24]

	/* Open connection */
	csp_conn_t * conn = csp_connect(CSP_PRIO_NORM, node, CSP_PING, timeout, conn_options);
 800f192:	7bbb      	ldrb	r3, [r7, #14]
 800f194:	7bf9      	ldrb	r1, [r7, #15]
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2201      	movs	r2, #1
 800f19c:	2002      	movs	r0, #2
 800f19e:	f7ff f88f 	bl	800e2c0 <csp_connect>
 800f1a2:	6178      	str	r0, [r7, #20]
	if (conn == NULL)
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d102      	bne.n	800f1b0 <csp_ping+0x3c>
		return -1;
 800f1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ae:	e05d      	b.n	800f26c <csp_ping+0xf8>

	/* Prepare data */
	csp_packet_t * packet = csp_buffer_get(size);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7fe fc57 	bl	800da64 <csp_buffer_get>
 800f1b6:	61f8      	str	r0, [r7, #28]
	if (packet == NULL)
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d03c      	beq.n	800f238 <csp_ping+0xc4>
		goto out;

	/* Set data to increasing numbers */
	packet->length = size;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	815a      	strh	r2, [r3, #10]
	for (i = 0; i < size; i++)
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800f1ca:	e00a      	b.n	800f1e2 <csp_ping+0x6e>
		packet->data[i] = i;
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	b2d9      	uxtb	r1, r3
 800f1d0:	69fa      	ldr	r2, [r7, #28]
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d4:	4413      	add	r3, r2
 800f1d6:	3310      	adds	r3, #16
 800f1d8:	460a      	mov	r2, r1
 800f1da:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	3301      	adds	r3, #1
 800f1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800f1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d3f0      	bcc.n	800f1cc <csp_ping+0x58>

	/* Try to send frame */
	if (!csp_send(conn, packet, 0))
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	69f9      	ldr	r1, [r7, #28]
 800f1ee:	6978      	ldr	r0, [r7, #20]
 800f1f0:	f7ff fbf8 	bl	800e9e4 <csp_send>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d020      	beq.n	800f23c <csp_ping+0xc8>
		goto out;

	/* Read incoming frame */
	packet = csp_read(conn, timeout);
 800f1fa:	68b9      	ldr	r1, [r7, #8]
 800f1fc:	6978      	ldr	r0, [r7, #20]
 800f1fe:	f7ff fac9 	bl	800e794 <csp_read>
 800f202:	61f8      	str	r0, [r7, #28]
	if (packet == NULL)
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d01a      	beq.n	800f240 <csp_ping+0xcc>
		goto out;

	/* Ensure that the data was actually echoed */
	for (i = 0; i < size; i++) {
 800f20a:	2300      	movs	r3, #0
 800f20c:	627b      	str	r3, [r7, #36]	; 0x24
 800f20e:	e00c      	b.n	800f22a <csp_ping+0xb6>
		if (packet->data[i] != i % (0xff + 1)) {
 800f210:	69fa      	ldr	r2, [r7, #28]
 800f212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f214:	4413      	add	r3, r2
 800f216:	3310      	adds	r3, #16
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	461a      	mov	r2, r3
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	429a      	cmp	r2, r3
 800f222:	d10f      	bne.n	800f244 <csp_ping+0xd0>
	for (i = 0; i < size; i++) {
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	3301      	adds	r3, #1
 800f228:	627b      	str	r3, [r7, #36]	; 0x24
 800f22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d3ee      	bcc.n	800f210 <csp_ping+0x9c>
			goto out;
		}
	}
	status = 1;
 800f232:	2301      	movs	r3, #1
 800f234:	623b      	str	r3, [r7, #32]
 800f236:	e006      	b.n	800f246 <csp_ping+0xd2>
		goto out;
 800f238:	bf00      	nop
 800f23a:	e004      	b.n	800f246 <csp_ping+0xd2>
		goto out;
 800f23c:	bf00      	nop
 800f23e:	e002      	b.n	800f246 <csp_ping+0xd2>
		goto out;
 800f240:	bf00      	nop
 800f242:	e000      	b.n	800f246 <csp_ping+0xd2>
			goto out;
 800f244:	bf00      	nop

out:
	/* Clean up */
	csp_buffer_free(packet);
 800f246:	69f8      	ldr	r0, [r7, #28]
 800f248:	f7fe fca8 	bl	800db9c <csp_buffer_free>
	csp_close(conn);
 800f24c:	6978      	ldr	r0, [r7, #20]
 800f24e:	f7fe ffb2 	bl	800e1b6 <csp_close>

	/* We have a reply */
	time = (csp_get_ms() - start);
 800f252:	f7fe fb7e 	bl	800d952 <csp_get_ms>
 800f256:	4602      	mov	r2, r0
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	613b      	str	r3, [r7, #16]

	if (status) {
 800f25e:	6a3b      	ldr	r3, [r7, #32]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d001      	beq.n	800f268 <csp_ping+0xf4>
		return time;
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	e001      	b.n	800f26c <csp_ping+0xf8>
	}

	return -1;
 800f268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3728      	adds	r7, #40	; 0x28
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <csp_can_tx_frame>:
	csp_iface_t iface;
	csp_can_interface_data_t ifdata;
	pthread_t rx_thread;
} can_context_t;

static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc) {
 800f274:	b580      	push	{r7, lr}
 800f276:	b08c      	sub	sp, #48	; 0x30
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	70fb      	strb	r3, [r7, #3]
	if (dlc > 8) {
 800f282:	78fb      	ldrb	r3, [r7, #3]
 800f284:	2b08      	cmp	r3, #8
 800f286:	d902      	bls.n	800f28e <csp_can_tx_frame+0x1a>
		return CSP_ERR_INVAL;
 800f288:	f06f 0301 	mvn.w	r3, #1
 800f28c:	e013      	b.n	800f2b6 <csp_can_tx_frame+0x42>
	}

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dlc;
 800f28e:	78fb      	ldrb	r3, [r7, #3]
 800f290:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.IDE = CAN_ID_EXT;
 800f292:	2304      	movs	r3, #4
 800f294:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 800f296:	2300      	movs	r3, #0
 800f298:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.ExtId = id;
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	61fb      	str	r3, [r7, #28]
	txHeader.TransmitGlobalTime = DISABLE;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t canMailBox;
	HAL_CAN_AddTxMessage((CAN_HandleTypeDef *)driver_data, &txHeader, data, &canMailBox);
 800f2a4:	f107 0314 	add.w	r3, r7, #20
 800f2a8:	f107 0118 	add.w	r1, r7, #24
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f7f2 fe3c 	bl	8001f2c <HAL_CAN_AddTxMessage>

	return CSP_ERR_NONE;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3730      	adds	r7, #48	; 0x30
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <csp_can_stm32_open_and_add_interface>:

int csp_can_stm32_open_and_add_interface(const char *ifname, csp_iface_t **return_iface) {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
	if (ifname == NULL) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d101      	bne.n	800f2d4 <csp_can_stm32_open_and_add_interface+0x14>
		ifname = CSP_IF_CAN_DEFAULT_NAME;
 800f2d0:	4b1d      	ldr	r3, [pc, #116]	; (800f348 <csp_can_stm32_open_and_add_interface+0x88>)
 800f2d2:	607b      	str	r3, [r7, #4]
	}

	can_context_t *ctx = calloc(1, sizeof(*ctx));
 800f2d4:	2158      	movs	r1, #88	; 0x58
 800f2d6:	2001      	movs	r0, #1
 800f2d8:	f002 f92a 	bl	8011530 <calloc>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	60fb      	str	r3, [r7, #12]
	if (ctx == NULL) {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d102      	bne.n	800f2ec <csp_can_stm32_open_and_add_interface+0x2c>
		return CSP_ERR_NOMEM;
 800f2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ea:	e029      	b.n	800f340 <csp_can_stm32_open_and_add_interface+0x80>
	}

	strncpy(ctx->name, ifname, sizeof(ctx->name) - 1);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	220a      	movs	r2, #10
 800f2f0:	6879      	ldr	r1, [r7, #4]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f003 f9e6 	bl	80126c4 <strncpy>
	ctx->iface.name = ctx->name;
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	60da      	str	r2, [r3, #12]
	ctx->iface.interface_data = &ctx->ifdata;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	611a      	str	r2, [r3, #16]
	ctx->iface.driver_data = (*return_iface)->driver_data;
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	689a      	ldr	r2, [r3, #8]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	615a      	str	r2, [r3, #20]
	ctx->ifdata.tx_func = csp_can_tx_frame;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	4a0d      	ldr	r2, [pc, #52]	; (800f34c <csp_can_stm32_open_and_add_interface+0x8c>)
 800f316:	651a      	str	r2, [r3, #80]	; 0x50

	int res = csp_can_add_interface(&ctx->iface);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	330c      	adds	r3, #12
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 f8f5 	bl	800f50c <csp_can_add_interface>
 800f322:	60b8      	str	r0, [r7, #8]
	if (res != CSP_ERR_NONE) {
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d001      	beq.n	800f32e <csp_can_stm32_open_and_add_interface+0x6e>
		return res;
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	e008      	b.n	800f340 <csp_can_stm32_open_and_add_interface+0x80>
	}

	if (return_iface) {
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d004      	beq.n	800f33e <csp_can_stm32_open_and_add_interface+0x7e>
		*return_iface = &ctx->iface;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f103 020c 	add.w	r2, r3, #12
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	601a      	str	r2, [r3, #0]
	}

	return CSP_ERR_NONE;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	08015408 	.word	0x08015408
 800f34c:	0800f275 	.word	0x0800f275

0800f350 <csp_can_tx>:
	}

	return CSP_ERR_NONE;
}

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet) {
 800f350:	b590      	push	{r4, r7, lr}
 800f352:	b08f      	sub	sp, #60	; 0x3c
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
	csp_iface_t * iface = ifroute->iface;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	633b      	str	r3, [r7, #48]	; 0x30
	csp_can_interface_data_t * ifdata = iface->interface_data;
 800f360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 800f366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	1c59      	adds	r1, r3, #1
 800f36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f36e:	6011      	str	r1, [r2, #0]
 800f370:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
	if (packet->length > MAX_CAN_DATA_SIZE) {
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	895b      	ldrh	r3, [r3, #10]
 800f376:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d902      	bls.n	800f384 <csp_can_tx+0x34>
		return CSP_ERR_TX;
 800f37e:	f06f 0309 	mvn.w	r3, #9
 800f382:	e0bf      	b.n	800f504 <csp_can_tx+0x1b4>
	}

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	791b      	ldrb	r3, [r3, #4]
 800f388:	2bff      	cmp	r3, #255	; 0xff
 800f38a:	d002      	beq.n	800f392 <csp_can_tx+0x42>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	791b      	ldrb	r3, [r3, #4]
 800f390:	e004      	b.n	800f39c <csp_can_tx+0x4c>
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	89db      	ldrh	r3, [r3, #14]
 800f396:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	7bdb      	ldrb	r3, [r3, #15]
 800f3a4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	061a      	lsls	r2, r3, #24
			CFP_MAKE_DST(dest) |
 800f3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3b0:	04db      	lsls	r3, r3, #19
 800f3b2:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800f3b6:	431a      	orrs	r2, r3
			CFP_MAKE_ID(ident) |
 800f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f3be:	431a      	orrs	r2, r3
			CFP_MAKE_TYPE(CFP_BEGIN) |
			CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	895b      	ldrh	r3, [r3, #10]
 800f3c4:	3305      	adds	r3, #5
 800f3c6:	08db      	lsrs	r3, r3, #3
 800f3c8:	029b      	lsls	r3, r3, #10
 800f3ca:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 800f3d2:	2302      	movs	r3, #2
 800f3d4:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	895a      	ldrh	r2, [r3, #10]
 800f3da:	7ffb      	ldrb	r3, [r7, #31]
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d803      	bhi.n	800f3ea <csp_can_tx+0x9a>
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	895b      	ldrh	r3, [r3, #10]
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	e000      	b.n	800f3ec <csp_can_tx+0x9c>
 800f3ea:	7ffb      	ldrb	r3, [r7, #31]
 800f3ec:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7ff f917 	bl	800e626 <csp_hton32>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	895b      	ldrh	r3, [r3, #10]
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff f8ed 	bl	800e5e0 <csp_hton16>
 800f406:	4603      	mov	r3, r0
 800f408:	827b      	strh	r3, [r7, #18]
 800f40a:	697b      	ldr	r3, [r7, #20]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 800f40c:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 800f40e:	f107 0308 	add.w	r3, r7, #8
 800f412:	3304      	adds	r3, #4
 800f414:	8a7a      	ldrh	r2, [r7, #18]
 800f416:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 800f418:	f107 0308 	add.w	r3, r7, #8
 800f41c:	3306      	adds	r3, #6
 800f41e:	683a      	ldr	r2, [r7, #0]
 800f420:	f102 0110 	add.w	r1, r2, #16
 800f424:	7fba      	ldrb	r2, [r7, #30]
 800f426:	4618      	mov	r0, r3
 800f428:	f002 f9dc 	bl	80117e4 <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 800f42c:	7fbb      	ldrb	r3, [r7, #30]
 800f42e:	86fb      	strh	r3, [r7, #54]	; 0x36

	const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 800f430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 800f436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f438:	6898      	ldr	r0, [r3, #8]
 800f43a:	7fbb      	ldrb	r3, [r7, #30]
 800f43c:	3306      	adds	r3, #6
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	f107 0208 	add.w	r2, r7, #8
 800f444:	69bc      	ldr	r4, [r7, #24]
 800f446:	6a39      	ldr	r1, [r7, #32]
 800f448:	47a0      	blx	r4
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d050      	beq.n	800f4f2 <csp_can_tx+0x1a2>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 800f450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f452:	69db      	ldr	r3, [r3, #28]
 800f454:	1c5a      	adds	r2, r3, #1
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 800f45a:	f06f 030a 	mvn.w	r3, #10
 800f45e:	e051      	b.n	800f504 <csp_can_tx+0x1b4>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	895b      	ldrh	r3, [r3, #10]
 800f464:	461a      	mov	r2, r3
 800f466:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	2b08      	cmp	r3, #8
 800f46c:	bfa8      	it	ge
 800f46e:	2308      	movge	r3, #8
 800f470:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	7bdb      	ldrb	r3, [r3, #15]
 800f476:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	061a      	lsls	r2, r3, #24
				CFP_MAKE_DST(dest) |
 800f47e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f482:	04db      	lsls	r3, r3, #19
 800f484:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 800f488:	431a      	orrs	r2, r3
				CFP_MAKE_ID(ident) |
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48c:	f3c3 0309 	ubfx	r3, r3, #0, #10
				CFP_MAKE_DST(dest) |
 800f490:	431a      	orrs	r2, r3
				CFP_MAKE_TYPE(CFP_MORE) |
				CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	895b      	ldrh	r3, [r3, #10]
 800f496:	4619      	mov	r1, r3
 800f498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f49a:	1ac9      	subs	r1, r1, r3
 800f49c:	7fbb      	ldrb	r3, [r7, #30]
 800f49e:	1acb      	subs	r3, r1, r3
 800f4a0:	3307      	adds	r3, #7
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	da00      	bge.n	800f4a8 <csp_can_tx+0x158>
 800f4a6:	3307      	adds	r3, #7
 800f4a8:	10db      	asrs	r3, r3, #3
 800f4aa:	029b      	lsls	r3, r3, #10
 800f4ac:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
				CFP_MAKE_TYPE(CFP_MORE) |
 800f4b0:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 800f4b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f4b6:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 800f4b8:	7fbb      	ldrb	r3, [r7, #30]
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4be:	4413      	add	r3, r2
 800f4c0:	86fb      	strh	r3, [r7, #54]	; 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c4:	6898      	ldr	r0, [r3, #8]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	f103 0210 	add.w	r2, r3, #16
 800f4cc:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800f4ce:	7fbb      	ldrb	r3, [r7, #30]
 800f4d0:	1acb      	subs	r3, r1, r3
 800f4d2:	441a      	add	r2, r3
 800f4d4:	7fbb      	ldrb	r3, [r7, #30]
 800f4d6:	69bc      	ldr	r4, [r7, #24]
 800f4d8:	6a39      	ldr	r1, [r7, #32]
 800f4da:	47a0      	blx	r4
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d007      	beq.n	800f4f2 <csp_can_tx+0x1a2>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	69db      	ldr	r3, [r3, #28]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ea:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 800f4ec:	f06f 030a 	mvn.w	r3, #10
 800f4f0:	e008      	b.n	800f504 <csp_can_tx+0x1b4>
	while (tx_count < packet->length) {
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	895b      	ldrh	r3, [r3, #10]
 800f4f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d3b1      	bcc.n	800f460 <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 800f4fc:	6838      	ldr	r0, [r7, #0]
 800f4fe:	f7fe fb4d 	bl	800db9c <csp_buffer_free>

	return CSP_ERR_NONE;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	373c      	adds	r7, #60	; 0x3c
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd90      	pop	{r4, r7, pc}

0800f50c <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d007      	beq.n	800f52a <csp_can_add_interface+0x1e>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d003      	beq.n	800f52a <csp_can_add_interface+0x1e>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d102      	bne.n	800f530 <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 800f52a:	f06f 0301 	mvn.w	r3, #1
 800f52e:	e021      	b.n	800f574 <csp_can_add_interface+0x68>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d102      	bne.n	800f544 <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 800f53e:	f06f 0301 	mvn.w	r3, #1
 800f542:	e017      	b.n	800f574 <csp_can_add_interface+0x68>
	}

	if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	8a1b      	ldrh	r3, [r3, #16]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d005      	beq.n	800f558 <csp_can_add_interface+0x4c>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	8a1b      	ldrh	r3, [r3, #16]
 800f550:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800f554:	4293      	cmp	r3, r2
 800f556:	d903      	bls.n	800f560 <csp_can_add_interface+0x54>
		iface->mtu = MAX_CAN_DATA_SIZE;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800f55e:	821a      	strh	r2, [r3, #16]
	}

	ifdata->cfp_frame_id = 0;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a04      	ldr	r2, [pc, #16]	; (800f57c <csp_can_add_interface+0x70>)
 800f56a:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7ff f87f 	bl	800e670 <csp_iflist_add>
 800f572:	4603      	mov	r3, r0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	0800f351 	.word	0x0800f351

0800f580 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	89db      	ldrh	r3, [r3, #14]
 800f58e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800f592:	b2db      	uxtb	r3, r3
 800f594:	461a      	mov	r2, r3
 800f596:	4b09      	ldr	r3, [pc, #36]	; (800f5bc <csp_lo_tx+0x3c>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d004      	beq.n	800f5a8 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 800f59e:	6838      	ldr	r0, [r7, #0]
 800f5a0:	f7fe fafc 	bl	800db9c <csp_buffer_free>
		return CSP_ERR_NONE;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	e005      	b.n	800f5b4 <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	4905      	ldr	r1, [pc, #20]	; (800f5c0 <csp_lo_tx+0x40>)
 800f5ac:	6838      	ldr	r0, [r7, #0]
 800f5ae:	f7ff fafd 	bl	800ebac <csp_qfifo_write>

	return CSP_ERR_NONE;
 800f5b2:	2300      	movs	r3, #0

}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	2000aa24 	.word	0x2000aa24
 800f5c0:	20000124 	.word	0x20000124

0800f5c4 <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af04      	add	r7, sp, #16
 800f5ca:	603a      	str	r2, [r7, #0]
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	71fb      	strb	r3, [r7, #7]
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	71bb      	strb	r3, [r7, #6]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 800f5da:	79fb      	ldrb	r3, [r7, #7]
 800f5dc:	2b20      	cmp	r3, #32
 800f5de:	d103      	bne.n	800f5e8 <csp_rtable_set+0x24>
		netmask = 0;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	71bb      	strb	r3, [r7, #6]
		address = 0;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 800f5e8:	79fb      	ldrb	r3, [r7, #7]
 800f5ea:	2b1f      	cmp	r3, #31
 800f5ec:	d902      	bls.n	800f5f4 <csp_rtable_set+0x30>
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	2bff      	cmp	r3, #255	; 0xff
 800f5f2:	d105      	bne.n	800f600 <csp_rtable_set+0x3c>
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d002      	beq.n	800f600 <csp_rtable_set+0x3c>
 800f5fa:	79bb      	ldrb	r3, [r7, #6]
 800f5fc:	2b05      	cmp	r3, #5
 800f5fe:	d91b      	bls.n	800f638 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 800f600:	4b13      	ldr	r3, [pc, #76]	; (800f650 <csp_rtable_set+0x8c>)
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d014      	beq.n	800f632 <csp_rtable_set+0x6e>
 800f608:	79f8      	ldrb	r0, [r7, #7]
 800f60a:	79ba      	ldrb	r2, [r7, #6]
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d002      	beq.n	800f618 <csp_rtable_set+0x54>
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	e000      	b.n	800f61a <csp_rtable_set+0x56>
 800f618:	4b0e      	ldr	r3, [pc, #56]	; (800f654 <csp_rtable_set+0x90>)
 800f61a:	7979      	ldrb	r1, [r7, #5]
 800f61c:	9103      	str	r1, [sp, #12]
 800f61e:	9302      	str	r3, [sp, #8]
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	9301      	str	r3, [sp, #4]
 800f624:	9200      	str	r2, [sp, #0]
 800f626:	4603      	mov	r3, r0
 800f628:	4a0b      	ldr	r2, [pc, #44]	; (800f658 <csp_rtable_set+0x94>)
 800f62a:	490c      	ldr	r1, [pc, #48]	; (800f65c <csp_rtable_set+0x98>)
 800f62c:	2000      	movs	r0, #0
 800f62e:	f7fe ff55 	bl	800e4dc <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 800f632:	f06f 0301 	mvn.w	r3, #1
 800f636:	e006      	b.n	800f646 <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 800f638:	797b      	ldrb	r3, [r7, #5]
 800f63a:	79b9      	ldrb	r1, [r7, #6]
 800f63c:	79f8      	ldrb	r0, [r7, #7]
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	f000 f878 	bl	800f734 <csp_rtable_set_internal>
 800f644:	4603      	mov	r3, r0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	2000011c 	.word	0x2000011c
 800f654:	08015484 	.word	0x08015484
 800f658:	0801632c 	.word	0x0801632c
 800f65c:	08015488 	.word	0x08015488

0800f660 <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 800f660:	b480      	push	{r7}
 800f662:	b087      	sub	sp, #28
 800f664:	af00      	add	r7, sp, #0
 800f666:	4603      	mov	r3, r0
 800f668:	71fb      	strb	r3, [r7, #7]
 800f66a:	460b      	mov	r3, r1
 800f66c:	71bb      	strb	r3, [r7, #6]
 800f66e:	4613      	mov	r3, r2
 800f670:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 800f672:	2300      	movs	r3, #0
 800f674:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 800f67a:	4b22      	ldr	r3, [pc, #136]	; (800f704 <csp_rtable_find+0xa4>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	60fb      	str	r3, [r7, #12]
	while(i) {
 800f680:	e036      	b.n	800f6f0 <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	7a1b      	ldrb	r3, [r3, #8]
 800f686:	79fa      	ldrb	r2, [r7, #7]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d107      	bne.n	800f69c <csp_rtable_find+0x3c>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	7a5b      	ldrb	r3, [r3, #9]
 800f690:	79ba      	ldrb	r2, [r7, #6]
 800f692:	429a      	cmp	r2, r3
 800f694:	d102      	bne.n	800f69c <csp_rtable_find+0x3c>
			best_result = i;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	617b      	str	r3, [r7, #20]
			break;
 800f69a:	e02c      	b.n	800f6f6 <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 800f69c:	797b      	ldrb	r3, [r7, #5]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d123      	bne.n	800f6ea <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	7a5b      	ldrb	r3, [r3, #9]
 800f6a6:	f1c3 0305 	rsb	r3, r3, #5
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 800f6b6:	7afb      	ldrb	r3, [r7, #11]
 800f6b8:	43db      	mvns	r3, r3
 800f6ba:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	7a1a      	ldrb	r2, [r3, #8]
 800f6c0:	7abb      	ldrb	r3, [r7, #10]
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 800f6c6:	79fa      	ldrb	r2, [r7, #7]
 800f6c8:	7abb      	ldrb	r3, [r7, #10]
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 800f6ce:	7a7a      	ldrb	r2, [r7, #9]
 800f6d0:	7a3b      	ldrb	r3, [r7, #8]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d109      	bne.n	800f6ea <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	7a5b      	ldrb	r3, [r3, #9]
 800f6da:	7cfa      	ldrb	r2, [r7, #19]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d804      	bhi.n	800f6ea <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	7a5b      	ldrb	r3, [r3, #9]
 800f6e8:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	60fb      	str	r3, [r7, #12]
	while(i) {
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1c5      	bne.n	800f682 <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 800f6f6:	697b      	ldr	r3, [r7, #20]

}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	371c      	adds	r7, #28
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr
 800f704:	2000aa4c 	.word	0x2000aa4c

0800f708 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 800f712:	79fb      	ldrb	r3, [r7, #7]
 800f714:	2200      	movs	r2, #0
 800f716:	2105      	movs	r1, #5
 800f718:	4618      	mov	r0, r3
 800f71a:	f7ff ffa1 	bl	800f660 <csp_rtable_find>
 800f71e:	60f8      	str	r0, [r7, #12]
    if (entry) {
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <csp_rtable_find_route+0x22>
	return &entry->route;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	e000      	b.n	800f72c <csp_rtable_find_route+0x24>
    }
    return NULL;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	603a      	str	r2, [r7, #0]
 800f73c:	461a      	mov	r2, r3
 800f73e:	4603      	mov	r3, r0
 800f740:	71fb      	strb	r3, [r7, #7]
 800f742:	460b      	mov	r3, r1
 800f744:	71bb      	strb	r3, [r7, #6]
 800f746:	4613      	mov	r3, r2
 800f748:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 800f74a:	79b9      	ldrb	r1, [r7, #6]
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	2201      	movs	r2, #1
 800f750:	4618      	mov	r0, r3
 800f752:	f7ff ff85 	bl	800f660 <csp_rtable_find>
 800f756:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d122      	bne.n	800f7a4 <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 800f75e:	2010      	movs	r0, #16
 800f760:	f7fd ff54 	bl	800d60c <csp_malloc>
 800f764:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d102      	bne.n	800f772 <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 800f76c:	f04f 33ff 	mov.w	r3, #4294967295
 800f770:	e025      	b.n	800f7be <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 800f778:	4b13      	ldr	r3, [pc, #76]	; (800f7c8 <csp_rtable_set_internal+0x94>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d103      	bne.n	800f788 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 800f780:	4a11      	ldr	r2, [pc, #68]	; (800f7c8 <csp_rtable_set_internal+0x94>)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6013      	str	r3, [r2, #0]
 800f786:	e00d      	b.n	800f7a4 <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 800f788:	4b0f      	ldr	r3, [pc, #60]	; (800f7c8 <csp_rtable_set_internal+0x94>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 800f78e:	e002      	b.n	800f796 <csp_rtable_set_internal+0x62>
				i = i->next;
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1f8      	bne.n	800f790 <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	79fa      	ldrb	r2, [r7, #7]
 800f7a8:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	79ba      	ldrb	r2, [r7, #6]
 800f7ae:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	683a      	ldr	r2, [r7, #0]
 800f7b4:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	797a      	ldrb	r2, [r7, #5]
 800f7ba:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 800f7bc:	2300      	movs	r3, #0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	2000aa4c 	.word	0x2000aa4c

0800f7cc <csp_rdp_header_add>:
/**
 * RDP Headers:
 * The following functions are helper functions that handles the extra RDP
 * information that needs to be appended to all data packets.
 */
static rdp_header_t * csp_rdp_header_add(csp_packet_t * packet) {
 800f7cc:	b590      	push	{r4, r7, lr}
 800f7ce:	b085      	sub	sp, #20
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
	rdp_header_t * header;
	if ((packet->length + sizeof(*header)) > csp_buffer_data_size()) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	895b      	ldrh	r3, [r3, #10]
 800f7d8:	1d5c      	adds	r4, r3, #5
 800f7da:	f7fe fa85 	bl	800dce8 <csp_buffer_data_size>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	429c      	cmp	r4, r3
 800f7e2:	d901      	bls.n	800f7e8 <csp_rdp_header_add+0x1c>
		return NULL;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	e011      	b.n	800f80c <csp_rdp_header_add+0x40>
	}
	header = (rdp_header_t *) &packet->data[packet->length];
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	895b      	ldrh	r3, [r3, #10]
 800f7ec:	3310      	adds	r3, #16
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	60fb      	str	r3, [r7, #12]
	packet->length += sizeof(*header);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	895b      	ldrh	r3, [r3, #10]
 800f7f8:	3305      	adds	r3, #5
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	815a      	strh	r2, [r3, #10]
	memset(header, 0, sizeof(*header));
 800f800:	2205      	movs	r2, #5
 800f802:	2100      	movs	r1, #0
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f001 fffb 	bl	8011800 <memset>
	return header;
 800f80a:	68fb      	ldr	r3, [r7, #12]
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3714      	adds	r7, #20
 800f810:	46bd      	mov	sp, r7
 800f812:	bd90      	pop	{r4, r7, pc}

0800f814 <csp_rdp_header_remove>:

static rdp_header_t * csp_rdp_header_remove(csp_packet_t * packet) {
 800f814:	b480      	push	{r7}
 800f816:	b085      	sub	sp, #20
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
	rdp_header_t * header = (rdp_header_t *) &packet->data[packet->length - sizeof(*header)];
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	895b      	ldrh	r3, [r3, #10]
 800f820:	3b05      	subs	r3, #5
 800f822:	3310      	adds	r3, #16
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	4413      	add	r3, r2
 800f828:	60fb      	str	r3, [r7, #12]
	packet->length -= sizeof(*header);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	895b      	ldrh	r3, [r3, #10]
 800f82e:	3b05      	subs	r3, #5
 800f830:	b29a      	uxth	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	815a      	strh	r2, [r3, #10]
	return header;
 800f836:	68fb      	ldr	r3, [r7, #12]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <csp_rdp_header_ref>:

static rdp_header_t * csp_rdp_header_ref(csp_packet_t * packet) {
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
	rdp_header_t * header = (rdp_header_t *) &packet->data[packet->length - sizeof(*header)];
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	895b      	ldrh	r3, [r3, #10]
 800f850:	3b05      	subs	r3, #5
 800f852:	3310      	adds	r3, #16
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	4413      	add	r3, r2
 800f858:	60fb      	str	r3, [r7, #12]
	return header;
 800f85a:	68fb      	ldr	r3, [r7, #12]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3714      	adds	r7, #20
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <csp_rdp_seq_between>:

/* Functions for comparing wrapping sequence numbers and timestamps */

/* Return 1 if seq is between start and end (both inclusive) */
static inline int csp_rdp_seq_between(uint16_t seq, uint16_t start, uint16_t end) {
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	4603      	mov	r3, r0
 800f870:	80fb      	strh	r3, [r7, #6]
 800f872:	460b      	mov	r3, r1
 800f874:	80bb      	strh	r3, [r7, #4]
 800f876:	4613      	mov	r3, r2
 800f878:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(end - start) >= (uint16_t)(seq - start);
 800f87a:	887a      	ldrh	r2, [r7, #2]
 800f87c:	88bb      	ldrh	r3, [r7, #4]
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	b29a      	uxth	r2, r3
 800f882:	88f9      	ldrh	r1, [r7, #6]
 800f884:	88bb      	ldrh	r3, [r7, #4]
 800f886:	1acb      	subs	r3, r1, r3
 800f888:	b29b      	uxth	r3, r3
 800f88a:	429a      	cmp	r2, r3
 800f88c:	bf2c      	ite	cs
 800f88e:	2301      	movcs	r3, #1
 800f890:	2300      	movcc	r3, #0
 800f892:	b2db      	uxtb	r3, r3
}
 800f894:	4618      	mov	r0, r3
 800f896:	370c      	adds	r7, #12
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <csp_rdp_seq_before>:

/* Return 1 if seq is before cmp */
static inline int csp_rdp_seq_before(uint16_t seq, uint16_t cmp) {
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	460a      	mov	r2, r1
 800f8aa:	80fb      	strh	r3, [r7, #6]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	80bb      	strh	r3, [r7, #4]
	return (int16_t)(seq - cmp) < 0;
 800f8b0:	88fa      	ldrh	r2, [r7, #6]
 800f8b2:	88bb      	ldrh	r3, [r7, #4]
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	b21b      	sxth	r3, r3
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	0bdb      	lsrs	r3, r3, #15
 800f8be:	b2db      	uxtb	r3, r3
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <csp_rdp_seq_after>:

/* Return 1 if seq is after cmp */
static inline int csp_rdp_seq_after(uint16_t seq, uint16_t cmp) {
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	460a      	mov	r2, r1
 800f8d6:	80fb      	strh	r3, [r7, #6]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	80bb      	strh	r3, [r7, #4]
	return csp_rdp_seq_before(cmp, seq);
 800f8dc:	88fa      	ldrh	r2, [r7, #6]
 800f8de:	88bb      	ldrh	r3, [r7, #4]
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7ff ffdc 	bl	800f8a0 <csp_rdp_seq_before>
 800f8e8:	4603      	mov	r3, r0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3708      	adds	r7, #8
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <csp_rdp_time_before>:
//static inline int csp_rdp_time_between(uint32_t time, uint32_t start, uint32_t end) {
//	return (uint32_t)(end - start) >= (uint32_t)(time - start);
//}

/* Return 1 if time is before cmp */
static inline int csp_rdp_time_before(uint32_t time, uint32_t cmp) {
 800f8f2:	b480      	push	{r7}
 800f8f4:	b083      	sub	sp, #12
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
 800f8fa:	6039      	str	r1, [r7, #0]
	return (int32_t)(time - cmp) < 0;
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	0fdb      	lsrs	r3, r3, #31
 800f904:	b2db      	uxtb	r3, r3
}
 800f906:	4618      	mov	r0, r3
 800f908:	370c      	adds	r7, #12
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr

0800f912 <csp_rdp_time_after>:

/* Return 1 if time is after cmp */
static inline int csp_rdp_time_after(uint32_t time, uint32_t cmp) {
 800f912:	b580      	push	{r7, lr}
 800f914:	b082      	sub	sp, #8
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]
 800f91a:	6039      	str	r1, [r7, #0]
	return csp_rdp_time_before(cmp, time);
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	6838      	ldr	r0, [r7, #0]
 800f920:	f7ff ffe7 	bl	800f8f2 <csp_rdp_time_before>
 800f924:	4603      	mov	r3, r0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
	...

0800f930 <csp_rdp_send_cmp>:
/**
 * CONTROL MESSAGES
 * The following function is used to send empty messages,
 * with ACK, SYN or RST flag.
 */
static int csp_rdp_send_cmp(csp_conn_t * conn, csp_packet_t * packet, int flags, int seq_nr, int ack_nr) {
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	b092      	sub	sp, #72	; 0x48
 800f936:	af08      	add	r7, sp, #32
 800f938:	6178      	str	r0, [r7, #20]
 800f93a:	6139      	str	r1, [r7, #16]
 800f93c:	60fa      	str	r2, [r7, #12]
 800f93e:	60bb      	str	r3, [r7, #8]

	/* Generate message */
	if (!packet) {
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d10c      	bne.n	800f960 <csp_rdp_send_cmp+0x30>
		packet = csp_buffer_get(20);
 800f946:	2014      	movs	r0, #20
 800f948:	f7fe f88c 	bl	800da64 <csp_buffer_get>
 800f94c:	6138      	str	r0, [r7, #16]
		if (!packet)
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d102      	bne.n	800f95a <csp_rdp_send_cmp+0x2a>
			return CSP_ERR_NOMEM;
 800f954:	f04f 33ff 	mov.w	r3, #4294967295
 800f958:	e103      	b.n	800fb62 <csp_rdp_send_cmp+0x232>
		packet->length = 0;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	2200      	movs	r2, #0
 800f95e:	815a      	strh	r2, [r3, #10]
	}

	/* Add RDP header */
	rdp_header_t * header = csp_rdp_header_add(packet);
 800f960:	6938      	ldr	r0, [r7, #16]
 800f962:	f7ff ff33 	bl	800f7cc <csp_rdp_header_add>
 800f966:	6278      	str	r0, [r7, #36]	; 0x24
	if (header == NULL) {
 800f968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10e      	bne.n	800f98c <csp_rdp_send_cmp+0x5c>
		csp_log_error("RDP %p: No space for RDP header (cmp)", conn);
 800f96e:	4b7f      	ldr	r3, [pc, #508]	; (800fb6c <csp_rdp_send_cmp+0x23c>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d004      	beq.n	800f980 <csp_rdp_send_cmp+0x50>
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	497d      	ldr	r1, [pc, #500]	; (800fb70 <csp_rdp_send_cmp+0x240>)
 800f97a:	2000      	movs	r0, #0
 800f97c:	f7fe fdae 	bl	800e4dc <do_csp_debug>
		csp_buffer_free(packet);
 800f980:	6938      	ldr	r0, [r7, #16]
 800f982:	f7fe f90b 	bl	800db9c <csp_buffer_free>
		return CSP_ERR_NOMEM;
 800f986:	f04f 33ff 	mov.w	r3, #4294967295
 800f98a:	e0ea      	b.n	800fb62 <csp_rdp_send_cmp+0x232>
	}
	header->seq_nr = csp_hton16(seq_nr);
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	b29b      	uxth	r3, r3
 800f990:	4618      	mov	r0, r3
 800f992:	f7fe fe25 	bl	800e5e0 <csp_hton16>
 800f996:	4603      	mov	r3, r0
 800f998:	461a      	mov	r2, r3
 800f99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99c:	f8a3 2001 	strh.w	r2, [r3, #1]
	header->ack_nr = csp_hton16(ack_nr);
 800f9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fe fe1b 	bl	800e5e0 <csp_hton16>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b0:	f8a3 2003 	strh.w	r2, [r3, #3]
	header->ack = (flags & RDP_ACK) ? 1 : 0;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	105b      	asrs	r3, r3, #1
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	b2d9      	uxtb	r1, r3
 800f9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c0:	7813      	ldrb	r3, [r2, #0]
 800f9c2:	f361 0382 	bfi	r3, r1, #2, #1
 800f9c6:	7013      	strb	r3, [r2, #0]
	header->eak = (flags & RDP_EAK) ? 1 : 0;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	109b      	asrs	r3, r3, #2
 800f9cc:	f003 0301 	and.w	r3, r3, #1
 800f9d0:	b2d9      	uxtb	r1, r3
 800f9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9d4:	7813      	ldrb	r3, [r2, #0]
 800f9d6:	f361 0341 	bfi	r3, r1, #1, #1
 800f9da:	7013      	strb	r3, [r2, #0]
	header->syn = (flags & RDP_SYN) ? 1 : 0;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	b2d9      	uxtb	r1, r3
 800f9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9e6:	7813      	ldrb	r3, [r2, #0]
 800f9e8:	f361 03c3 	bfi	r3, r1, #3, #1
 800f9ec:	7013      	strb	r3, [r2, #0]
	header->rst = (flags & RDP_RST) ? 1 : 0;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	10db      	asrs	r3, r3, #3
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	b2d9      	uxtb	r1, r3
 800f9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9fa:	7813      	ldrb	r3, [r2, #0]
 800f9fc:	f361 0300 	bfi	r3, r1, #0, #1
 800fa00:	7013      	strb	r3, [r2, #0]

	/* Send copy to tx_queue, before sending packet to IF */
	if (flags & RDP_SYN) {
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d01e      	beq.n	800fa4a <csp_rdp_send_cmp+0x11a>
		rdp_packet_t * rdp_packet = csp_buffer_clone(packet);
 800fa0c:	6938      	ldr	r0, [r7, #16]
 800fa0e:	f7fe f93d 	bl	800dc8c <csp_buffer_clone>
 800fa12:	4603      	mov	r3, r0
 800fa14:	61fb      	str	r3, [r7, #28]
		if (rdp_packet == NULL) return CSP_ERR_NOMEM;
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d102      	bne.n	800fa22 <csp_rdp_send_cmp+0xf2>
 800fa1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa20:	e09f      	b.n	800fb62 <csp_rdp_send_cmp+0x232>
		rdp_packet->timestamp = csp_get_ms();
 800fa22:	69fc      	ldr	r4, [r7, #28]
 800fa24:	f7fd ff95 	bl	800d952 <csp_get_ms>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	6063      	str	r3, [r4, #4]
		if (csp_queue_enqueue(conn->rdp.tx_queue, &rdp_packet, 0) != CSP_QUEUE_OK)
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa30:	f107 011c 	add.w	r1, r7, #28
 800fa34:	2200      	movs	r2, #0
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fd fe35 	bl	800d6a6 <csp_queue_enqueue>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d003      	beq.n	800fa4a <csp_rdp_send_cmp+0x11a>
			csp_buffer_free(rdp_packet);
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fe f8a9 	bl	800db9c <csp_buffer_free>
	}

	/* Send control messages with high priority */
	csp_id_t idout = conn->idout;
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	623b      	str	r3, [r7, #32]
	idout.pri = conn->idout.pri < CSP_PRIO_HIGH ? conn->idout.pri : CSP_PRIO_HIGH;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	7adb      	ldrb	r3, [r3, #11]
 800fa54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d105      	bne.n	800fa6a <csp_rdp_send_cmp+0x13a>
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	7adb      	ldrb	r3, [r3, #11]
 800fa62:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800fa66:	b2da      	uxtb	r2, r3
 800fa68:	e000      	b.n	800fa6c <csp_rdp_send_cmp+0x13c>
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa70:	f362 1387 	bfi	r3, r2, #6, #2
 800fa74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	csp_log_protocol("RDP %p: Send CMP S %u: syn %u, ack %u, eack %u, rst %u, seq_nr %5u, ack_nr %5u, packet_len %u (%u)",
 800fa78:	4b3c      	ldr	r3, [pc, #240]	; (800fb6c <csp_rdp_send_cmp+0x23c>)
 800fa7a:	795b      	ldrb	r3, [r3, #5]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d042      	beq.n	800fb06 <csp_rdp_send_cmp+0x1d6>
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	7f1b      	ldrb	r3, [r3, #28]
 800fa84:	4698      	mov	r8, r3
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	461c      	mov	r4, r3
 800fa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	461d      	mov	r5, r3
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	461e      	mov	r6, r3
 800faaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	607b      	str	r3, [r7, #4]
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fe fda3 	bl	800e60a <csp_ntoh16>
 800fac4:	4603      	mov	r3, r0
 800fac6:	603b      	str	r3, [r7, #0]
 800fac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800face:	b29b      	uxth	r3, r3
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fe fd9a 	bl	800e60a <csp_ntoh16>
 800fad6:	4603      	mov	r3, r0
 800fad8:	461a      	mov	r2, r3
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	895b      	ldrh	r3, [r3, #10]
 800fade:	4619      	mov	r1, r3
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	895b      	ldrh	r3, [r3, #10]
 800fae4:	3b05      	subs	r3, #5
 800fae6:	9307      	str	r3, [sp, #28]
 800fae8:	9106      	str	r1, [sp, #24]
 800faea:	9205      	str	r2, [sp, #20]
 800faec:	683a      	ldr	r2, [r7, #0]
 800faee:	9204      	str	r2, [sp, #16]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	9303      	str	r3, [sp, #12]
 800faf4:	9602      	str	r6, [sp, #8]
 800faf6:	9501      	str	r5, [sp, #4]
 800faf8:	9400      	str	r4, [sp, #0]
 800fafa:	4643      	mov	r3, r8
 800fafc:	697a      	ldr	r2, [r7, #20]
 800fafe:	491d      	ldr	r1, [pc, #116]	; (800fb74 <csp_rdp_send_cmp+0x244>)
 800fb00:	2005      	movs	r0, #5
 800fb02:	f7fe fceb 	bl	800e4dc <do_csp_debug>
                         conn, conn->rdp.state, header->syn, header->ack, header->eak,
                         header->rst, csp_ntoh16(header->seq_nr), csp_ntoh16(header->ack_nr),
                         packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	/* Send packet to IF */
	if (csp_send_direct(idout, packet, csp_rtable_find_route(idout.dst), 0) != CSP_ERR_NONE) {
 800fb06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb08:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7ff fdfa 	bl	800f708 <csp_rtable_find_route>
 800fb14:	4602      	mov	r2, r0
 800fb16:	2300      	movs	r3, #0
 800fb18:	6939      	ldr	r1, [r7, #16]
 800fb1a:	6a38      	ldr	r0, [r7, #32]
 800fb1c:	f7fe fe7a 	bl	800e814 <csp_send_direct>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d00e      	beq.n	800fb44 <csp_rdp_send_cmp+0x214>
		csp_log_error("RDP %p: INTERFACE ERROR: not possible to send", conn);
 800fb26:	4b11      	ldr	r3, [pc, #68]	; (800fb6c <csp_rdp_send_cmp+0x23c>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d004      	beq.n	800fb38 <csp_rdp_send_cmp+0x208>
 800fb2e:	697a      	ldr	r2, [r7, #20]
 800fb30:	4911      	ldr	r1, [pc, #68]	; (800fb78 <csp_rdp_send_cmp+0x248>)
 800fb32:	2000      	movs	r0, #0
 800fb34:	f7fe fcd2 	bl	800e4dc <do_csp_debug>
		csp_buffer_free(packet);
 800fb38:	6938      	ldr	r0, [r7, #16]
 800fb3a:	f7fe f82f 	bl	800db9c <csp_buffer_free>
		return CSP_ERR_BUSY;
 800fb3e:	f06f 0305 	mvn.w	r3, #5
 800fb42:	e00e      	b.n	800fb62 <csp_rdp_send_cmp+0x232>
	}

	/* Update last ACK time stamp */
	if (flags & RDP_ACK) {
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f003 0302 	and.w	r3, r3, #2
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d008      	beq.n	800fb60 <csp_rdp_send_cmp+0x230>
		conn->rdp.rcv_lsa = ack_nr;
 800fb4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	851a      	strh	r2, [r3, #40]	; 0x28
		conn->rdp.ack_timestamp = csp_get_ms();
 800fb56:	f7fd fefc 	bl	800d952 <csp_get_ms>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	645a      	str	r2, [r3, #68]	; 0x44
	}

	return CSP_ERR_NONE;
 800fb60:	2300      	movs	r3, #0

}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3728      	adds	r7, #40	; 0x28
 800fb66:	46bd      	mov	sp, r7
 800fb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb6c:	2000011c 	.word	0x2000011c
 800fb70:	08015508 	.word	0x08015508
 800fb74:	08015530 	.word	0x08015530
 800fb78:	08015594 	.word	0x08015594

0800fb7c <csp_rdp_send_eack>:

/**
 * EXTENDED ACKNOWLEDGEMENTS
 * The following function sends an extended ACK packet
 */
static int csp_rdp_send_eack(csp_conn_t * conn) {
 800fb7c:	b590      	push	{r4, r7, lr}
 800fb7e:	b08b      	sub	sp, #44	; 0x2c
 800fb80:	af02      	add	r7, sp, #8
 800fb82:	6078      	str	r0, [r7, #4]

	/* Allocate message */
	csp_packet_t * packet_eack = csp_buffer_get(100);
 800fb84:	2064      	movs	r0, #100	; 0x64
 800fb86:	f7fd ff6d 	bl	800da64 <csp_buffer_get>
 800fb8a:	61b8      	str	r0, [r7, #24]
	if (packet_eack == NULL) return CSP_ERR_NOMEM;
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d102      	bne.n	800fb98 <csp_rdp_send_eack+0x1c>
 800fb92:	f04f 33ff 	mov.w	r3, #4294967295
 800fb96:	e069      	b.n	800fc6c <csp_rdp_send_eack+0xf0>
	packet_eack->length = 0;
 800fb98:	69bb      	ldr	r3, [r7, #24]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	815a      	strh	r2, [r3, #10]

	/* Loop through RX queue */
	int i, count;
	csp_packet_t * packet;
	count = csp_queue_size(conn->rdp.rx_queue);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fd fdc7 	bl	800d736 <csp_queue_size>
 800fba8:	6178      	str	r0, [r7, #20]
	for (i = 0; i < count; i++) {
 800fbaa:	2300      	movs	r3, #0
 800fbac:	61fb      	str	r3, [r7, #28]
 800fbae:	e04a      	b.n	800fc46 <csp_rdp_send_eack+0xca>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbb4:	f107 010c 	add.w	r1, r7, #12
 800fbb8:	4a2e      	ldr	r2, [pc, #184]	; (800fc74 <csp_rdp_send_eack+0xf8>)
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fd fdab 	bl	800d716 <csp_queue_dequeue_isr>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d009      	beq.n	800fbda <csp_rdp_send_eack+0x5e>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue deliver", conn);
 800fbc6:	4b2c      	ldr	r3, [pc, #176]	; (800fc78 <csp_rdp_send_eack+0xfc>)
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d040      	beq.n	800fc50 <csp_rdp_send_eack+0xd4>
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	492a      	ldr	r1, [pc, #168]	; (800fc7c <csp_rdp_send_eack+0x100>)
 800fbd2:	2000      	movs	r0, #0
 800fbd4:	f7fe fc82 	bl	800e4dc <do_csp_debug>
			break;
 800fbd8:	e03a      	b.n	800fc50 <csp_rdp_send_eack+0xd4>
		}

		/* Add seq nr to EACK packet */
		rdp_header_t * header = csp_rdp_header_ref(packet);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7ff fe31 	bl	800f844 <csp_rdp_header_ref>
 800fbe2:	6138      	str	r0, [r7, #16]
		packet_eack->data16[packet_eack->length/sizeof(uint16_t)] = csp_hton16(header->seq_nr);
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	895b      	ldrh	r3, [r3, #10]
 800fbf0:	085b      	lsrs	r3, r3, #1
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	461c      	mov	r4, r3
 800fbf6:	4610      	mov	r0, r2
 800fbf8:	f7fe fcf2 	bl	800e5e0 <csp_hton16>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	4619      	mov	r1, r3
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	f104 0208 	add.w	r2, r4, #8
 800fc06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		packet_eack->length += sizeof(uint16_t);
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	895b      	ldrh	r3, [r3, #10]
 800fc0e:	3302      	adds	r3, #2
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	815a      	strh	r2, [r3, #10]
		csp_log_protocol("RDP %p: Added EACK nr %u", conn, header->seq_nr);
 800fc16:	4b18      	ldr	r3, [pc, #96]	; (800fc78 <csp_rdp_send_eack+0xfc>)
 800fc18:	795b      	ldrb	r3, [r3, #5]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d008      	beq.n	800fc30 <csp_rdp_send_eack+0xb4>
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	4915      	ldr	r1, [pc, #84]	; (800fc80 <csp_rdp_send_eack+0x104>)
 800fc2a:	2005      	movs	r0, #5
 800fc2c:	f7fe fc56 	bl	800e4dc <do_csp_debug>

		/* Requeue */
		csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc34:	f107 010c 	add.w	r1, r7, #12
 800fc38:	4a0e      	ldr	r2, [pc, #56]	; (800fc74 <csp_rdp_send_eack+0xf8>)
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fd fd47 	bl	800d6ce <csp_queue_enqueue_isr>
	for (i = 0; i < count; i++) {
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	3301      	adds	r3, #1
 800fc44:	61fb      	str	r3, [r7, #28]
 800fc46:	69fa      	ldr	r2, [r7, #28]
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	dbb0      	blt.n	800fbb0 <csp_rdp_send_eack+0x34>
 800fc4e:	e000      	b.n	800fc52 <csp_rdp_send_eack+0xd6>
			break;
 800fc50:	bf00      	nop

	}

	return csp_rdp_send_cmp(conn, packet_eack, RDP_ACK | RDP_EAK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	8bdb      	ldrh	r3, [r3, #30]
 800fc56:	461a      	mov	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	4613      	mov	r3, r2
 800fc60:	2206      	movs	r2, #6
 800fc62:	69b9      	ldr	r1, [r7, #24]
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f7ff fe63 	bl	800f930 <csp_rdp_send_cmp>
 800fc6a:	4603      	mov	r3, r0

}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3724      	adds	r7, #36	; 0x24
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd90      	pop	{r4, r7, pc}
 800fc74:	2000017c 	.word	0x2000017c
 800fc78:	2000011c 	.word	0x2000011c
 800fc7c:	080155c4 	.word	0x080155c4
 800fc80:	080155fc 	.word	0x080155fc

0800fc84 <csp_rdp_send_syn>:

/**
 * SYN Packet
 * The following function sends a SYN packet
 */
static int csp_rdp_send_syn(csp_conn_t * conn) {
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af02      	add	r7, sp, #8
 800fc8a:	6078      	str	r0, [r7, #4]

	/* Allocate message */
	csp_packet_t * packet = csp_buffer_get(100);
 800fc8c:	2064      	movs	r0, #100	; 0x64
 800fc8e:	f7fd fee9 	bl	800da64 <csp_buffer_get>
 800fc92:	60f8      	str	r0, [r7, #12]
	if (packet == NULL) return CSP_ERR_NOMEM;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d102      	bne.n	800fca0 <csp_rdp_send_syn+0x1c>
 800fc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc9e:	e03e      	b.n	800fd1e <csp_rdp_send_syn+0x9a>

	/* Generate contents */
	packet->data32[0] = csp_hton32(csp_rdp_window_size);
 800fca0:	4b21      	ldr	r3, [pc, #132]	; (800fd28 <csp_rdp_send_syn+0xa4>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7fe fcbe 	bl	800e626 <csp_hton32>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	611a      	str	r2, [r3, #16]
	packet->data32[1] = csp_hton32(csp_rdp_conn_timeout);
 800fcb0:	4b1e      	ldr	r3, [pc, #120]	; (800fd2c <csp_rdp_send_syn+0xa8>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fe fcb6 	bl	800e626 <csp_hton32>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	615a      	str	r2, [r3, #20]
	packet->data32[2] = csp_hton32(csp_rdp_packet_timeout);
 800fcc0:	4b1b      	ldr	r3, [pc, #108]	; (800fd30 <csp_rdp_send_syn+0xac>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7fe fcae 	bl	800e626 <csp_hton32>
 800fcca:	4602      	mov	r2, r0
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	619a      	str	r2, [r3, #24]
	packet->data32[3] = csp_hton32(csp_rdp_delayed_acks);
 800fcd0:	4b18      	ldr	r3, [pc, #96]	; (800fd34 <csp_rdp_send_syn+0xb0>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fe fca6 	bl	800e626 <csp_hton32>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	61da      	str	r2, [r3, #28]
	packet->data32[4] = csp_hton32(csp_rdp_ack_timeout);
 800fce0:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <csp_rdp_send_syn+0xb4>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fe fc9e 	bl	800e626 <csp_hton32>
 800fcea:	4602      	mov	r2, r0
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	621a      	str	r2, [r3, #32]
	packet->data32[5] = csp_hton32(csp_rdp_ack_delay_count);
 800fcf0:	4b12      	ldr	r3, [pc, #72]	; (800fd3c <csp_rdp_send_syn+0xb8>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7fe fc96 	bl	800e626 <csp_hton32>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	625a      	str	r2, [r3, #36]	; 0x24
	packet->length = 6 * sizeof(uint32_t);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2218      	movs	r2, #24
 800fd04:	815a      	strh	r2, [r3, #10]

	return csp_rdp_send_cmp(conn, packet, RDP_SYN, conn->rdp.snd_iss, 0);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	4613      	mov	r3, r2
 800fd12:	2201      	movs	r2, #1
 800fd14:	68f9      	ldr	r1, [r7, #12]
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7ff fe0a 	bl	800f930 <csp_rdp_send_cmp>
 800fd1c:	4603      	mov	r3, r0

}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3710      	adds	r7, #16
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	20000164 	.word	0x20000164
 800fd2c:	20000168 	.word	0x20000168
 800fd30:	2000016c 	.word	0x2000016c
 800fd34:	20000170 	.word	0x20000170
 800fd38:	20000174 	.word	0x20000174
 800fd3c:	20000178 	.word	0x20000178

0800fd40 <csp_rdp_receive_data>:

static inline int csp_rdp_receive_data(csp_conn_t * conn, csp_packet_t * packet) {
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]

	/* Remove RDP header before passing to userspace */
	csp_rdp_header_remove(packet);
 800fd4a:	6838      	ldr	r0, [r7, #0]
 800fd4c:	f7ff fd62 	bl	800f814 <csp_rdp_header_remove>

	/* Enqueue data */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 800fd50:	6839      	ldr	r1, [r7, #0]
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7fe f818 	bl	800dd88 <csp_conn_enqueue_packet>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	da0b      	bge.n	800fd76 <csp_rdp_receive_data+0x36>
		csp_log_warn("RDP %p: Conn RX buffer full", conn);
 800fd5e:	4b08      	ldr	r3, [pc, #32]	; (800fd80 <csp_rdp_receive_data+0x40>)
 800fd60:	785b      	ldrb	r3, [r3, #1]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d004      	beq.n	800fd70 <csp_rdp_receive_data+0x30>
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	4906      	ldr	r1, [pc, #24]	; (800fd84 <csp_rdp_receive_data+0x44>)
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	f7fe fbb6 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOBUFS;
 800fd70:	f06f 0308 	mvn.w	r3, #8
 800fd74:	e000      	b.n	800fd78 <csp_rdp_receive_data+0x38>
	}

	return CSP_ERR_NONE;
 800fd76:	2300      	movs	r3, #0

}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	2000011c 	.word	0x2000011c
 800fd84:	08015618 	.word	0x08015618

0800fd88 <csp_rdp_rx_queue_flush>:

static inline void csp_rdp_rx_queue_flush(csp_conn_t * conn) {
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
	/* Loop through RX queue */
	int i, count;
	csp_packet_t * packet;

front:
	count = csp_queue_size(conn->rdp.rx_queue);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7fd fcce 	bl	800d736 <csp_queue_size>
 800fd9a:	6138      	str	r0, [r7, #16]
	for (i = 0; i < count; i++) {
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	617b      	str	r3, [r7, #20]
 800fda0:	e054      	b.n	800fe4c <csp_rdp_rx_queue_flush+0xc4>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fda6:	f107 0108 	add.w	r1, r7, #8
 800fdaa:	4a2d      	ldr	r2, [pc, #180]	; (800fe60 <csp_rdp_rx_queue_flush+0xd8>)
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fd fcb2 	bl	800d716 <csp_queue_dequeue_isr>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d009      	beq.n	800fdcc <csp_rdp_rx_queue_flush+0x44>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue deliver", conn);
 800fdb8:	4b2a      	ldr	r3, [pc, #168]	; (800fe64 <csp_rdp_rx_queue_flush+0xdc>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d04a      	beq.n	800fe56 <csp_rdp_rx_queue_flush+0xce>
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	4929      	ldr	r1, [pc, #164]	; (800fe68 <csp_rdp_rx_queue_flush+0xe0>)
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	f7fe fb89 	bl	800e4dc <do_csp_debug>
			break;
 800fdca:	e044      	b.n	800fe56 <csp_rdp_rx_queue_flush+0xce>
		}

		rdp_header_t * header = csp_rdp_header_ref(packet);
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff fd38 	bl	800f844 <csp_rdp_header_ref>
 800fdd4:	60f8      	str	r0, [r7, #12]
		csp_log_protocol("RDP %p: RX Queue deliver matching Element, seq %u", conn, header->seq_nr);
 800fdd6:	4b23      	ldr	r3, [pc, #140]	; (800fe64 <csp_rdp_rx_queue_flush+0xdc>)
 800fdd8:	795b      	ldrb	r3, [r3, #5]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d008      	beq.n	800fdf0 <csp_rdp_rx_queue_flush+0x68>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	4920      	ldr	r1, [pc, #128]	; (800fe6c <csp_rdp_rx_queue_flush+0xe4>)
 800fdea:	2005      	movs	r0, #5
 800fdec:	f7fe fb76 	bl	800e4dc <do_csp_debug>

		/* If the matching packet was found: */
		if (header->seq_nr == (uint16_t)(conn->rdp.rcv_cur + 1)) {
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d118      	bne.n	800fe36 <csp_rdp_rx_queue_flush+0xae>
			csp_log_protocol("RDP %p: Deliver seq %u", conn, header->seq_nr);
 800fe04:	4b17      	ldr	r3, [pc, #92]	; (800fe64 <csp_rdp_rx_queue_flush+0xdc>)
 800fe06:	795b      	ldrb	r3, [r3, #5]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d008      	beq.n	800fe1e <csp_rdp_rx_queue_flush+0x96>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	4916      	ldr	r1, [pc, #88]	; (800fe70 <csp_rdp_rx_queue_flush+0xe8>)
 800fe18:	2005      	movs	r0, #5
 800fe1a:	f7fe fb5f 	bl	800e4dc <do_csp_debug>
			csp_rdp_receive_data(conn, packet);
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	4619      	mov	r1, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7ff ff8c 	bl	800fd40 <csp_rdp_receive_data>
			conn->rdp.rcv_cur++;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	849a      	strh	r2, [r3, #36]	; 0x24
			/* Loop from first element again */
			goto front;
 800fe34:	e7ac      	b.n	800fd90 <csp_rdp_rx_queue_flush+0x8>

		/* Otherwise, requeue */
		} else {
			csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe3a:	f107 0108 	add.w	r1, r7, #8
 800fe3e:	4a08      	ldr	r2, [pc, #32]	; (800fe60 <csp_rdp_rx_queue_flush+0xd8>)
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fd fc44 	bl	800d6ce <csp_queue_enqueue_isr>
	for (i = 0; i < count; i++) {
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	617b      	str	r3, [r7, #20]
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	dba6      	blt.n	800fda2 <csp_rdp_rx_queue_flush+0x1a>
		}

	}

}
 800fe54:	e000      	b.n	800fe58 <csp_rdp_rx_queue_flush+0xd0>
			break;
 800fe56:	bf00      	nop
}
 800fe58:	bf00      	nop
 800fe5a:	3718      	adds	r7, #24
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	2000017c 	.word	0x2000017c
 800fe64:	2000011c 	.word	0x2000011c
 800fe68:	080155c4 	.word	0x080155c4
 800fe6c:	08015634 	.word	0x08015634
 800fe70:	08015668 	.word	0x08015668

0800fe74 <csp_rdp_seq_in_rx_queue>:

static inline bool csp_rdp_seq_in_rx_queue(csp_conn_t * conn, uint16_t seq_nr) {
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	807b      	strh	r3, [r7, #2]

	/* Loop through RX queue */
	int i, count;
	rdp_packet_t * packet;
	count = csp_queue_size(conn->rdp.rx_queue);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fd fc56 	bl	800d736 <csp_queue_size>
 800fe8a:	6138      	str	r0, [r7, #16]
	for (i = 0; i < count; i++) {
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	617b      	str	r3, [r7, #20]
 800fe90:	e043      	b.n	800ff1a <csp_rdp_seq_in_rx_queue+0xa6>

		if (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe96:	f107 0108 	add.w	r1, r7, #8
 800fe9a:	4a25      	ldr	r2, [pc, #148]	; (800ff30 <csp_rdp_seq_in_rx_queue+0xbc>)
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fd fc3a 	bl	800d716 <csp_queue_dequeue_isr>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d009      	beq.n	800febc <csp_rdp_seq_in_rx_queue+0x48>
			csp_log_error("RDP %p: Cannot dequeue from rx_queue in queue exists", conn);
 800fea8:	4b22      	ldr	r3, [pc, #136]	; (800ff34 <csp_rdp_seq_in_rx_queue+0xc0>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d039      	beq.n	800ff24 <csp_rdp_seq_in_rx_queue+0xb0>
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	4921      	ldr	r1, [pc, #132]	; (800ff38 <csp_rdp_seq_in_rx_queue+0xc4>)
 800feb4:	2000      	movs	r0, #0
 800feb6:	f7fe fb11 	bl	800e4dc <do_csp_debug>
			break;
 800feba:	e033      	b.n	800ff24 <csp_rdp_seq_in_rx_queue+0xb0>
		}

		csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fec0:	f107 0108 	add.w	r1, r7, #8
 800fec4:	4a1a      	ldr	r2, [pc, #104]	; (800ff30 <csp_rdp_seq_in_rx_queue+0xbc>)
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fd fc01 	bl	800d6ce <csp_queue_enqueue_isr>

		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff fcb8 	bl	800f844 <csp_rdp_header_ref>
 800fed4:	60f8      	str	r0, [r7, #12]
		csp_log_protocol("RDP %p: RX Queue exists matching Element, seq %u", conn, header->seq_nr);
 800fed6:	4b17      	ldr	r3, [pc, #92]	; (800ff34 <csp_rdp_seq_in_rx_queue+0xc0>)
 800fed8:	795b      	ldrb	r3, [r3, #5]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d008      	beq.n	800fef0 <csp_rdp_seq_in_rx_queue+0x7c>
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	4914      	ldr	r1, [pc, #80]	; (800ff3c <csp_rdp_seq_in_rx_queue+0xc8>)
 800feea:	2005      	movs	r0, #5
 800feec:	f7fe faf6 	bl	800e4dc <do_csp_debug>

		/* If the matching packet was found, deliver */
		if (header->seq_nr == seq_nr) {
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	887a      	ldrh	r2, [r7, #2]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d10a      	bne.n	800ff14 <csp_rdp_seq_in_rx_queue+0xa0>
                    csp_log_protocol("RDP %p: We have a match", conn);
 800fefe:	4b0d      	ldr	r3, [pc, #52]	; (800ff34 <csp_rdp_seq_in_rx_queue+0xc0>)
 800ff00:	795b      	ldrb	r3, [r3, #5]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d004      	beq.n	800ff10 <csp_rdp_seq_in_rx_queue+0x9c>
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	490d      	ldr	r1, [pc, #52]	; (800ff40 <csp_rdp_seq_in_rx_queue+0xcc>)
 800ff0a:	2005      	movs	r0, #5
 800ff0c:	f7fe fae6 	bl	800e4dc <do_csp_debug>
			return true;
 800ff10:	2301      	movs	r3, #1
 800ff12:	e009      	b.n	800ff28 <csp_rdp_seq_in_rx_queue+0xb4>
	for (i = 0; i < count; i++) {
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	3301      	adds	r3, #1
 800ff18:	617b      	str	r3, [r7, #20]
 800ff1a:	697a      	ldr	r2, [r7, #20]
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	dbb7      	blt.n	800fe92 <csp_rdp_seq_in_rx_queue+0x1e>
 800ff22:	e000      	b.n	800ff26 <csp_rdp_seq_in_rx_queue+0xb2>
			break;
 800ff24:	bf00      	nop
		}

	}

	return false;
 800ff26:	2300      	movs	r3, #0

}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3718      	adds	r7, #24
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	2000017c 	.word	0x2000017c
 800ff34:	2000011c 	.word	0x2000011c
 800ff38:	08015680 	.word	0x08015680
 800ff3c:	080156b8 	.word	0x080156b8
 800ff40:	080156ec 	.word	0x080156ec

0800ff44 <csp_rdp_rx_queue_add>:

static inline int csp_rdp_rx_queue_add(csp_conn_t * conn, csp_packet_t * packet, uint16_t seq_nr) {
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	4613      	mov	r3, r2
 800ff50:	80fb      	strh	r3, [r7, #6]

	if (csp_rdp_seq_in_rx_queue(conn, seq_nr))
 800ff52:	88fb      	ldrh	r3, [r7, #6]
 800ff54:	4619      	mov	r1, r3
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7ff ff8c 	bl	800fe74 <csp_rdp_seq_in_rx_queue>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d001      	beq.n	800ff66 <csp_rdp_rx_queue_add+0x22>
		return CSP_QUEUE_ERROR;
 800ff62:	2300      	movs	r3, #0
 800ff64:	e008      	b.n	800ff78 <csp_rdp_rx_queue_add+0x34>
	return csp_queue_enqueue_isr(conn->rdp.rx_queue, &packet, &pdTrue);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff6a:	f107 0108 	add.w	r1, r7, #8
 800ff6e:	4a04      	ldr	r2, [pc, #16]	; (800ff80 <csp_rdp_rx_queue_add+0x3c>)
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fd fbac 	bl	800d6ce <csp_queue_enqueue_isr>
 800ff76:	4603      	mov	r3, r0

}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	2000017c 	.word	0x2000017c

0800ff84 <csp_rdp_flush_eack>:

static void csp_rdp_flush_eack(csp_conn_t * conn, csp_packet_t * eack_packet) {
 800ff84:	b590      	push	{r4, r7, lr}
 800ff86:	b08d      	sub	sp, #52	; 0x34
 800ff88:	af02      	add	r7, sp, #8
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]

	/* Loop through TX queue */
	int i, j, count;
	rdp_packet_t * packet;
	count = csp_queue_size(conn->rdp.tx_queue);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fd fbcf 	bl	800d736 <csp_queue_size>
 800ff98:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < count; i++) {
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ff9e:	e0a7      	b.n	80100f0 <csp_rdp_flush_eack+0x16c>

		if (csp_queue_dequeue(conn->rdp.tx_queue, &packet, 0) != CSP_QUEUE_OK) {
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffa4:	f107 010c 	add.w	r1, r7, #12
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7fd fba0 	bl	800d6f0 <csp_queue_dequeue>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d00a      	beq.n	800ffcc <csp_rdp_flush_eack+0x48>
			csp_log_error("RDP %p: Cannot dequeue from tx_queue in flush EACK", conn);
 800ffb6:	4b54      	ldr	r3, [pc, #336]	; (8010108 <csp_rdp_flush_eack+0x184>)
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f000 809e 	beq.w	80100fc <csp_rdp_flush_eack+0x178>
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	4952      	ldr	r1, [pc, #328]	; (801010c <csp_rdp_flush_eack+0x188>)
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	f7fe fa89 	bl	800e4dc <do_csp_debug>
			break;
 800ffca:	e097      	b.n	80100fc <csp_rdp_flush_eack+0x178>
		}

		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff fc38 	bl	800f844 <csp_rdp_header_ref>
 800ffd4:	6178      	str	r0, [r7, #20]
		csp_log_protocol("RDP %p: EACK compare element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(header->seq_nr));
 800ffd6:	4b4c      	ldr	r3, [pc, #304]	; (8010108 <csp_rdp_flush_eack+0x184>)
 800ffd8:	795b      	ldrb	r3, [r3, #5]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d010      	beq.n	8010000 <csp_rdp_flush_eack+0x7c>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	685c      	ldr	r4, [r3, #4]
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fe fb0d 	bl	800e60a <csp_ntoh16>
 800fff0:	4603      	mov	r3, r0
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	4623      	mov	r3, r4
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	4945      	ldr	r1, [pc, #276]	; (8010110 <csp_rdp_flush_eack+0x18c>)
 800fffa:	2005      	movs	r0, #5
 800fffc:	f7fe fa6e 	bl	800e4dc <do_csp_debug>

		/* Look for this element in EACKs */
		int match = 0;
 8010000:	2300      	movs	r3, #0
 8010002:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < (int)((eack_packet->length - sizeof(rdp_header_t)) / sizeof(uint16_t)); j++) {
 8010004:	2300      	movs	r3, #0
 8010006:	623b      	str	r3, [r7, #32]
 8010008:	e046      	b.n	8010098 <csp_rdp_flush_eack+0x114>
			if (csp_ntoh16(eack_packet->data16[j]) == csp_ntoh16(header->seq_nr))
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	6a3a      	ldr	r2, [r7, #32]
 801000e:	3208      	adds	r2, #8
 8010010:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010014:	4618      	mov	r0, r3
 8010016:	f7fe faf8 	bl	800e60a <csp_ntoh16>
 801001a:	4603      	mov	r3, r0
 801001c:	461c      	mov	r4, r3
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010024:	b29b      	uxth	r3, r3
 8010026:	4618      	mov	r0, r3
 8010028:	f7fe faef 	bl	800e60a <csp_ntoh16>
 801002c:	4603      	mov	r3, r0
 801002e:	429c      	cmp	r4, r3
 8010030:	d101      	bne.n	8010036 <csp_rdp_flush_eack+0xb2>
				match = 1;
 8010032:	2301      	movs	r3, #1
 8010034:	61fb      	str	r3, [r7, #28]

			/* Enable this if you want EACK's to trigger retransmission */
			if (csp_ntoh16(eack_packet->data16[j]) > csp_ntoh16(header->seq_nr)) {
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	6a3a      	ldr	r2, [r7, #32]
 801003a:	3208      	adds	r2, #8
 801003c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010040:	4618      	mov	r0, r3
 8010042:	f7fe fae2 	bl	800e60a <csp_ntoh16>
 8010046:	4603      	mov	r3, r0
 8010048:	461c      	mov	r4, r3
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010050:	b29b      	uxth	r3, r3
 8010052:	4618      	mov	r0, r3
 8010054:	f7fe fad9 	bl	800e60a <csp_ntoh16>
 8010058:	4603      	mov	r3, r0
 801005a:	429c      	cmp	r4, r3
 801005c:	d919      	bls.n	8010092 <csp_rdp_flush_eack+0x10e>
				uint32_t time_now = csp_get_ms();
 801005e:	f7fd fc78 	bl	800d952 <csp_get_ms>
 8010062:	6138      	str	r0, [r7, #16]
				if (csp_rdp_time_after(time_now, packet->quarantine)) {
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4619      	mov	r1, r3
 801006a:	6938      	ldr	r0, [r7, #16]
 801006c:	f7ff fc51 	bl	800f912 <csp_rdp_time_after>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00d      	beq.n	8010092 <csp_rdp_flush_eack+0x10e>
					packet->timestamp = time_now - conn->rdp.packet_timeout - 1;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801007a:	693a      	ldr	r2, [r7, #16]
 801007c:	1ad2      	subs	r2, r2, r3
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	3a01      	subs	r2, #1
 8010082:	605a      	str	r2, [r3, #4]
					packet->quarantine = time_now +	conn->rdp.packet_timeout / 2;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010088:	0859      	lsrs	r1, r3, #1
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	440a      	add	r2, r1
 8010090:	601a      	str	r2, [r3, #0]
		for (j = 0; j < (int)((eack_packet->length - sizeof(rdp_header_t)) / sizeof(uint16_t)); j++) {
 8010092:	6a3b      	ldr	r3, [r7, #32]
 8010094:	3301      	adds	r3, #1
 8010096:	623b      	str	r3, [r7, #32]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	895b      	ldrh	r3, [r3, #10]
 801009c:	3b05      	subs	r3, #5
 801009e:	085b      	lsrs	r3, r3, #1
 80100a0:	461a      	mov	r2, r3
 80100a2:	6a3b      	ldr	r3, [r7, #32]
 80100a4:	4293      	cmp	r3, r2
 80100a6:	dbb0      	blt.n	801000a <csp_rdp_flush_eack+0x86>
				}
			}
		}

		if (match == 0) {
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d108      	bne.n	80100c0 <csp_rdp_flush_eack+0x13c>
			/* If not found, put back on tx queue */
			csp_queue_enqueue(conn->rdp.tx_queue, &packet, 0);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100b2:	f107 010c 	add.w	r1, r7, #12
 80100b6:	2200      	movs	r2, #0
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fd faf4 	bl	800d6a6 <csp_queue_enqueue>
 80100be:	e014      	b.n	80100ea <csp_rdp_flush_eack+0x166>
		} else {
			/* Found, free */
			csp_log_protocol("RDP %p: TX Element %u freed", conn, csp_ntoh16(header->seq_nr));
 80100c0:	4b11      	ldr	r3, [pc, #68]	; (8010108 <csp_rdp_flush_eack+0x184>)
 80100c2:	795b      	ldrb	r3, [r3, #5]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00c      	beq.n	80100e2 <csp_rdp_flush_eack+0x15e>
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fe fa9a 	bl	800e60a <csp_ntoh16>
 80100d6:	4603      	mov	r3, r0
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	490e      	ldr	r1, [pc, #56]	; (8010114 <csp_rdp_flush_eack+0x190>)
 80100dc:	2005      	movs	r0, #5
 80100de:	f7fe f9fd 	bl	800e4dc <do_csp_debug>
			csp_buffer_free(packet);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fd fd59 	bl	800db9c <csp_buffer_free>
	for (i = 0; i < count; i++) {
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	3301      	adds	r3, #1
 80100ee:	627b      	str	r3, [r7, #36]	; 0x24
 80100f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	f6ff af53 	blt.w	800ffa0 <csp_rdp_flush_eack+0x1c>
		}

	}

}
 80100fa:	e000      	b.n	80100fe <csp_rdp_flush_eack+0x17a>
			break;
 80100fc:	bf00      	nop
}
 80100fe:	bf00      	nop
 8010100:	372c      	adds	r7, #44	; 0x2c
 8010102:	46bd      	mov	sp, r7
 8010104:	bd90      	pop	{r4, r7, pc}
 8010106:	bf00      	nop
 8010108:	2000011c 	.word	0x2000011c
 801010c:	08015704 	.word	0x08015704
 8010110:	08015738 	.word	0x08015738
 8010114:	08015768 	.word	0x08015768

08010118 <csp_rdp_should_ack>:

static inline bool csp_rdp_should_ack(csp_conn_t * conn) {
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]

	/* If delayed ACKs are not used, always ACK */
	if (!conn->rdp.delayed_acks) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010124:	2b00      	cmp	r3, #0
 8010126:	d101      	bne.n	801012c <csp_rdp_should_ack+0x14>
		return true;
 8010128:	2301      	movs	r3, #1
 801012a:	e022      	b.n	8010172 <csp_rdp_should_ack+0x5a>
	}

	/* ACK if time since last ACK is greater than ACK timeout */
	uint32_t time_now = csp_get_ms();
 801012c:	f7fd fc11 	bl	800d952 <csp_get_ms>
 8010130:	60f8      	str	r0, [r7, #12]
	if (csp_rdp_time_after(time_now, conn->rdp.ack_timestamp + conn->rdp.ack_timeout))
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801013a:	4413      	add	r3, r2
 801013c:	4619      	mov	r1, r3
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f7ff fbe7 	bl	800f912 <csp_rdp_time_after>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d001      	beq.n	801014e <csp_rdp_should_ack+0x36>
		return true;
 801014a:	2301      	movs	r3, #1
 801014c:	e011      	b.n	8010172 <csp_rdp_should_ack+0x5a>

	/* ACK if number of unacknowledged packets is greater than delay count */
	if (csp_rdp_seq_after(conn->rdp.rcv_cur, conn->rdp.rcv_lsa + conn->rdp.ack_delay_count))
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801015a:	b29b      	uxth	r3, r3
 801015c:	4413      	add	r3, r2
 801015e:	b29b      	uxth	r3, r3
 8010160:	4619      	mov	r1, r3
 8010162:	f7ff fbb3 	bl	800f8cc <csp_rdp_seq_after>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <csp_rdp_should_ack+0x58>
		return true;
 801016c:	2301      	movs	r3, #1
 801016e:	e000      	b.n	8010172 <csp_rdp_should_ack+0x5a>

	return false;
 8010170:	2300      	movs	r3, #0

}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
	...

0801017c <csp_rdp_flush_all>:

void csp_rdp_flush_all(csp_conn_t * conn) {
 801017c:	b590      	push	{r4, r7, lr}
 801017e:	b087      	sub	sp, #28
 8010180:	af02      	add	r7, sp, #8
 8010182:	6078      	str	r0, [r7, #4]

	if ((conn == NULL) || conn->rdp.tx_queue == NULL) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d003      	beq.n	8010192 <csp_rdp_flush_all+0x16>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801018e:	2b00      	cmp	r3, #0
 8010190:	d129      	bne.n	80101e6 <csp_rdp_flush_all+0x6a>
		csp_log_error("RDP %p: Null pointer passed to rdp flush all", conn);
 8010192:	4b33      	ldr	r3, [pc, #204]	; (8010260 <csp_rdp_flush_all+0xe4>)
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d05d      	beq.n	8010256 <csp_rdp_flush_all+0xda>
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	4931      	ldr	r1, [pc, #196]	; (8010264 <csp_rdp_flush_all+0xe8>)
 801019e:	2000      	movs	r0, #0
 80101a0:	f7fe f99c 	bl	800e4dc <do_csp_debug>
 80101a4:	e058      	b.n	8010258 <csp_rdp_flush_all+0xdc>

	rdp_packet_t * packet;

	/* Empty TX queue */
	while (csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
		if (packet != NULL) {
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01c      	beq.n	80101e6 <csp_rdp_flush_all+0x6a>
			csp_log_protocol("RDP %p: Flush TX Element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(csp_rdp_header_ref((csp_packet_t *) packet)->seq_nr));
 80101ac:	4b2c      	ldr	r3, [pc, #176]	; (8010260 <csp_rdp_flush_all+0xe4>)
 80101ae:	795b      	ldrb	r3, [r3, #5]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d014      	beq.n	80101de <csp_rdp_flush_all+0x62>
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	685c      	ldr	r4, [r3, #4]
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7ff fb42 	bl	800f844 <csp_rdp_header_ref>
 80101c0:	4603      	mov	r3, r0
 80101c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fe fa1e 	bl	800e60a <csp_ntoh16>
 80101ce:	4603      	mov	r3, r0
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	4623      	mov	r3, r4
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	4924      	ldr	r1, [pc, #144]	; (8010268 <csp_rdp_flush_all+0xec>)
 80101d8:	2005      	movs	r0, #5
 80101da:	f7fe f97f 	bl	800e4dc <do_csp_debug>
			csp_buffer_free(packet);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fd fcdb 	bl	800db9c <csp_buffer_free>
	while (csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101ea:	f107 010c 	add.w	r1, r7, #12
 80101ee:	4a1f      	ldr	r2, [pc, #124]	; (801026c <csp_rdp_flush_all+0xf0>)
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fd fa90 	bl	800d716 <csp_queue_dequeue_isr>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d0d4      	beq.n	80101a6 <csp_rdp_flush_all+0x2a>
		}
	}

	/* Empty RX queue */
	while (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 80101fc:	e01f      	b.n	801023e <csp_rdp_flush_all+0xc2>
		if (packet != NULL) {
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d01c      	beq.n	801023e <csp_rdp_flush_all+0xc2>
			csp_log_protocol("RDP %p: Flush RX Element, time %"PRIu32", seq %u", conn, packet->timestamp, csp_ntoh16(csp_rdp_header_ref((csp_packet_t *) packet)->seq_nr));
 8010204:	4b16      	ldr	r3, [pc, #88]	; (8010260 <csp_rdp_flush_all+0xe4>)
 8010206:	795b      	ldrb	r3, [r3, #5]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d014      	beq.n	8010236 <csp_rdp_flush_all+0xba>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	685c      	ldr	r4, [r3, #4]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff fb16 	bl	800f844 <csp_rdp_header_ref>
 8010218:	4603      	mov	r3, r0
 801021a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801021e:	b29b      	uxth	r3, r3
 8010220:	4618      	mov	r0, r3
 8010222:	f7fe f9f2 	bl	800e60a <csp_ntoh16>
 8010226:	4603      	mov	r3, r0
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	4623      	mov	r3, r4
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	4910      	ldr	r1, [pc, #64]	; (8010270 <csp_rdp_flush_all+0xf4>)
 8010230:	2005      	movs	r0, #5
 8010232:	f7fe f953 	bl	800e4dc <do_csp_debug>
			csp_buffer_free(packet);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	4618      	mov	r0, r3
 801023a:	f7fd fcaf 	bl	800db9c <csp_buffer_free>
	while (csp_queue_dequeue_isr(conn->rdp.rx_queue, &packet, &pdTrue) == CSP_QUEUE_OK) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010242:	f107 010c 	add.w	r1, r7, #12
 8010246:	4a09      	ldr	r2, [pc, #36]	; (801026c <csp_rdp_flush_all+0xf0>)
 8010248:	4618      	mov	r0, r3
 801024a:	f7fd fa64 	bl	800d716 <csp_queue_dequeue_isr>
 801024e:	4603      	mov	r3, r0
 8010250:	2b01      	cmp	r3, #1
 8010252:	d0d4      	beq.n	80101fe <csp_rdp_flush_all+0x82>
 8010254:	e000      	b.n	8010258 <csp_rdp_flush_all+0xdc>
		return;
 8010256:	bf00      	nop
		}
	}

}
 8010258:	3714      	adds	r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	bd90      	pop	{r4, r7, pc}
 801025e:	bf00      	nop
 8010260:	2000011c 	.word	0x2000011c
 8010264:	08015784 	.word	0x08015784
 8010268:	080157b4 	.word	0x080157b4
 801026c:	2000017c 	.word	0x2000017c
 8010270:	080157e0 	.word	0x080157e0

08010274 <csp_rdp_check_ack>:


int csp_rdp_check_ack(csp_conn_t * conn) {
 8010274:	b590      	push	{r4, r7, lr}
 8010276:	b087      	sub	sp, #28
 8010278:	af02      	add	r7, sp, #8
 801027a:	6078      	str	r0, [r7, #4]

	/* Check all RX queues for spare capacity */
	int avail = 1;
 801027c:	2301      	movs	r3, #1
 801027e:	60fb      	str	r3, [r7, #12]
	for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8010280:	2300      	movs	r3, #0
 8010282:	60bb      	str	r3, [r7, #8]
 8010284:	e018      	b.n	80102b8 <csp_rdp_check_ack+0x44>
		if (csp_conf.conn_queue_length - csp_queue_size(conn->rx_queue[prio]) <= 2 * (int32_t)conn->rdp.window_size) {
 8010286:	4b1b      	ldr	r3, [pc, #108]	; (80102f4 <csp_rdp_check_ack+0x80>)
 8010288:	7c5b      	ldrb	r3, [r3, #17]
 801028a:	461c      	mov	r4, r3
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	3302      	adds	r3, #2
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	4413      	add	r3, r2
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	4618      	mov	r0, r3
 801029a:	f7fd fa4c 	bl	800d736 <csp_queue_size>
 801029e:	4603      	mov	r3, r0
 80102a0:	1ae2      	subs	r2, r4, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	429a      	cmp	r2, r3
 80102aa:	dc02      	bgt.n	80102b2 <csp_rdp_check_ack+0x3e>
			avail = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	60fb      	str	r3, [r7, #12]
			break;
 80102b0:	e005      	b.n	80102be <csp_rdp_check_ack+0x4a>
	for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	3301      	adds	r3, #1
 80102b6:	60bb      	str	r3, [r7, #8]
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	dde3      	ble.n	8010286 <csp_rdp_check_ack+0x12>
		}
	}

	/* If more space available, only send after ack timeout or immediately if delay_acks is zero */
	if (avail && csp_rdp_should_ack(conn)) {
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d011      	beq.n	80102e8 <csp_rdp_check_ack+0x74>
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f7ff ff27 	bl	8010118 <csp_rdp_should_ack>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d00b      	beq.n	80102e8 <csp_rdp_check_ack+0x74>
		csp_rdp_send_cmp(conn, NULL, RDP_ACK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	8bdb      	ldrh	r3, [r3, #30]
 80102d4:	461a      	mov	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	4613      	mov	r3, r2
 80102de:	2202      	movs	r2, #2
 80102e0:	2100      	movs	r1, #0
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7ff fb24 	bl	800f930 <csp_rdp_send_cmp>
	}

	return CSP_ERR_NONE;
 80102e8:	2300      	movs	r3, #0

}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd90      	pop	{r4, r7, pc}
 80102f2:	bf00      	nop
 80102f4:	2000aa24 	.word	0x2000aa24

080102f8 <csp_rdp_is_conn_ready_for_tx>:

static inline bool csp_rdp_is_conn_ready_for_tx(csp_conn_t * conn)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
	// Check Tx window (messages waiting for acks)
	if (csp_rdp_seq_after(conn->rdp.snd_nxt, conn->rdp.snd_una + conn->rdp.window_size - 1)) {
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8bd8      	ldrh	r0, [r3, #30]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	8c1a      	ldrh	r2, [r3, #32]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801030c:	b29b      	uxth	r3, r3
 801030e:	4413      	add	r3, r2
 8010310:	b29b      	uxth	r3, r3
 8010312:	3b01      	subs	r3, #1
 8010314:	b29b      	uxth	r3, r3
 8010316:	4619      	mov	r1, r3
 8010318:	f7ff fad8 	bl	800f8cc <csp_rdp_seq_after>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <csp_rdp_is_conn_ready_for_tx+0x2e>
		return false;
 8010322:	2300      	movs	r3, #0
 8010324:	e000      	b.n	8010328 <csp_rdp_is_conn_ready_for_tx+0x30>
	}
	return true;
 8010326:	2301      	movs	r3, #1
}
 8010328:	4618      	mov	r0, r3
 801032a:	3708      	adds	r7, #8
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <csp_rdp_check_timeouts>:
 * This function must be called with regular intervals for the
 * RDP protocol to work as expected. This takes care of closing
 * stale connections and retransmitting traffic. A good place to
 * call this function is from the CSP router task.
 */
void csp_rdp_check_timeouts(csp_conn_t * conn) {
 8010330:	b590      	push	{r4, r7, lr}
 8010332:	b08b      	sub	sp, #44	; 0x2c
 8010334:	af02      	add	r7, sp, #8
 8010336:	6078      	str	r0, [r7, #4]

	const uint32_t time_now = csp_get_ms();
 8010338:	f7fd fb0b 	bl	800d952 <csp_get_ms>
 801033c:	61b8      	str	r0, [r7, #24]

	/**
	 * CONNECTION TIMEOUT:
	 * Check that connection has not timed out inside the network stack
	 */
	if (conn->socket != NULL) {
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	691b      	ldr	r3, [r3, #16]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d020      	beq.n	8010388 <csp_rdp_check_timeouts+0x58>
		if (csp_rdp_time_after(time_now, conn->timestamp + conn->rdp.conn_timeout)) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	695a      	ldr	r2, [r3, #20]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801034e:	4413      	add	r3, r2
 8010350:	4619      	mov	r1, r3
 8010352:	69b8      	ldr	r0, [r7, #24]
 8010354:	f7ff fadd 	bl	800f912 <csp_rdp_time_after>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d014      	beq.n	8010388 <csp_rdp_check_timeouts+0x58>
			csp_log_warn("RDP %p: Found a lost connection (now: %"PRIu32", ts: %"PRIu32", to: %"PRIu32"), closing",
 801035e:	4b83      	ldr	r3, [pc, #524]	; (801056c <csp_rdp_check_timeouts+0x23c>)
 8010360:	785b      	ldrb	r3, [r3, #1]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00b      	beq.n	801037e <csp_rdp_check_timeouts+0x4e>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	695b      	ldr	r3, [r3, #20]
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801036e:	9201      	str	r2, [sp, #4]
 8010370:	9300      	str	r3, [sp, #0]
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	497e      	ldr	r1, [pc, #504]	; (8010570 <csp_rdp_check_timeouts+0x240>)
 8010378:	2001      	movs	r0, #1
 801037a:	f7fe f8af 	bl	800e4dc <do_csp_debug>
				conn, time_now, conn->timestamp, conn->rdp.conn_timeout);
			csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE | CSP_RDP_CLOSED_BY_PROTOCOL | CSP_RDP_CLOSED_BY_TIMEOUT);
 801037e:	2107      	movs	r1, #7
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7fd ff25 	bl	800e1d0 <csp_conn_close>
			return;
 8010386:	e0ee      	b.n	8010566 <csp_rdp_check_timeouts+0x236>

	/**
	 * CLOSE-WAIT TIMEOUT:
	 * After waiting a while in CLOSE-WAIT, the connection should be closed.
	 */
	if (conn->rdp.state == RDP_CLOSE_WAIT) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	7f1b      	ldrb	r3, [r3, #28]
 801038c:	2b04      	cmp	r3, #4
 801038e:	d111      	bne.n	80103b4 <csp_rdp_check_timeouts+0x84>
		if (csp_rdp_time_after(time_now, conn->timestamp + conn->rdp.conn_timeout)) {
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	695a      	ldr	r2, [r3, #20]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010398:	4413      	add	r3, r2
 801039a:	4619      	mov	r1, r3
 801039c:	69b8      	ldr	r0, [r7, #24]
 801039e:	f7ff fab8 	bl	800f912 <csp_rdp_time_after>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f000 80dd 	beq.w	8010564 <csp_rdp_check_timeouts+0x234>
			csp_conn_close(conn, CSP_RDP_CLOSED_BY_PROTOCOL | CSP_RDP_CLOSED_BY_TIMEOUT);
 80103aa:	2106      	movs	r1, #6
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7fd ff0f 	bl	800e1d0 <csp_conn_close>
		}
		return;
 80103b2:	e0d7      	b.n	8010564 <csp_rdp_check_timeouts+0x234>

	/**
	 * MESSAGE TIMEOUT:
	 * Check each outgoing message for TX timeout
	 */
	int count = csp_queue_size(conn->rdp.tx_queue);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fd f9bc 	bl	800d736 <csp_queue_size>
 80103be:	6178      	str	r0, [r7, #20]
	for (int i = 0; i < count; i++) {
 80103c0:	2300      	movs	r3, #0
 80103c2:	61fb      	str	r3, [r7, #28]
 80103c4:	e0a7      	b.n	8010516 <csp_rdp_check_timeouts+0x1e6>

		rdp_packet_t * packet;
		if ((csp_queue_dequeue_isr(conn->rdp.tx_queue, &packet, &pdTrue) != CSP_QUEUE_OK) || packet == NULL) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103ca:	f107 0108 	add.w	r1, r7, #8
 80103ce:	4a69      	ldr	r2, [pc, #420]	; (8010574 <csp_rdp_check_timeouts+0x244>)
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fd f9a0 	bl	800d716 <csp_queue_dequeue_isr>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d102      	bne.n	80103e2 <csp_rdp_check_timeouts+0xb2>
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d10a      	bne.n	80103f8 <csp_rdp_check_timeouts+0xc8>
			csp_log_warn("RDP %p: Cannot dequeue from tx_queue in check timeout", conn);
 80103e2:	4b62      	ldr	r3, [pc, #392]	; (801056c <csp_rdp_check_timeouts+0x23c>)
 80103e4:	785b      	ldrb	r3, [r3, #1]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	f000 809b 	beq.w	8010522 <csp_rdp_check_timeouts+0x1f2>
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	4962      	ldr	r1, [pc, #392]	; (8010578 <csp_rdp_check_timeouts+0x248>)
 80103f0:	2001      	movs	r0, #1
 80103f2:	f7fe f873 	bl	800e4dc <do_csp_debug>
 80103f6:	e095      	b.n	8010524 <csp_rdp_check_timeouts+0x1f4>
			break;
		}

		/* Get header */
		rdp_header_t * header = csp_rdp_header_ref((csp_packet_t *) packet);
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7ff fa22 	bl	800f844 <csp_rdp_header_ref>
 8010400:	6138      	str	r0, [r7, #16]

		/* If acked, do not retransmit */
		if (csp_rdp_seq_before(csp_ntoh16(header->seq_nr), conn->rdp.snd_una)) {
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010408:	b29b      	uxth	r3, r3
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe f8fd 	bl	800e60a <csp_ntoh16>
 8010410:	4603      	mov	r3, r0
 8010412:	461a      	mov	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	8c1b      	ldrh	r3, [r3, #32]
 8010418:	4619      	mov	r1, r3
 801041a:	4610      	mov	r0, r2
 801041c:	f7ff fa40 	bl	800f8a0 <csp_rdp_seq_before>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d01d      	beq.n	8010462 <csp_rdp_check_timeouts+0x132>
			csp_log_protocol("RDP %p: TX Element Free, time %"PRIu32", seq %u, una %u", conn, packet->timestamp, csp_ntoh16(header->seq_nr), conn->rdp.snd_una);
 8010426:	4b51      	ldr	r3, [pc, #324]	; (801056c <csp_rdp_check_timeouts+0x23c>)
 8010428:	795b      	ldrb	r3, [r3, #5]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d014      	beq.n	8010458 <csp_rdp_check_timeouts+0x128>
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	685c      	ldr	r4, [r3, #4]
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010438:	b29b      	uxth	r3, r3
 801043a:	4618      	mov	r0, r3
 801043c:	f7fe f8e5 	bl	800e60a <csp_ntoh16>
 8010440:	4603      	mov	r3, r0
 8010442:	461a      	mov	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	8c1b      	ldrh	r3, [r3, #32]
 8010448:	9301      	str	r3, [sp, #4]
 801044a:	9200      	str	r2, [sp, #0]
 801044c:	4623      	mov	r3, r4
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	494a      	ldr	r1, [pc, #296]	; (801057c <csp_rdp_check_timeouts+0x24c>)
 8010452:	2005      	movs	r0, #5
 8010454:	f7fe f842 	bl	800e4dc <do_csp_debug>
			csp_buffer_free(packet);
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	4618      	mov	r0, r3
 801045c:	f7fd fb9e 	bl	800db9c <csp_buffer_free>
 8010460:	e056      	b.n	8010510 <csp_rdp_check_timeouts+0x1e0>
			continue;
		}

		/* Check timestamp and retransmit if needed */
		if (csp_rdp_time_after(time_now, packet->timestamp + conn->rdp.packet_timeout)) {
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	685a      	ldr	r2, [r3, #4]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801046a:	4413      	add	r3, r2
 801046c:	4619      	mov	r1, r3
 801046e:	69b8      	ldr	r0, [r7, #24]
 8010470:	f7ff fa4f 	bl	800f912 <csp_rdp_time_after>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d042      	beq.n	8010500 <csp_rdp_check_timeouts+0x1d0>
			csp_log_protocol("RDP %p: TX Element timed out, retransmitting seq %u", conn, csp_ntoh16(header->seq_nr));
 801047a:	4b3c      	ldr	r3, [pc, #240]	; (801056c <csp_rdp_check_timeouts+0x23c>)
 801047c:	795b      	ldrb	r3, [r3, #5]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00c      	beq.n	801049c <csp_rdp_check_timeouts+0x16c>
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010488:	b29b      	uxth	r3, r3
 801048a:	4618      	mov	r0, r3
 801048c:	f7fe f8bd 	bl	800e60a <csp_ntoh16>
 8010490:	4603      	mov	r3, r0
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	493a      	ldr	r1, [pc, #232]	; (8010580 <csp_rdp_check_timeouts+0x250>)
 8010496:	2005      	movs	r0, #5
 8010498:	f7fe f820 	bl	800e4dc <do_csp_debug>

			/* Update to latest outgoing ACK */
			header->ack_nr = csp_hton16(conn->rdp.rcv_cur);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fe f89d 	bl	800e5e0 <csp_hton16>
 80104a6:	4603      	mov	r3, r0
 80104a8:	461a      	mov	r2, r3
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	f8a3 2003 	strh.w	r2, [r3, #3]

			/* Send copy to tx_queue */
			packet->timestamp = csp_get_ms();
 80104b0:	68bc      	ldr	r4, [r7, #8]
 80104b2:	f7fd fa4e 	bl	800d952 <csp_get_ms>
 80104b6:	4603      	mov	r3, r0
 80104b8:	6063      	str	r3, [r4, #4]
			csp_packet_t * new_packet = csp_buffer_clone(packet);
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7fd fbe5 	bl	800dc8c <csp_buffer_clone>
 80104c2:	60f8      	str	r0, [r7, #12]
			if (csp_send_direct(conn->idout, new_packet, csp_rtable_find_route(conn->idout.dst), 0) != CSP_ERR_NONE) {
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	895b      	ldrh	r3, [r3, #10]
 80104c8:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7ff f91a 	bl	800f708 <csp_rtable_find_route>
 80104d4:	4602      	mov	r2, r0
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	2300      	movs	r3, #0
 80104da:	68f9      	ldr	r1, [r7, #12]
 80104dc:	6880      	ldr	r0, [r0, #8]
 80104de:	f7fe f999 	bl	800e814 <csp_send_direct>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d00b      	beq.n	8010500 <csp_rdp_check_timeouts+0x1d0>
				csp_log_warn("RDP %p: Retransmission failed", conn);
 80104e8:	4b20      	ldr	r3, [pc, #128]	; (801056c <csp_rdp_check_timeouts+0x23c>)
 80104ea:	785b      	ldrb	r3, [r3, #1]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d004      	beq.n	80104fa <csp_rdp_check_timeouts+0x1ca>
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	4924      	ldr	r1, [pc, #144]	; (8010584 <csp_rdp_check_timeouts+0x254>)
 80104f4:	2001      	movs	r0, #1
 80104f6:	f7fd fff1 	bl	800e4dc <do_csp_debug>
				csp_buffer_free(new_packet);
 80104fa:	68f8      	ldr	r0, [r7, #12]
 80104fc:	f7fd fb4e 	bl	800db9c <csp_buffer_free>
			}

		}

		/* Requeue the TX element */
		csp_queue_enqueue_isr(conn->rdp.tx_queue, &packet, &pdTrue);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010504:	f107 0108 	add.w	r1, r7, #8
 8010508:	4a1a      	ldr	r2, [pc, #104]	; (8010574 <csp_rdp_check_timeouts+0x244>)
 801050a:	4618      	mov	r0, r3
 801050c:	f7fd f8df 	bl	800d6ce <csp_queue_enqueue_isr>
	for (int i = 0; i < count; i++) {
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	3301      	adds	r3, #1
 8010514:	61fb      	str	r3, [r7, #28]
 8010516:	69fa      	ldr	r2, [r7, #28]
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	429a      	cmp	r2, r3
 801051c:	f6ff af53 	blt.w	80103c6 <csp_rdp_check_timeouts+0x96>
 8010520:	e000      	b.n	8010524 <csp_rdp_check_timeouts+0x1f4>
			break;
 8010522:	bf00      	nop

	}

	if (conn->rdp.state == RDP_OPEN) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	7f1b      	ldrb	r3, [r3, #28]
 8010528:	2b03      	cmp	r3, #3
 801052a:	d11c      	bne.n	8010566 <csp_rdp_check_timeouts+0x236>

		/* Check if we have unacknowledged segments */
		if (conn->rdp.delayed_acks) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010530:	2b00      	cmp	r3, #0
 8010532:	d002      	beq.n	801053a <csp_rdp_check_timeouts+0x20a>
			csp_rdp_check_ack(conn);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff fe9d 	bl	8010274 <csp_rdp_check_ack>
		}

		/* Wake user task if additional Tx can be done */
		if (csp_rdp_is_conn_ready_for_tx(conn)) {
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff fedc 	bl	80102f8 <csp_rdp_is_conn_ready_for_tx>
 8010540:	4603      	mov	r3, r0
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00f      	beq.n	8010566 <csp_rdp_check_timeouts+0x236>
			csp_log_protocol("RDP %p: Wake Tx task (check timeouts)", conn);
 8010546:	4b09      	ldr	r3, [pc, #36]	; (801056c <csp_rdp_check_timeouts+0x23c>)
 8010548:	795b      	ldrb	r3, [r3, #5]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d004      	beq.n	8010558 <csp_rdp_check_timeouts+0x228>
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	490d      	ldr	r1, [pc, #52]	; (8010588 <csp_rdp_check_timeouts+0x258>)
 8010552:	2005      	movs	r0, #5
 8010554:	f7fd ffc2 	bl	800e4dc <do_csp_debug>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3348      	adds	r3, #72	; 0x48
 801055c:	4618      	mov	r0, r3
 801055e:	f7fd f94d 	bl	800d7fc <csp_bin_sem_post>
 8010562:	e000      	b.n	8010566 <csp_rdp_check_timeouts+0x236>
		return;
 8010564:	bf00      	nop
		}
	}
}
 8010566:	3724      	adds	r7, #36	; 0x24
 8010568:	46bd      	mov	sp, r7
 801056a:	bd90      	pop	{r4, r7, pc}
 801056c:	2000011c 	.word	0x2000011c
 8010570:	0801580c 	.word	0x0801580c
 8010574:	2000017c 	.word	0x2000017c
 8010578:	08015854 	.word	0x08015854
 801057c:	0801588c 	.word	0x0801588c
 8010580:	080158c0 	.word	0x080158c0
 8010584:	080158f4 	.word	0x080158f4
 8010588:	08015914 	.word	0x08015914

0801058c <csp_rdp_new_packet>:

bool csp_rdp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 801058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801058e:	b091      	sub	sp, #68	; 0x44
 8010590:	af08      	add	r7, sp, #32
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]

	bool close_connection = false;
 8010596:	2300      	movs	r3, #0
 8010598:	77fb      	strb	r3, [r7, #31]

	/* Get RX header and convert to host byte-order */
	rdp_header_t * rx_header = csp_rdp_header_ref(packet);
 801059a:	68b8      	ldr	r0, [r7, #8]
 801059c:	f7ff f952 	bl	800f844 <csp_rdp_header_ref>
 80105a0:	61b8      	str	r0, [r7, #24]
	rx_header->ack_nr = csp_ntoh16(rx_header->ack_nr);
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe f82d 	bl	800e60a <csp_ntoh16>
 80105b0:	4603      	mov	r3, r0
 80105b2:	461a      	mov	r2, r3
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	f8a3 2003 	strh.w	r2, [r3, #3]
	rx_header->seq_nr = csp_ntoh16(rx_header->seq_nr);
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fe f821 	bl	800e60a <csp_ntoh16>
 80105c8:	4603      	mov	r3, r0
 80105ca:	461a      	mov	r2, r3
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	f8a3 2001 	strh.w	r2, [r3, #1]

        uint8_t closed_by = CSP_RDP_CLOSED_BY_PROTOCOL;
 80105d2:	2302      	movs	r3, #2
 80105d4:	75fb      	strb	r3, [r7, #23]

	csp_log_protocol("RDP %p: Received in S %u: syn %u, ack %u, eack %u, "
 80105d6:	4b72      	ldr	r3, [pc, #456]	; (80107a0 <csp_rdp_new_packet+0x214>)
 80105d8:	795b      	ldrb	r3, [r3, #5]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d03a      	beq.n	8010654 <csp_rdp_new_packet+0xc8>
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	7f1b      	ldrb	r3, [r3, #28]
 80105e4:	469c      	mov	ip, r3
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	4619      	mov	r1, r3
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	4618      	mov	r0, r3
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010606:	b2db      	uxtb	r3, r3
 8010608:	461c      	mov	r4, r3
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010612:	b2db      	uxtb	r3, r3
 8010614:	461d      	mov	r5, r3
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801061c:	b29b      	uxth	r3, r3
 801061e:	461e      	mov	r6, r3
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010626:	b29b      	uxth	r3, r3
 8010628:	607b      	str	r3, [r7, #4]
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	895b      	ldrh	r3, [r3, #10]
 801062e:	603b      	str	r3, [r7, #0]
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	895b      	ldrh	r3, [r3, #10]
 8010634:	3b05      	subs	r3, #5
 8010636:	9307      	str	r3, [sp, #28]
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	9306      	str	r3, [sp, #24]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	9305      	str	r3, [sp, #20]
 8010640:	9604      	str	r6, [sp, #16]
 8010642:	9503      	str	r5, [sp, #12]
 8010644:	9402      	str	r4, [sp, #8]
 8010646:	9001      	str	r0, [sp, #4]
 8010648:	9100      	str	r1, [sp, #0]
 801064a:	4663      	mov	r3, ip
 801064c:	4955      	ldr	r1, [pc, #340]	; (80107a4 <csp_rdp_new_packet+0x218>)
 801064e:	2005      	movs	r0, #5
 8010650:	f7fd ff44 	bl	800e4dc <do_csp_debug>
			conn, conn->rdp.state, rx_header->syn, rx_header->ack, rx_header->eak,
			rx_header->rst, rx_header->seq_nr, rx_header->ack_nr,
			packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	/* If a RESET was received. */
	if (rx_header->rst) {
 8010654:	69bb      	ldr	r3, [r7, #24]
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	f003 0301 	and.w	r3, r3, #1
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	d06d      	beq.n	801073e <csp_rdp_new_packet+0x1b2>

		if (rx_header->ack) {
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	f003 0304 	and.w	r3, r3, #4
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b00      	cmp	r3, #0
 801066e:	d007      	beq.n	8010680 <csp_rdp_new_packet+0xf4>
			/* Store current ack'ed sequence number */
			conn->rdp.snd_una = rx_header->ack_nr + 1;
 8010670:	69bb      	ldr	r3, [r7, #24]
 8010672:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010676:	b29a      	uxth	r2, r3
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	3201      	adds	r2, #1
 801067c:	b292      	uxth	r2, r2
 801067e:	841a      	strh	r2, [r3, #32]
		}

		if (conn->rdp.state == RDP_CLOSED) {
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	7f1b      	ldrb	r3, [r3, #28]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d111      	bne.n	80106ac <csp_rdp_new_packet+0x120>
			csp_log_protocol("RDP %p: RST received in CLOSED - ignored", conn);
 8010688:	4b45      	ldr	r3, [pc, #276]	; (80107a0 <csp_rdp_new_packet+0x214>)
 801068a:	795b      	ldrb	r3, [r3, #5]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d005      	beq.n	801069c <csp_rdp_new_packet+0x110>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	461a      	mov	r2, r3
 8010694:	4944      	ldr	r1, [pc, #272]	; (80107a8 <csp_rdp_new_packet+0x21c>)
 8010696:	2005      	movs	r0, #5
 8010698:	f7fd ff20 	bl	800e4dc <do_csp_debug>
			close_connection = (conn->socket != NULL);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	691b      	ldr	r3, [r3, #16]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	bf14      	ite	ne
 80106a4:	2301      	movne	r3, #1
 80106a6:	2300      	moveq	r3, #0
 80106a8:	77fb      	strb	r3, [r7, #31]
			goto discard_open;
 80106aa:	e3ba      	b.n	8010e22 <csp_rdp_new_packet+0x896>
                }

		if (conn->rdp.state == RDP_CLOSE_WAIT) {
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	7f1b      	ldrb	r3, [r3, #28]
 80106b0:	2b04      	cmp	r3, #4
 80106b2:	d10f      	bne.n	80106d4 <csp_rdp_new_packet+0x148>
			csp_log_protocol("RDP %p: RST received in CLOSE_WAIT, ack: %d - closing", conn, rx_header->ack);
 80106b4:	4b3a      	ldr	r3, [pc, #232]	; (80107a0 <csp_rdp_new_packet+0x214>)
 80106b6:	795b      	ldrb	r3, [r3, #5]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 837c 	beq.w	8010db6 <csp_rdp_new_packet+0x82a>
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	4938      	ldr	r1, [pc, #224]	; (80107ac <csp_rdp_new_packet+0x220>)
 80106cc:	2005      	movs	r0, #5
 80106ce:	f7fd ff05 	bl	800e4dc <do_csp_debug>
			if (rx_header->ack && CSP_USE_RDP_FAST_CLOSE) {
				// skip timeout - the other end has acknowledged the RST
				closed_by |= CSP_RDP_CLOSED_BY_TIMEOUT;
			}
			goto discard_close;
 80106d2:	e370      	b.n	8010db6 <csp_rdp_new_packet+0x82a>
		}

		if (rx_header->seq_nr == (conn->rdp.rcv_cur + 1)) {
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80106da:	b29b      	uxth	r3, r3
 80106dc:	461a      	mov	r2, r3
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80106e2:	3301      	adds	r3, #1
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d11e      	bne.n	8010726 <csp_rdp_new_packet+0x19a>
			csp_log_protocol("RDP %p: Received RST in sequence, no more data incoming, reply with RST", conn);
 80106e8:	4b2d      	ldr	r3, [pc, #180]	; (80107a0 <csp_rdp_new_packet+0x214>)
 80106ea:	795b      	ldrb	r3, [r3, #5]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d005      	beq.n	80106fc <csp_rdp_new_packet+0x170>
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	461a      	mov	r2, r3
 80106f4:	492e      	ldr	r1, [pc, #184]	; (80107b0 <csp_rdp_new_packet+0x224>)
 80106f6:	2005      	movs	r0, #5
 80106f8:	f7fd fef0 	bl	800e4dc <do_csp_debug>
			conn->rdp.state = RDP_CLOSE_WAIT;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2204      	movs	r2, #4
 8010700:	771a      	strb	r2, [r3, #28]
			conn->timestamp = csp_get_ms();
 8010702:	68fc      	ldr	r4, [r7, #12]
 8010704:	f7fd f925 	bl	800d952 <csp_get_ms>
 8010708:	4603      	mov	r3, r0
 801070a:	6163      	str	r3, [r4, #20]
			csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	8bdb      	ldrh	r3, [r3, #30]
 8010712:	461a      	mov	r2, r3
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	4613      	mov	r3, r2
 801071c:	220a      	movs	r2, #10
 801071e:	2100      	movs	r1, #0
 8010720:	f7ff f906 	bl	800f930 <csp_rdp_send_cmp>
                        if (CSP_USE_RDP_FAST_CLOSE) {
                            closed_by |= CSP_RDP_CLOSED_BY_TIMEOUT;
                        }
			goto discard_close;
 8010724:	e352      	b.n	8010dcc <csp_rdp_new_packet+0x840>
		}

                csp_log_protocol("RDP %p: RST out of sequence, keep connection open", conn);
 8010726:	4b1e      	ldr	r3, [pc, #120]	; (80107a0 <csp_rdp_new_packet+0x214>)
 8010728:	795b      	ldrb	r3, [r3, #5]
 801072a:	2b00      	cmp	r3, #0
 801072c:	f000 8368 	beq.w	8010e00 <csp_rdp_new_packet+0x874>
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	461a      	mov	r2, r3
 8010734:	491f      	ldr	r1, [pc, #124]	; (80107b4 <csp_rdp_new_packet+0x228>)
 8010736:	2005      	movs	r0, #5
 8010738:	f7fd fed0 	bl	800e4dc <do_csp_debug>
		goto discard_open;
 801073c:	e360      	b.n	8010e00 <csp_rdp_new_packet+0x874>
	}

	/* The BIG FAT switch (state-machine) */
	switch(conn->rdp.state) {
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	7f1b      	ldrb	r3, [r3, #28]
 8010742:	2b04      	cmp	r3, #4
 8010744:	f200 832c 	bhi.w	8010da0 <csp_rdp_new_packet+0x814>
 8010748:	a201      	add	r2, pc, #4	; (adr r2, 8010750 <csp_rdp_new_packet+0x1c4>)
 801074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074e:	bf00      	nop
 8010750:	08010765 	.word	0x08010765
 8010754:	080108cd 	.word	0x080108cd
 8010758:	080109db 	.word	0x080109db
 801075c:	080109db 	.word	0x080109db
 8010760:	08010cb5 	.word	0x08010cb5
	 * STATE == CLOSED
	 */
	case RDP_CLOSED: {

		/* No SYN flag set while in closed. Inform by sending back RST */
		if (!rx_header->syn) {
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	f003 0308 	and.w	r3, r3, #8
 801076c:	b2db      	uxtb	r3, r3
 801076e:	2b00      	cmp	r3, #0
 8010770:	d124      	bne.n	80107bc <csp_rdp_new_packet+0x230>
			csp_log_protocol("RDP %p: Not SYN received in CLOSED state. Discarding packet", conn);
 8010772:	4b0b      	ldr	r3, [pc, #44]	; (80107a0 <csp_rdp_new_packet+0x214>)
 8010774:	795b      	ldrb	r3, [r3, #5]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d005      	beq.n	8010786 <csp_rdp_new_packet+0x1fa>
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	461a      	mov	r2, r3
 801077e:	490e      	ldr	r1, [pc, #56]	; (80107b8 <csp_rdp_new_packet+0x22c>)
 8010780:	2005      	movs	r0, #5
 8010782:	f7fd feab 	bl	800e4dc <do_csp_debug>
			csp_rdp_send_cmp(conn, NULL, RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	8bdb      	ldrh	r3, [r3, #30]
 801078c:	461a      	mov	r2, r3
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	4613      	mov	r3, r2
 8010796:	2208      	movs	r2, #8
 8010798:	2100      	movs	r1, #0
 801079a:	f7ff f8c9 	bl	800f930 <csp_rdp_send_cmp>
			goto discard_close;
 801079e:	e315      	b.n	8010dcc <csp_rdp_new_packet+0x840>
 80107a0:	2000011c 	.word	0x2000011c
 80107a4:	0801593c 	.word	0x0801593c
 80107a8:	080159a4 	.word	0x080159a4
 80107ac:	080159d0 	.word	0x080159d0
 80107b0:	08015a08 	.word	0x08015a08
 80107b4:	08015a50 	.word	0x08015a50
 80107b8:	08015a84 	.word	0x08015a84
		}

		csp_log_protocol("RDP %p: SYN-Received", conn);
 80107bc:	4b9e      	ldr	r3, [pc, #632]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 80107be:	795b      	ldrb	r3, [r3, #5]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d005      	beq.n	80107d0 <csp_rdp_new_packet+0x244>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	461a      	mov	r2, r3
 80107c8:	499c      	ldr	r1, [pc, #624]	; (8010a3c <csp_rdp_new_packet+0x4b0>)
 80107ca:	2005      	movs	r0, #5
 80107cc:	f7fd fe86 	bl	800e4dc <do_csp_debug>

		/* Setup TX seq. */
		conn->rdp.snd_iss = (uint16_t)rand();
 80107d0:	f001 fe3a 	bl	8012448 <rand>
 80107d4:	4602      	mov	r2, r0
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	b292      	uxth	r2, r2
 80107da:	845a      	strh	r2, [r3, #34]	; 0x22
		conn->rdp.snd_nxt = conn->rdp.snd_iss + 1;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	3201      	adds	r2, #1
 80107e4:	b292      	uxth	r2, r2
 80107e6:	83da      	strh	r2, [r3, #30]
		conn->rdp.snd_una = conn->rdp.snd_iss;
 80107e8:	68fa      	ldr	r2, [r7, #12]
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80107ee:	841a      	strh	r2, [r3, #32]

		/* Store RX seq. */
		conn->rdp.rcv_cur = rx_header->seq_nr;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	69ba      	ldr	r2, [r7, #24]
 80107f4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80107f8:	b292      	uxth	r2, r2
 80107fa:	849a      	strh	r2, [r3, #36]	; 0x24
		conn->rdp.rcv_irs = rx_header->seq_nr;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	69ba      	ldr	r2, [r7, #24]
 8010800:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8010804:	b292      	uxth	r2, r2
 8010806:	84da      	strh	r2, [r3, #38]	; 0x26
		conn->rdp.rcv_lsa = rx_header->seq_nr;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	69ba      	ldr	r2, [r7, #24]
 801080c:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8010810:	b292      	uxth	r2, r2
 8010812:	851a      	strh	r2, [r3, #40]	; 0x28

		/* Store RDP options */
		conn->rdp.window_size 		= csp_ntoh32(packet->data32[0]);
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	68fc      	ldr	r4, [r7, #12]
 801081a:	4618      	mov	r0, r3
 801081c:	f7fd ff1c 	bl	800e658 <csp_ntoh32>
 8010820:	4603      	mov	r3, r0
 8010822:	62e3      	str	r3, [r4, #44]	; 0x2c
		conn->rdp.conn_timeout 		= csp_ntoh32(packet->data32[1]);
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	695b      	ldr	r3, [r3, #20]
 8010828:	68fc      	ldr	r4, [r7, #12]
 801082a:	4618      	mov	r0, r3
 801082c:	f7fd ff14 	bl	800e658 <csp_ntoh32>
 8010830:	4603      	mov	r3, r0
 8010832:	6323      	str	r3, [r4, #48]	; 0x30
		conn->rdp.packet_timeout 	= csp_ntoh32(packet->data32[2]);
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	699b      	ldr	r3, [r3, #24]
 8010838:	68fc      	ldr	r4, [r7, #12]
 801083a:	4618      	mov	r0, r3
 801083c:	f7fd ff0c 	bl	800e658 <csp_ntoh32>
 8010840:	4603      	mov	r3, r0
 8010842:	6363      	str	r3, [r4, #52]	; 0x34
		conn->rdp.delayed_acks 		= csp_ntoh32(packet->data32[3]);
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	69db      	ldr	r3, [r3, #28]
 8010848:	68fc      	ldr	r4, [r7, #12]
 801084a:	4618      	mov	r0, r3
 801084c:	f7fd ff04 	bl	800e658 <csp_ntoh32>
 8010850:	4603      	mov	r3, r0
 8010852:	63a3      	str	r3, [r4, #56]	; 0x38
		conn->rdp.ack_timeout 		= csp_ntoh32(packet->data32[4]);
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	6a1b      	ldr	r3, [r3, #32]
 8010858:	68fc      	ldr	r4, [r7, #12]
 801085a:	4618      	mov	r0, r3
 801085c:	f7fd fefc 	bl	800e658 <csp_ntoh32>
 8010860:	4603      	mov	r3, r0
 8010862:	63e3      	str	r3, [r4, #60]	; 0x3c
		conn->rdp.ack_delay_count 	= csp_ntoh32(packet->data32[5]);
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010868:	68fc      	ldr	r4, [r7, #12]
 801086a:	4618      	mov	r0, r3
 801086c:	f7fd fef4 	bl	800e658 <csp_ntoh32>
 8010870:	4603      	mov	r3, r0
 8010872:	6423      	str	r3, [r4, #64]	; 0x40
		csp_log_protocol("RDP %p: window size %"PRIu32", conn timeout %"PRIu32", packet timeout %"PRIu32", delayed acks: %"PRIu32", ack timeout %"PRIu32", ack each %"PRIu32" packet",
 8010874:	4b70      	ldr	r3, [pc, #448]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 8010876:	795b      	ldrb	r3, [r3, #5]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d017      	beq.n	80108ac <csp_rdp_new_packet+0x320>
 801087c:	68fd      	ldr	r5, [r7, #12]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010886:	68fa      	ldr	r2, [r7, #12]
 8010888:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801088a:	68f9      	ldr	r1, [r7, #12]
 801088c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010892:	68fc      	ldr	r4, [r7, #12]
 8010894:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8010896:	9404      	str	r4, [sp, #16]
 8010898:	9003      	str	r0, [sp, #12]
 801089a:	9102      	str	r1, [sp, #8]
 801089c:	9201      	str	r2, [sp, #4]
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	4633      	mov	r3, r6
 80108a2:	462a      	mov	r2, r5
 80108a4:	4966      	ldr	r1, [pc, #408]	; (8010a40 <csp_rdp_new_packet+0x4b4>)
 80108a6:	2005      	movs	r0, #5
 80108a8:	f7fd fe18 	bl	800e4dc <do_csp_debug>
				conn, conn->rdp.window_size, conn->rdp.conn_timeout, conn->rdp.packet_timeout,
				conn->rdp.delayed_acks, conn->rdp.ack_timeout, conn->rdp.ack_delay_count);

		/* Connection accepted */
		conn->rdp.state = RDP_SYN_RCVD;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2202      	movs	r2, #2
 80108b0:	771a      	strb	r2, [r3, #28]

		/* Send SYN/ACK */
		csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_SYN, conn->rdp.snd_iss, conn->rdp.rcv_irs);
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80108b8:	461a      	mov	r2, r3
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	4613      	mov	r3, r2
 80108c2:	2203      	movs	r2, #3
 80108c4:	2100      	movs	r1, #0
 80108c6:	f7ff f833 	bl	800f930 <csp_rdp_send_cmp>

		goto discard_open;
 80108ca:	e2aa      	b.n	8010e22 <csp_rdp_new_packet+0x896>
	 * STATE == SYN-SENT
	 */
	case RDP_SYN_SENT: {

		/* First check SYN/ACK */
		if (rx_header->syn && rx_header->ack) {
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	f003 0308 	and.w	r3, r3, #8
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d050      	beq.n	801097c <csp_rdp_new_packet+0x3f0>
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	f003 0304 	and.w	r3, r3, #4
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d049      	beq.n	801097c <csp_rdp_new_packet+0x3f0>

			conn->rdp.rcv_cur = rx_header->seq_nr;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	69ba      	ldr	r2, [r7, #24]
 80108ec:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80108f0:	b292      	uxth	r2, r2
 80108f2:	849a      	strh	r2, [r3, #36]	; 0x24
			conn->rdp.rcv_irs = rx_header->seq_nr;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	69ba      	ldr	r2, [r7, #24]
 80108f8:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80108fc:	b292      	uxth	r2, r2
 80108fe:	84da      	strh	r2, [r3, #38]	; 0x26
			conn->rdp.rcv_lsa = rx_header->seq_nr - 1;
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010906:	b29a      	uxth	r2, r3
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	3a01      	subs	r2, #1
 801090c:	b292      	uxth	r2, r2
 801090e:	851a      	strh	r2, [r3, #40]	; 0x28
			conn->rdp.snd_una = rx_header->ack_nr + 1;
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010916:	b29a      	uxth	r2, r3
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	3201      	adds	r2, #1
 801091c:	b292      	uxth	r2, r2
 801091e:	841a      	strh	r2, [r3, #32]
			conn->rdp.ack_timestamp = csp_get_ms();
 8010920:	68fc      	ldr	r4, [r7, #12]
 8010922:	f7fd f816 	bl	800d952 <csp_get_ms>
 8010926:	4603      	mov	r3, r0
 8010928:	6463      	str	r3, [r4, #68]	; 0x44
			conn->rdp.state = RDP_OPEN;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2203      	movs	r2, #3
 801092e:	771a      	strb	r2, [r3, #28]

			csp_log_protocol("RDP %p: NP: Connection OPEN", conn);
 8010930:	4b41      	ldr	r3, [pc, #260]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 8010932:	795b      	ldrb	r3, [r3, #5]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d005      	beq.n	8010944 <csp_rdp_new_packet+0x3b8>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	461a      	mov	r2, r3
 801093c:	4941      	ldr	r1, [pc, #260]	; (8010a44 <csp_rdp_new_packet+0x4b8>)
 801093e:	2005      	movs	r0, #5
 8010940:	f7fd fdcc 	bl	800e4dc <do_csp_debug>

			/* Send ACK */
			csp_rdp_send_cmp(conn, NULL, RDP_ACK, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 8010944:	68f8      	ldr	r0, [r7, #12]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	8bdb      	ldrh	r3, [r3, #30]
 801094a:	461a      	mov	r2, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	4613      	mov	r3, r2
 8010954:	2202      	movs	r2, #2
 8010956:	2100      	movs	r1, #0
 8010958:	f7fe ffea 	bl	800f930 <csp_rdp_send_cmp>

			/* Wake TX task */
			csp_log_protocol("RDP %p: Wake Tx task (ack)", conn);
 801095c:	4b36      	ldr	r3, [pc, #216]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 801095e:	795b      	ldrb	r3, [r3, #5]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d005      	beq.n	8010970 <csp_rdp_new_packet+0x3e4>
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	461a      	mov	r2, r3
 8010968:	4937      	ldr	r1, [pc, #220]	; (8010a48 <csp_rdp_new_packet+0x4bc>)
 801096a:	2005      	movs	r0, #5
 801096c:	f7fd fdb6 	bl	800e4dc <do_csp_debug>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	3348      	adds	r3, #72	; 0x48
 8010974:	4618      	mov	r0, r3
 8010976:	f7fc ff41 	bl	800d7fc <csp_bin_sem_post>

			goto discard_open;
 801097a:	e252      	b.n	8010e22 <csp_rdp_new_packet+0x896>
		/* If there was no SYN in the reply, our SYN message hit an already open connection
		 * This is handled by sending a RST.
		 * Normally this would be followed up by a new connection attempt, however
		 * we don't have a method for signaling this to the user space.
		 */
		if (rx_header->ack) {
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	f003 0304 	and.w	r3, r3, #4
 8010984:	b2db      	uxtb	r3, r3
 8010986:	2b00      	cmp	r3, #0
 8010988:	d01b      	beq.n	80109c2 <csp_rdp_new_packet+0x436>
			csp_log_error("RDP %p: Half-open connection found, send RST and wake Tx task", conn);
 801098a:	4b2b      	ldr	r3, [pc, #172]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d005      	beq.n	801099e <csp_rdp_new_packet+0x412>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	461a      	mov	r2, r3
 8010996:	492d      	ldr	r1, [pc, #180]	; (8010a4c <csp_rdp_new_packet+0x4c0>)
 8010998:	2000      	movs	r0, #0
 801099a:	f7fd fd9f 	bl	800e4dc <do_csp_debug>
			csp_rdp_send_cmp(conn, NULL, RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	8bdb      	ldrh	r3, [r3, #30]
 80109a4:	461a      	mov	r2, r3
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	4613      	mov	r3, r2
 80109ae:	2208      	movs	r2, #8
 80109b0:	2100      	movs	r1, #0
 80109b2:	f7fe ffbd 	bl	800f930 <csp_rdp_send_cmp>
			csp_bin_sem_post(&conn->rdp.tx_wait);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	3348      	adds	r3, #72	; 0x48
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fc ff1e 	bl	800d7fc <csp_bin_sem_post>

			goto discard_open;
 80109c0:	e22f      	b.n	8010e22 <csp_rdp_new_packet+0x896>

		/* Otherwise we have an invalid command, such as a SYN reply to a SYN command,
		 * indicating simultaneous connections, which is not possible in the way CSP
		 * reserves some ports for server and some for clients.
		 */
		csp_log_error("RDP %p: Invalid reply to SYN request", conn);
 80109c2:	4b1d      	ldr	r3, [pc, #116]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 81f7 	beq.w	8010dba <csp_rdp_new_packet+0x82e>
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	461a      	mov	r2, r3
 80109d0:	491f      	ldr	r1, [pc, #124]	; (8010a50 <csp_rdp_new_packet+0x4c4>)
 80109d2:	2000      	movs	r0, #0
 80109d4:	f7fd fd82 	bl	800e4dc <do_csp_debug>
		goto discard_close;
 80109d8:	e1ef      	b.n	8010dba <csp_rdp_new_packet+0x82e>
	case RDP_SYN_RCVD:
	case RDP_OPEN:
	{

		/* SYN or !ACK is invalid */
		if (rx_header->syn || !rx_header->ack) {
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	f003 0308 	and.w	r3, r3, #8
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d106      	bne.n	80109f6 <csp_rdp_new_packet+0x46a>
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	f003 0304 	and.w	r3, r3, #4
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d132      	bne.n	8010a5c <csp_rdp_new_packet+0x4d0>
			if (rx_header->seq_nr != conn->rdp.rcv_irs) {
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80109fc:	b29a      	uxth	r2, r3
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d00b      	beq.n	8010a1e <csp_rdp_new_packet+0x492>
				csp_log_error("RDP %p: Invalid SYN or no ACK, resetting!", conn);
 8010a06:	4b0c      	ldr	r3, [pc, #48]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	f000 81d7 	beq.w	8010dbe <csp_rdp_new_packet+0x832>
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	461a      	mov	r2, r3
 8010a14:	490f      	ldr	r1, [pc, #60]	; (8010a54 <csp_rdp_new_packet+0x4c8>)
 8010a16:	2000      	movs	r0, #0
 8010a18:	f7fd fd60 	bl	800e4dc <do_csp_debug>
				goto discard_close;
 8010a1c:	e1cf      	b.n	8010dbe <csp_rdp_new_packet+0x832>
			} else {
				csp_log_protocol("RDP %p: Ignoring duplicate SYN packet!", conn);
 8010a1e:	4b06      	ldr	r3, [pc, #24]	; (8010a38 <csp_rdp_new_packet+0x4ac>)
 8010a20:	795b      	ldrb	r3, [r3, #5]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f000 81ee 	beq.w	8010e04 <csp_rdp_new_packet+0x878>
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	490a      	ldr	r1, [pc, #40]	; (8010a58 <csp_rdp_new_packet+0x4cc>)
 8010a2e:	2005      	movs	r0, #5
 8010a30:	f7fd fd54 	bl	800e4dc <do_csp_debug>
				goto discard_open;
 8010a34:	e1e6      	b.n	8010e04 <csp_rdp_new_packet+0x878>
 8010a36:	bf00      	nop
 8010a38:	2000011c 	.word	0x2000011c
 8010a3c:	08015ac0 	.word	0x08015ac0
 8010a40:	08015ad8 	.word	0x08015ad8
 8010a44:	08015b50 	.word	0x08015b50
 8010a48:	08015b6c 	.word	0x08015b6c
 8010a4c:	08015b88 	.word	0x08015b88
 8010a50:	08015bc8 	.word	0x08015bc8
 8010a54:	08015bf0 	.word	0x08015bf0
 8010a58:	08015c1c 	.word	0x08015c1c
			}
		}

		/* Check sequence number */
		if (!csp_rdp_seq_between(rx_header->seq_nr, conn->rdp.rcv_cur + 1, conn->rdp.rcv_cur + (conn->rdp.window_size * 2))) {
 8010a5c:	69bb      	ldr	r3, [r7, #24]
 8010a5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010a62:	b298      	uxth	r0, r3
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a68:	3301      	adds	r3, #1
 8010a6a:	b299      	uxth	r1, r3
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	005b      	lsls	r3, r3, #1
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	4413      	add	r3, r2
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	461a      	mov	r2, r3
 8010a80:	f7fe fef2 	bl	800f868 <csp_rdp_seq_between>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d135      	bne.n	8010af6 <csp_rdp_new_packet+0x56a>
			csp_log_protocol("RDP %p: Invalid sequence number! %u not between %u and %"PRIu32,
 8010a8a:	4b97      	ldr	r3, [pc, #604]	; (8010ce8 <csp_rdp_new_packet+0x75c>)
 8010a8c:	795b      	ldrb	r3, [r3, #5]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d017      	beq.n	8010ac2 <csp_rdp_new_packet+0x536>
 8010a92:	68f9      	ldr	r1, [r7, #12]
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	461c      	mov	r4, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	68fa      	ldr	r2, [r7, #12]
 8010aac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010aae:	0052      	lsls	r2, r2, #1
 8010ab0:	4402      	add	r2, r0
 8010ab2:	9201      	str	r2, [sp, #4]
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	4623      	mov	r3, r4
 8010ab8:	460a      	mov	r2, r1
 8010aba:	498c      	ldr	r1, [pc, #560]	; (8010cec <csp_rdp_new_packet+0x760>)
 8010abc:	2005      	movs	r0, #5
 8010abe:	f7fd fd0d 	bl	800e4dc <do_csp_debug>
				conn, rx_header->seq_nr, conn->rdp.rcv_cur + 1U, conn->rdp.rcv_cur + (conn->rdp.window_size * 2U));
			/* If duplicate SYN received, send another SYN/ACK */
			if (conn->rdp.state == RDP_SYN_RCVD)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	7f1b      	ldrb	r3, [r3, #28]
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d10b      	bne.n	8010ae2 <csp_rdp_new_packet+0x556>
				csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_SYN, conn->rdp.snd_iss, conn->rdp.rcv_irs);
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	2203      	movs	r2, #3
 8010adc:	2100      	movs	r1, #0
 8010ade:	f7fe ff27 	bl	800f930 <csp_rdp_send_cmp>
			/* If duplicate data packet received, send EACK back */
			if (conn->rdp.state == RDP_OPEN)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	7f1b      	ldrb	r3, [r3, #28]
 8010ae6:	2b03      	cmp	r3, #3
 8010ae8:	f040 818e 	bne.w	8010e08 <csp_rdp_new_packet+0x87c>
				csp_rdp_send_eack(conn);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7ff f844 	bl	800fb7c <csp_rdp_send_eack>

			goto discard_open;
 8010af4:	e188      	b.n	8010e08 <csp_rdp_new_packet+0x87c>
		}

		/* Check ACK number */
		if (!csp_rdp_seq_between(rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1)) {
 8010af6:	69bb      	ldr	r3, [r7, #24]
 8010af8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010afc:	b298      	uxth	r0, r3
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	8c1a      	ldrh	r2, [r3, #32]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	3b01      	subs	r3, #1
 8010b12:	b299      	uxth	r1, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	8bdb      	ldrh	r3, [r3, #30]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	f7fe fea3 	bl	800f868 <csp_rdp_seq_between>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d11e      	bne.n	8010b66 <csp_rdp_new_packet+0x5da>
			csp_log_error("RDP %p: Invalid ACK number! %u not between %"PRIu32" and %u",
 8010b28:	4b6f      	ldr	r3, [pc, #444]	; (8010ce8 <csp_rdp_new_packet+0x75c>)
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f000 816d 	beq.w	8010e0c <csp_rdp_new_packet+0x880>
 8010b32:	68f9      	ldr	r1, [r7, #12]
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	8c1b      	ldrh	r3, [r3, #32]
 8010b42:	461a      	mov	r2, r3
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b48:	005b      	lsls	r3, r3, #1
 8010b4a:	1ad3      	subs	r3, r2, r3
 8010b4c:	3b01      	subs	r3, #1
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	8bd2      	ldrh	r2, [r2, #30]
 8010b52:	3a01      	subs	r2, #1
 8010b54:	9201      	str	r2, [sp, #4]
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	4603      	mov	r3, r0
 8010b5a:	460a      	mov	r2, r1
 8010b5c:	4964      	ldr	r1, [pc, #400]	; (8010cf0 <csp_rdp_new_packet+0x764>)
 8010b5e:	2000      	movs	r0, #0
 8010b60:	f7fd fcbc 	bl	800e4dc <do_csp_debug>
				conn, rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1);
			goto discard_open;
 8010b64:	e152      	b.n	8010e0c <csp_rdp_new_packet+0x880>
		}

		/* Check SYN_RCVD ACK */
		if (conn->rdp.state == RDP_SYN_RCVD) {
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	7f1b      	ldrb	r3, [r3, #28]
 8010b6a:	2b02      	cmp	r3, #2
 8010b6c:	d13e      	bne.n	8010bec <csp_rdp_new_packet+0x660>
			if (rx_header->ack_nr != conn->rdp.snd_iss) {
 8010b6e:	69bb      	ldr	r3, [r7, #24]
 8010b70:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d00b      	beq.n	8010b96 <csp_rdp_new_packet+0x60a>
				csp_log_error("RDP %p: SYN-RCVD: Wrong ACK number", conn);
 8010b7e:	4b5a      	ldr	r3, [pc, #360]	; (8010ce8 <csp_rdp_new_packet+0x75c>)
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	f000 811d 	beq.w	8010dc2 <csp_rdp_new_packet+0x836>
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	4959      	ldr	r1, [pc, #356]	; (8010cf4 <csp_rdp_new_packet+0x768>)
 8010b8e:	2000      	movs	r0, #0
 8010b90:	f7fd fca4 	bl	800e4dc <do_csp_debug>
				goto discard_close;
 8010b94:	e115      	b.n	8010dc2 <csp_rdp_new_packet+0x836>
			}
			csp_log_protocol("RDP %p: NC: Connection OPEN", conn);
 8010b96:	4b54      	ldr	r3, [pc, #336]	; (8010ce8 <csp_rdp_new_packet+0x75c>)
 8010b98:	795b      	ldrb	r3, [r3, #5]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d005      	beq.n	8010baa <csp_rdp_new_packet+0x61e>
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	4955      	ldr	r1, [pc, #340]	; (8010cf8 <csp_rdp_new_packet+0x76c>)
 8010ba4:	2005      	movs	r0, #5
 8010ba6:	f7fd fc99 	bl	800e4dc <do_csp_debug>
			conn->rdp.state = RDP_OPEN;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2203      	movs	r2, #3
 8010bae:	771a      	strb	r2, [r3, #28]

			/* If a socket is set, this message is the first in a new connection
			 * so the connection must be queued to the socket. */
			if (conn->socket != NULL) {
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	691b      	ldr	r3, [r3, #16]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d019      	beq.n	8010bec <csp_rdp_new_packet+0x660>

				/* Try queueing */
				if (csp_queue_enqueue(conn->socket, &conn, 0) == CSP_QUEUE_FULL) {
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	691b      	ldr	r3, [r3, #16]
 8010bbc:	f107 010c 	add.w	r1, r7, #12
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fc fd6f 	bl	800d6a6 <csp_queue_enqueue>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10b      	bne.n	8010be6 <csp_rdp_new_packet+0x65a>
					csp_log_error("RDP %p: ERROR socket cannot accept more connections", conn);
 8010bce:	4b46      	ldr	r3, [pc, #280]	; (8010ce8 <csp_rdp_new_packet+0x75c>)
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f000 80f7 	beq.w	8010dc6 <csp_rdp_new_packet+0x83a>
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	461a      	mov	r2, r3
 8010bdc:	4947      	ldr	r1, [pc, #284]	; (8010cfc <csp_rdp_new_packet+0x770>)
 8010bde:	2000      	movs	r0, #0
 8010be0:	f7fd fc7c 	bl	800e4dc <do_csp_debug>
					goto discard_close;
 8010be4:	e0ef      	b.n	8010dc6 <csp_rdp_new_packet+0x83a>
				}

				/* Ensure that this connection will not be posted to this socket again
				 * and remember that the connection handle has been passed to userspace
				 * by setting the socket = NULL */
				conn->socket = NULL;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	611a      	str	r2, [r3, #16]
			}

		}

		/* Store current ack'ed sequence number */
		conn->rdp.snd_una = rx_header->ack_nr + 1;
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	3201      	adds	r2, #1
 8010bf8:	b292      	uxth	r2, r2
 8010bfa:	841a      	strh	r2, [r3, #32]

		/* We have an EACK */
		if (rx_header->eak) {
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	f003 0302 	and.w	r3, r3, #2
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00a      	beq.n	8010c20 <csp_rdp_new_packet+0x694>
			if (packet->length > sizeof(rdp_header_t))
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	895b      	ldrh	r3, [r3, #10]
 8010c0e:	2b05      	cmp	r3, #5
 8010c10:	f240 80fe 	bls.w	8010e10 <csp_rdp_new_packet+0x884>
				csp_rdp_flush_eack(conn, packet);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	68b9      	ldr	r1, [r7, #8]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff f9b3 	bl	800ff84 <csp_rdp_flush_eack>
			goto discard_open;
 8010c1e:	e0f7      	b.n	8010e10 <csp_rdp_new_packet+0x884>
		}

		/* If no data, return here */
		if (packet->length <= sizeof(rdp_header_t))
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	895b      	ldrh	r3, [r3, #10]
 8010c24:	2b05      	cmp	r3, #5
 8010c26:	f240 80f5 	bls.w	8010e14 <csp_rdp_new_packet+0x888>
			goto discard_open;

		/* If message is not in sequence, send EACK and store packet */
		if (rx_header->seq_nr != (uint16_t)(conn->rdp.rcv_cur + 1)) {
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010c30:	b29a      	uxth	r2, r3
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c36:	3301      	adds	r3, #1
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d01f      	beq.n	8010c7e <csp_rdp_new_packet+0x6f2>
			if (csp_rdp_rx_queue_add(conn, packet, rx_header->seq_nr) != CSP_QUEUE_OK) {
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	461a      	mov	r2, r3
 8010c4a:	68b9      	ldr	r1, [r7, #8]
 8010c4c:	f7ff f97a 	bl	800ff44 <csp_rdp_rx_queue_add>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d00e      	beq.n	8010c74 <csp_rdp_new_packet+0x6e8>
				csp_log_protocol("RDP %p: Duplicate sequence number", conn);
 8010c56:	4b24      	ldr	r3, [pc, #144]	; (8010ce8 <csp_rdp_new_packet+0x75c>)
 8010c58:	795b      	ldrb	r3, [r3, #5]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <csp_rdp_new_packet+0x6de>
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	461a      	mov	r2, r3
 8010c62:	4927      	ldr	r1, [pc, #156]	; (8010d00 <csp_rdp_new_packet+0x774>)
 8010c64:	2005      	movs	r0, #5
 8010c66:	f7fd fc39 	bl	800e4dc <do_csp_debug>
				csp_rdp_check_ack(conn);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fb01 	bl	8010274 <csp_rdp_check_ack>
				goto discard_open;
 8010c72:	e0d6      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			}
			csp_rdp_send_eack(conn);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fe ff80 	bl	800fb7c <csp_rdp_send_eack>
			goto accepted_open;
 8010c7c:	e0d4      	b.n	8010e28 <csp_rdp_new_packet+0x89c>
		}

		/* Store sequence number before stripping RDP header */
		uint16_t seq_nr = rx_header->seq_nr;
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	785a      	ldrb	r2, [r3, #1]
 8010c82:	789b      	ldrb	r3, [r3, #2]
 8010c84:	021b      	lsls	r3, r3, #8
 8010c86:	4313      	orrs	r3, r2
 8010c88:	82bb      	strh	r3, [r7, #20]

		/* Receive data */
		if (csp_rdp_receive_data(conn, packet) != CSP_ERR_NONE)
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	68b9      	ldr	r1, [r7, #8]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7ff f856 	bl	800fd40 <csp_rdp_receive_data>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f040 80be 	bne.w	8010e18 <csp_rdp_new_packet+0x88c>
			goto discard_open;

		/* Update last received packet */
		conn->rdp.rcv_cur = seq_nr;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	8aba      	ldrh	r2, [r7, #20]
 8010ca0:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Only ACK the message if there is room for a full window in the RX buffer.
		 * Unacknowledged segments are ACKed by csp_rdp_check_timeouts when the buffer is
		 * no longer full. */
		csp_rdp_check_ack(conn);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff fae5 	bl	8010274 <csp_rdp_check_ack>

		/* Flush RX queue */
		csp_rdp_rx_queue_flush(conn);
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7ff f86b 	bl	800fd88 <csp_rdp_rx_queue_flush>

		goto accepted_open;
 8010cb2:	e0b9      	b.n	8010e28 <csp_rdp_new_packet+0x89c>
	break;

	case RDP_CLOSE_WAIT:

		/* Ignore SYN or !ACK */
		if (rx_header->syn || !rx_header->ack) {
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	f003 0308 	and.w	r3, r3, #8
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d106      	bne.n	8010cd0 <csp_rdp_new_packet+0x744>
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	f003 0304 	and.w	r3, r3, #4
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d11b      	bne.n	8010d08 <csp_rdp_new_packet+0x77c>
			csp_log_protocol("RDP %p: Invalid SYN or no ACK in CLOSE-WAIT", conn);
 8010cd0:	4b05      	ldr	r3, [pc, #20]	; (8010ce8 <csp_rdp_new_packet+0x75c>)
 8010cd2:	795b      	ldrb	r3, [r3, #5]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f000 80a1 	beq.w	8010e1c <csp_rdp_new_packet+0x890>
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	4909      	ldr	r1, [pc, #36]	; (8010d04 <csp_rdp_new_packet+0x778>)
 8010ce0:	2005      	movs	r0, #5
 8010ce2:	f7fd fbfb 	bl	800e4dc <do_csp_debug>
			goto discard_open;
 8010ce6:	e099      	b.n	8010e1c <csp_rdp_new_packet+0x890>
 8010ce8:	2000011c 	.word	0x2000011c
 8010cec:	08015c44 	.word	0x08015c44
 8010cf0:	08015c80 	.word	0x08015c80
 8010cf4:	08015cb8 	.word	0x08015cb8
 8010cf8:	08015cdc 	.word	0x08015cdc
 8010cfc:	08015cf8 	.word	0x08015cf8
 8010d00:	08015d2c 	.word	0x08015d2c
 8010d04:	08015d50 	.word	0x08015d50
		}

		/* Check ACK number */
		if (!csp_rdp_seq_between(rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1)) {
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010d0e:	b298      	uxth	r0, r3
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	8c1a      	ldrh	r2, [r3, #32]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	005b      	lsls	r3, r3, #1
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	3b01      	subs	r3, #1
 8010d24:	b299      	uxth	r1, r3
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	8bdb      	ldrh	r3, [r3, #30]
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	461a      	mov	r2, r3
 8010d30:	f7fe fd9a 	bl	800f868 <csp_rdp_seq_between>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d11d      	bne.n	8010d76 <csp_rdp_new_packet+0x7ea>
			csp_log_error("RDP %p: Invalid ACK number! %u not between %"PRIu32" and %u",
 8010d3a:	4b3e      	ldr	r3, [pc, #248]	; (8010e34 <csp_rdp_new_packet+0x8a8>)
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d06e      	beq.n	8010e20 <csp_rdp_new_packet+0x894>
 8010d42:	68f9      	ldr	r1, [r7, #12]
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	8c1b      	ldrh	r3, [r3, #32]
 8010d52:	461a      	mov	r2, r3
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	3b01      	subs	r3, #1
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	8bd2      	ldrh	r2, [r2, #30]
 8010d62:	3a01      	subs	r2, #1
 8010d64:	9201      	str	r2, [sp, #4]
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	4603      	mov	r3, r0
 8010d6a:	460a      	mov	r2, r1
 8010d6c:	4932      	ldr	r1, [pc, #200]	; (8010e38 <csp_rdp_new_packet+0x8ac>)
 8010d6e:	2000      	movs	r0, #0
 8010d70:	f7fd fbb4 	bl	800e4dc <do_csp_debug>
				conn, rx_header->ack_nr, conn->rdp.snd_una - 1 - (conn->rdp.window_size * 2), conn->rdp.snd_nxt - 1);
			goto discard_open;
 8010d74:	e054      	b.n	8010e20 <csp_rdp_new_packet+0x894>
		}

		/* Store current ack'ed sequence number */
		conn->rdp.snd_una = rx_header->ack_nr + 1;
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	3201      	adds	r2, #1
 8010d82:	b292      	uxth	r2, r2
 8010d84:	841a      	strh	r2, [r3, #32]

		/* Send back a reset */
		csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	8bdb      	ldrh	r3, [r3, #30]
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	4613      	mov	r3, r2
 8010d96:	220a      	movs	r2, #10
 8010d98:	2100      	movs	r1, #0
 8010d9a:	f7fe fdc9 	bl	800f930 <csp_rdp_send_cmp>

		goto discard_open;
 8010d9e:	e040      	b.n	8010e22 <csp_rdp_new_packet+0x896>

	default:
            csp_log_error("RDP %p: ERROR default state!", conn);
 8010da0:	4b24      	ldr	r3, [pc, #144]	; (8010e34 <csp_rdp_new_packet+0x8a8>)
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d010      	beq.n	8010dca <csp_rdp_new_packet+0x83e>
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	461a      	mov	r2, r3
 8010dac:	4923      	ldr	r1, [pc, #140]	; (8010e3c <csp_rdp_new_packet+0x8b0>)
 8010dae:	2000      	movs	r0, #0
 8010db0:	f7fd fb94 	bl	800e4dc <do_csp_debug>
		goto discard_close;
 8010db4:	e009      	b.n	8010dca <csp_rdp_new_packet+0x83e>
			goto discard_close;
 8010db6:	bf00      	nop
 8010db8:	e008      	b.n	8010dcc <csp_rdp_new_packet+0x840>
		goto discard_close;
 8010dba:	bf00      	nop
 8010dbc:	e006      	b.n	8010dcc <csp_rdp_new_packet+0x840>
				goto discard_close;
 8010dbe:	bf00      	nop
 8010dc0:	e004      	b.n	8010dcc <csp_rdp_new_packet+0x840>
				goto discard_close;
 8010dc2:	bf00      	nop
 8010dc4:	e002      	b.n	8010dcc <csp_rdp_new_packet+0x840>
					goto discard_close;
 8010dc6:	bf00      	nop
 8010dc8:	e000      	b.n	8010dcc <csp_rdp_new_packet+0x840>
		goto discard_close;
 8010dca:	bf00      	nop
	}

discard_close:
	/* If user-space has received the connection handle, wake it up,
	 * by sending a NULL pointer, user-space must close connection */
	if (conn->socket == NULL) {
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d10b      	bne.n	8010dec <csp_rdp_new_packet+0x860>
		csp_conn_close(conn, closed_by);
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	7dfa      	ldrb	r2, [r7, #23]
 8010dd8:	4611      	mov	r1, r2
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fd f9f8 	bl	800e1d0 <csp_conn_close>
		csp_conn_enqueue_packet(conn, NULL);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2100      	movs	r1, #0
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fc ffcf 	bl	800dd88 <csp_conn_enqueue_packet>
 8010dea:	e01a      	b.n	8010e22 <csp_rdp_new_packet+0x896>
	} else {
		/* New connection, userspace doesn't know anything about it yet - so it can be completely closed */
		csp_conn_close(conn, closed_by | CSP_RDP_CLOSED_BY_USERSPACE);
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	7dfb      	ldrb	r3, [r7, #23]
 8010df0:	f043 0301 	orr.w	r3, r3, #1
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	4619      	mov	r1, r3
 8010df8:	4610      	mov	r0, r2
 8010dfa:	f7fd f9e9 	bl	800e1d0 <csp_conn_close>
 8010dfe:	e010      	b.n	8010e22 <csp_rdp_new_packet+0x896>
		goto discard_open;
 8010e00:	bf00      	nop
 8010e02:	e00e      	b.n	8010e22 <csp_rdp_new_packet+0x896>
				goto discard_open;
 8010e04:	bf00      	nop
 8010e06:	e00c      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			goto discard_open;
 8010e08:	bf00      	nop
 8010e0a:	e00a      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			goto discard_open;
 8010e0c:	bf00      	nop
 8010e0e:	e008      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			goto discard_open;
 8010e10:	bf00      	nop
 8010e12:	e006      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			goto discard_open;
 8010e14:	bf00      	nop
 8010e16:	e004      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			goto discard_open;
 8010e18:	bf00      	nop
 8010e1a:	e002      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			goto discard_open;
 8010e1c:	bf00      	nop
 8010e1e:	e000      	b.n	8010e22 <csp_rdp_new_packet+0x896>
			goto discard_open;
 8010e20:	bf00      	nop
	}

discard_open:
	csp_buffer_free(packet);
 8010e22:	68b8      	ldr	r0, [r7, #8]
 8010e24:	f7fc feba 	bl	800db9c <csp_buffer_free>
accepted_open:
	return close_connection;
 8010e28:	7ffb      	ldrb	r3, [r7, #31]

}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3724      	adds	r7, #36	; 0x24
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e32:	bf00      	nop
 8010e34:	2000011c 	.word	0x2000011c
 8010e38:	08015c80 	.word	0x08015c80
 8010e3c:	08015d7c 	.word	0x08015d7c

08010e40 <csp_rdp_connect>:

int csp_rdp_connect(csp_conn_t * conn) {
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]

	int retry = 1;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	60fb      	str	r3, [r7, #12]

	conn->rdp.window_size     = csp_rdp_window_size;
 8010e4c:	4b5e      	ldr	r3, [pc, #376]	; (8010fc8 <csp_rdp_connect+0x188>)
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	62da      	str	r2, [r3, #44]	; 0x2c
	conn->rdp.conn_timeout    = csp_rdp_conn_timeout;
 8010e54:	4b5d      	ldr	r3, [pc, #372]	; (8010fcc <csp_rdp_connect+0x18c>)
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	631a      	str	r2, [r3, #48]	; 0x30
	conn->rdp.packet_timeout  = csp_rdp_packet_timeout;
 8010e5c:	4b5c      	ldr	r3, [pc, #368]	; (8010fd0 <csp_rdp_connect+0x190>)
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	635a      	str	r2, [r3, #52]	; 0x34
	conn->rdp.delayed_acks    = csp_rdp_delayed_acks;
 8010e64:	4b5b      	ldr	r3, [pc, #364]	; (8010fd4 <csp_rdp_connect+0x194>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	639a      	str	r2, [r3, #56]	; 0x38
	conn->rdp.ack_timeout     = csp_rdp_ack_timeout;
 8010e6c:	4b5a      	ldr	r3, [pc, #360]	; (8010fd8 <csp_rdp_connect+0x198>)
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	63da      	str	r2, [r3, #60]	; 0x3c
	conn->rdp.ack_delay_count = csp_rdp_ack_delay_count;
 8010e74:	4b59      	ldr	r3, [pc, #356]	; (8010fdc <csp_rdp_connect+0x19c>)
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	641a      	str	r2, [r3, #64]	; 0x40
	conn->rdp.ack_timestamp   = csp_get_ms();
 8010e7c:	f7fc fd69 	bl	800d952 <csp_get_ms>
 8010e80:	4602      	mov	r2, r0
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	645a      	str	r2, [r3, #68]	; 0x44

retry:
	csp_log_protocol("RDP %p: Active connect, conn state %u", conn, conn->rdp.state);
 8010e86:	4b56      	ldr	r3, [pc, #344]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010e88:	795b      	ldrb	r3, [r3, #5]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d006      	beq.n	8010e9c <csp_rdp_connect+0x5c>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	7f1b      	ldrb	r3, [r3, #28]
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	4953      	ldr	r1, [pc, #332]	; (8010fe4 <csp_rdp_connect+0x1a4>)
 8010e96:	2005      	movs	r0, #5
 8010e98:	f7fd fb20 	bl	800e4dc <do_csp_debug>

	if (conn->rdp.state == RDP_OPEN) {
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	7f1b      	ldrb	r3, [r3, #28]
 8010ea0:	2b03      	cmp	r3, #3
 8010ea2:	d10b      	bne.n	8010ebc <csp_rdp_connect+0x7c>
		csp_log_error("RDP %p: Connection already open", conn);
 8010ea4:	4b4e      	ldr	r3, [pc, #312]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d004      	beq.n	8010eb6 <csp_rdp_connect+0x76>
 8010eac:	687a      	ldr	r2, [r7, #4]
 8010eae:	494e      	ldr	r1, [pc, #312]	; (8010fe8 <csp_rdp_connect+0x1a8>)
 8010eb0:	2000      	movs	r0, #0
 8010eb2:	f7fd fb13 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_ALREADY;
 8010eb6:	f06f 0306 	mvn.w	r3, #6
 8010eba:	e081      	b.n	8010fc0 <csp_rdp_connect+0x180>
	}

	/* Randomize ISS */
	conn->rdp.snd_iss = (uint16_t)rand();
 8010ebc:	f001 fac4 	bl	8012448 <rand>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	845a      	strh	r2, [r3, #34]	; 0x22
	conn->rdp.snd_nxt = conn->rdp.snd_iss + 1;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010ecc:	3301      	adds	r3, #1
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	83da      	strh	r2, [r3, #30]
	conn->rdp.snd_una = conn->rdp.snd_iss;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	841a      	strh	r2, [r3, #32]

	csp_log_protocol("RDP %p: AC: Sending SYN", conn);
 8010edc:	4b40      	ldr	r3, [pc, #256]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010ede:	795b      	ldrb	r3, [r3, #5]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d004      	beq.n	8010eee <csp_rdp_connect+0xae>
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	4941      	ldr	r1, [pc, #260]	; (8010fec <csp_rdp_connect+0x1ac>)
 8010ee8:	2005      	movs	r0, #5
 8010eea:	f7fd faf7 	bl	800e4dc <do_csp_debug>

	/* Ensure semaphore is busy, so router task can release it */
	csp_bin_sem_wait(&conn->rdp.tx_wait, 0);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	3348      	adds	r3, #72	; 0x48
 8010ef2:	2100      	movs	r1, #0
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fc fc5b 	bl	800d7b0 <csp_bin_sem_wait>

	/* Send SYN message */
	conn->rdp.state = RDP_SYN_SENT;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2201      	movs	r2, #1
 8010efe:	771a      	strb	r2, [r3, #28]
	if (csp_rdp_send_syn(conn) != CSP_ERR_NONE)
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7fe febf 	bl	800fc84 <csp_rdp_send_syn>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d144      	bne.n	8010f96 <csp_rdp_connect+0x156>
		goto error;

	/* Wait for router task to release semaphore */
	csp_log_protocol("RDP %p: AC: Waiting for SYN/ACK reply...", conn);
 8010f0c:	4b34      	ldr	r3, [pc, #208]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010f0e:	795b      	ldrb	r3, [r3, #5]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d004      	beq.n	8010f1e <csp_rdp_connect+0xde>
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	4936      	ldr	r1, [pc, #216]	; (8010ff0 <csp_rdp_connect+0x1b0>)
 8010f18:	2005      	movs	r0, #5
 8010f1a:	f7fd fadf 	bl	800e4dc <do_csp_debug>
	int result = csp_bin_sem_wait(&conn->rdp.tx_wait, conn->rdp.conn_timeout);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4610      	mov	r0, r2
 8010f2c:	f7fc fc40 	bl	800d7b0 <csp_bin_sem_wait>
 8010f30:	60b8      	str	r0, [r7, #8]

	if (result == CSP_SEMAPHORE_OK) {
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d130      	bne.n	8010f9a <csp_rdp_connect+0x15a>
		if (conn->rdp.state == RDP_OPEN) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	7f1b      	ldrb	r3, [r3, #28]
 8010f3c:	2b03      	cmp	r3, #3
 8010f3e:	d10a      	bne.n	8010f56 <csp_rdp_connect+0x116>
			csp_log_protocol("RDP %p: AC: Connection OPEN", conn);
 8010f40:	4b27      	ldr	r3, [pc, #156]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010f42:	795b      	ldrb	r3, [r3, #5]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d004      	beq.n	8010f52 <csp_rdp_connect+0x112>
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	492a      	ldr	r1, [pc, #168]	; (8010ff4 <csp_rdp_connect+0x1b4>)
 8010f4c:	2005      	movs	r0, #5
 8010f4e:	f7fd fac5 	bl	800e4dc <do_csp_debug>
			return CSP_ERR_NONE;
 8010f52:	2300      	movs	r3, #0
 8010f54:	e034      	b.n	8010fc0 <csp_rdp_connect+0x180>
		}
		if (conn->rdp.state == RDP_SYN_SENT) {
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	7f1b      	ldrb	r3, [r3, #28]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d11d      	bne.n	8010f9a <csp_rdp_connect+0x15a>
			if (retry) {
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00e      	beq.n	8010f82 <csp_rdp_connect+0x142>
				csp_log_warn("RDP %p: Half-open connection detected, RST sent, now retrying", conn);
 8010f64:	4b1e      	ldr	r3, [pc, #120]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010f66:	785b      	ldrb	r3, [r3, #1]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d004      	beq.n	8010f76 <csp_rdp_connect+0x136>
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	4922      	ldr	r1, [pc, #136]	; (8010ff8 <csp_rdp_connect+0x1b8>)
 8010f70:	2001      	movs	r0, #1
 8010f72:	f7fd fab3 	bl	800e4dc <do_csp_debug>
				csp_rdp_flush_all(conn);
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f7ff f900 	bl	801017c <csp_rdp_flush_all>
				retry = 0;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	60fb      	str	r3, [r7, #12]
				goto retry;
 8010f80:	e781      	b.n	8010e86 <csp_rdp_connect+0x46>
			}
			csp_log_error("RDP %p: Connection stayed half-open, even after RST and retry!", conn);
 8010f82:	4b17      	ldr	r3, [pc, #92]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d009      	beq.n	8010f9e <csp_rdp_connect+0x15e>
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	491b      	ldr	r1, [pc, #108]	; (8010ffc <csp_rdp_connect+0x1bc>)
 8010f8e:	2000      	movs	r0, #0
 8010f90:	f7fd faa4 	bl	800e4dc <do_csp_debug>
			goto error;
 8010f94:	e003      	b.n	8010f9e <csp_rdp_connect+0x15e>
		goto error;
 8010f96:	bf00      	nop
 8010f98:	e002      	b.n	8010fa0 <csp_rdp_connect+0x160>
		}
	}

error:
 8010f9a:	bf00      	nop
 8010f9c:	e000      	b.n	8010fa0 <csp_rdp_connect+0x160>
			goto error;
 8010f9e:	bf00      	nop
	csp_log_protocol("RDP %p: AC: Connection Failed", conn);
 8010fa0:	4b0f      	ldr	r3, [pc, #60]	; (8010fe0 <csp_rdp_connect+0x1a0>)
 8010fa2:	795b      	ldrb	r3, [r3, #5]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d004      	beq.n	8010fb2 <csp_rdp_connect+0x172>
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	4915      	ldr	r1, [pc, #84]	; (8011000 <csp_rdp_connect+0x1c0>)
 8010fac:	2005      	movs	r0, #5
 8010fae:	f7fd fa95 	bl	800e4dc <do_csp_debug>
	csp_rdp_close_internal(conn, CSP_RDP_CLOSED_BY_PROTOCOL, false);
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	2102      	movs	r1, #2
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 f9dc 	bl	8011374 <csp_rdp_close_internal>
	return CSP_ERR_TIMEDOUT;
 8010fbc:	f06f 0302 	mvn.w	r3, #2

}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	20000164 	.word	0x20000164
 8010fcc:	20000168 	.word	0x20000168
 8010fd0:	2000016c 	.word	0x2000016c
 8010fd4:	20000170 	.word	0x20000170
 8010fd8:	20000174 	.word	0x20000174
 8010fdc:	20000178 	.word	0x20000178
 8010fe0:	2000011c 	.word	0x2000011c
 8010fe4:	08015d9c 	.word	0x08015d9c
 8010fe8:	08015dc4 	.word	0x08015dc4
 8010fec:	08015de4 	.word	0x08015de4
 8010ff0:	08015dfc 	.word	0x08015dfc
 8010ff4:	08015e28 	.word	0x08015e28
 8010ff8:	08015e44 	.word	0x08015e44
 8010ffc:	08015e84 	.word	0x08015e84
 8011000:	08015ec4 	.word	0x08015ec4

08011004 <csp_rdp_send>:

int csp_rdp_send(csp_conn_t * conn, csp_packet_t * packet) {
 8011004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011008:	b08e      	sub	sp, #56	; 0x38
 801100a:	af08      	add	r7, sp, #32
 801100c:	60f8      	str	r0, [r7, #12]
 801100e:	60b9      	str	r1, [r7, #8]

	if (conn->rdp.state != RDP_OPEN) {
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	7f1b      	ldrb	r3, [r3, #28]
 8011014:	2b03      	cmp	r3, #3
 8011016:	d030      	beq.n	801107a <csp_rdp_send+0x76>
		csp_log_error("RDP %p: ERROR cannot send, connection not open (%d)", conn, conn->rdp.state);
 8011018:	4b82      	ldr	r3, [pc, #520]	; (8011224 <csp_rdp_send+0x220>)
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d006      	beq.n	801102e <csp_rdp_send+0x2a>
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	7f1b      	ldrb	r3, [r3, #28]
 8011024:	68fa      	ldr	r2, [r7, #12]
 8011026:	4980      	ldr	r1, [pc, #512]	; (8011228 <csp_rdp_send+0x224>)
 8011028:	2000      	movs	r0, #0
 801102a:	f7fd fa57 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_RESET;
 801102e:	f06f 0307 	mvn.w	r3, #7
 8011032:	e0f2      	b.n	801121a <csp_rdp_send+0x216>
	}

	while ((conn->rdp.state == RDP_OPEN) && (csp_rdp_is_conn_ready_for_tx(conn) == false)) {
		csp_log_protocol("RDP %p: Waiting for window update before sending seq %u", conn, conn->rdp.snd_nxt);
 8011034:	4b7b      	ldr	r3, [pc, #492]	; (8011224 <csp_rdp_send+0x220>)
 8011036:	795b      	ldrb	r3, [r3, #5]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d006      	beq.n	801104a <csp_rdp_send+0x46>
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	8bdb      	ldrh	r3, [r3, #30]
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	497a      	ldr	r1, [pc, #488]	; (801122c <csp_rdp_send+0x228>)
 8011044:	2005      	movs	r0, #5
 8011046:	f7fd fa49 	bl	800e4dc <do_csp_debug>
		if ((csp_bin_sem_wait(&conn->rdp.tx_wait, conn->rdp.conn_timeout)) != CSP_SEMAPHORE_OK) {
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011054:	4619      	mov	r1, r3
 8011056:	4610      	mov	r0, r2
 8011058:	f7fc fbaa 	bl	800d7b0 <csp_bin_sem_wait>
 801105c:	4603      	mov	r3, r0
 801105e:	2b01      	cmp	r3, #1
 8011060:	d00b      	beq.n	801107a <csp_rdp_send+0x76>
			csp_log_error("RDP %p: Timeout during send", conn);
 8011062:	4b70      	ldr	r3, [pc, #448]	; (8011224 <csp_rdp_send+0x220>)
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d004      	beq.n	8011074 <csp_rdp_send+0x70>
 801106a:	68fa      	ldr	r2, [r7, #12]
 801106c:	4970      	ldr	r1, [pc, #448]	; (8011230 <csp_rdp_send+0x22c>)
 801106e:	2000      	movs	r0, #0
 8011070:	f7fd fa34 	bl	800e4dc <do_csp_debug>
			return CSP_ERR_TIMEDOUT;
 8011074:	f06f 0302 	mvn.w	r3, #2
 8011078:	e0cf      	b.n	801121a <csp_rdp_send+0x216>
	while ((conn->rdp.state == RDP_OPEN) && (csp_rdp_is_conn_ready_for_tx(conn) == false)) {
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	7f1b      	ldrb	r3, [r3, #28]
 801107e:	2b03      	cmp	r3, #3
 8011080:	d108      	bne.n	8011094 <csp_rdp_send+0x90>
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f7ff f938 	bl	80102f8 <csp_rdp_is_conn_ready_for_tx>
 8011088:	4603      	mov	r3, r0
 801108a:	f083 0301 	eor.w	r3, r3, #1
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1cf      	bne.n	8011034 <csp_rdp_send+0x30>
		}
	}

	if (conn->rdp.state != RDP_OPEN) {
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	7f1b      	ldrb	r3, [r3, #28]
 8011098:	2b03      	cmp	r3, #3
 801109a:	d00d      	beq.n	80110b8 <csp_rdp_send+0xb4>
		csp_log_error("RDP %p: ERROR cannot send, connection not open (%d) -> reset", conn, conn->rdp.state);
 801109c:	4b61      	ldr	r3, [pc, #388]	; (8011224 <csp_rdp_send+0x220>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d006      	beq.n	80110b2 <csp_rdp_send+0xae>
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	7f1b      	ldrb	r3, [r3, #28]
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	4962      	ldr	r1, [pc, #392]	; (8011234 <csp_rdp_send+0x230>)
 80110ac:	2000      	movs	r0, #0
 80110ae:	f7fd fa15 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_RESET;
 80110b2:	f06f 0307 	mvn.w	r3, #7
 80110b6:	e0b0      	b.n	801121a <csp_rdp_send+0x216>
	}

	/* Add RDP header */
	rdp_header_t * tx_header = csp_rdp_header_add(packet);
 80110b8:	68b8      	ldr	r0, [r7, #8]
 80110ba:	f7fe fb87 	bl	800f7cc <csp_rdp_header_add>
 80110be:	6178      	str	r0, [r7, #20]
	if (tx_header == NULL) {
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d10b      	bne.n	80110de <csp_rdp_send+0xda>
		csp_log_error("RDP %p: No space for RDP header (send)", conn);
 80110c6:	4b57      	ldr	r3, [pc, #348]	; (8011224 <csp_rdp_send+0x220>)
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d004      	beq.n	80110d8 <csp_rdp_send+0xd4>
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	4959      	ldr	r1, [pc, #356]	; (8011238 <csp_rdp_send+0x234>)
 80110d2:	2000      	movs	r0, #0
 80110d4:	f7fd fa02 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOMEM;
 80110d8:	f04f 33ff 	mov.w	r3, #4294967295
 80110dc:	e09d      	b.n	801121a <csp_rdp_send+0x216>
        }
	tx_header->ack_nr = csp_hton16(conn->rdp.rcv_cur);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7fd fa7c 	bl	800e5e0 <csp_hton16>
 80110e8:	4603      	mov	r3, r0
 80110ea:	461a      	mov	r2, r3
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	f8a3 2003 	strh.w	r2, [r3, #3]
	tx_header->seq_nr = csp_hton16(conn->rdp.snd_nxt);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	8bdb      	ldrh	r3, [r3, #30]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fd fa72 	bl	800e5e0 <csp_hton16>
 80110fc:	4603      	mov	r3, r0
 80110fe:	461a      	mov	r2, r3
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	f8a3 2001 	strh.w	r2, [r3, #1]
	tx_header->ack = 1;
 8011106:	697a      	ldr	r2, [r7, #20]
 8011108:	7813      	ldrb	r3, [r2, #0]
 801110a:	f043 0304 	orr.w	r3, r3, #4
 801110e:	7013      	strb	r3, [r2, #0]

	/* Send copy to tx_queue */
	rdp_packet_t * rdp_packet = csp_buffer_clone(packet);
 8011110:	68b8      	ldr	r0, [r7, #8]
 8011112:	f7fc fdbb 	bl	800dc8c <csp_buffer_clone>
 8011116:	4603      	mov	r3, r0
 8011118:	613b      	str	r3, [r7, #16]
	if (rdp_packet == NULL) {
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10b      	bne.n	8011138 <csp_rdp_send+0x134>
		csp_log_error("RDP %p: Failed to allocate packet buffer", conn);
 8011120:	4b40      	ldr	r3, [pc, #256]	; (8011224 <csp_rdp_send+0x220>)
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d004      	beq.n	8011132 <csp_rdp_send+0x12e>
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	4944      	ldr	r1, [pc, #272]	; (801123c <csp_rdp_send+0x238>)
 801112c:	2000      	movs	r0, #0
 801112e:	f7fd f9d5 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOMEM;
 8011132:	f04f 33ff 	mov.w	r3, #4294967295
 8011136:	e070      	b.n	801121a <csp_rdp_send+0x216>
	}

	rdp_packet->timestamp = csp_get_ms();
 8011138:	693c      	ldr	r4, [r7, #16]
 801113a:	f7fc fc0a 	bl	800d952 <csp_get_ms>
 801113e:	4603      	mov	r3, r0
 8011140:	6063      	str	r3, [r4, #4]
	rdp_packet->quarantine = 0;
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	2200      	movs	r2, #0
 8011146:	601a      	str	r2, [r3, #0]
	if (csp_queue_enqueue(conn->rdp.tx_queue, &rdp_packet, 0) != CSP_QUEUE_OK) {
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801114c:	f107 0110 	add.w	r1, r7, #16
 8011150:	2200      	movs	r2, #0
 8011152:	4618      	mov	r0, r3
 8011154:	f7fc faa7 	bl	800d6a6 <csp_queue_enqueue>
 8011158:	4603      	mov	r3, r0
 801115a:	2b01      	cmp	r3, #1
 801115c:	d00f      	beq.n	801117e <csp_rdp_send+0x17a>
		csp_log_error("RDP %p: No more space in RDP retransmit queue", conn);
 801115e:	4b31      	ldr	r3, [pc, #196]	; (8011224 <csp_rdp_send+0x220>)
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d004      	beq.n	8011170 <csp_rdp_send+0x16c>
 8011166:	68fa      	ldr	r2, [r7, #12]
 8011168:	4935      	ldr	r1, [pc, #212]	; (8011240 <csp_rdp_send+0x23c>)
 801116a:	2000      	movs	r0, #0
 801116c:	f7fd f9b6 	bl	800e4dc <do_csp_debug>
		csp_buffer_free(rdp_packet);
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	4618      	mov	r0, r3
 8011174:	f7fc fd12 	bl	800db9c <csp_buffer_free>
		return CSP_ERR_NOBUFS;
 8011178:	f06f 0308 	mvn.w	r3, #8
 801117c:	e04d      	b.n	801121a <csp_rdp_send+0x216>
	}

	csp_log_protocol("RDP %p: Sending  in S %u: syn %u, ack %u, eack %u, "
 801117e:	4b29      	ldr	r3, [pc, #164]	; (8011224 <csp_rdp_send+0x220>)
 8011180:	795b      	ldrb	r3, [r3, #5]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d042      	beq.n	801120c <csp_rdp_send+0x208>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	7f1b      	ldrb	r3, [r3, #28]
 801118a:	4698      	mov	r8, r3
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011194:	b2db      	uxtb	r3, r3
 8011196:	461c      	mov	r4, r3
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	461d      	mov	r5, r3
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	461e      	mov	r6, r3
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	607b      	str	r3, [r7, #4]
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fd fa20 	bl	800e60a <csp_ntoh16>
 80111ca:	4603      	mov	r3, r0
 80111cc:	603b      	str	r3, [r7, #0]
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fd fa17 	bl	800e60a <csp_ntoh16>
 80111dc:	4603      	mov	r3, r0
 80111de:	461a      	mov	r2, r3
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	895b      	ldrh	r3, [r3, #10]
 80111e4:	4619      	mov	r1, r3
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	895b      	ldrh	r3, [r3, #10]
 80111ea:	3b05      	subs	r3, #5
 80111ec:	9307      	str	r3, [sp, #28]
 80111ee:	9106      	str	r1, [sp, #24]
 80111f0:	9205      	str	r2, [sp, #20]
 80111f2:	683a      	ldr	r2, [r7, #0]
 80111f4:	9204      	str	r2, [sp, #16]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	9303      	str	r3, [sp, #12]
 80111fa:	9602      	str	r6, [sp, #8]
 80111fc:	9501      	str	r5, [sp, #4]
 80111fe:	9400      	str	r4, [sp, #0]
 8011200:	4643      	mov	r3, r8
 8011202:	68fa      	ldr	r2, [r7, #12]
 8011204:	490f      	ldr	r1, [pc, #60]	; (8011244 <csp_rdp_send+0x240>)
 8011206:	2005      	movs	r0, #5
 8011208:	f7fd f968 	bl	800e4dc <do_csp_debug>
				"rst %u, seq_nr %5u, ack_nr %5u, packet_len %u (%u)",
				conn, conn->rdp.state, tx_header->syn, tx_header->ack, tx_header->eak,
				tx_header->rst, csp_ntoh16(tx_header->seq_nr), csp_ntoh16(tx_header->ack_nr),
				packet->length, (unsigned int)(packet->length - sizeof(rdp_header_t)));

	conn->rdp.snd_nxt++;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	8bdb      	ldrh	r3, [r3, #30]
 8011210:	3301      	adds	r3, #1
 8011212:	b29a      	uxth	r2, r3
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	83da      	strh	r2, [r3, #30]
	return CSP_ERR_NONE;
 8011218:	2300      	movs	r3, #0

}
 801121a:	4618      	mov	r0, r3
 801121c:	3718      	adds	r7, #24
 801121e:	46bd      	mov	sp, r7
 8011220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011224:	2000011c 	.word	0x2000011c
 8011228:	08015ee4 	.word	0x08015ee4
 801122c:	08015f18 	.word	0x08015f18
 8011230:	08015f50 	.word	0x08015f50
 8011234:	08015f6c 	.word	0x08015f6c
 8011238:	08015fac 	.word	0x08015fac
 801123c:	08015fd4 	.word	0x08015fd4
 8011240:	08016000 	.word	0x08016000
 8011244:	08016030 	.word	0x08016030

08011248 <csp_rdp_init>:

int csp_rdp_init(csp_conn_t * conn) {
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]

	csp_log_protocol("RDP %p: Creating RDP queues", conn);
 8011250:	4b37      	ldr	r3, [pc, #220]	; (8011330 <csp_rdp_init+0xe8>)
 8011252:	795b      	ldrb	r3, [r3, #5]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d004      	beq.n	8011262 <csp_rdp_init+0x1a>
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	4936      	ldr	r1, [pc, #216]	; (8011334 <csp_rdp_init+0xec>)
 801125c:	2005      	movs	r0, #5
 801125e:	f7fd f93d 	bl	800e4dc <do_csp_debug>

	/* Set initial state */
	conn->rdp.state = RDP_CLOSED;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2200      	movs	r2, #0
 8011266:	771a      	strb	r2, [r3, #28]
	conn->rdp.conn_timeout = csp_rdp_conn_timeout;
 8011268:	4b33      	ldr	r3, [pc, #204]	; (8011338 <csp_rdp_init+0xf0>)
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	631a      	str	r2, [r3, #48]	; 0x30
	conn->rdp.packet_timeout = csp_rdp_packet_timeout;
 8011270:	4b32      	ldr	r3, [pc, #200]	; (801133c <csp_rdp_init+0xf4>)
 8011272:	681a      	ldr	r2, [r3, #0]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	635a      	str	r2, [r3, #52]	; 0x34

	/* Create a binary semaphore to wait on for tasks */
	if (csp_bin_sem_create(&conn->rdp.tx_wait) != CSP_SEMAPHORE_OK) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3348      	adds	r3, #72	; 0x48
 801127c:	4618      	mov	r0, r3
 801127e:	f7fc fa66 	bl	800d74e <csp_bin_sem_create>
 8011282:	4603      	mov	r3, r0
 8011284:	2b01      	cmp	r3, #1
 8011286:	d00b      	beq.n	80112a0 <csp_rdp_init+0x58>
		csp_log_error("RDP %p: Failed to initialize semaphore", conn);
 8011288:	4b29      	ldr	r3, [pc, #164]	; (8011330 <csp_rdp_init+0xe8>)
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d004      	beq.n	801129a <csp_rdp_init+0x52>
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	492b      	ldr	r1, [pc, #172]	; (8011340 <csp_rdp_init+0xf8>)
 8011294:	2000      	movs	r0, #0
 8011296:	f7fd f921 	bl	800e4dc <do_csp_debug>
		return CSP_ERR_NOMEM;
 801129a:	f04f 33ff 	mov.w	r3, #4294967295
 801129e:	e042      	b.n	8011326 <csp_rdp_init+0xde>
	}

	/* Create TX queue */
	conn->rdp.tx_queue = csp_queue_create(csp_conf.rdp_max_window, sizeof(csp_packet_t *));
 80112a0:	4b28      	ldr	r3, [pc, #160]	; (8011344 <csp_rdp_init+0xfc>)
 80112a2:	7d1b      	ldrb	r3, [r3, #20]
 80112a4:	2104      	movs	r1, #4
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fc f9e2 	bl	800d670 <csp_queue_create>
 80112ac:	4602      	mov	r2, r0
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	64da      	str	r2, [r3, #76]	; 0x4c
	if (conn->rdp.tx_queue == NULL) {
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d110      	bne.n	80112dc <csp_rdp_init+0x94>
		csp_log_error("RDP %p: Failed to create TX queue for conn", conn);
 80112ba:	4b1d      	ldr	r3, [pc, #116]	; (8011330 <csp_rdp_init+0xe8>)
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d004      	beq.n	80112cc <csp_rdp_init+0x84>
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	4920      	ldr	r1, [pc, #128]	; (8011348 <csp_rdp_init+0x100>)
 80112c6:	2000      	movs	r0, #0
 80112c8:	f7fd f908 	bl	800e4dc <do_csp_debug>
		csp_bin_sem_remove(&conn->rdp.tx_wait);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	3348      	adds	r3, #72	; 0x48
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fc fa58 	bl	800d786 <csp_bin_sem_remove>
		return CSP_ERR_NOMEM;
 80112d6:	f04f 33ff 	mov.w	r3, #4294967295
 80112da:	e024      	b.n	8011326 <csp_rdp_init+0xde>
	}

	/* Create RX queue */
	conn->rdp.rx_queue = csp_queue_create(csp_conf.rdp_max_window * 2, sizeof(csp_packet_t *));
 80112dc:	4b19      	ldr	r3, [pc, #100]	; (8011344 <csp_rdp_init+0xfc>)
 80112de:	7d1b      	ldrb	r3, [r3, #20]
 80112e0:	005b      	lsls	r3, r3, #1
 80112e2:	2104      	movs	r1, #4
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fc f9c3 	bl	800d670 <csp_queue_create>
 80112ea:	4602      	mov	r2, r0
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	651a      	str	r2, [r3, #80]	; 0x50
	if (conn->rdp.rx_queue == NULL) {
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d115      	bne.n	8011324 <csp_rdp_init+0xdc>
		csp_log_error("RDP %p: Failed to create RX queue for conn", conn);
 80112f8:	4b0d      	ldr	r3, [pc, #52]	; (8011330 <csp_rdp_init+0xe8>)
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d004      	beq.n	801130a <csp_rdp_init+0xc2>
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	4912      	ldr	r1, [pc, #72]	; (801134c <csp_rdp_init+0x104>)
 8011304:	2000      	movs	r0, #0
 8011306:	f7fd f8e9 	bl	800e4dc <do_csp_debug>
		csp_bin_sem_remove(&conn->rdp.tx_wait);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	3348      	adds	r3, #72	; 0x48
 801130e:	4618      	mov	r0, r3
 8011310:	f7fc fa39 	bl	800d786 <csp_bin_sem_remove>
		csp_queue_remove(conn->rdp.tx_queue);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011318:	4618      	mov	r0, r3
 801131a:	f7fc f9b9 	bl	800d690 <csp_queue_remove>
		return CSP_ERR_NOMEM;
 801131e:	f04f 33ff 	mov.w	r3, #4294967295
 8011322:	e000      	b.n	8011326 <csp_rdp_init+0xde>
	}

	return CSP_ERR_NONE;
 8011324:	2300      	movs	r3, #0

}
 8011326:	4618      	mov	r0, r3
 8011328:	3708      	adds	r7, #8
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	2000011c 	.word	0x2000011c
 8011334:	08016098 	.word	0x08016098
 8011338:	20000168 	.word	0x20000168
 801133c:	2000016c 	.word	0x2000016c
 8011340:	080160b4 	.word	0x080160b4
 8011344:	2000aa24 	.word	0x2000aa24
 8011348:	080160dc 	.word	0x080160dc
 801134c:	08016108 	.word	0x08016108

08011350 <csp_rdp_close>:

/**
 * @note This function may only be called from csp_close, and is therefore
 * without any checks for null pointers.
 */
int csp_rdp_close(csp_conn_t * conn, uint8_t closed_by) {
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	460b      	mov	r3, r1
 801135a:	70fb      	strb	r3, [r7, #3]
    return csp_rdp_close_internal(conn, closed_by, true);
 801135c:	78fb      	ldrb	r3, [r7, #3]
 801135e:	2201      	movs	r2, #1
 8011360:	4619      	mov	r1, r3
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 f806 	bl	8011374 <csp_rdp_close_internal>
 8011368:	4603      	mov	r3, r0
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
	...

08011374 <csp_rdp_close_internal>:

static int csp_rdp_close_internal(csp_conn_t * conn, uint8_t closed_by, bool send_rst) {
 8011374:	b580      	push	{r7, lr}
 8011376:	b086      	sub	sp, #24
 8011378:	af04      	add	r7, sp, #16
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	460b      	mov	r3, r1
 801137e:	70fb      	strb	r3, [r7, #3]
 8011380:	4613      	mov	r3, r2
 8011382:	70bb      	strb	r3, [r7, #2]

	if (conn->rdp.state == RDP_CLOSED) {
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	7f1b      	ldrb	r3, [r3, #28]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d101      	bne.n	8011390 <csp_rdp_close_internal+0x1c>
		return CSP_ERR_NONE;
 801138c:	2300      	movs	r3, #0
 801138e:	e079      	b.n	8011484 <csp_rdp_close_internal+0x110>
	}

	conn->rdp.closed_by |= closed_by;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	7f5a      	ldrb	r2, [r3, #29]
 8011394:	78fb      	ldrb	r3, [r7, #3]
 8011396:	4313      	orrs	r3, r2
 8011398:	b2da      	uxtb	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	775a      	strb	r2, [r3, #29]

	/* If connection is open, send reset */
	if (conn->rdp.state != RDP_CLOSE_WAIT) {
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	7f1b      	ldrb	r3, [r3, #28]
 80113a2:	2b04      	cmp	r3, #4
 80113a4:	d02d      	beq.n	8011402 <csp_rdp_close_internal+0x8e>
		conn->rdp.state = RDP_CLOSE_WAIT;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2204      	movs	r2, #4
 80113aa:	771a      	strb	r2, [r3, #28]
		conn->timestamp = csp_get_ms();
 80113ac:	f7fc fad1 	bl	800d952 <csp_get_ms>
 80113b0:	4602      	mov	r2, r0
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	615a      	str	r2, [r3, #20]
		if (send_rst) {
 80113b6:	78bb      	ldrb	r3, [r7, #2]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00b      	beq.n	80113d4 <csp_rdp_close_internal+0x60>
			csp_rdp_send_cmp(conn, NULL, RDP_ACK | RDP_RST, conn->rdp.snd_nxt, conn->rdp.rcv_cur);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	8bdb      	ldrh	r3, [r3, #30]
 80113c0:	461a      	mov	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80113c6:	9300      	str	r3, [sp, #0]
 80113c8:	4613      	mov	r3, r2
 80113ca:	220a      	movs	r2, #10
 80113cc:	2100      	movs	r1, #0
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7fe faae 	bl	800f930 <csp_rdp_send_cmp>
		}
		csp_log_protocol("RDP %p: csp_rdp_close(0x%x)%s -> CLOSE_WAIT", conn, closed_by, send_rst ? ", sent RST" : "");
 80113d4:	4b2d      	ldr	r3, [pc, #180]	; (801148c <csp_rdp_close_internal+0x118>)
 80113d6:	795b      	ldrb	r3, [r3, #5]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00d      	beq.n	80113f8 <csp_rdp_close_internal+0x84>
 80113dc:	78fa      	ldrb	r2, [r7, #3]
 80113de:	78bb      	ldrb	r3, [r7, #2]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <csp_rdp_close_internal+0x74>
 80113e4:	4b2a      	ldr	r3, [pc, #168]	; (8011490 <csp_rdp_close_internal+0x11c>)
 80113e6:	e000      	b.n	80113ea <csp_rdp_close_internal+0x76>
 80113e8:	4b2a      	ldr	r3, [pc, #168]	; (8011494 <csp_rdp_close_internal+0x120>)
 80113ea:	9300      	str	r3, [sp, #0]
 80113ec:	4613      	mov	r3, r2
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	4929      	ldr	r1, [pc, #164]	; (8011498 <csp_rdp_close_internal+0x124>)
 80113f2:	2005      	movs	r0, #5
 80113f4:	f7fd f872 	bl	800e4dc <do_csp_debug>
		csp_bin_sem_post(&conn->rdp.tx_wait); // wake up any pendng Tx
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	3348      	adds	r3, #72	; 0x48
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7fc f9fd 	bl	800d7fc <csp_bin_sem_post>
	}

	if (conn->rdp.closed_by != CSP_RDP_CLOSED_BY_ALL) {
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	7f5b      	ldrb	r3, [r3, #29]
 8011406:	2b07      	cmp	r3, #7
 8011408:	d02b      	beq.n	8011462 <csp_rdp_close_internal+0xee>
		csp_log_protocol("RDP %p: csp_rdp_close(0x%x), waiting for:%s%s%s",
 801140a:	4b20      	ldr	r3, [pc, #128]	; (801148c <csp_rdp_close_internal+0x118>)
 801140c:	795b      	ldrb	r3, [r3, #5]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d024      	beq.n	801145c <csp_rdp_close_internal+0xe8>
 8011412:	78f8      	ldrb	r0, [r7, #3]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	7f5b      	ldrb	r3, [r3, #29]
 8011418:	f003 0301 	and.w	r3, r3, #1
 801141c:	2b00      	cmp	r3, #0
 801141e:	d001      	beq.n	8011424 <csp_rdp_close_internal+0xb0>
 8011420:	4b1c      	ldr	r3, [pc, #112]	; (8011494 <csp_rdp_close_internal+0x120>)
 8011422:	e000      	b.n	8011426 <csp_rdp_close_internal+0xb2>
 8011424:	4b1d      	ldr	r3, [pc, #116]	; (801149c <csp_rdp_close_internal+0x128>)
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	7f52      	ldrb	r2, [r2, #29]
 801142a:	f002 0202 	and.w	r2, r2, #2
 801142e:	2a00      	cmp	r2, #0
 8011430:	d001      	beq.n	8011436 <csp_rdp_close_internal+0xc2>
 8011432:	4a18      	ldr	r2, [pc, #96]	; (8011494 <csp_rdp_close_internal+0x120>)
 8011434:	e000      	b.n	8011438 <csp_rdp_close_internal+0xc4>
 8011436:	4a1a      	ldr	r2, [pc, #104]	; (80114a0 <csp_rdp_close_internal+0x12c>)
 8011438:	6879      	ldr	r1, [r7, #4]
 801143a:	7f49      	ldrb	r1, [r1, #29]
 801143c:	f001 0104 	and.w	r1, r1, #4
 8011440:	2900      	cmp	r1, #0
 8011442:	d001      	beq.n	8011448 <csp_rdp_close_internal+0xd4>
 8011444:	4913      	ldr	r1, [pc, #76]	; (8011494 <csp_rdp_close_internal+0x120>)
 8011446:	e000      	b.n	801144a <csp_rdp_close_internal+0xd6>
 8011448:	4916      	ldr	r1, [pc, #88]	; (80114a4 <csp_rdp_close_internal+0x130>)
 801144a:	9102      	str	r1, [sp, #8]
 801144c:	9201      	str	r2, [sp, #4]
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	4603      	mov	r3, r0
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	4914      	ldr	r1, [pc, #80]	; (80114a8 <csp_rdp_close_internal+0x134>)
 8011456:	2005      	movs	r0, #5
 8011458:	f7fd f840 	bl	800e4dc <do_csp_debug>
			conn, closed_by,
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_USERSPACE) ? "" : " userspace",
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_PROTOCOL) ? "" : " protocol",
			(conn->rdp.closed_by & CSP_RDP_CLOSED_BY_TIMEOUT) ? "" : " timeout");
		return CSP_ERR_AGAIN;
 801145c:	f06f 030b 	mvn.w	r3, #11
 8011460:	e010      	b.n	8011484 <csp_rdp_close_internal+0x110>
        }

        csp_log_protocol("RDP %p: csp_rdp_close(0x%x) -> CLOSED", conn, closed_by);
 8011462:	4b0a      	ldr	r3, [pc, #40]	; (801148c <csp_rdp_close_internal+0x118>)
 8011464:	795b      	ldrb	r3, [r3, #5]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d005      	beq.n	8011476 <csp_rdp_close_internal+0x102>
 801146a:	78fb      	ldrb	r3, [r7, #3]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	490f      	ldr	r1, [pc, #60]	; (80114ac <csp_rdp_close_internal+0x138>)
 8011470:	2005      	movs	r0, #5
 8011472:	f7fd f833 	bl	800e4dc <do_csp_debug>
	conn->rdp.state = RDP_CLOSED;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	771a      	strb	r2, [r3, #28]
        conn->rdp.closed_by = 0;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	775a      	strb	r2, [r3, #29]
	return CSP_ERR_NONE;
 8011482:	2300      	movs	r3, #0

}
 8011484:	4618      	mov	r0, r3
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	2000011c 	.word	0x2000011c
 8011490:	08016134 	.word	0x08016134
 8011494:	08016140 	.word	0x08016140
 8011498:	08016144 	.word	0x08016144
 801149c:	08016170 	.word	0x08016170
 80114a0:	0801617c 	.word	0x0801617c
 80114a4:	08016188 	.word	0x08016188
 80114a8:	08016194 	.word	0x08016194
 80114ac:	080161c4 	.word	0x080161c4

080114b0 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6839      	ldr	r1, [r7, #0]
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fc fc62 	bl	800dd88 <csp_conn_enqueue_packet>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	da0b      	bge.n	80114e2 <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 80114ca:	4b16      	ldr	r3, [pc, #88]	; (8011524 <csp_udp_new_packet+0x74>)
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d003      	beq.n	80114da <csp_udp_new_packet+0x2a>
 80114d2:	4915      	ldr	r1, [pc, #84]	; (8011528 <csp_udp_new_packet+0x78>)
 80114d4:	2000      	movs	r0, #0
 80114d6:	f7fd f801 	bl	800e4dc <do_csp_debug>
		csp_buffer_free(packet);
 80114da:	6838      	ldr	r0, [r7, #0]
 80114dc:	f7fc fb5e 	bl	800db9c <csp_buffer_free>
		return;
 80114e0:	e01d      	b.n	801151e <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d019      	beq.n	801151e <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	691b      	ldr	r3, [r3, #16]
 80114ee:	1d39      	adds	r1, r7, #4
 80114f0:	2200      	movs	r2, #0
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fc f8d7 	bl	800d6a6 <csp_queue_enqueue>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d00c      	beq.n	8011518 <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 80114fe:	4b09      	ldr	r3, [pc, #36]	; (8011524 <csp_udp_new_packet+0x74>)
 8011500:	785b      	ldrb	r3, [r3, #1]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d003      	beq.n	801150e <csp_udp_new_packet+0x5e>
 8011506:	4909      	ldr	r1, [pc, #36]	; (801152c <csp_udp_new_packet+0x7c>)
 8011508:	2001      	movs	r0, #1
 801150a:	f7fc ffe7 	bl	800e4dc <do_csp_debug>
			csp_close(conn);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4618      	mov	r0, r3
 8011512:	f7fc fe50 	bl	800e1b6 <csp_close>
			return;
 8011516:	e002      	b.n	801151e <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2200      	movs	r2, #0
 801151c:	611a      	str	r2, [r3, #16]
	}

}
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	2000011c 	.word	0x2000011c
 8011528:	08016224 	.word	0x08016224
 801152c:	08016244 	.word	0x08016244

08011530 <calloc>:
 8011530:	4b02      	ldr	r3, [pc, #8]	; (801153c <calloc+0xc>)
 8011532:	460a      	mov	r2, r1
 8011534:	4601      	mov	r1, r0
 8011536:	6818      	ldr	r0, [r3, #0]
 8011538:	f000 b96a 	b.w	8011810 <_calloc_r>
 801153c:	20000180 	.word	0x20000180

08011540 <exit>:
 8011540:	b508      	push	{r3, lr}
 8011542:	4b07      	ldr	r3, [pc, #28]	; (8011560 <exit+0x20>)
 8011544:	4604      	mov	r4, r0
 8011546:	b113      	cbz	r3, 801154e <exit+0xe>
 8011548:	2100      	movs	r1, #0
 801154a:	f3af 8000 	nop.w
 801154e:	4b05      	ldr	r3, [pc, #20]	; (8011564 <exit+0x24>)
 8011550:	6818      	ldr	r0, [r3, #0]
 8011552:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011554:	b103      	cbz	r3, 8011558 <exit+0x18>
 8011556:	4798      	blx	r3
 8011558:	4620      	mov	r0, r4
 801155a:	f003 f931 	bl	80147c0 <_exit>
 801155e:	bf00      	nop
 8011560:	00000000 	.word	0x00000000
 8011564:	0801639c 	.word	0x0801639c

08011568 <std>:
 8011568:	2300      	movs	r3, #0
 801156a:	b510      	push	{r4, lr}
 801156c:	4604      	mov	r4, r0
 801156e:	e9c0 3300 	strd	r3, r3, [r0]
 8011572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011576:	6083      	str	r3, [r0, #8]
 8011578:	8181      	strh	r1, [r0, #12]
 801157a:	6643      	str	r3, [r0, #100]	; 0x64
 801157c:	81c2      	strh	r2, [r0, #14]
 801157e:	6183      	str	r3, [r0, #24]
 8011580:	4619      	mov	r1, r3
 8011582:	2208      	movs	r2, #8
 8011584:	305c      	adds	r0, #92	; 0x5c
 8011586:	f000 f93b 	bl	8011800 <memset>
 801158a:	4b05      	ldr	r3, [pc, #20]	; (80115a0 <std+0x38>)
 801158c:	6263      	str	r3, [r4, #36]	; 0x24
 801158e:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <std+0x3c>)
 8011590:	62a3      	str	r3, [r4, #40]	; 0x28
 8011592:	4b05      	ldr	r3, [pc, #20]	; (80115a8 <std+0x40>)
 8011594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011596:	4b05      	ldr	r3, [pc, #20]	; (80115ac <std+0x44>)
 8011598:	6224      	str	r4, [r4, #32]
 801159a:	6323      	str	r3, [r4, #48]	; 0x30
 801159c:	bd10      	pop	{r4, pc}
 801159e:	bf00      	nop
 80115a0:	080125f9 	.word	0x080125f9
 80115a4:	0801261b 	.word	0x0801261b
 80115a8:	08012653 	.word	0x08012653
 80115ac:	08012677 	.word	0x08012677

080115b0 <_cleanup_r>:
 80115b0:	4901      	ldr	r1, [pc, #4]	; (80115b8 <_cleanup_r+0x8>)
 80115b2:	f000 b8af 	b.w	8011714 <_fwalk_reent>
 80115b6:	bf00      	nop
 80115b8:	08013721 	.word	0x08013721

080115bc <__sfmoreglue>:
 80115bc:	b570      	push	{r4, r5, r6, lr}
 80115be:	2268      	movs	r2, #104	; 0x68
 80115c0:	1e4d      	subs	r5, r1, #1
 80115c2:	4355      	muls	r5, r2
 80115c4:	460e      	mov	r6, r1
 80115c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115ca:	f000 f9a3 	bl	8011914 <_malloc_r>
 80115ce:	4604      	mov	r4, r0
 80115d0:	b140      	cbz	r0, 80115e4 <__sfmoreglue+0x28>
 80115d2:	2100      	movs	r1, #0
 80115d4:	e9c0 1600 	strd	r1, r6, [r0]
 80115d8:	300c      	adds	r0, #12
 80115da:	60a0      	str	r0, [r4, #8]
 80115dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115e0:	f000 f90e 	bl	8011800 <memset>
 80115e4:	4620      	mov	r0, r4
 80115e6:	bd70      	pop	{r4, r5, r6, pc}

080115e8 <__sfp_lock_acquire>:
 80115e8:	4801      	ldr	r0, [pc, #4]	; (80115f0 <__sfp_lock_acquire+0x8>)
 80115ea:	f000 b8d8 	b.w	801179e <__retarget_lock_acquire_recursive>
 80115ee:	bf00      	nop
 80115f0:	2000aa51 	.word	0x2000aa51

080115f4 <__sfp_lock_release>:
 80115f4:	4801      	ldr	r0, [pc, #4]	; (80115fc <__sfp_lock_release+0x8>)
 80115f6:	f000 b8d3 	b.w	80117a0 <__retarget_lock_release_recursive>
 80115fa:	bf00      	nop
 80115fc:	2000aa51 	.word	0x2000aa51

08011600 <__sinit_lock_acquire>:
 8011600:	4801      	ldr	r0, [pc, #4]	; (8011608 <__sinit_lock_acquire+0x8>)
 8011602:	f000 b8cc 	b.w	801179e <__retarget_lock_acquire_recursive>
 8011606:	bf00      	nop
 8011608:	2000aa52 	.word	0x2000aa52

0801160c <__sinit_lock_release>:
 801160c:	4801      	ldr	r0, [pc, #4]	; (8011614 <__sinit_lock_release+0x8>)
 801160e:	f000 b8c7 	b.w	80117a0 <__retarget_lock_release_recursive>
 8011612:	bf00      	nop
 8011614:	2000aa52 	.word	0x2000aa52

08011618 <__sinit>:
 8011618:	b510      	push	{r4, lr}
 801161a:	4604      	mov	r4, r0
 801161c:	f7ff fff0 	bl	8011600 <__sinit_lock_acquire>
 8011620:	69a3      	ldr	r3, [r4, #24]
 8011622:	b11b      	cbz	r3, 801162c <__sinit+0x14>
 8011624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011628:	f7ff bff0 	b.w	801160c <__sinit_lock_release>
 801162c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011630:	6523      	str	r3, [r4, #80]	; 0x50
 8011632:	4b13      	ldr	r3, [pc, #76]	; (8011680 <__sinit+0x68>)
 8011634:	4a13      	ldr	r2, [pc, #76]	; (8011684 <__sinit+0x6c>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	62a2      	str	r2, [r4, #40]	; 0x28
 801163a:	42a3      	cmp	r3, r4
 801163c:	bf04      	itt	eq
 801163e:	2301      	moveq	r3, #1
 8011640:	61a3      	streq	r3, [r4, #24]
 8011642:	4620      	mov	r0, r4
 8011644:	f000 f820 	bl	8011688 <__sfp>
 8011648:	6060      	str	r0, [r4, #4]
 801164a:	4620      	mov	r0, r4
 801164c:	f000 f81c 	bl	8011688 <__sfp>
 8011650:	60a0      	str	r0, [r4, #8]
 8011652:	4620      	mov	r0, r4
 8011654:	f000 f818 	bl	8011688 <__sfp>
 8011658:	2200      	movs	r2, #0
 801165a:	60e0      	str	r0, [r4, #12]
 801165c:	2104      	movs	r1, #4
 801165e:	6860      	ldr	r0, [r4, #4]
 8011660:	f7ff ff82 	bl	8011568 <std>
 8011664:	68a0      	ldr	r0, [r4, #8]
 8011666:	2201      	movs	r2, #1
 8011668:	2109      	movs	r1, #9
 801166a:	f7ff ff7d 	bl	8011568 <std>
 801166e:	68e0      	ldr	r0, [r4, #12]
 8011670:	2202      	movs	r2, #2
 8011672:	2112      	movs	r1, #18
 8011674:	f7ff ff78 	bl	8011568 <std>
 8011678:	2301      	movs	r3, #1
 801167a:	61a3      	str	r3, [r4, #24]
 801167c:	e7d2      	b.n	8011624 <__sinit+0xc>
 801167e:	bf00      	nop
 8011680:	0801639c 	.word	0x0801639c
 8011684:	080115b1 	.word	0x080115b1

08011688 <__sfp>:
 8011688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168a:	4607      	mov	r7, r0
 801168c:	f7ff ffac 	bl	80115e8 <__sfp_lock_acquire>
 8011690:	4b1e      	ldr	r3, [pc, #120]	; (801170c <__sfp+0x84>)
 8011692:	681e      	ldr	r6, [r3, #0]
 8011694:	69b3      	ldr	r3, [r6, #24]
 8011696:	b913      	cbnz	r3, 801169e <__sfp+0x16>
 8011698:	4630      	mov	r0, r6
 801169a:	f7ff ffbd 	bl	8011618 <__sinit>
 801169e:	3648      	adds	r6, #72	; 0x48
 80116a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116a4:	3b01      	subs	r3, #1
 80116a6:	d503      	bpl.n	80116b0 <__sfp+0x28>
 80116a8:	6833      	ldr	r3, [r6, #0]
 80116aa:	b30b      	cbz	r3, 80116f0 <__sfp+0x68>
 80116ac:	6836      	ldr	r6, [r6, #0]
 80116ae:	e7f7      	b.n	80116a0 <__sfp+0x18>
 80116b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116b4:	b9d5      	cbnz	r5, 80116ec <__sfp+0x64>
 80116b6:	4b16      	ldr	r3, [pc, #88]	; (8011710 <__sfp+0x88>)
 80116b8:	60e3      	str	r3, [r4, #12]
 80116ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80116be:	6665      	str	r5, [r4, #100]	; 0x64
 80116c0:	f000 f86c 	bl	801179c <__retarget_lock_init_recursive>
 80116c4:	f7ff ff96 	bl	80115f4 <__sfp_lock_release>
 80116c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116d0:	6025      	str	r5, [r4, #0]
 80116d2:	61a5      	str	r5, [r4, #24]
 80116d4:	2208      	movs	r2, #8
 80116d6:	4629      	mov	r1, r5
 80116d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116dc:	f000 f890 	bl	8011800 <memset>
 80116e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116e8:	4620      	mov	r0, r4
 80116ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116ec:	3468      	adds	r4, #104	; 0x68
 80116ee:	e7d9      	b.n	80116a4 <__sfp+0x1c>
 80116f0:	2104      	movs	r1, #4
 80116f2:	4638      	mov	r0, r7
 80116f4:	f7ff ff62 	bl	80115bc <__sfmoreglue>
 80116f8:	4604      	mov	r4, r0
 80116fa:	6030      	str	r0, [r6, #0]
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d1d5      	bne.n	80116ac <__sfp+0x24>
 8011700:	f7ff ff78 	bl	80115f4 <__sfp_lock_release>
 8011704:	230c      	movs	r3, #12
 8011706:	603b      	str	r3, [r7, #0]
 8011708:	e7ee      	b.n	80116e8 <__sfp+0x60>
 801170a:	bf00      	nop
 801170c:	0801639c 	.word	0x0801639c
 8011710:	ffff0001 	.word	0xffff0001

08011714 <_fwalk_reent>:
 8011714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011718:	4606      	mov	r6, r0
 801171a:	4688      	mov	r8, r1
 801171c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011720:	2700      	movs	r7, #0
 8011722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011726:	f1b9 0901 	subs.w	r9, r9, #1
 801172a:	d505      	bpl.n	8011738 <_fwalk_reent+0x24>
 801172c:	6824      	ldr	r4, [r4, #0]
 801172e:	2c00      	cmp	r4, #0
 8011730:	d1f7      	bne.n	8011722 <_fwalk_reent+0xe>
 8011732:	4638      	mov	r0, r7
 8011734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011738:	89ab      	ldrh	r3, [r5, #12]
 801173a:	2b01      	cmp	r3, #1
 801173c:	d907      	bls.n	801174e <_fwalk_reent+0x3a>
 801173e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011742:	3301      	adds	r3, #1
 8011744:	d003      	beq.n	801174e <_fwalk_reent+0x3a>
 8011746:	4629      	mov	r1, r5
 8011748:	4630      	mov	r0, r6
 801174a:	47c0      	blx	r8
 801174c:	4307      	orrs	r7, r0
 801174e:	3568      	adds	r5, #104	; 0x68
 8011750:	e7e9      	b.n	8011726 <_fwalk_reent+0x12>
	...

08011754 <__libc_init_array>:
 8011754:	b570      	push	{r4, r5, r6, lr}
 8011756:	4d0d      	ldr	r5, [pc, #52]	; (801178c <__libc_init_array+0x38>)
 8011758:	4c0d      	ldr	r4, [pc, #52]	; (8011790 <__libc_init_array+0x3c>)
 801175a:	1b64      	subs	r4, r4, r5
 801175c:	10a4      	asrs	r4, r4, #2
 801175e:	2600      	movs	r6, #0
 8011760:	42a6      	cmp	r6, r4
 8011762:	d109      	bne.n	8011778 <__libc_init_array+0x24>
 8011764:	4d0b      	ldr	r5, [pc, #44]	; (8011794 <__libc_init_array+0x40>)
 8011766:	4c0c      	ldr	r4, [pc, #48]	; (8011798 <__libc_init_array+0x44>)
 8011768:	f003 f82c 	bl	80147c4 <_init>
 801176c:	1b64      	subs	r4, r4, r5
 801176e:	10a4      	asrs	r4, r4, #2
 8011770:	2600      	movs	r6, #0
 8011772:	42a6      	cmp	r6, r4
 8011774:	d105      	bne.n	8011782 <__libc_init_array+0x2e>
 8011776:	bd70      	pop	{r4, r5, r6, pc}
 8011778:	f855 3b04 	ldr.w	r3, [r5], #4
 801177c:	4798      	blx	r3
 801177e:	3601      	adds	r6, #1
 8011780:	e7ee      	b.n	8011760 <__libc_init_array+0xc>
 8011782:	f855 3b04 	ldr.w	r3, [r5], #4
 8011786:	4798      	blx	r3
 8011788:	3601      	adds	r6, #1
 801178a:	e7f2      	b.n	8011772 <__libc_init_array+0x1e>
 801178c:	08016778 	.word	0x08016778
 8011790:	08016778 	.word	0x08016778
 8011794:	08016778 	.word	0x08016778
 8011798:	0801677c 	.word	0x0801677c

0801179c <__retarget_lock_init_recursive>:
 801179c:	4770      	bx	lr

0801179e <__retarget_lock_acquire_recursive>:
 801179e:	4770      	bx	lr

080117a0 <__retarget_lock_release_recursive>:
 80117a0:	4770      	bx	lr
	...

080117a4 <malloc>:
 80117a4:	4b02      	ldr	r3, [pc, #8]	; (80117b0 <malloc+0xc>)
 80117a6:	4601      	mov	r1, r0
 80117a8:	6818      	ldr	r0, [r3, #0]
 80117aa:	f000 b8b3 	b.w	8011914 <_malloc_r>
 80117ae:	bf00      	nop
 80117b0:	20000180 	.word	0x20000180

080117b4 <free>:
 80117b4:	4b02      	ldr	r3, [pc, #8]	; (80117c0 <free+0xc>)
 80117b6:	4601      	mov	r1, r0
 80117b8:	6818      	ldr	r0, [r3, #0]
 80117ba:	f000 b83f 	b.w	801183c <_free_r>
 80117be:	bf00      	nop
 80117c0:	20000180 	.word	0x20000180

080117c4 <memcmp>:
 80117c4:	b510      	push	{r4, lr}
 80117c6:	3901      	subs	r1, #1
 80117c8:	4402      	add	r2, r0
 80117ca:	4290      	cmp	r0, r2
 80117cc:	d101      	bne.n	80117d2 <memcmp+0xe>
 80117ce:	2000      	movs	r0, #0
 80117d0:	e005      	b.n	80117de <memcmp+0x1a>
 80117d2:	7803      	ldrb	r3, [r0, #0]
 80117d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80117d8:	42a3      	cmp	r3, r4
 80117da:	d001      	beq.n	80117e0 <memcmp+0x1c>
 80117dc:	1b18      	subs	r0, r3, r4
 80117de:	bd10      	pop	{r4, pc}
 80117e0:	3001      	adds	r0, #1
 80117e2:	e7f2      	b.n	80117ca <memcmp+0x6>

080117e4 <memcpy>:
 80117e4:	440a      	add	r2, r1
 80117e6:	4291      	cmp	r1, r2
 80117e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80117ec:	d100      	bne.n	80117f0 <memcpy+0xc>
 80117ee:	4770      	bx	lr
 80117f0:	b510      	push	{r4, lr}
 80117f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117fa:	4291      	cmp	r1, r2
 80117fc:	d1f9      	bne.n	80117f2 <memcpy+0xe>
 80117fe:	bd10      	pop	{r4, pc}

08011800 <memset>:
 8011800:	4402      	add	r2, r0
 8011802:	4603      	mov	r3, r0
 8011804:	4293      	cmp	r3, r2
 8011806:	d100      	bne.n	801180a <memset+0xa>
 8011808:	4770      	bx	lr
 801180a:	f803 1b01 	strb.w	r1, [r3], #1
 801180e:	e7f9      	b.n	8011804 <memset+0x4>

08011810 <_calloc_r>:
 8011810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011812:	fba1 2402 	umull	r2, r4, r1, r2
 8011816:	b94c      	cbnz	r4, 801182c <_calloc_r+0x1c>
 8011818:	4611      	mov	r1, r2
 801181a:	9201      	str	r2, [sp, #4]
 801181c:	f000 f87a 	bl	8011914 <_malloc_r>
 8011820:	9a01      	ldr	r2, [sp, #4]
 8011822:	4605      	mov	r5, r0
 8011824:	b930      	cbnz	r0, 8011834 <_calloc_r+0x24>
 8011826:	4628      	mov	r0, r5
 8011828:	b003      	add	sp, #12
 801182a:	bd30      	pop	{r4, r5, pc}
 801182c:	220c      	movs	r2, #12
 801182e:	6002      	str	r2, [r0, #0]
 8011830:	2500      	movs	r5, #0
 8011832:	e7f8      	b.n	8011826 <_calloc_r+0x16>
 8011834:	4621      	mov	r1, r4
 8011836:	f7ff ffe3 	bl	8011800 <memset>
 801183a:	e7f4      	b.n	8011826 <_calloc_r+0x16>

0801183c <_free_r>:
 801183c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801183e:	2900      	cmp	r1, #0
 8011840:	d044      	beq.n	80118cc <_free_r+0x90>
 8011842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011846:	9001      	str	r0, [sp, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	f1a1 0404 	sub.w	r4, r1, #4
 801184e:	bfb8      	it	lt
 8011850:	18e4      	addlt	r4, r4, r3
 8011852:	f002 f82f 	bl	80138b4 <__malloc_lock>
 8011856:	4a1e      	ldr	r2, [pc, #120]	; (80118d0 <_free_r+0x94>)
 8011858:	9801      	ldr	r0, [sp, #4]
 801185a:	6813      	ldr	r3, [r2, #0]
 801185c:	b933      	cbnz	r3, 801186c <_free_r+0x30>
 801185e:	6063      	str	r3, [r4, #4]
 8011860:	6014      	str	r4, [r2, #0]
 8011862:	b003      	add	sp, #12
 8011864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011868:	f002 b82a 	b.w	80138c0 <__malloc_unlock>
 801186c:	42a3      	cmp	r3, r4
 801186e:	d908      	bls.n	8011882 <_free_r+0x46>
 8011870:	6825      	ldr	r5, [r4, #0]
 8011872:	1961      	adds	r1, r4, r5
 8011874:	428b      	cmp	r3, r1
 8011876:	bf01      	itttt	eq
 8011878:	6819      	ldreq	r1, [r3, #0]
 801187a:	685b      	ldreq	r3, [r3, #4]
 801187c:	1949      	addeq	r1, r1, r5
 801187e:	6021      	streq	r1, [r4, #0]
 8011880:	e7ed      	b.n	801185e <_free_r+0x22>
 8011882:	461a      	mov	r2, r3
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	b10b      	cbz	r3, 801188c <_free_r+0x50>
 8011888:	42a3      	cmp	r3, r4
 801188a:	d9fa      	bls.n	8011882 <_free_r+0x46>
 801188c:	6811      	ldr	r1, [r2, #0]
 801188e:	1855      	adds	r5, r2, r1
 8011890:	42a5      	cmp	r5, r4
 8011892:	d10b      	bne.n	80118ac <_free_r+0x70>
 8011894:	6824      	ldr	r4, [r4, #0]
 8011896:	4421      	add	r1, r4
 8011898:	1854      	adds	r4, r2, r1
 801189a:	42a3      	cmp	r3, r4
 801189c:	6011      	str	r1, [r2, #0]
 801189e:	d1e0      	bne.n	8011862 <_free_r+0x26>
 80118a0:	681c      	ldr	r4, [r3, #0]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	6053      	str	r3, [r2, #4]
 80118a6:	4421      	add	r1, r4
 80118a8:	6011      	str	r1, [r2, #0]
 80118aa:	e7da      	b.n	8011862 <_free_r+0x26>
 80118ac:	d902      	bls.n	80118b4 <_free_r+0x78>
 80118ae:	230c      	movs	r3, #12
 80118b0:	6003      	str	r3, [r0, #0]
 80118b2:	e7d6      	b.n	8011862 <_free_r+0x26>
 80118b4:	6825      	ldr	r5, [r4, #0]
 80118b6:	1961      	adds	r1, r4, r5
 80118b8:	428b      	cmp	r3, r1
 80118ba:	bf04      	itt	eq
 80118bc:	6819      	ldreq	r1, [r3, #0]
 80118be:	685b      	ldreq	r3, [r3, #4]
 80118c0:	6063      	str	r3, [r4, #4]
 80118c2:	bf04      	itt	eq
 80118c4:	1949      	addeq	r1, r1, r5
 80118c6:	6021      	streq	r1, [r4, #0]
 80118c8:	6054      	str	r4, [r2, #4]
 80118ca:	e7ca      	b.n	8011862 <_free_r+0x26>
 80118cc:	b003      	add	sp, #12
 80118ce:	bd30      	pop	{r4, r5, pc}
 80118d0:	2000aa54 	.word	0x2000aa54

080118d4 <sbrk_aligned>:
 80118d4:	b570      	push	{r4, r5, r6, lr}
 80118d6:	4e0e      	ldr	r6, [pc, #56]	; (8011910 <sbrk_aligned+0x3c>)
 80118d8:	460c      	mov	r4, r1
 80118da:	6831      	ldr	r1, [r6, #0]
 80118dc:	4605      	mov	r5, r0
 80118de:	b911      	cbnz	r1, 80118e6 <sbrk_aligned+0x12>
 80118e0:	f000 fe5a 	bl	8012598 <_sbrk_r>
 80118e4:	6030      	str	r0, [r6, #0]
 80118e6:	4621      	mov	r1, r4
 80118e8:	4628      	mov	r0, r5
 80118ea:	f000 fe55 	bl	8012598 <_sbrk_r>
 80118ee:	1c43      	adds	r3, r0, #1
 80118f0:	d00a      	beq.n	8011908 <sbrk_aligned+0x34>
 80118f2:	1cc4      	adds	r4, r0, #3
 80118f4:	f024 0403 	bic.w	r4, r4, #3
 80118f8:	42a0      	cmp	r0, r4
 80118fa:	d007      	beq.n	801190c <sbrk_aligned+0x38>
 80118fc:	1a21      	subs	r1, r4, r0
 80118fe:	4628      	mov	r0, r5
 8011900:	f000 fe4a 	bl	8012598 <_sbrk_r>
 8011904:	3001      	adds	r0, #1
 8011906:	d101      	bne.n	801190c <sbrk_aligned+0x38>
 8011908:	f04f 34ff 	mov.w	r4, #4294967295
 801190c:	4620      	mov	r0, r4
 801190e:	bd70      	pop	{r4, r5, r6, pc}
 8011910:	2000aa58 	.word	0x2000aa58

08011914 <_malloc_r>:
 8011914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011918:	1ccd      	adds	r5, r1, #3
 801191a:	f025 0503 	bic.w	r5, r5, #3
 801191e:	3508      	adds	r5, #8
 8011920:	2d0c      	cmp	r5, #12
 8011922:	bf38      	it	cc
 8011924:	250c      	movcc	r5, #12
 8011926:	2d00      	cmp	r5, #0
 8011928:	4607      	mov	r7, r0
 801192a:	db01      	blt.n	8011930 <_malloc_r+0x1c>
 801192c:	42a9      	cmp	r1, r5
 801192e:	d905      	bls.n	801193c <_malloc_r+0x28>
 8011930:	230c      	movs	r3, #12
 8011932:	603b      	str	r3, [r7, #0]
 8011934:	2600      	movs	r6, #0
 8011936:	4630      	mov	r0, r6
 8011938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801193c:	4e2e      	ldr	r6, [pc, #184]	; (80119f8 <_malloc_r+0xe4>)
 801193e:	f001 ffb9 	bl	80138b4 <__malloc_lock>
 8011942:	6833      	ldr	r3, [r6, #0]
 8011944:	461c      	mov	r4, r3
 8011946:	bb34      	cbnz	r4, 8011996 <_malloc_r+0x82>
 8011948:	4629      	mov	r1, r5
 801194a:	4638      	mov	r0, r7
 801194c:	f7ff ffc2 	bl	80118d4 <sbrk_aligned>
 8011950:	1c43      	adds	r3, r0, #1
 8011952:	4604      	mov	r4, r0
 8011954:	d14d      	bne.n	80119f2 <_malloc_r+0xde>
 8011956:	6834      	ldr	r4, [r6, #0]
 8011958:	4626      	mov	r6, r4
 801195a:	2e00      	cmp	r6, #0
 801195c:	d140      	bne.n	80119e0 <_malloc_r+0xcc>
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	4631      	mov	r1, r6
 8011962:	4638      	mov	r0, r7
 8011964:	eb04 0803 	add.w	r8, r4, r3
 8011968:	f000 fe16 	bl	8012598 <_sbrk_r>
 801196c:	4580      	cmp	r8, r0
 801196e:	d13a      	bne.n	80119e6 <_malloc_r+0xd2>
 8011970:	6821      	ldr	r1, [r4, #0]
 8011972:	3503      	adds	r5, #3
 8011974:	1a6d      	subs	r5, r5, r1
 8011976:	f025 0503 	bic.w	r5, r5, #3
 801197a:	3508      	adds	r5, #8
 801197c:	2d0c      	cmp	r5, #12
 801197e:	bf38      	it	cc
 8011980:	250c      	movcc	r5, #12
 8011982:	4629      	mov	r1, r5
 8011984:	4638      	mov	r0, r7
 8011986:	f7ff ffa5 	bl	80118d4 <sbrk_aligned>
 801198a:	3001      	adds	r0, #1
 801198c:	d02b      	beq.n	80119e6 <_malloc_r+0xd2>
 801198e:	6823      	ldr	r3, [r4, #0]
 8011990:	442b      	add	r3, r5
 8011992:	6023      	str	r3, [r4, #0]
 8011994:	e00e      	b.n	80119b4 <_malloc_r+0xa0>
 8011996:	6822      	ldr	r2, [r4, #0]
 8011998:	1b52      	subs	r2, r2, r5
 801199a:	d41e      	bmi.n	80119da <_malloc_r+0xc6>
 801199c:	2a0b      	cmp	r2, #11
 801199e:	d916      	bls.n	80119ce <_malloc_r+0xba>
 80119a0:	1961      	adds	r1, r4, r5
 80119a2:	42a3      	cmp	r3, r4
 80119a4:	6025      	str	r5, [r4, #0]
 80119a6:	bf18      	it	ne
 80119a8:	6059      	strne	r1, [r3, #4]
 80119aa:	6863      	ldr	r3, [r4, #4]
 80119ac:	bf08      	it	eq
 80119ae:	6031      	streq	r1, [r6, #0]
 80119b0:	5162      	str	r2, [r4, r5]
 80119b2:	604b      	str	r3, [r1, #4]
 80119b4:	4638      	mov	r0, r7
 80119b6:	f104 060b 	add.w	r6, r4, #11
 80119ba:	f001 ff81 	bl	80138c0 <__malloc_unlock>
 80119be:	f026 0607 	bic.w	r6, r6, #7
 80119c2:	1d23      	adds	r3, r4, #4
 80119c4:	1af2      	subs	r2, r6, r3
 80119c6:	d0b6      	beq.n	8011936 <_malloc_r+0x22>
 80119c8:	1b9b      	subs	r3, r3, r6
 80119ca:	50a3      	str	r3, [r4, r2]
 80119cc:	e7b3      	b.n	8011936 <_malloc_r+0x22>
 80119ce:	6862      	ldr	r2, [r4, #4]
 80119d0:	42a3      	cmp	r3, r4
 80119d2:	bf0c      	ite	eq
 80119d4:	6032      	streq	r2, [r6, #0]
 80119d6:	605a      	strne	r2, [r3, #4]
 80119d8:	e7ec      	b.n	80119b4 <_malloc_r+0xa0>
 80119da:	4623      	mov	r3, r4
 80119dc:	6864      	ldr	r4, [r4, #4]
 80119de:	e7b2      	b.n	8011946 <_malloc_r+0x32>
 80119e0:	4634      	mov	r4, r6
 80119e2:	6876      	ldr	r6, [r6, #4]
 80119e4:	e7b9      	b.n	801195a <_malloc_r+0x46>
 80119e6:	230c      	movs	r3, #12
 80119e8:	603b      	str	r3, [r7, #0]
 80119ea:	4638      	mov	r0, r7
 80119ec:	f001 ff68 	bl	80138c0 <__malloc_unlock>
 80119f0:	e7a1      	b.n	8011936 <_malloc_r+0x22>
 80119f2:	6025      	str	r5, [r4, #0]
 80119f4:	e7de      	b.n	80119b4 <_malloc_r+0xa0>
 80119f6:	bf00      	nop
 80119f8:	2000aa54 	.word	0x2000aa54

080119fc <__cvt>:
 80119fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a00:	ec55 4b10 	vmov	r4, r5, d0
 8011a04:	2d00      	cmp	r5, #0
 8011a06:	460e      	mov	r6, r1
 8011a08:	4619      	mov	r1, r3
 8011a0a:	462b      	mov	r3, r5
 8011a0c:	bfbb      	ittet	lt
 8011a0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011a12:	461d      	movlt	r5, r3
 8011a14:	2300      	movge	r3, #0
 8011a16:	232d      	movlt	r3, #45	; 0x2d
 8011a18:	700b      	strb	r3, [r1, #0]
 8011a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011a20:	4691      	mov	r9, r2
 8011a22:	f023 0820 	bic.w	r8, r3, #32
 8011a26:	bfbc      	itt	lt
 8011a28:	4622      	movlt	r2, r4
 8011a2a:	4614      	movlt	r4, r2
 8011a2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011a30:	d005      	beq.n	8011a3e <__cvt+0x42>
 8011a32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011a36:	d100      	bne.n	8011a3a <__cvt+0x3e>
 8011a38:	3601      	adds	r6, #1
 8011a3a:	2102      	movs	r1, #2
 8011a3c:	e000      	b.n	8011a40 <__cvt+0x44>
 8011a3e:	2103      	movs	r1, #3
 8011a40:	ab03      	add	r3, sp, #12
 8011a42:	9301      	str	r3, [sp, #4]
 8011a44:	ab02      	add	r3, sp, #8
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	ec45 4b10 	vmov	d0, r4, r5
 8011a4c:	4653      	mov	r3, sl
 8011a4e:	4632      	mov	r2, r6
 8011a50:	f000 fff2 	bl	8012a38 <_dtoa_r>
 8011a54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011a58:	4607      	mov	r7, r0
 8011a5a:	d102      	bne.n	8011a62 <__cvt+0x66>
 8011a5c:	f019 0f01 	tst.w	r9, #1
 8011a60:	d022      	beq.n	8011aa8 <__cvt+0xac>
 8011a62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011a66:	eb07 0906 	add.w	r9, r7, r6
 8011a6a:	d110      	bne.n	8011a8e <__cvt+0x92>
 8011a6c:	783b      	ldrb	r3, [r7, #0]
 8011a6e:	2b30      	cmp	r3, #48	; 0x30
 8011a70:	d10a      	bne.n	8011a88 <__cvt+0x8c>
 8011a72:	2200      	movs	r2, #0
 8011a74:	2300      	movs	r3, #0
 8011a76:	4620      	mov	r0, r4
 8011a78:	4629      	mov	r1, r5
 8011a7a:	f7ef f845 	bl	8000b08 <__aeabi_dcmpeq>
 8011a7e:	b918      	cbnz	r0, 8011a88 <__cvt+0x8c>
 8011a80:	f1c6 0601 	rsb	r6, r6, #1
 8011a84:	f8ca 6000 	str.w	r6, [sl]
 8011a88:	f8da 3000 	ldr.w	r3, [sl]
 8011a8c:	4499      	add	r9, r3
 8011a8e:	2200      	movs	r2, #0
 8011a90:	2300      	movs	r3, #0
 8011a92:	4620      	mov	r0, r4
 8011a94:	4629      	mov	r1, r5
 8011a96:	f7ef f837 	bl	8000b08 <__aeabi_dcmpeq>
 8011a9a:	b108      	cbz	r0, 8011aa0 <__cvt+0xa4>
 8011a9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011aa0:	2230      	movs	r2, #48	; 0x30
 8011aa2:	9b03      	ldr	r3, [sp, #12]
 8011aa4:	454b      	cmp	r3, r9
 8011aa6:	d307      	bcc.n	8011ab8 <__cvt+0xbc>
 8011aa8:	9b03      	ldr	r3, [sp, #12]
 8011aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011aac:	1bdb      	subs	r3, r3, r7
 8011aae:	4638      	mov	r0, r7
 8011ab0:	6013      	str	r3, [r2, #0]
 8011ab2:	b004      	add	sp, #16
 8011ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ab8:	1c59      	adds	r1, r3, #1
 8011aba:	9103      	str	r1, [sp, #12]
 8011abc:	701a      	strb	r2, [r3, #0]
 8011abe:	e7f0      	b.n	8011aa2 <__cvt+0xa6>

08011ac0 <__exponent>:
 8011ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2900      	cmp	r1, #0
 8011ac6:	bfb8      	it	lt
 8011ac8:	4249      	neglt	r1, r1
 8011aca:	f803 2b02 	strb.w	r2, [r3], #2
 8011ace:	bfb4      	ite	lt
 8011ad0:	222d      	movlt	r2, #45	; 0x2d
 8011ad2:	222b      	movge	r2, #43	; 0x2b
 8011ad4:	2909      	cmp	r1, #9
 8011ad6:	7042      	strb	r2, [r0, #1]
 8011ad8:	dd2a      	ble.n	8011b30 <__exponent+0x70>
 8011ada:	f10d 0407 	add.w	r4, sp, #7
 8011ade:	46a4      	mov	ip, r4
 8011ae0:	270a      	movs	r7, #10
 8011ae2:	46a6      	mov	lr, r4
 8011ae4:	460a      	mov	r2, r1
 8011ae6:	fb91 f6f7 	sdiv	r6, r1, r7
 8011aea:	fb07 1516 	mls	r5, r7, r6, r1
 8011aee:	3530      	adds	r5, #48	; 0x30
 8011af0:	2a63      	cmp	r2, #99	; 0x63
 8011af2:	f104 34ff 	add.w	r4, r4, #4294967295
 8011af6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011afa:	4631      	mov	r1, r6
 8011afc:	dcf1      	bgt.n	8011ae2 <__exponent+0x22>
 8011afe:	3130      	adds	r1, #48	; 0x30
 8011b00:	f1ae 0502 	sub.w	r5, lr, #2
 8011b04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011b08:	1c44      	adds	r4, r0, #1
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	4561      	cmp	r1, ip
 8011b0e:	d30a      	bcc.n	8011b26 <__exponent+0x66>
 8011b10:	f10d 0209 	add.w	r2, sp, #9
 8011b14:	eba2 020e 	sub.w	r2, r2, lr
 8011b18:	4565      	cmp	r5, ip
 8011b1a:	bf88      	it	hi
 8011b1c:	2200      	movhi	r2, #0
 8011b1e:	4413      	add	r3, r2
 8011b20:	1a18      	subs	r0, r3, r0
 8011b22:	b003      	add	sp, #12
 8011b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011b2e:	e7ed      	b.n	8011b0c <__exponent+0x4c>
 8011b30:	2330      	movs	r3, #48	; 0x30
 8011b32:	3130      	adds	r1, #48	; 0x30
 8011b34:	7083      	strb	r3, [r0, #2]
 8011b36:	70c1      	strb	r1, [r0, #3]
 8011b38:	1d03      	adds	r3, r0, #4
 8011b3a:	e7f1      	b.n	8011b20 <__exponent+0x60>

08011b3c <_printf_float>:
 8011b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	ed2d 8b02 	vpush	{d8}
 8011b44:	b08d      	sub	sp, #52	; 0x34
 8011b46:	460c      	mov	r4, r1
 8011b48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011b4c:	4616      	mov	r6, r2
 8011b4e:	461f      	mov	r7, r3
 8011b50:	4605      	mov	r5, r0
 8011b52:	f001 fe33 	bl	80137bc <_localeconv_r>
 8011b56:	f8d0 a000 	ldr.w	sl, [r0]
 8011b5a:	4650      	mov	r0, sl
 8011b5c:	f7ee fb58 	bl	8000210 <strlen>
 8011b60:	2300      	movs	r3, #0
 8011b62:	930a      	str	r3, [sp, #40]	; 0x28
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	9305      	str	r3, [sp, #20]
 8011b68:	f8d8 3000 	ldr.w	r3, [r8]
 8011b6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011b70:	3307      	adds	r3, #7
 8011b72:	f023 0307 	bic.w	r3, r3, #7
 8011b76:	f103 0208 	add.w	r2, r3, #8
 8011b7a:	f8c8 2000 	str.w	r2, [r8]
 8011b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011b86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011b8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b8e:	9307      	str	r3, [sp, #28]
 8011b90:	f8cd 8018 	str.w	r8, [sp, #24]
 8011b94:	ee08 0a10 	vmov	s16, r0
 8011b98:	4b9f      	ldr	r3, [pc, #636]	; (8011e18 <_printf_float+0x2dc>)
 8011b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba2:	f7ee ffe3 	bl	8000b6c <__aeabi_dcmpun>
 8011ba6:	bb88      	cbnz	r0, 8011c0c <_printf_float+0xd0>
 8011ba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bac:	4b9a      	ldr	r3, [pc, #616]	; (8011e18 <_printf_float+0x2dc>)
 8011bae:	f04f 32ff 	mov.w	r2, #4294967295
 8011bb2:	f7ee ffbd 	bl	8000b30 <__aeabi_dcmple>
 8011bb6:	bb48      	cbnz	r0, 8011c0c <_printf_float+0xd0>
 8011bb8:	2200      	movs	r2, #0
 8011bba:	2300      	movs	r3, #0
 8011bbc:	4640      	mov	r0, r8
 8011bbe:	4649      	mov	r1, r9
 8011bc0:	f7ee ffac 	bl	8000b1c <__aeabi_dcmplt>
 8011bc4:	b110      	cbz	r0, 8011bcc <_printf_float+0x90>
 8011bc6:	232d      	movs	r3, #45	; 0x2d
 8011bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bcc:	4b93      	ldr	r3, [pc, #588]	; (8011e1c <_printf_float+0x2e0>)
 8011bce:	4894      	ldr	r0, [pc, #592]	; (8011e20 <_printf_float+0x2e4>)
 8011bd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011bd4:	bf94      	ite	ls
 8011bd6:	4698      	movls	r8, r3
 8011bd8:	4680      	movhi	r8, r0
 8011bda:	2303      	movs	r3, #3
 8011bdc:	6123      	str	r3, [r4, #16]
 8011bde:	9b05      	ldr	r3, [sp, #20]
 8011be0:	f023 0204 	bic.w	r2, r3, #4
 8011be4:	6022      	str	r2, [r4, #0]
 8011be6:	f04f 0900 	mov.w	r9, #0
 8011bea:	9700      	str	r7, [sp, #0]
 8011bec:	4633      	mov	r3, r6
 8011bee:	aa0b      	add	r2, sp, #44	; 0x2c
 8011bf0:	4621      	mov	r1, r4
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	f000 f9d8 	bl	8011fa8 <_printf_common>
 8011bf8:	3001      	adds	r0, #1
 8011bfa:	f040 8090 	bne.w	8011d1e <_printf_float+0x1e2>
 8011bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8011c02:	b00d      	add	sp, #52	; 0x34
 8011c04:	ecbd 8b02 	vpop	{d8}
 8011c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0c:	4642      	mov	r2, r8
 8011c0e:	464b      	mov	r3, r9
 8011c10:	4640      	mov	r0, r8
 8011c12:	4649      	mov	r1, r9
 8011c14:	f7ee ffaa 	bl	8000b6c <__aeabi_dcmpun>
 8011c18:	b140      	cbz	r0, 8011c2c <_printf_float+0xf0>
 8011c1a:	464b      	mov	r3, r9
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	bfbc      	itt	lt
 8011c20:	232d      	movlt	r3, #45	; 0x2d
 8011c22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011c26:	487f      	ldr	r0, [pc, #508]	; (8011e24 <_printf_float+0x2e8>)
 8011c28:	4b7f      	ldr	r3, [pc, #508]	; (8011e28 <_printf_float+0x2ec>)
 8011c2a:	e7d1      	b.n	8011bd0 <_printf_float+0x94>
 8011c2c:	6863      	ldr	r3, [r4, #4]
 8011c2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011c32:	9206      	str	r2, [sp, #24]
 8011c34:	1c5a      	adds	r2, r3, #1
 8011c36:	d13f      	bne.n	8011cb8 <_printf_float+0x17c>
 8011c38:	2306      	movs	r3, #6
 8011c3a:	6063      	str	r3, [r4, #4]
 8011c3c:	9b05      	ldr	r3, [sp, #20]
 8011c3e:	6861      	ldr	r1, [r4, #4]
 8011c40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011c44:	2300      	movs	r3, #0
 8011c46:	9303      	str	r3, [sp, #12]
 8011c48:	ab0a      	add	r3, sp, #40	; 0x28
 8011c4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011c4e:	ab09      	add	r3, sp, #36	; 0x24
 8011c50:	ec49 8b10 	vmov	d0, r8, r9
 8011c54:	9300      	str	r3, [sp, #0]
 8011c56:	6022      	str	r2, [r4, #0]
 8011c58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	f7ff fecd 	bl	80119fc <__cvt>
 8011c62:	9b06      	ldr	r3, [sp, #24]
 8011c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c66:	2b47      	cmp	r3, #71	; 0x47
 8011c68:	4680      	mov	r8, r0
 8011c6a:	d108      	bne.n	8011c7e <_printf_float+0x142>
 8011c6c:	1cc8      	adds	r0, r1, #3
 8011c6e:	db02      	blt.n	8011c76 <_printf_float+0x13a>
 8011c70:	6863      	ldr	r3, [r4, #4]
 8011c72:	4299      	cmp	r1, r3
 8011c74:	dd41      	ble.n	8011cfa <_printf_float+0x1be>
 8011c76:	f1ab 0b02 	sub.w	fp, fp, #2
 8011c7a:	fa5f fb8b 	uxtb.w	fp, fp
 8011c7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c82:	d820      	bhi.n	8011cc6 <_printf_float+0x18a>
 8011c84:	3901      	subs	r1, #1
 8011c86:	465a      	mov	r2, fp
 8011c88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011c8c:	9109      	str	r1, [sp, #36]	; 0x24
 8011c8e:	f7ff ff17 	bl	8011ac0 <__exponent>
 8011c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c94:	1813      	adds	r3, r2, r0
 8011c96:	2a01      	cmp	r2, #1
 8011c98:	4681      	mov	r9, r0
 8011c9a:	6123      	str	r3, [r4, #16]
 8011c9c:	dc02      	bgt.n	8011ca4 <_printf_float+0x168>
 8011c9e:	6822      	ldr	r2, [r4, #0]
 8011ca0:	07d2      	lsls	r2, r2, #31
 8011ca2:	d501      	bpl.n	8011ca8 <_printf_float+0x16c>
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	6123      	str	r3, [r4, #16]
 8011ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d09c      	beq.n	8011bea <_printf_float+0xae>
 8011cb0:	232d      	movs	r3, #45	; 0x2d
 8011cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cb6:	e798      	b.n	8011bea <_printf_float+0xae>
 8011cb8:	9a06      	ldr	r2, [sp, #24]
 8011cba:	2a47      	cmp	r2, #71	; 0x47
 8011cbc:	d1be      	bne.n	8011c3c <_printf_float+0x100>
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d1bc      	bne.n	8011c3c <_printf_float+0x100>
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	e7b9      	b.n	8011c3a <_printf_float+0xfe>
 8011cc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011cca:	d118      	bne.n	8011cfe <_printf_float+0x1c2>
 8011ccc:	2900      	cmp	r1, #0
 8011cce:	6863      	ldr	r3, [r4, #4]
 8011cd0:	dd0b      	ble.n	8011cea <_printf_float+0x1ae>
 8011cd2:	6121      	str	r1, [r4, #16]
 8011cd4:	b913      	cbnz	r3, 8011cdc <_printf_float+0x1a0>
 8011cd6:	6822      	ldr	r2, [r4, #0]
 8011cd8:	07d0      	lsls	r0, r2, #31
 8011cda:	d502      	bpl.n	8011ce2 <_printf_float+0x1a6>
 8011cdc:	3301      	adds	r3, #1
 8011cde:	440b      	add	r3, r1
 8011ce0:	6123      	str	r3, [r4, #16]
 8011ce2:	65a1      	str	r1, [r4, #88]	; 0x58
 8011ce4:	f04f 0900 	mov.w	r9, #0
 8011ce8:	e7de      	b.n	8011ca8 <_printf_float+0x16c>
 8011cea:	b913      	cbnz	r3, 8011cf2 <_printf_float+0x1b6>
 8011cec:	6822      	ldr	r2, [r4, #0]
 8011cee:	07d2      	lsls	r2, r2, #31
 8011cf0:	d501      	bpl.n	8011cf6 <_printf_float+0x1ba>
 8011cf2:	3302      	adds	r3, #2
 8011cf4:	e7f4      	b.n	8011ce0 <_printf_float+0x1a4>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	e7f2      	b.n	8011ce0 <_printf_float+0x1a4>
 8011cfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d00:	4299      	cmp	r1, r3
 8011d02:	db05      	blt.n	8011d10 <_printf_float+0x1d4>
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	6121      	str	r1, [r4, #16]
 8011d08:	07d8      	lsls	r0, r3, #31
 8011d0a:	d5ea      	bpl.n	8011ce2 <_printf_float+0x1a6>
 8011d0c:	1c4b      	adds	r3, r1, #1
 8011d0e:	e7e7      	b.n	8011ce0 <_printf_float+0x1a4>
 8011d10:	2900      	cmp	r1, #0
 8011d12:	bfd4      	ite	le
 8011d14:	f1c1 0202 	rsble	r2, r1, #2
 8011d18:	2201      	movgt	r2, #1
 8011d1a:	4413      	add	r3, r2
 8011d1c:	e7e0      	b.n	8011ce0 <_printf_float+0x1a4>
 8011d1e:	6823      	ldr	r3, [r4, #0]
 8011d20:	055a      	lsls	r2, r3, #21
 8011d22:	d407      	bmi.n	8011d34 <_printf_float+0x1f8>
 8011d24:	6923      	ldr	r3, [r4, #16]
 8011d26:	4642      	mov	r2, r8
 8011d28:	4631      	mov	r1, r6
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	47b8      	blx	r7
 8011d2e:	3001      	adds	r0, #1
 8011d30:	d12c      	bne.n	8011d8c <_printf_float+0x250>
 8011d32:	e764      	b.n	8011bfe <_printf_float+0xc2>
 8011d34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d38:	f240 80e0 	bls.w	8011efc <_printf_float+0x3c0>
 8011d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d40:	2200      	movs	r2, #0
 8011d42:	2300      	movs	r3, #0
 8011d44:	f7ee fee0 	bl	8000b08 <__aeabi_dcmpeq>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d034      	beq.n	8011db6 <_printf_float+0x27a>
 8011d4c:	4a37      	ldr	r2, [pc, #220]	; (8011e2c <_printf_float+0x2f0>)
 8011d4e:	2301      	movs	r3, #1
 8011d50:	4631      	mov	r1, r6
 8011d52:	4628      	mov	r0, r5
 8011d54:	47b8      	blx	r7
 8011d56:	3001      	adds	r0, #1
 8011d58:	f43f af51 	beq.w	8011bfe <_printf_float+0xc2>
 8011d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d60:	429a      	cmp	r2, r3
 8011d62:	db02      	blt.n	8011d6a <_printf_float+0x22e>
 8011d64:	6823      	ldr	r3, [r4, #0]
 8011d66:	07d8      	lsls	r0, r3, #31
 8011d68:	d510      	bpl.n	8011d8c <_printf_float+0x250>
 8011d6a:	ee18 3a10 	vmov	r3, s16
 8011d6e:	4652      	mov	r2, sl
 8011d70:	4631      	mov	r1, r6
 8011d72:	4628      	mov	r0, r5
 8011d74:	47b8      	blx	r7
 8011d76:	3001      	adds	r0, #1
 8011d78:	f43f af41 	beq.w	8011bfe <_printf_float+0xc2>
 8011d7c:	f04f 0800 	mov.w	r8, #0
 8011d80:	f104 091a 	add.w	r9, r4, #26
 8011d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d86:	3b01      	subs	r3, #1
 8011d88:	4543      	cmp	r3, r8
 8011d8a:	dc09      	bgt.n	8011da0 <_printf_float+0x264>
 8011d8c:	6823      	ldr	r3, [r4, #0]
 8011d8e:	079b      	lsls	r3, r3, #30
 8011d90:	f100 8105 	bmi.w	8011f9e <_printf_float+0x462>
 8011d94:	68e0      	ldr	r0, [r4, #12]
 8011d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d98:	4298      	cmp	r0, r3
 8011d9a:	bfb8      	it	lt
 8011d9c:	4618      	movlt	r0, r3
 8011d9e:	e730      	b.n	8011c02 <_printf_float+0xc6>
 8011da0:	2301      	movs	r3, #1
 8011da2:	464a      	mov	r2, r9
 8011da4:	4631      	mov	r1, r6
 8011da6:	4628      	mov	r0, r5
 8011da8:	47b8      	blx	r7
 8011daa:	3001      	adds	r0, #1
 8011dac:	f43f af27 	beq.w	8011bfe <_printf_float+0xc2>
 8011db0:	f108 0801 	add.w	r8, r8, #1
 8011db4:	e7e6      	b.n	8011d84 <_printf_float+0x248>
 8011db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	dc39      	bgt.n	8011e30 <_printf_float+0x2f4>
 8011dbc:	4a1b      	ldr	r2, [pc, #108]	; (8011e2c <_printf_float+0x2f0>)
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	4631      	mov	r1, r6
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	47b8      	blx	r7
 8011dc6:	3001      	adds	r0, #1
 8011dc8:	f43f af19 	beq.w	8011bfe <_printf_float+0xc2>
 8011dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dd0:	4313      	orrs	r3, r2
 8011dd2:	d102      	bne.n	8011dda <_printf_float+0x29e>
 8011dd4:	6823      	ldr	r3, [r4, #0]
 8011dd6:	07d9      	lsls	r1, r3, #31
 8011dd8:	d5d8      	bpl.n	8011d8c <_printf_float+0x250>
 8011dda:	ee18 3a10 	vmov	r3, s16
 8011dde:	4652      	mov	r2, sl
 8011de0:	4631      	mov	r1, r6
 8011de2:	4628      	mov	r0, r5
 8011de4:	47b8      	blx	r7
 8011de6:	3001      	adds	r0, #1
 8011de8:	f43f af09 	beq.w	8011bfe <_printf_float+0xc2>
 8011dec:	f04f 0900 	mov.w	r9, #0
 8011df0:	f104 0a1a 	add.w	sl, r4, #26
 8011df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011df6:	425b      	negs	r3, r3
 8011df8:	454b      	cmp	r3, r9
 8011dfa:	dc01      	bgt.n	8011e00 <_printf_float+0x2c4>
 8011dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dfe:	e792      	b.n	8011d26 <_printf_float+0x1ea>
 8011e00:	2301      	movs	r3, #1
 8011e02:	4652      	mov	r2, sl
 8011e04:	4631      	mov	r1, r6
 8011e06:	4628      	mov	r0, r5
 8011e08:	47b8      	blx	r7
 8011e0a:	3001      	adds	r0, #1
 8011e0c:	f43f aef7 	beq.w	8011bfe <_printf_float+0xc2>
 8011e10:	f109 0901 	add.w	r9, r9, #1
 8011e14:	e7ee      	b.n	8011df4 <_printf_float+0x2b8>
 8011e16:	bf00      	nop
 8011e18:	7fefffff 	.word	0x7fefffff
 8011e1c:	080163a0 	.word	0x080163a0
 8011e20:	080163a4 	.word	0x080163a4
 8011e24:	080163ac 	.word	0x080163ac
 8011e28:	080163a8 	.word	0x080163a8
 8011e2c:	080163b0 	.word	0x080163b0
 8011e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e34:	429a      	cmp	r2, r3
 8011e36:	bfa8      	it	ge
 8011e38:	461a      	movge	r2, r3
 8011e3a:	2a00      	cmp	r2, #0
 8011e3c:	4691      	mov	r9, r2
 8011e3e:	dc37      	bgt.n	8011eb0 <_printf_float+0x374>
 8011e40:	f04f 0b00 	mov.w	fp, #0
 8011e44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e48:	f104 021a 	add.w	r2, r4, #26
 8011e4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e4e:	9305      	str	r3, [sp, #20]
 8011e50:	eba3 0309 	sub.w	r3, r3, r9
 8011e54:	455b      	cmp	r3, fp
 8011e56:	dc33      	bgt.n	8011ec0 <_printf_float+0x384>
 8011e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	db3b      	blt.n	8011ed8 <_printf_float+0x39c>
 8011e60:	6823      	ldr	r3, [r4, #0]
 8011e62:	07da      	lsls	r2, r3, #31
 8011e64:	d438      	bmi.n	8011ed8 <_printf_float+0x39c>
 8011e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e68:	9a05      	ldr	r2, [sp, #20]
 8011e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e6c:	1a9a      	subs	r2, r3, r2
 8011e6e:	eba3 0901 	sub.w	r9, r3, r1
 8011e72:	4591      	cmp	r9, r2
 8011e74:	bfa8      	it	ge
 8011e76:	4691      	movge	r9, r2
 8011e78:	f1b9 0f00 	cmp.w	r9, #0
 8011e7c:	dc35      	bgt.n	8011eea <_printf_float+0x3ae>
 8011e7e:	f04f 0800 	mov.w	r8, #0
 8011e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e86:	f104 0a1a 	add.w	sl, r4, #26
 8011e8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e8e:	1a9b      	subs	r3, r3, r2
 8011e90:	eba3 0309 	sub.w	r3, r3, r9
 8011e94:	4543      	cmp	r3, r8
 8011e96:	f77f af79 	ble.w	8011d8c <_printf_float+0x250>
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	4652      	mov	r2, sl
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	47b8      	blx	r7
 8011ea4:	3001      	adds	r0, #1
 8011ea6:	f43f aeaa 	beq.w	8011bfe <_printf_float+0xc2>
 8011eaa:	f108 0801 	add.w	r8, r8, #1
 8011eae:	e7ec      	b.n	8011e8a <_printf_float+0x34e>
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	4631      	mov	r1, r6
 8011eb4:	4642      	mov	r2, r8
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	47b8      	blx	r7
 8011eba:	3001      	adds	r0, #1
 8011ebc:	d1c0      	bne.n	8011e40 <_printf_float+0x304>
 8011ebe:	e69e      	b.n	8011bfe <_printf_float+0xc2>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	4631      	mov	r1, r6
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	9205      	str	r2, [sp, #20]
 8011ec8:	47b8      	blx	r7
 8011eca:	3001      	adds	r0, #1
 8011ecc:	f43f ae97 	beq.w	8011bfe <_printf_float+0xc2>
 8011ed0:	9a05      	ldr	r2, [sp, #20]
 8011ed2:	f10b 0b01 	add.w	fp, fp, #1
 8011ed6:	e7b9      	b.n	8011e4c <_printf_float+0x310>
 8011ed8:	ee18 3a10 	vmov	r3, s16
 8011edc:	4652      	mov	r2, sl
 8011ede:	4631      	mov	r1, r6
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	47b8      	blx	r7
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	d1be      	bne.n	8011e66 <_printf_float+0x32a>
 8011ee8:	e689      	b.n	8011bfe <_printf_float+0xc2>
 8011eea:	9a05      	ldr	r2, [sp, #20]
 8011eec:	464b      	mov	r3, r9
 8011eee:	4442      	add	r2, r8
 8011ef0:	4631      	mov	r1, r6
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	47b8      	blx	r7
 8011ef6:	3001      	adds	r0, #1
 8011ef8:	d1c1      	bne.n	8011e7e <_printf_float+0x342>
 8011efa:	e680      	b.n	8011bfe <_printf_float+0xc2>
 8011efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011efe:	2a01      	cmp	r2, #1
 8011f00:	dc01      	bgt.n	8011f06 <_printf_float+0x3ca>
 8011f02:	07db      	lsls	r3, r3, #31
 8011f04:	d538      	bpl.n	8011f78 <_printf_float+0x43c>
 8011f06:	2301      	movs	r3, #1
 8011f08:	4642      	mov	r2, r8
 8011f0a:	4631      	mov	r1, r6
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	47b8      	blx	r7
 8011f10:	3001      	adds	r0, #1
 8011f12:	f43f ae74 	beq.w	8011bfe <_printf_float+0xc2>
 8011f16:	ee18 3a10 	vmov	r3, s16
 8011f1a:	4652      	mov	r2, sl
 8011f1c:	4631      	mov	r1, r6
 8011f1e:	4628      	mov	r0, r5
 8011f20:	47b8      	blx	r7
 8011f22:	3001      	adds	r0, #1
 8011f24:	f43f ae6b 	beq.w	8011bfe <_printf_float+0xc2>
 8011f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2300      	movs	r3, #0
 8011f30:	f7ee fdea 	bl	8000b08 <__aeabi_dcmpeq>
 8011f34:	b9d8      	cbnz	r0, 8011f6e <_printf_float+0x432>
 8011f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f38:	f108 0201 	add.w	r2, r8, #1
 8011f3c:	3b01      	subs	r3, #1
 8011f3e:	4631      	mov	r1, r6
 8011f40:	4628      	mov	r0, r5
 8011f42:	47b8      	blx	r7
 8011f44:	3001      	adds	r0, #1
 8011f46:	d10e      	bne.n	8011f66 <_printf_float+0x42a>
 8011f48:	e659      	b.n	8011bfe <_printf_float+0xc2>
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	4652      	mov	r2, sl
 8011f4e:	4631      	mov	r1, r6
 8011f50:	4628      	mov	r0, r5
 8011f52:	47b8      	blx	r7
 8011f54:	3001      	adds	r0, #1
 8011f56:	f43f ae52 	beq.w	8011bfe <_printf_float+0xc2>
 8011f5a:	f108 0801 	add.w	r8, r8, #1
 8011f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f60:	3b01      	subs	r3, #1
 8011f62:	4543      	cmp	r3, r8
 8011f64:	dcf1      	bgt.n	8011f4a <_printf_float+0x40e>
 8011f66:	464b      	mov	r3, r9
 8011f68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011f6c:	e6dc      	b.n	8011d28 <_printf_float+0x1ec>
 8011f6e:	f04f 0800 	mov.w	r8, #0
 8011f72:	f104 0a1a 	add.w	sl, r4, #26
 8011f76:	e7f2      	b.n	8011f5e <_printf_float+0x422>
 8011f78:	2301      	movs	r3, #1
 8011f7a:	4642      	mov	r2, r8
 8011f7c:	e7df      	b.n	8011f3e <_printf_float+0x402>
 8011f7e:	2301      	movs	r3, #1
 8011f80:	464a      	mov	r2, r9
 8011f82:	4631      	mov	r1, r6
 8011f84:	4628      	mov	r0, r5
 8011f86:	47b8      	blx	r7
 8011f88:	3001      	adds	r0, #1
 8011f8a:	f43f ae38 	beq.w	8011bfe <_printf_float+0xc2>
 8011f8e:	f108 0801 	add.w	r8, r8, #1
 8011f92:	68e3      	ldr	r3, [r4, #12]
 8011f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f96:	1a5b      	subs	r3, r3, r1
 8011f98:	4543      	cmp	r3, r8
 8011f9a:	dcf0      	bgt.n	8011f7e <_printf_float+0x442>
 8011f9c:	e6fa      	b.n	8011d94 <_printf_float+0x258>
 8011f9e:	f04f 0800 	mov.w	r8, #0
 8011fa2:	f104 0919 	add.w	r9, r4, #25
 8011fa6:	e7f4      	b.n	8011f92 <_printf_float+0x456>

08011fa8 <_printf_common>:
 8011fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fac:	4616      	mov	r6, r2
 8011fae:	4699      	mov	r9, r3
 8011fb0:	688a      	ldr	r2, [r1, #8]
 8011fb2:	690b      	ldr	r3, [r1, #16]
 8011fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	bfb8      	it	lt
 8011fbc:	4613      	movlt	r3, r2
 8011fbe:	6033      	str	r3, [r6, #0]
 8011fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fc4:	4607      	mov	r7, r0
 8011fc6:	460c      	mov	r4, r1
 8011fc8:	b10a      	cbz	r2, 8011fce <_printf_common+0x26>
 8011fca:	3301      	adds	r3, #1
 8011fcc:	6033      	str	r3, [r6, #0]
 8011fce:	6823      	ldr	r3, [r4, #0]
 8011fd0:	0699      	lsls	r1, r3, #26
 8011fd2:	bf42      	ittt	mi
 8011fd4:	6833      	ldrmi	r3, [r6, #0]
 8011fd6:	3302      	addmi	r3, #2
 8011fd8:	6033      	strmi	r3, [r6, #0]
 8011fda:	6825      	ldr	r5, [r4, #0]
 8011fdc:	f015 0506 	ands.w	r5, r5, #6
 8011fe0:	d106      	bne.n	8011ff0 <_printf_common+0x48>
 8011fe2:	f104 0a19 	add.w	sl, r4, #25
 8011fe6:	68e3      	ldr	r3, [r4, #12]
 8011fe8:	6832      	ldr	r2, [r6, #0]
 8011fea:	1a9b      	subs	r3, r3, r2
 8011fec:	42ab      	cmp	r3, r5
 8011fee:	dc26      	bgt.n	801203e <_printf_common+0x96>
 8011ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ff4:	1e13      	subs	r3, r2, #0
 8011ff6:	6822      	ldr	r2, [r4, #0]
 8011ff8:	bf18      	it	ne
 8011ffa:	2301      	movne	r3, #1
 8011ffc:	0692      	lsls	r2, r2, #26
 8011ffe:	d42b      	bmi.n	8012058 <_printf_common+0xb0>
 8012000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012004:	4649      	mov	r1, r9
 8012006:	4638      	mov	r0, r7
 8012008:	47c0      	blx	r8
 801200a:	3001      	adds	r0, #1
 801200c:	d01e      	beq.n	801204c <_printf_common+0xa4>
 801200e:	6823      	ldr	r3, [r4, #0]
 8012010:	68e5      	ldr	r5, [r4, #12]
 8012012:	6832      	ldr	r2, [r6, #0]
 8012014:	f003 0306 	and.w	r3, r3, #6
 8012018:	2b04      	cmp	r3, #4
 801201a:	bf08      	it	eq
 801201c:	1aad      	subeq	r5, r5, r2
 801201e:	68a3      	ldr	r3, [r4, #8]
 8012020:	6922      	ldr	r2, [r4, #16]
 8012022:	bf0c      	ite	eq
 8012024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012028:	2500      	movne	r5, #0
 801202a:	4293      	cmp	r3, r2
 801202c:	bfc4      	itt	gt
 801202e:	1a9b      	subgt	r3, r3, r2
 8012030:	18ed      	addgt	r5, r5, r3
 8012032:	2600      	movs	r6, #0
 8012034:	341a      	adds	r4, #26
 8012036:	42b5      	cmp	r5, r6
 8012038:	d11a      	bne.n	8012070 <_printf_common+0xc8>
 801203a:	2000      	movs	r0, #0
 801203c:	e008      	b.n	8012050 <_printf_common+0xa8>
 801203e:	2301      	movs	r3, #1
 8012040:	4652      	mov	r2, sl
 8012042:	4649      	mov	r1, r9
 8012044:	4638      	mov	r0, r7
 8012046:	47c0      	blx	r8
 8012048:	3001      	adds	r0, #1
 801204a:	d103      	bne.n	8012054 <_printf_common+0xac>
 801204c:	f04f 30ff 	mov.w	r0, #4294967295
 8012050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012054:	3501      	adds	r5, #1
 8012056:	e7c6      	b.n	8011fe6 <_printf_common+0x3e>
 8012058:	18e1      	adds	r1, r4, r3
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	2030      	movs	r0, #48	; 0x30
 801205e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012062:	4422      	add	r2, r4
 8012064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801206c:	3302      	adds	r3, #2
 801206e:	e7c7      	b.n	8012000 <_printf_common+0x58>
 8012070:	2301      	movs	r3, #1
 8012072:	4622      	mov	r2, r4
 8012074:	4649      	mov	r1, r9
 8012076:	4638      	mov	r0, r7
 8012078:	47c0      	blx	r8
 801207a:	3001      	adds	r0, #1
 801207c:	d0e6      	beq.n	801204c <_printf_common+0xa4>
 801207e:	3601      	adds	r6, #1
 8012080:	e7d9      	b.n	8012036 <_printf_common+0x8e>
	...

08012084 <_printf_i>:
 8012084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012088:	7e0f      	ldrb	r7, [r1, #24]
 801208a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801208c:	2f78      	cmp	r7, #120	; 0x78
 801208e:	4691      	mov	r9, r2
 8012090:	4680      	mov	r8, r0
 8012092:	460c      	mov	r4, r1
 8012094:	469a      	mov	sl, r3
 8012096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801209a:	d807      	bhi.n	80120ac <_printf_i+0x28>
 801209c:	2f62      	cmp	r7, #98	; 0x62
 801209e:	d80a      	bhi.n	80120b6 <_printf_i+0x32>
 80120a0:	2f00      	cmp	r7, #0
 80120a2:	f000 80d8 	beq.w	8012256 <_printf_i+0x1d2>
 80120a6:	2f58      	cmp	r7, #88	; 0x58
 80120a8:	f000 80a3 	beq.w	80121f2 <_printf_i+0x16e>
 80120ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80120b4:	e03a      	b.n	801212c <_printf_i+0xa8>
 80120b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80120ba:	2b15      	cmp	r3, #21
 80120bc:	d8f6      	bhi.n	80120ac <_printf_i+0x28>
 80120be:	a101      	add	r1, pc, #4	; (adr r1, 80120c4 <_printf_i+0x40>)
 80120c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120c4:	0801211d 	.word	0x0801211d
 80120c8:	08012131 	.word	0x08012131
 80120cc:	080120ad 	.word	0x080120ad
 80120d0:	080120ad 	.word	0x080120ad
 80120d4:	080120ad 	.word	0x080120ad
 80120d8:	080120ad 	.word	0x080120ad
 80120dc:	08012131 	.word	0x08012131
 80120e0:	080120ad 	.word	0x080120ad
 80120e4:	080120ad 	.word	0x080120ad
 80120e8:	080120ad 	.word	0x080120ad
 80120ec:	080120ad 	.word	0x080120ad
 80120f0:	0801223d 	.word	0x0801223d
 80120f4:	08012161 	.word	0x08012161
 80120f8:	0801221f 	.word	0x0801221f
 80120fc:	080120ad 	.word	0x080120ad
 8012100:	080120ad 	.word	0x080120ad
 8012104:	0801225f 	.word	0x0801225f
 8012108:	080120ad 	.word	0x080120ad
 801210c:	08012161 	.word	0x08012161
 8012110:	080120ad 	.word	0x080120ad
 8012114:	080120ad 	.word	0x080120ad
 8012118:	08012227 	.word	0x08012227
 801211c:	682b      	ldr	r3, [r5, #0]
 801211e:	1d1a      	adds	r2, r3, #4
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	602a      	str	r2, [r5, #0]
 8012124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801212c:	2301      	movs	r3, #1
 801212e:	e0a3      	b.n	8012278 <_printf_i+0x1f4>
 8012130:	6820      	ldr	r0, [r4, #0]
 8012132:	6829      	ldr	r1, [r5, #0]
 8012134:	0606      	lsls	r6, r0, #24
 8012136:	f101 0304 	add.w	r3, r1, #4
 801213a:	d50a      	bpl.n	8012152 <_printf_i+0xce>
 801213c:	680e      	ldr	r6, [r1, #0]
 801213e:	602b      	str	r3, [r5, #0]
 8012140:	2e00      	cmp	r6, #0
 8012142:	da03      	bge.n	801214c <_printf_i+0xc8>
 8012144:	232d      	movs	r3, #45	; 0x2d
 8012146:	4276      	negs	r6, r6
 8012148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801214c:	485e      	ldr	r0, [pc, #376]	; (80122c8 <_printf_i+0x244>)
 801214e:	230a      	movs	r3, #10
 8012150:	e019      	b.n	8012186 <_printf_i+0x102>
 8012152:	680e      	ldr	r6, [r1, #0]
 8012154:	602b      	str	r3, [r5, #0]
 8012156:	f010 0f40 	tst.w	r0, #64	; 0x40
 801215a:	bf18      	it	ne
 801215c:	b236      	sxthne	r6, r6
 801215e:	e7ef      	b.n	8012140 <_printf_i+0xbc>
 8012160:	682b      	ldr	r3, [r5, #0]
 8012162:	6820      	ldr	r0, [r4, #0]
 8012164:	1d19      	adds	r1, r3, #4
 8012166:	6029      	str	r1, [r5, #0]
 8012168:	0601      	lsls	r1, r0, #24
 801216a:	d501      	bpl.n	8012170 <_printf_i+0xec>
 801216c:	681e      	ldr	r6, [r3, #0]
 801216e:	e002      	b.n	8012176 <_printf_i+0xf2>
 8012170:	0646      	lsls	r6, r0, #25
 8012172:	d5fb      	bpl.n	801216c <_printf_i+0xe8>
 8012174:	881e      	ldrh	r6, [r3, #0]
 8012176:	4854      	ldr	r0, [pc, #336]	; (80122c8 <_printf_i+0x244>)
 8012178:	2f6f      	cmp	r7, #111	; 0x6f
 801217a:	bf0c      	ite	eq
 801217c:	2308      	moveq	r3, #8
 801217e:	230a      	movne	r3, #10
 8012180:	2100      	movs	r1, #0
 8012182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012186:	6865      	ldr	r5, [r4, #4]
 8012188:	60a5      	str	r5, [r4, #8]
 801218a:	2d00      	cmp	r5, #0
 801218c:	bfa2      	ittt	ge
 801218e:	6821      	ldrge	r1, [r4, #0]
 8012190:	f021 0104 	bicge.w	r1, r1, #4
 8012194:	6021      	strge	r1, [r4, #0]
 8012196:	b90e      	cbnz	r6, 801219c <_printf_i+0x118>
 8012198:	2d00      	cmp	r5, #0
 801219a:	d04d      	beq.n	8012238 <_printf_i+0x1b4>
 801219c:	4615      	mov	r5, r2
 801219e:	fbb6 f1f3 	udiv	r1, r6, r3
 80121a2:	fb03 6711 	mls	r7, r3, r1, r6
 80121a6:	5dc7      	ldrb	r7, [r0, r7]
 80121a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80121ac:	4637      	mov	r7, r6
 80121ae:	42bb      	cmp	r3, r7
 80121b0:	460e      	mov	r6, r1
 80121b2:	d9f4      	bls.n	801219e <_printf_i+0x11a>
 80121b4:	2b08      	cmp	r3, #8
 80121b6:	d10b      	bne.n	80121d0 <_printf_i+0x14c>
 80121b8:	6823      	ldr	r3, [r4, #0]
 80121ba:	07de      	lsls	r6, r3, #31
 80121bc:	d508      	bpl.n	80121d0 <_printf_i+0x14c>
 80121be:	6923      	ldr	r3, [r4, #16]
 80121c0:	6861      	ldr	r1, [r4, #4]
 80121c2:	4299      	cmp	r1, r3
 80121c4:	bfde      	ittt	le
 80121c6:	2330      	movle	r3, #48	; 0x30
 80121c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80121cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80121d0:	1b52      	subs	r2, r2, r5
 80121d2:	6122      	str	r2, [r4, #16]
 80121d4:	f8cd a000 	str.w	sl, [sp]
 80121d8:	464b      	mov	r3, r9
 80121da:	aa03      	add	r2, sp, #12
 80121dc:	4621      	mov	r1, r4
 80121de:	4640      	mov	r0, r8
 80121e0:	f7ff fee2 	bl	8011fa8 <_printf_common>
 80121e4:	3001      	adds	r0, #1
 80121e6:	d14c      	bne.n	8012282 <_printf_i+0x1fe>
 80121e8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ec:	b004      	add	sp, #16
 80121ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121f2:	4835      	ldr	r0, [pc, #212]	; (80122c8 <_printf_i+0x244>)
 80121f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80121f8:	6829      	ldr	r1, [r5, #0]
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8012200:	6029      	str	r1, [r5, #0]
 8012202:	061d      	lsls	r5, r3, #24
 8012204:	d514      	bpl.n	8012230 <_printf_i+0x1ac>
 8012206:	07df      	lsls	r7, r3, #31
 8012208:	bf44      	itt	mi
 801220a:	f043 0320 	orrmi.w	r3, r3, #32
 801220e:	6023      	strmi	r3, [r4, #0]
 8012210:	b91e      	cbnz	r6, 801221a <_printf_i+0x196>
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	f023 0320 	bic.w	r3, r3, #32
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	2310      	movs	r3, #16
 801221c:	e7b0      	b.n	8012180 <_printf_i+0xfc>
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	f043 0320 	orr.w	r3, r3, #32
 8012224:	6023      	str	r3, [r4, #0]
 8012226:	2378      	movs	r3, #120	; 0x78
 8012228:	4828      	ldr	r0, [pc, #160]	; (80122cc <_printf_i+0x248>)
 801222a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801222e:	e7e3      	b.n	80121f8 <_printf_i+0x174>
 8012230:	0659      	lsls	r1, r3, #25
 8012232:	bf48      	it	mi
 8012234:	b2b6      	uxthmi	r6, r6
 8012236:	e7e6      	b.n	8012206 <_printf_i+0x182>
 8012238:	4615      	mov	r5, r2
 801223a:	e7bb      	b.n	80121b4 <_printf_i+0x130>
 801223c:	682b      	ldr	r3, [r5, #0]
 801223e:	6826      	ldr	r6, [r4, #0]
 8012240:	6961      	ldr	r1, [r4, #20]
 8012242:	1d18      	adds	r0, r3, #4
 8012244:	6028      	str	r0, [r5, #0]
 8012246:	0635      	lsls	r5, r6, #24
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	d501      	bpl.n	8012250 <_printf_i+0x1cc>
 801224c:	6019      	str	r1, [r3, #0]
 801224e:	e002      	b.n	8012256 <_printf_i+0x1d2>
 8012250:	0670      	lsls	r0, r6, #25
 8012252:	d5fb      	bpl.n	801224c <_printf_i+0x1c8>
 8012254:	8019      	strh	r1, [r3, #0]
 8012256:	2300      	movs	r3, #0
 8012258:	6123      	str	r3, [r4, #16]
 801225a:	4615      	mov	r5, r2
 801225c:	e7ba      	b.n	80121d4 <_printf_i+0x150>
 801225e:	682b      	ldr	r3, [r5, #0]
 8012260:	1d1a      	adds	r2, r3, #4
 8012262:	602a      	str	r2, [r5, #0]
 8012264:	681d      	ldr	r5, [r3, #0]
 8012266:	6862      	ldr	r2, [r4, #4]
 8012268:	2100      	movs	r1, #0
 801226a:	4628      	mov	r0, r5
 801226c:	f7ed ffd8 	bl	8000220 <memchr>
 8012270:	b108      	cbz	r0, 8012276 <_printf_i+0x1f2>
 8012272:	1b40      	subs	r0, r0, r5
 8012274:	6060      	str	r0, [r4, #4]
 8012276:	6863      	ldr	r3, [r4, #4]
 8012278:	6123      	str	r3, [r4, #16]
 801227a:	2300      	movs	r3, #0
 801227c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012280:	e7a8      	b.n	80121d4 <_printf_i+0x150>
 8012282:	6923      	ldr	r3, [r4, #16]
 8012284:	462a      	mov	r2, r5
 8012286:	4649      	mov	r1, r9
 8012288:	4640      	mov	r0, r8
 801228a:	47d0      	blx	sl
 801228c:	3001      	adds	r0, #1
 801228e:	d0ab      	beq.n	80121e8 <_printf_i+0x164>
 8012290:	6823      	ldr	r3, [r4, #0]
 8012292:	079b      	lsls	r3, r3, #30
 8012294:	d413      	bmi.n	80122be <_printf_i+0x23a>
 8012296:	68e0      	ldr	r0, [r4, #12]
 8012298:	9b03      	ldr	r3, [sp, #12]
 801229a:	4298      	cmp	r0, r3
 801229c:	bfb8      	it	lt
 801229e:	4618      	movlt	r0, r3
 80122a0:	e7a4      	b.n	80121ec <_printf_i+0x168>
 80122a2:	2301      	movs	r3, #1
 80122a4:	4632      	mov	r2, r6
 80122a6:	4649      	mov	r1, r9
 80122a8:	4640      	mov	r0, r8
 80122aa:	47d0      	blx	sl
 80122ac:	3001      	adds	r0, #1
 80122ae:	d09b      	beq.n	80121e8 <_printf_i+0x164>
 80122b0:	3501      	adds	r5, #1
 80122b2:	68e3      	ldr	r3, [r4, #12]
 80122b4:	9903      	ldr	r1, [sp, #12]
 80122b6:	1a5b      	subs	r3, r3, r1
 80122b8:	42ab      	cmp	r3, r5
 80122ba:	dcf2      	bgt.n	80122a2 <_printf_i+0x21e>
 80122bc:	e7eb      	b.n	8012296 <_printf_i+0x212>
 80122be:	2500      	movs	r5, #0
 80122c0:	f104 0619 	add.w	r6, r4, #25
 80122c4:	e7f5      	b.n	80122b2 <_printf_i+0x22e>
 80122c6:	bf00      	nop
 80122c8:	080163b2 	.word	0x080163b2
 80122cc:	080163c3 	.word	0x080163c3

080122d0 <iprintf>:
 80122d0:	b40f      	push	{r0, r1, r2, r3}
 80122d2:	4b0a      	ldr	r3, [pc, #40]	; (80122fc <iprintf+0x2c>)
 80122d4:	b513      	push	{r0, r1, r4, lr}
 80122d6:	681c      	ldr	r4, [r3, #0]
 80122d8:	b124      	cbz	r4, 80122e4 <iprintf+0x14>
 80122da:	69a3      	ldr	r3, [r4, #24]
 80122dc:	b913      	cbnz	r3, 80122e4 <iprintf+0x14>
 80122de:	4620      	mov	r0, r4
 80122e0:	f7ff f99a 	bl	8011618 <__sinit>
 80122e4:	ab05      	add	r3, sp, #20
 80122e6:	9a04      	ldr	r2, [sp, #16]
 80122e8:	68a1      	ldr	r1, [r4, #8]
 80122ea:	9301      	str	r3, [sp, #4]
 80122ec:	4620      	mov	r0, r4
 80122ee:	f001 fff7 	bl	80142e0 <_vfiprintf_r>
 80122f2:	b002      	add	sp, #8
 80122f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122f8:	b004      	add	sp, #16
 80122fa:	4770      	bx	lr
 80122fc:	20000180 	.word	0x20000180

08012300 <_puts_r>:
 8012300:	b570      	push	{r4, r5, r6, lr}
 8012302:	460e      	mov	r6, r1
 8012304:	4605      	mov	r5, r0
 8012306:	b118      	cbz	r0, 8012310 <_puts_r+0x10>
 8012308:	6983      	ldr	r3, [r0, #24]
 801230a:	b90b      	cbnz	r3, 8012310 <_puts_r+0x10>
 801230c:	f7ff f984 	bl	8011618 <__sinit>
 8012310:	69ab      	ldr	r3, [r5, #24]
 8012312:	68ac      	ldr	r4, [r5, #8]
 8012314:	b913      	cbnz	r3, 801231c <_puts_r+0x1c>
 8012316:	4628      	mov	r0, r5
 8012318:	f7ff f97e 	bl	8011618 <__sinit>
 801231c:	4b2c      	ldr	r3, [pc, #176]	; (80123d0 <_puts_r+0xd0>)
 801231e:	429c      	cmp	r4, r3
 8012320:	d120      	bne.n	8012364 <_puts_r+0x64>
 8012322:	686c      	ldr	r4, [r5, #4]
 8012324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012326:	07db      	lsls	r3, r3, #31
 8012328:	d405      	bmi.n	8012336 <_puts_r+0x36>
 801232a:	89a3      	ldrh	r3, [r4, #12]
 801232c:	0598      	lsls	r0, r3, #22
 801232e:	d402      	bmi.n	8012336 <_puts_r+0x36>
 8012330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012332:	f7ff fa34 	bl	801179e <__retarget_lock_acquire_recursive>
 8012336:	89a3      	ldrh	r3, [r4, #12]
 8012338:	0719      	lsls	r1, r3, #28
 801233a:	d51d      	bpl.n	8012378 <_puts_r+0x78>
 801233c:	6923      	ldr	r3, [r4, #16]
 801233e:	b1db      	cbz	r3, 8012378 <_puts_r+0x78>
 8012340:	3e01      	subs	r6, #1
 8012342:	68a3      	ldr	r3, [r4, #8]
 8012344:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012348:	3b01      	subs	r3, #1
 801234a:	60a3      	str	r3, [r4, #8]
 801234c:	bb39      	cbnz	r1, 801239e <_puts_r+0x9e>
 801234e:	2b00      	cmp	r3, #0
 8012350:	da38      	bge.n	80123c4 <_puts_r+0xc4>
 8012352:	4622      	mov	r2, r4
 8012354:	210a      	movs	r1, #10
 8012356:	4628      	mov	r0, r5
 8012358:	f000 f9e0 	bl	801271c <__swbuf_r>
 801235c:	3001      	adds	r0, #1
 801235e:	d011      	beq.n	8012384 <_puts_r+0x84>
 8012360:	250a      	movs	r5, #10
 8012362:	e011      	b.n	8012388 <_puts_r+0x88>
 8012364:	4b1b      	ldr	r3, [pc, #108]	; (80123d4 <_puts_r+0xd4>)
 8012366:	429c      	cmp	r4, r3
 8012368:	d101      	bne.n	801236e <_puts_r+0x6e>
 801236a:	68ac      	ldr	r4, [r5, #8]
 801236c:	e7da      	b.n	8012324 <_puts_r+0x24>
 801236e:	4b1a      	ldr	r3, [pc, #104]	; (80123d8 <_puts_r+0xd8>)
 8012370:	429c      	cmp	r4, r3
 8012372:	bf08      	it	eq
 8012374:	68ec      	ldreq	r4, [r5, #12]
 8012376:	e7d5      	b.n	8012324 <_puts_r+0x24>
 8012378:	4621      	mov	r1, r4
 801237a:	4628      	mov	r0, r5
 801237c:	f000 fa32 	bl	80127e4 <__swsetup_r>
 8012380:	2800      	cmp	r0, #0
 8012382:	d0dd      	beq.n	8012340 <_puts_r+0x40>
 8012384:	f04f 35ff 	mov.w	r5, #4294967295
 8012388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801238a:	07da      	lsls	r2, r3, #31
 801238c:	d405      	bmi.n	801239a <_puts_r+0x9a>
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	059b      	lsls	r3, r3, #22
 8012392:	d402      	bmi.n	801239a <_puts_r+0x9a>
 8012394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012396:	f7ff fa03 	bl	80117a0 <__retarget_lock_release_recursive>
 801239a:	4628      	mov	r0, r5
 801239c:	bd70      	pop	{r4, r5, r6, pc}
 801239e:	2b00      	cmp	r3, #0
 80123a0:	da04      	bge.n	80123ac <_puts_r+0xac>
 80123a2:	69a2      	ldr	r2, [r4, #24]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	dc06      	bgt.n	80123b6 <_puts_r+0xb6>
 80123a8:	290a      	cmp	r1, #10
 80123aa:	d004      	beq.n	80123b6 <_puts_r+0xb6>
 80123ac:	6823      	ldr	r3, [r4, #0]
 80123ae:	1c5a      	adds	r2, r3, #1
 80123b0:	6022      	str	r2, [r4, #0]
 80123b2:	7019      	strb	r1, [r3, #0]
 80123b4:	e7c5      	b.n	8012342 <_puts_r+0x42>
 80123b6:	4622      	mov	r2, r4
 80123b8:	4628      	mov	r0, r5
 80123ba:	f000 f9af 	bl	801271c <__swbuf_r>
 80123be:	3001      	adds	r0, #1
 80123c0:	d1bf      	bne.n	8012342 <_puts_r+0x42>
 80123c2:	e7df      	b.n	8012384 <_puts_r+0x84>
 80123c4:	6823      	ldr	r3, [r4, #0]
 80123c6:	250a      	movs	r5, #10
 80123c8:	1c5a      	adds	r2, r3, #1
 80123ca:	6022      	str	r2, [r4, #0]
 80123cc:	701d      	strb	r5, [r3, #0]
 80123ce:	e7db      	b.n	8012388 <_puts_r+0x88>
 80123d0:	0801635c 	.word	0x0801635c
 80123d4:	0801637c 	.word	0x0801637c
 80123d8:	0801633c 	.word	0x0801633c

080123dc <puts>:
 80123dc:	4b02      	ldr	r3, [pc, #8]	; (80123e8 <puts+0xc>)
 80123de:	4601      	mov	r1, r0
 80123e0:	6818      	ldr	r0, [r3, #0]
 80123e2:	f7ff bf8d 	b.w	8012300 <_puts_r>
 80123e6:	bf00      	nop
 80123e8:	20000180 	.word	0x20000180

080123ec <srand>:
 80123ec:	b538      	push	{r3, r4, r5, lr}
 80123ee:	4b10      	ldr	r3, [pc, #64]	; (8012430 <srand+0x44>)
 80123f0:	681d      	ldr	r5, [r3, #0]
 80123f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80123f4:	4604      	mov	r4, r0
 80123f6:	b9b3      	cbnz	r3, 8012426 <srand+0x3a>
 80123f8:	2018      	movs	r0, #24
 80123fa:	f7ff f9d3 	bl	80117a4 <malloc>
 80123fe:	4602      	mov	r2, r0
 8012400:	63a8      	str	r0, [r5, #56]	; 0x38
 8012402:	b920      	cbnz	r0, 801240e <srand+0x22>
 8012404:	4b0b      	ldr	r3, [pc, #44]	; (8012434 <srand+0x48>)
 8012406:	480c      	ldr	r0, [pc, #48]	; (8012438 <srand+0x4c>)
 8012408:	2142      	movs	r1, #66	; 0x42
 801240a:	f000 fa59 	bl	80128c0 <__assert_func>
 801240e:	490b      	ldr	r1, [pc, #44]	; (801243c <srand+0x50>)
 8012410:	4b0b      	ldr	r3, [pc, #44]	; (8012440 <srand+0x54>)
 8012412:	e9c0 1300 	strd	r1, r3, [r0]
 8012416:	4b0b      	ldr	r3, [pc, #44]	; (8012444 <srand+0x58>)
 8012418:	6083      	str	r3, [r0, #8]
 801241a:	230b      	movs	r3, #11
 801241c:	8183      	strh	r3, [r0, #12]
 801241e:	2100      	movs	r1, #0
 8012420:	2001      	movs	r0, #1
 8012422:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012426:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012428:	2200      	movs	r2, #0
 801242a:	611c      	str	r4, [r3, #16]
 801242c:	615a      	str	r2, [r3, #20]
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	20000180 	.word	0x20000180
 8012434:	080163d4 	.word	0x080163d4
 8012438:	080163eb 	.word	0x080163eb
 801243c:	abcd330e 	.word	0xabcd330e
 8012440:	e66d1234 	.word	0xe66d1234
 8012444:	0005deec 	.word	0x0005deec

08012448 <rand>:
 8012448:	4b16      	ldr	r3, [pc, #88]	; (80124a4 <rand+0x5c>)
 801244a:	b510      	push	{r4, lr}
 801244c:	681c      	ldr	r4, [r3, #0]
 801244e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012450:	b9b3      	cbnz	r3, 8012480 <rand+0x38>
 8012452:	2018      	movs	r0, #24
 8012454:	f7ff f9a6 	bl	80117a4 <malloc>
 8012458:	63a0      	str	r0, [r4, #56]	; 0x38
 801245a:	b928      	cbnz	r0, 8012468 <rand+0x20>
 801245c:	4602      	mov	r2, r0
 801245e:	4b12      	ldr	r3, [pc, #72]	; (80124a8 <rand+0x60>)
 8012460:	4812      	ldr	r0, [pc, #72]	; (80124ac <rand+0x64>)
 8012462:	214e      	movs	r1, #78	; 0x4e
 8012464:	f000 fa2c 	bl	80128c0 <__assert_func>
 8012468:	4a11      	ldr	r2, [pc, #68]	; (80124b0 <rand+0x68>)
 801246a:	4b12      	ldr	r3, [pc, #72]	; (80124b4 <rand+0x6c>)
 801246c:	e9c0 2300 	strd	r2, r3, [r0]
 8012470:	4b11      	ldr	r3, [pc, #68]	; (80124b8 <rand+0x70>)
 8012472:	6083      	str	r3, [r0, #8]
 8012474:	230b      	movs	r3, #11
 8012476:	8183      	strh	r3, [r0, #12]
 8012478:	2201      	movs	r2, #1
 801247a:	2300      	movs	r3, #0
 801247c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012480:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012482:	4a0e      	ldr	r2, [pc, #56]	; (80124bc <rand+0x74>)
 8012484:	6920      	ldr	r0, [r4, #16]
 8012486:	6963      	ldr	r3, [r4, #20]
 8012488:	490d      	ldr	r1, [pc, #52]	; (80124c0 <rand+0x78>)
 801248a:	4342      	muls	r2, r0
 801248c:	fb01 2203 	mla	r2, r1, r3, r2
 8012490:	fba0 0101 	umull	r0, r1, r0, r1
 8012494:	1c43      	adds	r3, r0, #1
 8012496:	eb42 0001 	adc.w	r0, r2, r1
 801249a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801249e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80124a2:	bd10      	pop	{r4, pc}
 80124a4:	20000180 	.word	0x20000180
 80124a8:	080163d4 	.word	0x080163d4
 80124ac:	080163eb 	.word	0x080163eb
 80124b0:	abcd330e 	.word	0xabcd330e
 80124b4:	e66d1234 	.word	0xe66d1234
 80124b8:	0005deec 	.word	0x0005deec
 80124bc:	5851f42d 	.word	0x5851f42d
 80124c0:	4c957f2d 	.word	0x4c957f2d

080124c4 <cleanup_glue>:
 80124c4:	b538      	push	{r3, r4, r5, lr}
 80124c6:	460c      	mov	r4, r1
 80124c8:	6809      	ldr	r1, [r1, #0]
 80124ca:	4605      	mov	r5, r0
 80124cc:	b109      	cbz	r1, 80124d2 <cleanup_glue+0xe>
 80124ce:	f7ff fff9 	bl	80124c4 <cleanup_glue>
 80124d2:	4621      	mov	r1, r4
 80124d4:	4628      	mov	r0, r5
 80124d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124da:	f7ff b9af 	b.w	801183c <_free_r>
	...

080124e0 <_reclaim_reent>:
 80124e0:	4b2c      	ldr	r3, [pc, #176]	; (8012594 <_reclaim_reent+0xb4>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4283      	cmp	r3, r0
 80124e6:	b570      	push	{r4, r5, r6, lr}
 80124e8:	4604      	mov	r4, r0
 80124ea:	d051      	beq.n	8012590 <_reclaim_reent+0xb0>
 80124ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124ee:	b143      	cbz	r3, 8012502 <_reclaim_reent+0x22>
 80124f0:	68db      	ldr	r3, [r3, #12]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d14a      	bne.n	801258c <_reclaim_reent+0xac>
 80124f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124f8:	6819      	ldr	r1, [r3, #0]
 80124fa:	b111      	cbz	r1, 8012502 <_reclaim_reent+0x22>
 80124fc:	4620      	mov	r0, r4
 80124fe:	f7ff f99d 	bl	801183c <_free_r>
 8012502:	6961      	ldr	r1, [r4, #20]
 8012504:	b111      	cbz	r1, 801250c <_reclaim_reent+0x2c>
 8012506:	4620      	mov	r0, r4
 8012508:	f7ff f998 	bl	801183c <_free_r>
 801250c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801250e:	b111      	cbz	r1, 8012516 <_reclaim_reent+0x36>
 8012510:	4620      	mov	r0, r4
 8012512:	f7ff f993 	bl	801183c <_free_r>
 8012516:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012518:	b111      	cbz	r1, 8012520 <_reclaim_reent+0x40>
 801251a:	4620      	mov	r0, r4
 801251c:	f7ff f98e 	bl	801183c <_free_r>
 8012520:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012522:	b111      	cbz	r1, 801252a <_reclaim_reent+0x4a>
 8012524:	4620      	mov	r0, r4
 8012526:	f7ff f989 	bl	801183c <_free_r>
 801252a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801252c:	b111      	cbz	r1, 8012534 <_reclaim_reent+0x54>
 801252e:	4620      	mov	r0, r4
 8012530:	f7ff f984 	bl	801183c <_free_r>
 8012534:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012536:	b111      	cbz	r1, 801253e <_reclaim_reent+0x5e>
 8012538:	4620      	mov	r0, r4
 801253a:	f7ff f97f 	bl	801183c <_free_r>
 801253e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012540:	b111      	cbz	r1, 8012548 <_reclaim_reent+0x68>
 8012542:	4620      	mov	r0, r4
 8012544:	f7ff f97a 	bl	801183c <_free_r>
 8012548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801254a:	b111      	cbz	r1, 8012552 <_reclaim_reent+0x72>
 801254c:	4620      	mov	r0, r4
 801254e:	f7ff f975 	bl	801183c <_free_r>
 8012552:	69a3      	ldr	r3, [r4, #24]
 8012554:	b1e3      	cbz	r3, 8012590 <_reclaim_reent+0xb0>
 8012556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012558:	4620      	mov	r0, r4
 801255a:	4798      	blx	r3
 801255c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801255e:	b1b9      	cbz	r1, 8012590 <_reclaim_reent+0xb0>
 8012560:	4620      	mov	r0, r4
 8012562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012566:	f7ff bfad 	b.w	80124c4 <cleanup_glue>
 801256a:	5949      	ldr	r1, [r1, r5]
 801256c:	b941      	cbnz	r1, 8012580 <_reclaim_reent+0xa0>
 801256e:	3504      	adds	r5, #4
 8012570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012572:	2d80      	cmp	r5, #128	; 0x80
 8012574:	68d9      	ldr	r1, [r3, #12]
 8012576:	d1f8      	bne.n	801256a <_reclaim_reent+0x8a>
 8012578:	4620      	mov	r0, r4
 801257a:	f7ff f95f 	bl	801183c <_free_r>
 801257e:	e7ba      	b.n	80124f6 <_reclaim_reent+0x16>
 8012580:	680e      	ldr	r6, [r1, #0]
 8012582:	4620      	mov	r0, r4
 8012584:	f7ff f95a 	bl	801183c <_free_r>
 8012588:	4631      	mov	r1, r6
 801258a:	e7ef      	b.n	801256c <_reclaim_reent+0x8c>
 801258c:	2500      	movs	r5, #0
 801258e:	e7ef      	b.n	8012570 <_reclaim_reent+0x90>
 8012590:	bd70      	pop	{r4, r5, r6, pc}
 8012592:	bf00      	nop
 8012594:	20000180 	.word	0x20000180

08012598 <_sbrk_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4d06      	ldr	r5, [pc, #24]	; (80125b4 <_sbrk_r+0x1c>)
 801259c:	2300      	movs	r3, #0
 801259e:	4604      	mov	r4, r0
 80125a0:	4608      	mov	r0, r1
 80125a2:	602b      	str	r3, [r5, #0]
 80125a4:	f002 f8f6 	bl	8014794 <_sbrk>
 80125a8:	1c43      	adds	r3, r0, #1
 80125aa:	d102      	bne.n	80125b2 <_sbrk_r+0x1a>
 80125ac:	682b      	ldr	r3, [r5, #0]
 80125ae:	b103      	cbz	r3, 80125b2 <_sbrk_r+0x1a>
 80125b0:	6023      	str	r3, [r4, #0]
 80125b2:	bd38      	pop	{r3, r4, r5, pc}
 80125b4:	2000aa5c 	.word	0x2000aa5c

080125b8 <siprintf>:
 80125b8:	b40e      	push	{r1, r2, r3}
 80125ba:	b500      	push	{lr}
 80125bc:	b09c      	sub	sp, #112	; 0x70
 80125be:	ab1d      	add	r3, sp, #116	; 0x74
 80125c0:	9002      	str	r0, [sp, #8]
 80125c2:	9006      	str	r0, [sp, #24]
 80125c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125c8:	4809      	ldr	r0, [pc, #36]	; (80125f0 <siprintf+0x38>)
 80125ca:	9107      	str	r1, [sp, #28]
 80125cc:	9104      	str	r1, [sp, #16]
 80125ce:	4909      	ldr	r1, [pc, #36]	; (80125f4 <siprintf+0x3c>)
 80125d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80125d4:	9105      	str	r1, [sp, #20]
 80125d6:	6800      	ldr	r0, [r0, #0]
 80125d8:	9301      	str	r3, [sp, #4]
 80125da:	a902      	add	r1, sp, #8
 80125dc:	f001 fd56 	bl	801408c <_svfiprintf_r>
 80125e0:	9b02      	ldr	r3, [sp, #8]
 80125e2:	2200      	movs	r2, #0
 80125e4:	701a      	strb	r2, [r3, #0]
 80125e6:	b01c      	add	sp, #112	; 0x70
 80125e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80125ec:	b003      	add	sp, #12
 80125ee:	4770      	bx	lr
 80125f0:	20000180 	.word	0x20000180
 80125f4:	ffff0208 	.word	0xffff0208

080125f8 <__sread>:
 80125f8:	b510      	push	{r4, lr}
 80125fa:	460c      	mov	r4, r1
 80125fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012600:	f001 ff9e 	bl	8014540 <_read_r>
 8012604:	2800      	cmp	r0, #0
 8012606:	bfab      	itete	ge
 8012608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801260a:	89a3      	ldrhlt	r3, [r4, #12]
 801260c:	181b      	addge	r3, r3, r0
 801260e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012612:	bfac      	ite	ge
 8012614:	6563      	strge	r3, [r4, #84]	; 0x54
 8012616:	81a3      	strhlt	r3, [r4, #12]
 8012618:	bd10      	pop	{r4, pc}

0801261a <__swrite>:
 801261a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261e:	461f      	mov	r7, r3
 8012620:	898b      	ldrh	r3, [r1, #12]
 8012622:	05db      	lsls	r3, r3, #23
 8012624:	4605      	mov	r5, r0
 8012626:	460c      	mov	r4, r1
 8012628:	4616      	mov	r6, r2
 801262a:	d505      	bpl.n	8012638 <__swrite+0x1e>
 801262c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012630:	2302      	movs	r3, #2
 8012632:	2200      	movs	r2, #0
 8012634:	f001 f8c6 	bl	80137c4 <_lseek_r>
 8012638:	89a3      	ldrh	r3, [r4, #12]
 801263a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801263e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012642:	81a3      	strh	r3, [r4, #12]
 8012644:	4632      	mov	r2, r6
 8012646:	463b      	mov	r3, r7
 8012648:	4628      	mov	r0, r5
 801264a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801264e:	f000 b8b7 	b.w	80127c0 <_write_r>

08012652 <__sseek>:
 8012652:	b510      	push	{r4, lr}
 8012654:	460c      	mov	r4, r1
 8012656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801265a:	f001 f8b3 	bl	80137c4 <_lseek_r>
 801265e:	1c43      	adds	r3, r0, #1
 8012660:	89a3      	ldrh	r3, [r4, #12]
 8012662:	bf15      	itete	ne
 8012664:	6560      	strne	r0, [r4, #84]	; 0x54
 8012666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801266a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801266e:	81a3      	strheq	r3, [r4, #12]
 8012670:	bf18      	it	ne
 8012672:	81a3      	strhne	r3, [r4, #12]
 8012674:	bd10      	pop	{r4, pc}

08012676 <__sclose>:
 8012676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801267a:	f000 b93f 	b.w	80128fc <_close_r>
	...

08012680 <strncasecmp>:
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	4e0f      	ldr	r6, [pc, #60]	; (80126c0 <strncasecmp+0x40>)
 8012684:	4604      	mov	r4, r0
 8012686:	440a      	add	r2, r1
 8012688:	428a      	cmp	r2, r1
 801268a:	d101      	bne.n	8012690 <strncasecmp+0x10>
 801268c:	2000      	movs	r0, #0
 801268e:	e013      	b.n	80126b8 <strncasecmp+0x38>
 8012690:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012694:	5d98      	ldrb	r0, [r3, r6]
 8012696:	f000 0003 	and.w	r0, r0, #3
 801269a:	2801      	cmp	r0, #1
 801269c:	f811 0b01 	ldrb.w	r0, [r1], #1
 80126a0:	5c35      	ldrb	r5, [r6, r0]
 80126a2:	f005 0503 	and.w	r5, r5, #3
 80126a6:	bf08      	it	eq
 80126a8:	3320      	addeq	r3, #32
 80126aa:	2d01      	cmp	r5, #1
 80126ac:	bf08      	it	eq
 80126ae:	3020      	addeq	r0, #32
 80126b0:	1a1b      	subs	r3, r3, r0
 80126b2:	d102      	bne.n	80126ba <strncasecmp+0x3a>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d1e7      	bne.n	8012688 <strncasecmp+0x8>
 80126b8:	bd70      	pop	{r4, r5, r6, pc}
 80126ba:	4618      	mov	r0, r3
 80126bc:	e7fc      	b.n	80126b8 <strncasecmp+0x38>
 80126be:	bf00      	nop
 80126c0:	08016483 	.word	0x08016483

080126c4 <strncpy>:
 80126c4:	b510      	push	{r4, lr}
 80126c6:	3901      	subs	r1, #1
 80126c8:	4603      	mov	r3, r0
 80126ca:	b132      	cbz	r2, 80126da <strncpy+0x16>
 80126cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80126d0:	f803 4b01 	strb.w	r4, [r3], #1
 80126d4:	3a01      	subs	r2, #1
 80126d6:	2c00      	cmp	r4, #0
 80126d8:	d1f7      	bne.n	80126ca <strncpy+0x6>
 80126da:	441a      	add	r2, r3
 80126dc:	2100      	movs	r1, #0
 80126de:	4293      	cmp	r3, r2
 80126e0:	d100      	bne.n	80126e4 <strncpy+0x20>
 80126e2:	bd10      	pop	{r4, pc}
 80126e4:	f803 1b01 	strb.w	r1, [r3], #1
 80126e8:	e7f9      	b.n	80126de <strncpy+0x1a>
	...

080126ec <viprintf>:
 80126ec:	b513      	push	{r0, r1, r4, lr}
 80126ee:	460b      	mov	r3, r1
 80126f0:	4909      	ldr	r1, [pc, #36]	; (8012718 <viprintf+0x2c>)
 80126f2:	680c      	ldr	r4, [r1, #0]
 80126f4:	4602      	mov	r2, r0
 80126f6:	b144      	cbz	r4, 801270a <viprintf+0x1e>
 80126f8:	69a1      	ldr	r1, [r4, #24]
 80126fa:	b931      	cbnz	r1, 801270a <viprintf+0x1e>
 80126fc:	e9cd 0300 	strd	r0, r3, [sp]
 8012700:	4620      	mov	r0, r4
 8012702:	f7fe ff89 	bl	8011618 <__sinit>
 8012706:	e9dd 2300 	ldrd	r2, r3, [sp]
 801270a:	68a1      	ldr	r1, [r4, #8]
 801270c:	4620      	mov	r0, r4
 801270e:	b002      	add	sp, #8
 8012710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012714:	f001 bde4 	b.w	80142e0 <_vfiprintf_r>
 8012718:	20000180 	.word	0x20000180

0801271c <__swbuf_r>:
 801271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801271e:	460e      	mov	r6, r1
 8012720:	4614      	mov	r4, r2
 8012722:	4605      	mov	r5, r0
 8012724:	b118      	cbz	r0, 801272e <__swbuf_r+0x12>
 8012726:	6983      	ldr	r3, [r0, #24]
 8012728:	b90b      	cbnz	r3, 801272e <__swbuf_r+0x12>
 801272a:	f7fe ff75 	bl	8011618 <__sinit>
 801272e:	4b21      	ldr	r3, [pc, #132]	; (80127b4 <__swbuf_r+0x98>)
 8012730:	429c      	cmp	r4, r3
 8012732:	d12b      	bne.n	801278c <__swbuf_r+0x70>
 8012734:	686c      	ldr	r4, [r5, #4]
 8012736:	69a3      	ldr	r3, [r4, #24]
 8012738:	60a3      	str	r3, [r4, #8]
 801273a:	89a3      	ldrh	r3, [r4, #12]
 801273c:	071a      	lsls	r2, r3, #28
 801273e:	d52f      	bpl.n	80127a0 <__swbuf_r+0x84>
 8012740:	6923      	ldr	r3, [r4, #16]
 8012742:	b36b      	cbz	r3, 80127a0 <__swbuf_r+0x84>
 8012744:	6923      	ldr	r3, [r4, #16]
 8012746:	6820      	ldr	r0, [r4, #0]
 8012748:	1ac0      	subs	r0, r0, r3
 801274a:	6963      	ldr	r3, [r4, #20]
 801274c:	b2f6      	uxtb	r6, r6
 801274e:	4283      	cmp	r3, r0
 8012750:	4637      	mov	r7, r6
 8012752:	dc04      	bgt.n	801275e <__swbuf_r+0x42>
 8012754:	4621      	mov	r1, r4
 8012756:	4628      	mov	r0, r5
 8012758:	f000 ffe2 	bl	8013720 <_fflush_r>
 801275c:	bb30      	cbnz	r0, 80127ac <__swbuf_r+0x90>
 801275e:	68a3      	ldr	r3, [r4, #8]
 8012760:	3b01      	subs	r3, #1
 8012762:	60a3      	str	r3, [r4, #8]
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	1c5a      	adds	r2, r3, #1
 8012768:	6022      	str	r2, [r4, #0]
 801276a:	701e      	strb	r6, [r3, #0]
 801276c:	6963      	ldr	r3, [r4, #20]
 801276e:	3001      	adds	r0, #1
 8012770:	4283      	cmp	r3, r0
 8012772:	d004      	beq.n	801277e <__swbuf_r+0x62>
 8012774:	89a3      	ldrh	r3, [r4, #12]
 8012776:	07db      	lsls	r3, r3, #31
 8012778:	d506      	bpl.n	8012788 <__swbuf_r+0x6c>
 801277a:	2e0a      	cmp	r6, #10
 801277c:	d104      	bne.n	8012788 <__swbuf_r+0x6c>
 801277e:	4621      	mov	r1, r4
 8012780:	4628      	mov	r0, r5
 8012782:	f000 ffcd 	bl	8013720 <_fflush_r>
 8012786:	b988      	cbnz	r0, 80127ac <__swbuf_r+0x90>
 8012788:	4638      	mov	r0, r7
 801278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801278c:	4b0a      	ldr	r3, [pc, #40]	; (80127b8 <__swbuf_r+0x9c>)
 801278e:	429c      	cmp	r4, r3
 8012790:	d101      	bne.n	8012796 <__swbuf_r+0x7a>
 8012792:	68ac      	ldr	r4, [r5, #8]
 8012794:	e7cf      	b.n	8012736 <__swbuf_r+0x1a>
 8012796:	4b09      	ldr	r3, [pc, #36]	; (80127bc <__swbuf_r+0xa0>)
 8012798:	429c      	cmp	r4, r3
 801279a:	bf08      	it	eq
 801279c:	68ec      	ldreq	r4, [r5, #12]
 801279e:	e7ca      	b.n	8012736 <__swbuf_r+0x1a>
 80127a0:	4621      	mov	r1, r4
 80127a2:	4628      	mov	r0, r5
 80127a4:	f000 f81e 	bl	80127e4 <__swsetup_r>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d0cb      	beq.n	8012744 <__swbuf_r+0x28>
 80127ac:	f04f 37ff 	mov.w	r7, #4294967295
 80127b0:	e7ea      	b.n	8012788 <__swbuf_r+0x6c>
 80127b2:	bf00      	nop
 80127b4:	0801635c 	.word	0x0801635c
 80127b8:	0801637c 	.word	0x0801637c
 80127bc:	0801633c 	.word	0x0801633c

080127c0 <_write_r>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	4d07      	ldr	r5, [pc, #28]	; (80127e0 <_write_r+0x20>)
 80127c4:	4604      	mov	r4, r0
 80127c6:	4608      	mov	r0, r1
 80127c8:	4611      	mov	r1, r2
 80127ca:	2200      	movs	r2, #0
 80127cc:	602a      	str	r2, [r5, #0]
 80127ce:	461a      	mov	r2, r3
 80127d0:	f001 ffee 	bl	80147b0 <_write>
 80127d4:	1c43      	adds	r3, r0, #1
 80127d6:	d102      	bne.n	80127de <_write_r+0x1e>
 80127d8:	682b      	ldr	r3, [r5, #0]
 80127da:	b103      	cbz	r3, 80127de <_write_r+0x1e>
 80127dc:	6023      	str	r3, [r4, #0]
 80127de:	bd38      	pop	{r3, r4, r5, pc}
 80127e0:	2000aa5c 	.word	0x2000aa5c

080127e4 <__swsetup_r>:
 80127e4:	4b32      	ldr	r3, [pc, #200]	; (80128b0 <__swsetup_r+0xcc>)
 80127e6:	b570      	push	{r4, r5, r6, lr}
 80127e8:	681d      	ldr	r5, [r3, #0]
 80127ea:	4606      	mov	r6, r0
 80127ec:	460c      	mov	r4, r1
 80127ee:	b125      	cbz	r5, 80127fa <__swsetup_r+0x16>
 80127f0:	69ab      	ldr	r3, [r5, #24]
 80127f2:	b913      	cbnz	r3, 80127fa <__swsetup_r+0x16>
 80127f4:	4628      	mov	r0, r5
 80127f6:	f7fe ff0f 	bl	8011618 <__sinit>
 80127fa:	4b2e      	ldr	r3, [pc, #184]	; (80128b4 <__swsetup_r+0xd0>)
 80127fc:	429c      	cmp	r4, r3
 80127fe:	d10f      	bne.n	8012820 <__swsetup_r+0x3c>
 8012800:	686c      	ldr	r4, [r5, #4]
 8012802:	89a3      	ldrh	r3, [r4, #12]
 8012804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012808:	0719      	lsls	r1, r3, #28
 801280a:	d42c      	bmi.n	8012866 <__swsetup_r+0x82>
 801280c:	06dd      	lsls	r5, r3, #27
 801280e:	d411      	bmi.n	8012834 <__swsetup_r+0x50>
 8012810:	2309      	movs	r3, #9
 8012812:	6033      	str	r3, [r6, #0]
 8012814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012818:	81a3      	strh	r3, [r4, #12]
 801281a:	f04f 30ff 	mov.w	r0, #4294967295
 801281e:	e03e      	b.n	801289e <__swsetup_r+0xba>
 8012820:	4b25      	ldr	r3, [pc, #148]	; (80128b8 <__swsetup_r+0xd4>)
 8012822:	429c      	cmp	r4, r3
 8012824:	d101      	bne.n	801282a <__swsetup_r+0x46>
 8012826:	68ac      	ldr	r4, [r5, #8]
 8012828:	e7eb      	b.n	8012802 <__swsetup_r+0x1e>
 801282a:	4b24      	ldr	r3, [pc, #144]	; (80128bc <__swsetup_r+0xd8>)
 801282c:	429c      	cmp	r4, r3
 801282e:	bf08      	it	eq
 8012830:	68ec      	ldreq	r4, [r5, #12]
 8012832:	e7e6      	b.n	8012802 <__swsetup_r+0x1e>
 8012834:	0758      	lsls	r0, r3, #29
 8012836:	d512      	bpl.n	801285e <__swsetup_r+0x7a>
 8012838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801283a:	b141      	cbz	r1, 801284e <__swsetup_r+0x6a>
 801283c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012840:	4299      	cmp	r1, r3
 8012842:	d002      	beq.n	801284a <__swsetup_r+0x66>
 8012844:	4630      	mov	r0, r6
 8012846:	f7fe fff9 	bl	801183c <_free_r>
 801284a:	2300      	movs	r3, #0
 801284c:	6363      	str	r3, [r4, #52]	; 0x34
 801284e:	89a3      	ldrh	r3, [r4, #12]
 8012850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012854:	81a3      	strh	r3, [r4, #12]
 8012856:	2300      	movs	r3, #0
 8012858:	6063      	str	r3, [r4, #4]
 801285a:	6923      	ldr	r3, [r4, #16]
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	89a3      	ldrh	r3, [r4, #12]
 8012860:	f043 0308 	orr.w	r3, r3, #8
 8012864:	81a3      	strh	r3, [r4, #12]
 8012866:	6923      	ldr	r3, [r4, #16]
 8012868:	b94b      	cbnz	r3, 801287e <__swsetup_r+0x9a>
 801286a:	89a3      	ldrh	r3, [r4, #12]
 801286c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012874:	d003      	beq.n	801287e <__swsetup_r+0x9a>
 8012876:	4621      	mov	r1, r4
 8012878:	4630      	mov	r0, r6
 801287a:	f000 ffdb 	bl	8013834 <__smakebuf_r>
 801287e:	89a0      	ldrh	r0, [r4, #12]
 8012880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012884:	f010 0301 	ands.w	r3, r0, #1
 8012888:	d00a      	beq.n	80128a0 <__swsetup_r+0xbc>
 801288a:	2300      	movs	r3, #0
 801288c:	60a3      	str	r3, [r4, #8]
 801288e:	6963      	ldr	r3, [r4, #20]
 8012890:	425b      	negs	r3, r3
 8012892:	61a3      	str	r3, [r4, #24]
 8012894:	6923      	ldr	r3, [r4, #16]
 8012896:	b943      	cbnz	r3, 80128aa <__swsetup_r+0xc6>
 8012898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801289c:	d1ba      	bne.n	8012814 <__swsetup_r+0x30>
 801289e:	bd70      	pop	{r4, r5, r6, pc}
 80128a0:	0781      	lsls	r1, r0, #30
 80128a2:	bf58      	it	pl
 80128a4:	6963      	ldrpl	r3, [r4, #20]
 80128a6:	60a3      	str	r3, [r4, #8]
 80128a8:	e7f4      	b.n	8012894 <__swsetup_r+0xb0>
 80128aa:	2000      	movs	r0, #0
 80128ac:	e7f7      	b.n	801289e <__swsetup_r+0xba>
 80128ae:	bf00      	nop
 80128b0:	20000180 	.word	0x20000180
 80128b4:	0801635c 	.word	0x0801635c
 80128b8:	0801637c 	.word	0x0801637c
 80128bc:	0801633c 	.word	0x0801633c

080128c0 <__assert_func>:
 80128c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128c2:	4614      	mov	r4, r2
 80128c4:	461a      	mov	r2, r3
 80128c6:	4b09      	ldr	r3, [pc, #36]	; (80128ec <__assert_func+0x2c>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	4605      	mov	r5, r0
 80128cc:	68d8      	ldr	r0, [r3, #12]
 80128ce:	b14c      	cbz	r4, 80128e4 <__assert_func+0x24>
 80128d0:	4b07      	ldr	r3, [pc, #28]	; (80128f0 <__assert_func+0x30>)
 80128d2:	9100      	str	r1, [sp, #0]
 80128d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128d8:	4906      	ldr	r1, [pc, #24]	; (80128f4 <__assert_func+0x34>)
 80128da:	462b      	mov	r3, r5
 80128dc:	f000 ff5c 	bl	8013798 <fiprintf>
 80128e0:	f001 fe40 	bl	8014564 <abort>
 80128e4:	4b04      	ldr	r3, [pc, #16]	; (80128f8 <__assert_func+0x38>)
 80128e6:	461c      	mov	r4, r3
 80128e8:	e7f3      	b.n	80128d2 <__assert_func+0x12>
 80128ea:	bf00      	nop
 80128ec:	20000180 	.word	0x20000180
 80128f0:	08016446 	.word	0x08016446
 80128f4:	08016453 	.word	0x08016453
 80128f8:	08016481 	.word	0x08016481

080128fc <_close_r>:
 80128fc:	b538      	push	{r3, r4, r5, lr}
 80128fe:	4d06      	ldr	r5, [pc, #24]	; (8012918 <_close_r+0x1c>)
 8012900:	2300      	movs	r3, #0
 8012902:	4604      	mov	r4, r0
 8012904:	4608      	mov	r0, r1
 8012906:	602b      	str	r3, [r5, #0]
 8012908:	f001 ff0c 	bl	8014724 <_close>
 801290c:	1c43      	adds	r3, r0, #1
 801290e:	d102      	bne.n	8012916 <_close_r+0x1a>
 8012910:	682b      	ldr	r3, [r5, #0]
 8012912:	b103      	cbz	r3, 8012916 <_close_r+0x1a>
 8012914:	6023      	str	r3, [r4, #0]
 8012916:	bd38      	pop	{r3, r4, r5, pc}
 8012918:	2000aa5c 	.word	0x2000aa5c

0801291c <quorem>:
 801291c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012920:	6903      	ldr	r3, [r0, #16]
 8012922:	690c      	ldr	r4, [r1, #16]
 8012924:	42a3      	cmp	r3, r4
 8012926:	4607      	mov	r7, r0
 8012928:	f2c0 8081 	blt.w	8012a2e <quorem+0x112>
 801292c:	3c01      	subs	r4, #1
 801292e:	f101 0814 	add.w	r8, r1, #20
 8012932:	f100 0514 	add.w	r5, r0, #20
 8012936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801293a:	9301      	str	r3, [sp, #4]
 801293c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012944:	3301      	adds	r3, #1
 8012946:	429a      	cmp	r2, r3
 8012948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801294c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012950:	fbb2 f6f3 	udiv	r6, r2, r3
 8012954:	d331      	bcc.n	80129ba <quorem+0x9e>
 8012956:	f04f 0e00 	mov.w	lr, #0
 801295a:	4640      	mov	r0, r8
 801295c:	46ac      	mov	ip, r5
 801295e:	46f2      	mov	sl, lr
 8012960:	f850 2b04 	ldr.w	r2, [r0], #4
 8012964:	b293      	uxth	r3, r2
 8012966:	fb06 e303 	mla	r3, r6, r3, lr
 801296a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801296e:	b29b      	uxth	r3, r3
 8012970:	ebaa 0303 	sub.w	r3, sl, r3
 8012974:	f8dc a000 	ldr.w	sl, [ip]
 8012978:	0c12      	lsrs	r2, r2, #16
 801297a:	fa13 f38a 	uxtah	r3, r3, sl
 801297e:	fb06 e202 	mla	r2, r6, r2, lr
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	9b00      	ldr	r3, [sp, #0]
 8012986:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801298a:	b292      	uxth	r2, r2
 801298c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012994:	f8bd 3000 	ldrh.w	r3, [sp]
 8012998:	4581      	cmp	r9, r0
 801299a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801299e:	f84c 3b04 	str.w	r3, [ip], #4
 80129a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80129a6:	d2db      	bcs.n	8012960 <quorem+0x44>
 80129a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80129ac:	b92b      	cbnz	r3, 80129ba <quorem+0x9e>
 80129ae:	9b01      	ldr	r3, [sp, #4]
 80129b0:	3b04      	subs	r3, #4
 80129b2:	429d      	cmp	r5, r3
 80129b4:	461a      	mov	r2, r3
 80129b6:	d32e      	bcc.n	8012a16 <quorem+0xfa>
 80129b8:	613c      	str	r4, [r7, #16]
 80129ba:	4638      	mov	r0, r7
 80129bc:	f001 fa08 	bl	8013dd0 <__mcmp>
 80129c0:	2800      	cmp	r0, #0
 80129c2:	db24      	blt.n	8012a0e <quorem+0xf2>
 80129c4:	3601      	adds	r6, #1
 80129c6:	4628      	mov	r0, r5
 80129c8:	f04f 0c00 	mov.w	ip, #0
 80129cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80129d0:	f8d0 e000 	ldr.w	lr, [r0]
 80129d4:	b293      	uxth	r3, r2
 80129d6:	ebac 0303 	sub.w	r3, ip, r3
 80129da:	0c12      	lsrs	r2, r2, #16
 80129dc:	fa13 f38e 	uxtah	r3, r3, lr
 80129e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80129e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129ee:	45c1      	cmp	r9, r8
 80129f0:	f840 3b04 	str.w	r3, [r0], #4
 80129f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80129f8:	d2e8      	bcs.n	80129cc <quorem+0xb0>
 80129fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80129fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a02:	b922      	cbnz	r2, 8012a0e <quorem+0xf2>
 8012a04:	3b04      	subs	r3, #4
 8012a06:	429d      	cmp	r5, r3
 8012a08:	461a      	mov	r2, r3
 8012a0a:	d30a      	bcc.n	8012a22 <quorem+0x106>
 8012a0c:	613c      	str	r4, [r7, #16]
 8012a0e:	4630      	mov	r0, r6
 8012a10:	b003      	add	sp, #12
 8012a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a16:	6812      	ldr	r2, [r2, #0]
 8012a18:	3b04      	subs	r3, #4
 8012a1a:	2a00      	cmp	r2, #0
 8012a1c:	d1cc      	bne.n	80129b8 <quorem+0x9c>
 8012a1e:	3c01      	subs	r4, #1
 8012a20:	e7c7      	b.n	80129b2 <quorem+0x96>
 8012a22:	6812      	ldr	r2, [r2, #0]
 8012a24:	3b04      	subs	r3, #4
 8012a26:	2a00      	cmp	r2, #0
 8012a28:	d1f0      	bne.n	8012a0c <quorem+0xf0>
 8012a2a:	3c01      	subs	r4, #1
 8012a2c:	e7eb      	b.n	8012a06 <quorem+0xea>
 8012a2e:	2000      	movs	r0, #0
 8012a30:	e7ee      	b.n	8012a10 <quorem+0xf4>
 8012a32:	0000      	movs	r0, r0
 8012a34:	0000      	movs	r0, r0
	...

08012a38 <_dtoa_r>:
 8012a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a3c:	ed2d 8b04 	vpush	{d8-d9}
 8012a40:	ec57 6b10 	vmov	r6, r7, d0
 8012a44:	b093      	sub	sp, #76	; 0x4c
 8012a46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012a48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012a4c:	9106      	str	r1, [sp, #24]
 8012a4e:	ee10 aa10 	vmov	sl, s0
 8012a52:	4604      	mov	r4, r0
 8012a54:	9209      	str	r2, [sp, #36]	; 0x24
 8012a56:	930c      	str	r3, [sp, #48]	; 0x30
 8012a58:	46bb      	mov	fp, r7
 8012a5a:	b975      	cbnz	r5, 8012a7a <_dtoa_r+0x42>
 8012a5c:	2010      	movs	r0, #16
 8012a5e:	f7fe fea1 	bl	80117a4 <malloc>
 8012a62:	4602      	mov	r2, r0
 8012a64:	6260      	str	r0, [r4, #36]	; 0x24
 8012a66:	b920      	cbnz	r0, 8012a72 <_dtoa_r+0x3a>
 8012a68:	4ba7      	ldr	r3, [pc, #668]	; (8012d08 <_dtoa_r+0x2d0>)
 8012a6a:	21ea      	movs	r1, #234	; 0xea
 8012a6c:	48a7      	ldr	r0, [pc, #668]	; (8012d0c <_dtoa_r+0x2d4>)
 8012a6e:	f7ff ff27 	bl	80128c0 <__assert_func>
 8012a72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012a76:	6005      	str	r5, [r0, #0]
 8012a78:	60c5      	str	r5, [r0, #12]
 8012a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a7c:	6819      	ldr	r1, [r3, #0]
 8012a7e:	b151      	cbz	r1, 8012a96 <_dtoa_r+0x5e>
 8012a80:	685a      	ldr	r2, [r3, #4]
 8012a82:	604a      	str	r2, [r1, #4]
 8012a84:	2301      	movs	r3, #1
 8012a86:	4093      	lsls	r3, r2
 8012a88:	608b      	str	r3, [r1, #8]
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	f000 ff5e 	bl	801394c <_Bfree>
 8012a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a92:	2200      	movs	r2, #0
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	1e3b      	subs	r3, r7, #0
 8012a98:	bfaa      	itet	ge
 8012a9a:	2300      	movge	r3, #0
 8012a9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012aa0:	f8c8 3000 	strge.w	r3, [r8]
 8012aa4:	4b9a      	ldr	r3, [pc, #616]	; (8012d10 <_dtoa_r+0x2d8>)
 8012aa6:	bfbc      	itt	lt
 8012aa8:	2201      	movlt	r2, #1
 8012aaa:	f8c8 2000 	strlt.w	r2, [r8]
 8012aae:	ea33 030b 	bics.w	r3, r3, fp
 8012ab2:	d11b      	bne.n	8012aec <_dtoa_r+0xb4>
 8012ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ab6:	f242 730f 	movw	r3, #9999	; 0x270f
 8012aba:	6013      	str	r3, [r2, #0]
 8012abc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ac0:	4333      	orrs	r3, r6
 8012ac2:	f000 8592 	beq.w	80135ea <_dtoa_r+0xbb2>
 8012ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ac8:	b963      	cbnz	r3, 8012ae4 <_dtoa_r+0xac>
 8012aca:	4b92      	ldr	r3, [pc, #584]	; (8012d14 <_dtoa_r+0x2dc>)
 8012acc:	e022      	b.n	8012b14 <_dtoa_r+0xdc>
 8012ace:	4b92      	ldr	r3, [pc, #584]	; (8012d18 <_dtoa_r+0x2e0>)
 8012ad0:	9301      	str	r3, [sp, #4]
 8012ad2:	3308      	adds	r3, #8
 8012ad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012ad6:	6013      	str	r3, [r2, #0]
 8012ad8:	9801      	ldr	r0, [sp, #4]
 8012ada:	b013      	add	sp, #76	; 0x4c
 8012adc:	ecbd 8b04 	vpop	{d8-d9}
 8012ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae4:	4b8b      	ldr	r3, [pc, #556]	; (8012d14 <_dtoa_r+0x2dc>)
 8012ae6:	9301      	str	r3, [sp, #4]
 8012ae8:	3303      	adds	r3, #3
 8012aea:	e7f3      	b.n	8012ad4 <_dtoa_r+0x9c>
 8012aec:	2200      	movs	r2, #0
 8012aee:	2300      	movs	r3, #0
 8012af0:	4650      	mov	r0, sl
 8012af2:	4659      	mov	r1, fp
 8012af4:	f7ee f808 	bl	8000b08 <__aeabi_dcmpeq>
 8012af8:	ec4b ab19 	vmov	d9, sl, fp
 8012afc:	4680      	mov	r8, r0
 8012afe:	b158      	cbz	r0, 8012b18 <_dtoa_r+0xe0>
 8012b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b02:	2301      	movs	r3, #1
 8012b04:	6013      	str	r3, [r2, #0]
 8012b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	f000 856b 	beq.w	80135e4 <_dtoa_r+0xbac>
 8012b0e:	4883      	ldr	r0, [pc, #524]	; (8012d1c <_dtoa_r+0x2e4>)
 8012b10:	6018      	str	r0, [r3, #0]
 8012b12:	1e43      	subs	r3, r0, #1
 8012b14:	9301      	str	r3, [sp, #4]
 8012b16:	e7df      	b.n	8012ad8 <_dtoa_r+0xa0>
 8012b18:	ec4b ab10 	vmov	d0, sl, fp
 8012b1c:	aa10      	add	r2, sp, #64	; 0x40
 8012b1e:	a911      	add	r1, sp, #68	; 0x44
 8012b20:	4620      	mov	r0, r4
 8012b22:	f001 f9fb 	bl	8013f1c <__d2b>
 8012b26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012b2a:	ee08 0a10 	vmov	s16, r0
 8012b2e:	2d00      	cmp	r5, #0
 8012b30:	f000 8084 	beq.w	8012c3c <_dtoa_r+0x204>
 8012b34:	ee19 3a90 	vmov	r3, s19
 8012b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012b40:	4656      	mov	r6, sl
 8012b42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012b46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012b4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012b4e:	4b74      	ldr	r3, [pc, #464]	; (8012d20 <_dtoa_r+0x2e8>)
 8012b50:	2200      	movs	r2, #0
 8012b52:	4630      	mov	r0, r6
 8012b54:	4639      	mov	r1, r7
 8012b56:	f7ed fbb7 	bl	80002c8 <__aeabi_dsub>
 8012b5a:	a365      	add	r3, pc, #404	; (adr r3, 8012cf0 <_dtoa_r+0x2b8>)
 8012b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b60:	f7ed fd6a 	bl	8000638 <__aeabi_dmul>
 8012b64:	a364      	add	r3, pc, #400	; (adr r3, 8012cf8 <_dtoa_r+0x2c0>)
 8012b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6a:	f7ed fbaf 	bl	80002cc <__adddf3>
 8012b6e:	4606      	mov	r6, r0
 8012b70:	4628      	mov	r0, r5
 8012b72:	460f      	mov	r7, r1
 8012b74:	f7ed fcf6 	bl	8000564 <__aeabi_i2d>
 8012b78:	a361      	add	r3, pc, #388	; (adr r3, 8012d00 <_dtoa_r+0x2c8>)
 8012b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7e:	f7ed fd5b 	bl	8000638 <__aeabi_dmul>
 8012b82:	4602      	mov	r2, r0
 8012b84:	460b      	mov	r3, r1
 8012b86:	4630      	mov	r0, r6
 8012b88:	4639      	mov	r1, r7
 8012b8a:	f7ed fb9f 	bl	80002cc <__adddf3>
 8012b8e:	4606      	mov	r6, r0
 8012b90:	460f      	mov	r7, r1
 8012b92:	f7ee f801 	bl	8000b98 <__aeabi_d2iz>
 8012b96:	2200      	movs	r2, #0
 8012b98:	9000      	str	r0, [sp, #0]
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	4630      	mov	r0, r6
 8012b9e:	4639      	mov	r1, r7
 8012ba0:	f7ed ffbc 	bl	8000b1c <__aeabi_dcmplt>
 8012ba4:	b150      	cbz	r0, 8012bbc <_dtoa_r+0x184>
 8012ba6:	9800      	ldr	r0, [sp, #0]
 8012ba8:	f7ed fcdc 	bl	8000564 <__aeabi_i2d>
 8012bac:	4632      	mov	r2, r6
 8012bae:	463b      	mov	r3, r7
 8012bb0:	f7ed ffaa 	bl	8000b08 <__aeabi_dcmpeq>
 8012bb4:	b910      	cbnz	r0, 8012bbc <_dtoa_r+0x184>
 8012bb6:	9b00      	ldr	r3, [sp, #0]
 8012bb8:	3b01      	subs	r3, #1
 8012bba:	9300      	str	r3, [sp, #0]
 8012bbc:	9b00      	ldr	r3, [sp, #0]
 8012bbe:	2b16      	cmp	r3, #22
 8012bc0:	d85a      	bhi.n	8012c78 <_dtoa_r+0x240>
 8012bc2:	9a00      	ldr	r2, [sp, #0]
 8012bc4:	4b57      	ldr	r3, [pc, #348]	; (8012d24 <_dtoa_r+0x2ec>)
 8012bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	ec51 0b19 	vmov	r0, r1, d9
 8012bd2:	f7ed ffa3 	bl	8000b1c <__aeabi_dcmplt>
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	d050      	beq.n	8012c7c <_dtoa_r+0x244>
 8012bda:	9b00      	ldr	r3, [sp, #0]
 8012bdc:	3b01      	subs	r3, #1
 8012bde:	9300      	str	r3, [sp, #0]
 8012be0:	2300      	movs	r3, #0
 8012be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012be6:	1b5d      	subs	r5, r3, r5
 8012be8:	1e6b      	subs	r3, r5, #1
 8012bea:	9305      	str	r3, [sp, #20]
 8012bec:	bf45      	ittet	mi
 8012bee:	f1c5 0301 	rsbmi	r3, r5, #1
 8012bf2:	9304      	strmi	r3, [sp, #16]
 8012bf4:	2300      	movpl	r3, #0
 8012bf6:	2300      	movmi	r3, #0
 8012bf8:	bf4c      	ite	mi
 8012bfa:	9305      	strmi	r3, [sp, #20]
 8012bfc:	9304      	strpl	r3, [sp, #16]
 8012bfe:	9b00      	ldr	r3, [sp, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	db3d      	blt.n	8012c80 <_dtoa_r+0x248>
 8012c04:	9b05      	ldr	r3, [sp, #20]
 8012c06:	9a00      	ldr	r2, [sp, #0]
 8012c08:	920a      	str	r2, [sp, #40]	; 0x28
 8012c0a:	4413      	add	r3, r2
 8012c0c:	9305      	str	r3, [sp, #20]
 8012c0e:	2300      	movs	r3, #0
 8012c10:	9307      	str	r3, [sp, #28]
 8012c12:	9b06      	ldr	r3, [sp, #24]
 8012c14:	2b09      	cmp	r3, #9
 8012c16:	f200 8089 	bhi.w	8012d2c <_dtoa_r+0x2f4>
 8012c1a:	2b05      	cmp	r3, #5
 8012c1c:	bfc4      	itt	gt
 8012c1e:	3b04      	subgt	r3, #4
 8012c20:	9306      	strgt	r3, [sp, #24]
 8012c22:	9b06      	ldr	r3, [sp, #24]
 8012c24:	f1a3 0302 	sub.w	r3, r3, #2
 8012c28:	bfcc      	ite	gt
 8012c2a:	2500      	movgt	r5, #0
 8012c2c:	2501      	movle	r5, #1
 8012c2e:	2b03      	cmp	r3, #3
 8012c30:	f200 8087 	bhi.w	8012d42 <_dtoa_r+0x30a>
 8012c34:	e8df f003 	tbb	[pc, r3]
 8012c38:	59383a2d 	.word	0x59383a2d
 8012c3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012c40:	441d      	add	r5, r3
 8012c42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012c46:	2b20      	cmp	r3, #32
 8012c48:	bfc1      	itttt	gt
 8012c4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012c4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012c52:	fa0b f303 	lslgt.w	r3, fp, r3
 8012c56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012c5a:	bfda      	itte	le
 8012c5c:	f1c3 0320 	rsble	r3, r3, #32
 8012c60:	fa06 f003 	lslle.w	r0, r6, r3
 8012c64:	4318      	orrgt	r0, r3
 8012c66:	f7ed fc6d 	bl	8000544 <__aeabi_ui2d>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	4606      	mov	r6, r0
 8012c6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012c72:	3d01      	subs	r5, #1
 8012c74:	930e      	str	r3, [sp, #56]	; 0x38
 8012c76:	e76a      	b.n	8012b4e <_dtoa_r+0x116>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e7b2      	b.n	8012be2 <_dtoa_r+0x1aa>
 8012c7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8012c7e:	e7b1      	b.n	8012be4 <_dtoa_r+0x1ac>
 8012c80:	9b04      	ldr	r3, [sp, #16]
 8012c82:	9a00      	ldr	r2, [sp, #0]
 8012c84:	1a9b      	subs	r3, r3, r2
 8012c86:	9304      	str	r3, [sp, #16]
 8012c88:	4253      	negs	r3, r2
 8012c8a:	9307      	str	r3, [sp, #28]
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8012c90:	e7bf      	b.n	8012c12 <_dtoa_r+0x1da>
 8012c92:	2300      	movs	r3, #0
 8012c94:	9308      	str	r3, [sp, #32]
 8012c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	dc55      	bgt.n	8012d48 <_dtoa_r+0x310>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8012ca6:	e00c      	b.n	8012cc2 <_dtoa_r+0x28a>
 8012ca8:	2301      	movs	r3, #1
 8012caa:	e7f3      	b.n	8012c94 <_dtoa_r+0x25c>
 8012cac:	2300      	movs	r3, #0
 8012cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cb0:	9308      	str	r3, [sp, #32]
 8012cb2:	9b00      	ldr	r3, [sp, #0]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	9302      	str	r3, [sp, #8]
 8012cb8:	3301      	adds	r3, #1
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	9303      	str	r3, [sp, #12]
 8012cbe:	bfb8      	it	lt
 8012cc0:	2301      	movlt	r3, #1
 8012cc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	6042      	str	r2, [r0, #4]
 8012cc8:	2204      	movs	r2, #4
 8012cca:	f102 0614 	add.w	r6, r2, #20
 8012cce:	429e      	cmp	r6, r3
 8012cd0:	6841      	ldr	r1, [r0, #4]
 8012cd2:	d93d      	bls.n	8012d50 <_dtoa_r+0x318>
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	f000 fdf9 	bl	80138cc <_Balloc>
 8012cda:	9001      	str	r0, [sp, #4]
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d13b      	bne.n	8012d58 <_dtoa_r+0x320>
 8012ce0:	4b11      	ldr	r3, [pc, #68]	; (8012d28 <_dtoa_r+0x2f0>)
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012ce8:	e6c0      	b.n	8012a6c <_dtoa_r+0x34>
 8012cea:	2301      	movs	r3, #1
 8012cec:	e7df      	b.n	8012cae <_dtoa_r+0x276>
 8012cee:	bf00      	nop
 8012cf0:	636f4361 	.word	0x636f4361
 8012cf4:	3fd287a7 	.word	0x3fd287a7
 8012cf8:	8b60c8b3 	.word	0x8b60c8b3
 8012cfc:	3fc68a28 	.word	0x3fc68a28
 8012d00:	509f79fb 	.word	0x509f79fb
 8012d04:	3fd34413 	.word	0x3fd34413
 8012d08:	080163d4 	.word	0x080163d4
 8012d0c:	08016590 	.word	0x08016590
 8012d10:	7ff00000 	.word	0x7ff00000
 8012d14:	0801658c 	.word	0x0801658c
 8012d18:	08016583 	.word	0x08016583
 8012d1c:	080163b1 	.word	0x080163b1
 8012d20:	3ff80000 	.word	0x3ff80000
 8012d24:	08016680 	.word	0x08016680
 8012d28:	080165eb 	.word	0x080165eb
 8012d2c:	2501      	movs	r5, #1
 8012d2e:	2300      	movs	r3, #0
 8012d30:	9306      	str	r3, [sp, #24]
 8012d32:	9508      	str	r5, [sp, #32]
 8012d34:	f04f 33ff 	mov.w	r3, #4294967295
 8012d38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	2312      	movs	r3, #18
 8012d40:	e7b0      	b.n	8012ca4 <_dtoa_r+0x26c>
 8012d42:	2301      	movs	r3, #1
 8012d44:	9308      	str	r3, [sp, #32]
 8012d46:	e7f5      	b.n	8012d34 <_dtoa_r+0x2fc>
 8012d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012d4e:	e7b8      	b.n	8012cc2 <_dtoa_r+0x28a>
 8012d50:	3101      	adds	r1, #1
 8012d52:	6041      	str	r1, [r0, #4]
 8012d54:	0052      	lsls	r2, r2, #1
 8012d56:	e7b8      	b.n	8012cca <_dtoa_r+0x292>
 8012d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d5a:	9a01      	ldr	r2, [sp, #4]
 8012d5c:	601a      	str	r2, [r3, #0]
 8012d5e:	9b03      	ldr	r3, [sp, #12]
 8012d60:	2b0e      	cmp	r3, #14
 8012d62:	f200 809d 	bhi.w	8012ea0 <_dtoa_r+0x468>
 8012d66:	2d00      	cmp	r5, #0
 8012d68:	f000 809a 	beq.w	8012ea0 <_dtoa_r+0x468>
 8012d6c:	9b00      	ldr	r3, [sp, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	dd32      	ble.n	8012dd8 <_dtoa_r+0x3a0>
 8012d72:	4ab7      	ldr	r2, [pc, #732]	; (8013050 <_dtoa_r+0x618>)
 8012d74:	f003 030f 	and.w	r3, r3, #15
 8012d78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012d80:	9b00      	ldr	r3, [sp, #0]
 8012d82:	05d8      	lsls	r0, r3, #23
 8012d84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012d88:	d516      	bpl.n	8012db8 <_dtoa_r+0x380>
 8012d8a:	4bb2      	ldr	r3, [pc, #712]	; (8013054 <_dtoa_r+0x61c>)
 8012d8c:	ec51 0b19 	vmov	r0, r1, d9
 8012d90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d94:	f7ed fd7a 	bl	800088c <__aeabi_ddiv>
 8012d98:	f007 070f 	and.w	r7, r7, #15
 8012d9c:	4682      	mov	sl, r0
 8012d9e:	468b      	mov	fp, r1
 8012da0:	2503      	movs	r5, #3
 8012da2:	4eac      	ldr	r6, [pc, #688]	; (8013054 <_dtoa_r+0x61c>)
 8012da4:	b957      	cbnz	r7, 8012dbc <_dtoa_r+0x384>
 8012da6:	4642      	mov	r2, r8
 8012da8:	464b      	mov	r3, r9
 8012daa:	4650      	mov	r0, sl
 8012dac:	4659      	mov	r1, fp
 8012dae:	f7ed fd6d 	bl	800088c <__aeabi_ddiv>
 8012db2:	4682      	mov	sl, r0
 8012db4:	468b      	mov	fp, r1
 8012db6:	e028      	b.n	8012e0a <_dtoa_r+0x3d2>
 8012db8:	2502      	movs	r5, #2
 8012dba:	e7f2      	b.n	8012da2 <_dtoa_r+0x36a>
 8012dbc:	07f9      	lsls	r1, r7, #31
 8012dbe:	d508      	bpl.n	8012dd2 <_dtoa_r+0x39a>
 8012dc0:	4640      	mov	r0, r8
 8012dc2:	4649      	mov	r1, r9
 8012dc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012dc8:	f7ed fc36 	bl	8000638 <__aeabi_dmul>
 8012dcc:	3501      	adds	r5, #1
 8012dce:	4680      	mov	r8, r0
 8012dd0:	4689      	mov	r9, r1
 8012dd2:	107f      	asrs	r7, r7, #1
 8012dd4:	3608      	adds	r6, #8
 8012dd6:	e7e5      	b.n	8012da4 <_dtoa_r+0x36c>
 8012dd8:	f000 809b 	beq.w	8012f12 <_dtoa_r+0x4da>
 8012ddc:	9b00      	ldr	r3, [sp, #0]
 8012dde:	4f9d      	ldr	r7, [pc, #628]	; (8013054 <_dtoa_r+0x61c>)
 8012de0:	425e      	negs	r6, r3
 8012de2:	4b9b      	ldr	r3, [pc, #620]	; (8013050 <_dtoa_r+0x618>)
 8012de4:	f006 020f 	and.w	r2, r6, #15
 8012de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	ec51 0b19 	vmov	r0, r1, d9
 8012df4:	f7ed fc20 	bl	8000638 <__aeabi_dmul>
 8012df8:	1136      	asrs	r6, r6, #4
 8012dfa:	4682      	mov	sl, r0
 8012dfc:	468b      	mov	fp, r1
 8012dfe:	2300      	movs	r3, #0
 8012e00:	2502      	movs	r5, #2
 8012e02:	2e00      	cmp	r6, #0
 8012e04:	d17a      	bne.n	8012efc <_dtoa_r+0x4c4>
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d1d3      	bne.n	8012db2 <_dtoa_r+0x37a>
 8012e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	f000 8082 	beq.w	8012f16 <_dtoa_r+0x4de>
 8012e12:	4b91      	ldr	r3, [pc, #580]	; (8013058 <_dtoa_r+0x620>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	4650      	mov	r0, sl
 8012e18:	4659      	mov	r1, fp
 8012e1a:	f7ed fe7f 	bl	8000b1c <__aeabi_dcmplt>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	d079      	beq.n	8012f16 <_dtoa_r+0x4de>
 8012e22:	9b03      	ldr	r3, [sp, #12]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d076      	beq.n	8012f16 <_dtoa_r+0x4de>
 8012e28:	9b02      	ldr	r3, [sp, #8]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	dd36      	ble.n	8012e9c <_dtoa_r+0x464>
 8012e2e:	9b00      	ldr	r3, [sp, #0]
 8012e30:	4650      	mov	r0, sl
 8012e32:	4659      	mov	r1, fp
 8012e34:	1e5f      	subs	r7, r3, #1
 8012e36:	2200      	movs	r2, #0
 8012e38:	4b88      	ldr	r3, [pc, #544]	; (801305c <_dtoa_r+0x624>)
 8012e3a:	f7ed fbfd 	bl	8000638 <__aeabi_dmul>
 8012e3e:	9e02      	ldr	r6, [sp, #8]
 8012e40:	4682      	mov	sl, r0
 8012e42:	468b      	mov	fp, r1
 8012e44:	3501      	adds	r5, #1
 8012e46:	4628      	mov	r0, r5
 8012e48:	f7ed fb8c 	bl	8000564 <__aeabi_i2d>
 8012e4c:	4652      	mov	r2, sl
 8012e4e:	465b      	mov	r3, fp
 8012e50:	f7ed fbf2 	bl	8000638 <__aeabi_dmul>
 8012e54:	4b82      	ldr	r3, [pc, #520]	; (8013060 <_dtoa_r+0x628>)
 8012e56:	2200      	movs	r2, #0
 8012e58:	f7ed fa38 	bl	80002cc <__adddf3>
 8012e5c:	46d0      	mov	r8, sl
 8012e5e:	46d9      	mov	r9, fp
 8012e60:	4682      	mov	sl, r0
 8012e62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012e66:	2e00      	cmp	r6, #0
 8012e68:	d158      	bne.n	8012f1c <_dtoa_r+0x4e4>
 8012e6a:	4b7e      	ldr	r3, [pc, #504]	; (8013064 <_dtoa_r+0x62c>)
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	4640      	mov	r0, r8
 8012e70:	4649      	mov	r1, r9
 8012e72:	f7ed fa29 	bl	80002c8 <__aeabi_dsub>
 8012e76:	4652      	mov	r2, sl
 8012e78:	465b      	mov	r3, fp
 8012e7a:	4680      	mov	r8, r0
 8012e7c:	4689      	mov	r9, r1
 8012e7e:	f7ed fe6b 	bl	8000b58 <__aeabi_dcmpgt>
 8012e82:	2800      	cmp	r0, #0
 8012e84:	f040 8295 	bne.w	80133b2 <_dtoa_r+0x97a>
 8012e88:	4652      	mov	r2, sl
 8012e8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012e8e:	4640      	mov	r0, r8
 8012e90:	4649      	mov	r1, r9
 8012e92:	f7ed fe43 	bl	8000b1c <__aeabi_dcmplt>
 8012e96:	2800      	cmp	r0, #0
 8012e98:	f040 8289 	bne.w	80133ae <_dtoa_r+0x976>
 8012e9c:	ec5b ab19 	vmov	sl, fp, d9
 8012ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	f2c0 8148 	blt.w	8013138 <_dtoa_r+0x700>
 8012ea8:	9a00      	ldr	r2, [sp, #0]
 8012eaa:	2a0e      	cmp	r2, #14
 8012eac:	f300 8144 	bgt.w	8013138 <_dtoa_r+0x700>
 8012eb0:	4b67      	ldr	r3, [pc, #412]	; (8013050 <_dtoa_r+0x618>)
 8012eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012eb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	f280 80d5 	bge.w	801306c <_dtoa_r+0x634>
 8012ec2:	9b03      	ldr	r3, [sp, #12]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f300 80d1 	bgt.w	801306c <_dtoa_r+0x634>
 8012eca:	f040 826f 	bne.w	80133ac <_dtoa_r+0x974>
 8012ece:	4b65      	ldr	r3, [pc, #404]	; (8013064 <_dtoa_r+0x62c>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	4640      	mov	r0, r8
 8012ed4:	4649      	mov	r1, r9
 8012ed6:	f7ed fbaf 	bl	8000638 <__aeabi_dmul>
 8012eda:	4652      	mov	r2, sl
 8012edc:	465b      	mov	r3, fp
 8012ede:	f7ed fe31 	bl	8000b44 <__aeabi_dcmpge>
 8012ee2:	9e03      	ldr	r6, [sp, #12]
 8012ee4:	4637      	mov	r7, r6
 8012ee6:	2800      	cmp	r0, #0
 8012ee8:	f040 8245 	bne.w	8013376 <_dtoa_r+0x93e>
 8012eec:	9d01      	ldr	r5, [sp, #4]
 8012eee:	2331      	movs	r3, #49	; 0x31
 8012ef0:	f805 3b01 	strb.w	r3, [r5], #1
 8012ef4:	9b00      	ldr	r3, [sp, #0]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	9300      	str	r3, [sp, #0]
 8012efa:	e240      	b.n	801337e <_dtoa_r+0x946>
 8012efc:	07f2      	lsls	r2, r6, #31
 8012efe:	d505      	bpl.n	8012f0c <_dtoa_r+0x4d4>
 8012f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f04:	f7ed fb98 	bl	8000638 <__aeabi_dmul>
 8012f08:	3501      	adds	r5, #1
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	1076      	asrs	r6, r6, #1
 8012f0e:	3708      	adds	r7, #8
 8012f10:	e777      	b.n	8012e02 <_dtoa_r+0x3ca>
 8012f12:	2502      	movs	r5, #2
 8012f14:	e779      	b.n	8012e0a <_dtoa_r+0x3d2>
 8012f16:	9f00      	ldr	r7, [sp, #0]
 8012f18:	9e03      	ldr	r6, [sp, #12]
 8012f1a:	e794      	b.n	8012e46 <_dtoa_r+0x40e>
 8012f1c:	9901      	ldr	r1, [sp, #4]
 8012f1e:	4b4c      	ldr	r3, [pc, #304]	; (8013050 <_dtoa_r+0x618>)
 8012f20:	4431      	add	r1, r6
 8012f22:	910d      	str	r1, [sp, #52]	; 0x34
 8012f24:	9908      	ldr	r1, [sp, #32]
 8012f26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012f2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012f2e:	2900      	cmp	r1, #0
 8012f30:	d043      	beq.n	8012fba <_dtoa_r+0x582>
 8012f32:	494d      	ldr	r1, [pc, #308]	; (8013068 <_dtoa_r+0x630>)
 8012f34:	2000      	movs	r0, #0
 8012f36:	f7ed fca9 	bl	800088c <__aeabi_ddiv>
 8012f3a:	4652      	mov	r2, sl
 8012f3c:	465b      	mov	r3, fp
 8012f3e:	f7ed f9c3 	bl	80002c8 <__aeabi_dsub>
 8012f42:	9d01      	ldr	r5, [sp, #4]
 8012f44:	4682      	mov	sl, r0
 8012f46:	468b      	mov	fp, r1
 8012f48:	4649      	mov	r1, r9
 8012f4a:	4640      	mov	r0, r8
 8012f4c:	f7ed fe24 	bl	8000b98 <__aeabi_d2iz>
 8012f50:	4606      	mov	r6, r0
 8012f52:	f7ed fb07 	bl	8000564 <__aeabi_i2d>
 8012f56:	4602      	mov	r2, r0
 8012f58:	460b      	mov	r3, r1
 8012f5a:	4640      	mov	r0, r8
 8012f5c:	4649      	mov	r1, r9
 8012f5e:	f7ed f9b3 	bl	80002c8 <__aeabi_dsub>
 8012f62:	3630      	adds	r6, #48	; 0x30
 8012f64:	f805 6b01 	strb.w	r6, [r5], #1
 8012f68:	4652      	mov	r2, sl
 8012f6a:	465b      	mov	r3, fp
 8012f6c:	4680      	mov	r8, r0
 8012f6e:	4689      	mov	r9, r1
 8012f70:	f7ed fdd4 	bl	8000b1c <__aeabi_dcmplt>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d163      	bne.n	8013040 <_dtoa_r+0x608>
 8012f78:	4642      	mov	r2, r8
 8012f7a:	464b      	mov	r3, r9
 8012f7c:	4936      	ldr	r1, [pc, #216]	; (8013058 <_dtoa_r+0x620>)
 8012f7e:	2000      	movs	r0, #0
 8012f80:	f7ed f9a2 	bl	80002c8 <__aeabi_dsub>
 8012f84:	4652      	mov	r2, sl
 8012f86:	465b      	mov	r3, fp
 8012f88:	f7ed fdc8 	bl	8000b1c <__aeabi_dcmplt>
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	f040 80b5 	bne.w	80130fc <_dtoa_r+0x6c4>
 8012f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f94:	429d      	cmp	r5, r3
 8012f96:	d081      	beq.n	8012e9c <_dtoa_r+0x464>
 8012f98:	4b30      	ldr	r3, [pc, #192]	; (801305c <_dtoa_r+0x624>)
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	4650      	mov	r0, sl
 8012f9e:	4659      	mov	r1, fp
 8012fa0:	f7ed fb4a 	bl	8000638 <__aeabi_dmul>
 8012fa4:	4b2d      	ldr	r3, [pc, #180]	; (801305c <_dtoa_r+0x624>)
 8012fa6:	4682      	mov	sl, r0
 8012fa8:	468b      	mov	fp, r1
 8012faa:	4640      	mov	r0, r8
 8012fac:	4649      	mov	r1, r9
 8012fae:	2200      	movs	r2, #0
 8012fb0:	f7ed fb42 	bl	8000638 <__aeabi_dmul>
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	4689      	mov	r9, r1
 8012fb8:	e7c6      	b.n	8012f48 <_dtoa_r+0x510>
 8012fba:	4650      	mov	r0, sl
 8012fbc:	4659      	mov	r1, fp
 8012fbe:	f7ed fb3b 	bl	8000638 <__aeabi_dmul>
 8012fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fc4:	9d01      	ldr	r5, [sp, #4]
 8012fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fc8:	4682      	mov	sl, r0
 8012fca:	468b      	mov	fp, r1
 8012fcc:	4649      	mov	r1, r9
 8012fce:	4640      	mov	r0, r8
 8012fd0:	f7ed fde2 	bl	8000b98 <__aeabi_d2iz>
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	f7ed fac5 	bl	8000564 <__aeabi_i2d>
 8012fda:	3630      	adds	r6, #48	; 0x30
 8012fdc:	4602      	mov	r2, r0
 8012fde:	460b      	mov	r3, r1
 8012fe0:	4640      	mov	r0, r8
 8012fe2:	4649      	mov	r1, r9
 8012fe4:	f7ed f970 	bl	80002c8 <__aeabi_dsub>
 8012fe8:	f805 6b01 	strb.w	r6, [r5], #1
 8012fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fee:	429d      	cmp	r5, r3
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	4689      	mov	r9, r1
 8012ff4:	f04f 0200 	mov.w	r2, #0
 8012ff8:	d124      	bne.n	8013044 <_dtoa_r+0x60c>
 8012ffa:	4b1b      	ldr	r3, [pc, #108]	; (8013068 <_dtoa_r+0x630>)
 8012ffc:	4650      	mov	r0, sl
 8012ffe:	4659      	mov	r1, fp
 8013000:	f7ed f964 	bl	80002cc <__adddf3>
 8013004:	4602      	mov	r2, r0
 8013006:	460b      	mov	r3, r1
 8013008:	4640      	mov	r0, r8
 801300a:	4649      	mov	r1, r9
 801300c:	f7ed fda4 	bl	8000b58 <__aeabi_dcmpgt>
 8013010:	2800      	cmp	r0, #0
 8013012:	d173      	bne.n	80130fc <_dtoa_r+0x6c4>
 8013014:	4652      	mov	r2, sl
 8013016:	465b      	mov	r3, fp
 8013018:	4913      	ldr	r1, [pc, #76]	; (8013068 <_dtoa_r+0x630>)
 801301a:	2000      	movs	r0, #0
 801301c:	f7ed f954 	bl	80002c8 <__aeabi_dsub>
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	4640      	mov	r0, r8
 8013026:	4649      	mov	r1, r9
 8013028:	f7ed fd78 	bl	8000b1c <__aeabi_dcmplt>
 801302c:	2800      	cmp	r0, #0
 801302e:	f43f af35 	beq.w	8012e9c <_dtoa_r+0x464>
 8013032:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013034:	1e6b      	subs	r3, r5, #1
 8013036:	930f      	str	r3, [sp, #60]	; 0x3c
 8013038:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801303c:	2b30      	cmp	r3, #48	; 0x30
 801303e:	d0f8      	beq.n	8013032 <_dtoa_r+0x5fa>
 8013040:	9700      	str	r7, [sp, #0]
 8013042:	e049      	b.n	80130d8 <_dtoa_r+0x6a0>
 8013044:	4b05      	ldr	r3, [pc, #20]	; (801305c <_dtoa_r+0x624>)
 8013046:	f7ed faf7 	bl	8000638 <__aeabi_dmul>
 801304a:	4680      	mov	r8, r0
 801304c:	4689      	mov	r9, r1
 801304e:	e7bd      	b.n	8012fcc <_dtoa_r+0x594>
 8013050:	08016680 	.word	0x08016680
 8013054:	08016658 	.word	0x08016658
 8013058:	3ff00000 	.word	0x3ff00000
 801305c:	40240000 	.word	0x40240000
 8013060:	401c0000 	.word	0x401c0000
 8013064:	40140000 	.word	0x40140000
 8013068:	3fe00000 	.word	0x3fe00000
 801306c:	9d01      	ldr	r5, [sp, #4]
 801306e:	4656      	mov	r6, sl
 8013070:	465f      	mov	r7, fp
 8013072:	4642      	mov	r2, r8
 8013074:	464b      	mov	r3, r9
 8013076:	4630      	mov	r0, r6
 8013078:	4639      	mov	r1, r7
 801307a:	f7ed fc07 	bl	800088c <__aeabi_ddiv>
 801307e:	f7ed fd8b 	bl	8000b98 <__aeabi_d2iz>
 8013082:	4682      	mov	sl, r0
 8013084:	f7ed fa6e 	bl	8000564 <__aeabi_i2d>
 8013088:	4642      	mov	r2, r8
 801308a:	464b      	mov	r3, r9
 801308c:	f7ed fad4 	bl	8000638 <__aeabi_dmul>
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	4630      	mov	r0, r6
 8013096:	4639      	mov	r1, r7
 8013098:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801309c:	f7ed f914 	bl	80002c8 <__aeabi_dsub>
 80130a0:	f805 6b01 	strb.w	r6, [r5], #1
 80130a4:	9e01      	ldr	r6, [sp, #4]
 80130a6:	9f03      	ldr	r7, [sp, #12]
 80130a8:	1bae      	subs	r6, r5, r6
 80130aa:	42b7      	cmp	r7, r6
 80130ac:	4602      	mov	r2, r0
 80130ae:	460b      	mov	r3, r1
 80130b0:	d135      	bne.n	801311e <_dtoa_r+0x6e6>
 80130b2:	f7ed f90b 	bl	80002cc <__adddf3>
 80130b6:	4642      	mov	r2, r8
 80130b8:	464b      	mov	r3, r9
 80130ba:	4606      	mov	r6, r0
 80130bc:	460f      	mov	r7, r1
 80130be:	f7ed fd4b 	bl	8000b58 <__aeabi_dcmpgt>
 80130c2:	b9d0      	cbnz	r0, 80130fa <_dtoa_r+0x6c2>
 80130c4:	4642      	mov	r2, r8
 80130c6:	464b      	mov	r3, r9
 80130c8:	4630      	mov	r0, r6
 80130ca:	4639      	mov	r1, r7
 80130cc:	f7ed fd1c 	bl	8000b08 <__aeabi_dcmpeq>
 80130d0:	b110      	cbz	r0, 80130d8 <_dtoa_r+0x6a0>
 80130d2:	f01a 0f01 	tst.w	sl, #1
 80130d6:	d110      	bne.n	80130fa <_dtoa_r+0x6c2>
 80130d8:	4620      	mov	r0, r4
 80130da:	ee18 1a10 	vmov	r1, s16
 80130de:	f000 fc35 	bl	801394c <_Bfree>
 80130e2:	2300      	movs	r3, #0
 80130e4:	9800      	ldr	r0, [sp, #0]
 80130e6:	702b      	strb	r3, [r5, #0]
 80130e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130ea:	3001      	adds	r0, #1
 80130ec:	6018      	str	r0, [r3, #0]
 80130ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f43f acf1 	beq.w	8012ad8 <_dtoa_r+0xa0>
 80130f6:	601d      	str	r5, [r3, #0]
 80130f8:	e4ee      	b.n	8012ad8 <_dtoa_r+0xa0>
 80130fa:	9f00      	ldr	r7, [sp, #0]
 80130fc:	462b      	mov	r3, r5
 80130fe:	461d      	mov	r5, r3
 8013100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013104:	2a39      	cmp	r2, #57	; 0x39
 8013106:	d106      	bne.n	8013116 <_dtoa_r+0x6de>
 8013108:	9a01      	ldr	r2, [sp, #4]
 801310a:	429a      	cmp	r2, r3
 801310c:	d1f7      	bne.n	80130fe <_dtoa_r+0x6c6>
 801310e:	9901      	ldr	r1, [sp, #4]
 8013110:	2230      	movs	r2, #48	; 0x30
 8013112:	3701      	adds	r7, #1
 8013114:	700a      	strb	r2, [r1, #0]
 8013116:	781a      	ldrb	r2, [r3, #0]
 8013118:	3201      	adds	r2, #1
 801311a:	701a      	strb	r2, [r3, #0]
 801311c:	e790      	b.n	8013040 <_dtoa_r+0x608>
 801311e:	4ba6      	ldr	r3, [pc, #664]	; (80133b8 <_dtoa_r+0x980>)
 8013120:	2200      	movs	r2, #0
 8013122:	f7ed fa89 	bl	8000638 <__aeabi_dmul>
 8013126:	2200      	movs	r2, #0
 8013128:	2300      	movs	r3, #0
 801312a:	4606      	mov	r6, r0
 801312c:	460f      	mov	r7, r1
 801312e:	f7ed fceb 	bl	8000b08 <__aeabi_dcmpeq>
 8013132:	2800      	cmp	r0, #0
 8013134:	d09d      	beq.n	8013072 <_dtoa_r+0x63a>
 8013136:	e7cf      	b.n	80130d8 <_dtoa_r+0x6a0>
 8013138:	9a08      	ldr	r2, [sp, #32]
 801313a:	2a00      	cmp	r2, #0
 801313c:	f000 80d7 	beq.w	80132ee <_dtoa_r+0x8b6>
 8013140:	9a06      	ldr	r2, [sp, #24]
 8013142:	2a01      	cmp	r2, #1
 8013144:	f300 80ba 	bgt.w	80132bc <_dtoa_r+0x884>
 8013148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801314a:	2a00      	cmp	r2, #0
 801314c:	f000 80b2 	beq.w	80132b4 <_dtoa_r+0x87c>
 8013150:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013154:	9e07      	ldr	r6, [sp, #28]
 8013156:	9d04      	ldr	r5, [sp, #16]
 8013158:	9a04      	ldr	r2, [sp, #16]
 801315a:	441a      	add	r2, r3
 801315c:	9204      	str	r2, [sp, #16]
 801315e:	9a05      	ldr	r2, [sp, #20]
 8013160:	2101      	movs	r1, #1
 8013162:	441a      	add	r2, r3
 8013164:	4620      	mov	r0, r4
 8013166:	9205      	str	r2, [sp, #20]
 8013168:	f000 fca8 	bl	8013abc <__i2b>
 801316c:	4607      	mov	r7, r0
 801316e:	2d00      	cmp	r5, #0
 8013170:	dd0c      	ble.n	801318c <_dtoa_r+0x754>
 8013172:	9b05      	ldr	r3, [sp, #20]
 8013174:	2b00      	cmp	r3, #0
 8013176:	dd09      	ble.n	801318c <_dtoa_r+0x754>
 8013178:	42ab      	cmp	r3, r5
 801317a:	9a04      	ldr	r2, [sp, #16]
 801317c:	bfa8      	it	ge
 801317e:	462b      	movge	r3, r5
 8013180:	1ad2      	subs	r2, r2, r3
 8013182:	9204      	str	r2, [sp, #16]
 8013184:	9a05      	ldr	r2, [sp, #20]
 8013186:	1aed      	subs	r5, r5, r3
 8013188:	1ad3      	subs	r3, r2, r3
 801318a:	9305      	str	r3, [sp, #20]
 801318c:	9b07      	ldr	r3, [sp, #28]
 801318e:	b31b      	cbz	r3, 80131d8 <_dtoa_r+0x7a0>
 8013190:	9b08      	ldr	r3, [sp, #32]
 8013192:	2b00      	cmp	r3, #0
 8013194:	f000 80af 	beq.w	80132f6 <_dtoa_r+0x8be>
 8013198:	2e00      	cmp	r6, #0
 801319a:	dd13      	ble.n	80131c4 <_dtoa_r+0x78c>
 801319c:	4639      	mov	r1, r7
 801319e:	4632      	mov	r2, r6
 80131a0:	4620      	mov	r0, r4
 80131a2:	f000 fd4b 	bl	8013c3c <__pow5mult>
 80131a6:	ee18 2a10 	vmov	r2, s16
 80131aa:	4601      	mov	r1, r0
 80131ac:	4607      	mov	r7, r0
 80131ae:	4620      	mov	r0, r4
 80131b0:	f000 fc9a 	bl	8013ae8 <__multiply>
 80131b4:	ee18 1a10 	vmov	r1, s16
 80131b8:	4680      	mov	r8, r0
 80131ba:	4620      	mov	r0, r4
 80131bc:	f000 fbc6 	bl	801394c <_Bfree>
 80131c0:	ee08 8a10 	vmov	s16, r8
 80131c4:	9b07      	ldr	r3, [sp, #28]
 80131c6:	1b9a      	subs	r2, r3, r6
 80131c8:	d006      	beq.n	80131d8 <_dtoa_r+0x7a0>
 80131ca:	ee18 1a10 	vmov	r1, s16
 80131ce:	4620      	mov	r0, r4
 80131d0:	f000 fd34 	bl	8013c3c <__pow5mult>
 80131d4:	ee08 0a10 	vmov	s16, r0
 80131d8:	2101      	movs	r1, #1
 80131da:	4620      	mov	r0, r4
 80131dc:	f000 fc6e 	bl	8013abc <__i2b>
 80131e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	4606      	mov	r6, r0
 80131e6:	f340 8088 	ble.w	80132fa <_dtoa_r+0x8c2>
 80131ea:	461a      	mov	r2, r3
 80131ec:	4601      	mov	r1, r0
 80131ee:	4620      	mov	r0, r4
 80131f0:	f000 fd24 	bl	8013c3c <__pow5mult>
 80131f4:	9b06      	ldr	r3, [sp, #24]
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	4606      	mov	r6, r0
 80131fa:	f340 8081 	ble.w	8013300 <_dtoa_r+0x8c8>
 80131fe:	f04f 0800 	mov.w	r8, #0
 8013202:	6933      	ldr	r3, [r6, #16]
 8013204:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013208:	6918      	ldr	r0, [r3, #16]
 801320a:	f000 fc07 	bl	8013a1c <__hi0bits>
 801320e:	f1c0 0020 	rsb	r0, r0, #32
 8013212:	9b05      	ldr	r3, [sp, #20]
 8013214:	4418      	add	r0, r3
 8013216:	f010 001f 	ands.w	r0, r0, #31
 801321a:	f000 8092 	beq.w	8013342 <_dtoa_r+0x90a>
 801321e:	f1c0 0320 	rsb	r3, r0, #32
 8013222:	2b04      	cmp	r3, #4
 8013224:	f340 808a 	ble.w	801333c <_dtoa_r+0x904>
 8013228:	f1c0 001c 	rsb	r0, r0, #28
 801322c:	9b04      	ldr	r3, [sp, #16]
 801322e:	4403      	add	r3, r0
 8013230:	9304      	str	r3, [sp, #16]
 8013232:	9b05      	ldr	r3, [sp, #20]
 8013234:	4403      	add	r3, r0
 8013236:	4405      	add	r5, r0
 8013238:	9305      	str	r3, [sp, #20]
 801323a:	9b04      	ldr	r3, [sp, #16]
 801323c:	2b00      	cmp	r3, #0
 801323e:	dd07      	ble.n	8013250 <_dtoa_r+0x818>
 8013240:	ee18 1a10 	vmov	r1, s16
 8013244:	461a      	mov	r2, r3
 8013246:	4620      	mov	r0, r4
 8013248:	f000 fd52 	bl	8013cf0 <__lshift>
 801324c:	ee08 0a10 	vmov	s16, r0
 8013250:	9b05      	ldr	r3, [sp, #20]
 8013252:	2b00      	cmp	r3, #0
 8013254:	dd05      	ble.n	8013262 <_dtoa_r+0x82a>
 8013256:	4631      	mov	r1, r6
 8013258:	461a      	mov	r2, r3
 801325a:	4620      	mov	r0, r4
 801325c:	f000 fd48 	bl	8013cf0 <__lshift>
 8013260:	4606      	mov	r6, r0
 8013262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013264:	2b00      	cmp	r3, #0
 8013266:	d06e      	beq.n	8013346 <_dtoa_r+0x90e>
 8013268:	ee18 0a10 	vmov	r0, s16
 801326c:	4631      	mov	r1, r6
 801326e:	f000 fdaf 	bl	8013dd0 <__mcmp>
 8013272:	2800      	cmp	r0, #0
 8013274:	da67      	bge.n	8013346 <_dtoa_r+0x90e>
 8013276:	9b00      	ldr	r3, [sp, #0]
 8013278:	3b01      	subs	r3, #1
 801327a:	ee18 1a10 	vmov	r1, s16
 801327e:	9300      	str	r3, [sp, #0]
 8013280:	220a      	movs	r2, #10
 8013282:	2300      	movs	r3, #0
 8013284:	4620      	mov	r0, r4
 8013286:	f000 fb83 	bl	8013990 <__multadd>
 801328a:	9b08      	ldr	r3, [sp, #32]
 801328c:	ee08 0a10 	vmov	s16, r0
 8013290:	2b00      	cmp	r3, #0
 8013292:	f000 81b1 	beq.w	80135f8 <_dtoa_r+0xbc0>
 8013296:	2300      	movs	r3, #0
 8013298:	4639      	mov	r1, r7
 801329a:	220a      	movs	r2, #10
 801329c:	4620      	mov	r0, r4
 801329e:	f000 fb77 	bl	8013990 <__multadd>
 80132a2:	9b02      	ldr	r3, [sp, #8]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	4607      	mov	r7, r0
 80132a8:	f300 808e 	bgt.w	80133c8 <_dtoa_r+0x990>
 80132ac:	9b06      	ldr	r3, [sp, #24]
 80132ae:	2b02      	cmp	r3, #2
 80132b0:	dc51      	bgt.n	8013356 <_dtoa_r+0x91e>
 80132b2:	e089      	b.n	80133c8 <_dtoa_r+0x990>
 80132b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80132ba:	e74b      	b.n	8013154 <_dtoa_r+0x71c>
 80132bc:	9b03      	ldr	r3, [sp, #12]
 80132be:	1e5e      	subs	r6, r3, #1
 80132c0:	9b07      	ldr	r3, [sp, #28]
 80132c2:	42b3      	cmp	r3, r6
 80132c4:	bfbf      	itttt	lt
 80132c6:	9b07      	ldrlt	r3, [sp, #28]
 80132c8:	9607      	strlt	r6, [sp, #28]
 80132ca:	1af2      	sublt	r2, r6, r3
 80132cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80132ce:	bfb6      	itet	lt
 80132d0:	189b      	addlt	r3, r3, r2
 80132d2:	1b9e      	subge	r6, r3, r6
 80132d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80132d6:	9b03      	ldr	r3, [sp, #12]
 80132d8:	bfb8      	it	lt
 80132da:	2600      	movlt	r6, #0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	bfb7      	itett	lt
 80132e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80132e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80132e8:	1a9d      	sublt	r5, r3, r2
 80132ea:	2300      	movlt	r3, #0
 80132ec:	e734      	b.n	8013158 <_dtoa_r+0x720>
 80132ee:	9e07      	ldr	r6, [sp, #28]
 80132f0:	9d04      	ldr	r5, [sp, #16]
 80132f2:	9f08      	ldr	r7, [sp, #32]
 80132f4:	e73b      	b.n	801316e <_dtoa_r+0x736>
 80132f6:	9a07      	ldr	r2, [sp, #28]
 80132f8:	e767      	b.n	80131ca <_dtoa_r+0x792>
 80132fa:	9b06      	ldr	r3, [sp, #24]
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	dc18      	bgt.n	8013332 <_dtoa_r+0x8fa>
 8013300:	f1ba 0f00 	cmp.w	sl, #0
 8013304:	d115      	bne.n	8013332 <_dtoa_r+0x8fa>
 8013306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801330a:	b993      	cbnz	r3, 8013332 <_dtoa_r+0x8fa>
 801330c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013310:	0d1b      	lsrs	r3, r3, #20
 8013312:	051b      	lsls	r3, r3, #20
 8013314:	b183      	cbz	r3, 8013338 <_dtoa_r+0x900>
 8013316:	9b04      	ldr	r3, [sp, #16]
 8013318:	3301      	adds	r3, #1
 801331a:	9304      	str	r3, [sp, #16]
 801331c:	9b05      	ldr	r3, [sp, #20]
 801331e:	3301      	adds	r3, #1
 8013320:	9305      	str	r3, [sp, #20]
 8013322:	f04f 0801 	mov.w	r8, #1
 8013326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013328:	2b00      	cmp	r3, #0
 801332a:	f47f af6a 	bne.w	8013202 <_dtoa_r+0x7ca>
 801332e:	2001      	movs	r0, #1
 8013330:	e76f      	b.n	8013212 <_dtoa_r+0x7da>
 8013332:	f04f 0800 	mov.w	r8, #0
 8013336:	e7f6      	b.n	8013326 <_dtoa_r+0x8ee>
 8013338:	4698      	mov	r8, r3
 801333a:	e7f4      	b.n	8013326 <_dtoa_r+0x8ee>
 801333c:	f43f af7d 	beq.w	801323a <_dtoa_r+0x802>
 8013340:	4618      	mov	r0, r3
 8013342:	301c      	adds	r0, #28
 8013344:	e772      	b.n	801322c <_dtoa_r+0x7f4>
 8013346:	9b03      	ldr	r3, [sp, #12]
 8013348:	2b00      	cmp	r3, #0
 801334a:	dc37      	bgt.n	80133bc <_dtoa_r+0x984>
 801334c:	9b06      	ldr	r3, [sp, #24]
 801334e:	2b02      	cmp	r3, #2
 8013350:	dd34      	ble.n	80133bc <_dtoa_r+0x984>
 8013352:	9b03      	ldr	r3, [sp, #12]
 8013354:	9302      	str	r3, [sp, #8]
 8013356:	9b02      	ldr	r3, [sp, #8]
 8013358:	b96b      	cbnz	r3, 8013376 <_dtoa_r+0x93e>
 801335a:	4631      	mov	r1, r6
 801335c:	2205      	movs	r2, #5
 801335e:	4620      	mov	r0, r4
 8013360:	f000 fb16 	bl	8013990 <__multadd>
 8013364:	4601      	mov	r1, r0
 8013366:	4606      	mov	r6, r0
 8013368:	ee18 0a10 	vmov	r0, s16
 801336c:	f000 fd30 	bl	8013dd0 <__mcmp>
 8013370:	2800      	cmp	r0, #0
 8013372:	f73f adbb 	bgt.w	8012eec <_dtoa_r+0x4b4>
 8013376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013378:	9d01      	ldr	r5, [sp, #4]
 801337a:	43db      	mvns	r3, r3
 801337c:	9300      	str	r3, [sp, #0]
 801337e:	f04f 0800 	mov.w	r8, #0
 8013382:	4631      	mov	r1, r6
 8013384:	4620      	mov	r0, r4
 8013386:	f000 fae1 	bl	801394c <_Bfree>
 801338a:	2f00      	cmp	r7, #0
 801338c:	f43f aea4 	beq.w	80130d8 <_dtoa_r+0x6a0>
 8013390:	f1b8 0f00 	cmp.w	r8, #0
 8013394:	d005      	beq.n	80133a2 <_dtoa_r+0x96a>
 8013396:	45b8      	cmp	r8, r7
 8013398:	d003      	beq.n	80133a2 <_dtoa_r+0x96a>
 801339a:	4641      	mov	r1, r8
 801339c:	4620      	mov	r0, r4
 801339e:	f000 fad5 	bl	801394c <_Bfree>
 80133a2:	4639      	mov	r1, r7
 80133a4:	4620      	mov	r0, r4
 80133a6:	f000 fad1 	bl	801394c <_Bfree>
 80133aa:	e695      	b.n	80130d8 <_dtoa_r+0x6a0>
 80133ac:	2600      	movs	r6, #0
 80133ae:	4637      	mov	r7, r6
 80133b0:	e7e1      	b.n	8013376 <_dtoa_r+0x93e>
 80133b2:	9700      	str	r7, [sp, #0]
 80133b4:	4637      	mov	r7, r6
 80133b6:	e599      	b.n	8012eec <_dtoa_r+0x4b4>
 80133b8:	40240000 	.word	0x40240000
 80133bc:	9b08      	ldr	r3, [sp, #32]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	f000 80ca 	beq.w	8013558 <_dtoa_r+0xb20>
 80133c4:	9b03      	ldr	r3, [sp, #12]
 80133c6:	9302      	str	r3, [sp, #8]
 80133c8:	2d00      	cmp	r5, #0
 80133ca:	dd05      	ble.n	80133d8 <_dtoa_r+0x9a0>
 80133cc:	4639      	mov	r1, r7
 80133ce:	462a      	mov	r2, r5
 80133d0:	4620      	mov	r0, r4
 80133d2:	f000 fc8d 	bl	8013cf0 <__lshift>
 80133d6:	4607      	mov	r7, r0
 80133d8:	f1b8 0f00 	cmp.w	r8, #0
 80133dc:	d05b      	beq.n	8013496 <_dtoa_r+0xa5e>
 80133de:	6879      	ldr	r1, [r7, #4]
 80133e0:	4620      	mov	r0, r4
 80133e2:	f000 fa73 	bl	80138cc <_Balloc>
 80133e6:	4605      	mov	r5, r0
 80133e8:	b928      	cbnz	r0, 80133f6 <_dtoa_r+0x9be>
 80133ea:	4b87      	ldr	r3, [pc, #540]	; (8013608 <_dtoa_r+0xbd0>)
 80133ec:	4602      	mov	r2, r0
 80133ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80133f2:	f7ff bb3b 	b.w	8012a6c <_dtoa_r+0x34>
 80133f6:	693a      	ldr	r2, [r7, #16]
 80133f8:	3202      	adds	r2, #2
 80133fa:	0092      	lsls	r2, r2, #2
 80133fc:	f107 010c 	add.w	r1, r7, #12
 8013400:	300c      	adds	r0, #12
 8013402:	f7fe f9ef 	bl	80117e4 <memcpy>
 8013406:	2201      	movs	r2, #1
 8013408:	4629      	mov	r1, r5
 801340a:	4620      	mov	r0, r4
 801340c:	f000 fc70 	bl	8013cf0 <__lshift>
 8013410:	9b01      	ldr	r3, [sp, #4]
 8013412:	f103 0901 	add.w	r9, r3, #1
 8013416:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801341a:	4413      	add	r3, r2
 801341c:	9305      	str	r3, [sp, #20]
 801341e:	f00a 0301 	and.w	r3, sl, #1
 8013422:	46b8      	mov	r8, r7
 8013424:	9304      	str	r3, [sp, #16]
 8013426:	4607      	mov	r7, r0
 8013428:	4631      	mov	r1, r6
 801342a:	ee18 0a10 	vmov	r0, s16
 801342e:	f7ff fa75 	bl	801291c <quorem>
 8013432:	4641      	mov	r1, r8
 8013434:	9002      	str	r0, [sp, #8]
 8013436:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801343a:	ee18 0a10 	vmov	r0, s16
 801343e:	f000 fcc7 	bl	8013dd0 <__mcmp>
 8013442:	463a      	mov	r2, r7
 8013444:	9003      	str	r0, [sp, #12]
 8013446:	4631      	mov	r1, r6
 8013448:	4620      	mov	r0, r4
 801344a:	f000 fcdd 	bl	8013e08 <__mdiff>
 801344e:	68c2      	ldr	r2, [r0, #12]
 8013450:	f109 3bff 	add.w	fp, r9, #4294967295
 8013454:	4605      	mov	r5, r0
 8013456:	bb02      	cbnz	r2, 801349a <_dtoa_r+0xa62>
 8013458:	4601      	mov	r1, r0
 801345a:	ee18 0a10 	vmov	r0, s16
 801345e:	f000 fcb7 	bl	8013dd0 <__mcmp>
 8013462:	4602      	mov	r2, r0
 8013464:	4629      	mov	r1, r5
 8013466:	4620      	mov	r0, r4
 8013468:	9207      	str	r2, [sp, #28]
 801346a:	f000 fa6f 	bl	801394c <_Bfree>
 801346e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013472:	ea43 0102 	orr.w	r1, r3, r2
 8013476:	9b04      	ldr	r3, [sp, #16]
 8013478:	430b      	orrs	r3, r1
 801347a:	464d      	mov	r5, r9
 801347c:	d10f      	bne.n	801349e <_dtoa_r+0xa66>
 801347e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013482:	d02a      	beq.n	80134da <_dtoa_r+0xaa2>
 8013484:	9b03      	ldr	r3, [sp, #12]
 8013486:	2b00      	cmp	r3, #0
 8013488:	dd02      	ble.n	8013490 <_dtoa_r+0xa58>
 801348a:	9b02      	ldr	r3, [sp, #8]
 801348c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013490:	f88b a000 	strb.w	sl, [fp]
 8013494:	e775      	b.n	8013382 <_dtoa_r+0x94a>
 8013496:	4638      	mov	r0, r7
 8013498:	e7ba      	b.n	8013410 <_dtoa_r+0x9d8>
 801349a:	2201      	movs	r2, #1
 801349c:	e7e2      	b.n	8013464 <_dtoa_r+0xa2c>
 801349e:	9b03      	ldr	r3, [sp, #12]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	db04      	blt.n	80134ae <_dtoa_r+0xa76>
 80134a4:	9906      	ldr	r1, [sp, #24]
 80134a6:	430b      	orrs	r3, r1
 80134a8:	9904      	ldr	r1, [sp, #16]
 80134aa:	430b      	orrs	r3, r1
 80134ac:	d122      	bne.n	80134f4 <_dtoa_r+0xabc>
 80134ae:	2a00      	cmp	r2, #0
 80134b0:	ddee      	ble.n	8013490 <_dtoa_r+0xa58>
 80134b2:	ee18 1a10 	vmov	r1, s16
 80134b6:	2201      	movs	r2, #1
 80134b8:	4620      	mov	r0, r4
 80134ba:	f000 fc19 	bl	8013cf0 <__lshift>
 80134be:	4631      	mov	r1, r6
 80134c0:	ee08 0a10 	vmov	s16, r0
 80134c4:	f000 fc84 	bl	8013dd0 <__mcmp>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	dc03      	bgt.n	80134d4 <_dtoa_r+0xa9c>
 80134cc:	d1e0      	bne.n	8013490 <_dtoa_r+0xa58>
 80134ce:	f01a 0f01 	tst.w	sl, #1
 80134d2:	d0dd      	beq.n	8013490 <_dtoa_r+0xa58>
 80134d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80134d8:	d1d7      	bne.n	801348a <_dtoa_r+0xa52>
 80134da:	2339      	movs	r3, #57	; 0x39
 80134dc:	f88b 3000 	strb.w	r3, [fp]
 80134e0:	462b      	mov	r3, r5
 80134e2:	461d      	mov	r5, r3
 80134e4:	3b01      	subs	r3, #1
 80134e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80134ea:	2a39      	cmp	r2, #57	; 0x39
 80134ec:	d071      	beq.n	80135d2 <_dtoa_r+0xb9a>
 80134ee:	3201      	adds	r2, #1
 80134f0:	701a      	strb	r2, [r3, #0]
 80134f2:	e746      	b.n	8013382 <_dtoa_r+0x94a>
 80134f4:	2a00      	cmp	r2, #0
 80134f6:	dd07      	ble.n	8013508 <_dtoa_r+0xad0>
 80134f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80134fc:	d0ed      	beq.n	80134da <_dtoa_r+0xaa2>
 80134fe:	f10a 0301 	add.w	r3, sl, #1
 8013502:	f88b 3000 	strb.w	r3, [fp]
 8013506:	e73c      	b.n	8013382 <_dtoa_r+0x94a>
 8013508:	9b05      	ldr	r3, [sp, #20]
 801350a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801350e:	4599      	cmp	r9, r3
 8013510:	d047      	beq.n	80135a2 <_dtoa_r+0xb6a>
 8013512:	ee18 1a10 	vmov	r1, s16
 8013516:	2300      	movs	r3, #0
 8013518:	220a      	movs	r2, #10
 801351a:	4620      	mov	r0, r4
 801351c:	f000 fa38 	bl	8013990 <__multadd>
 8013520:	45b8      	cmp	r8, r7
 8013522:	ee08 0a10 	vmov	s16, r0
 8013526:	f04f 0300 	mov.w	r3, #0
 801352a:	f04f 020a 	mov.w	r2, #10
 801352e:	4641      	mov	r1, r8
 8013530:	4620      	mov	r0, r4
 8013532:	d106      	bne.n	8013542 <_dtoa_r+0xb0a>
 8013534:	f000 fa2c 	bl	8013990 <__multadd>
 8013538:	4680      	mov	r8, r0
 801353a:	4607      	mov	r7, r0
 801353c:	f109 0901 	add.w	r9, r9, #1
 8013540:	e772      	b.n	8013428 <_dtoa_r+0x9f0>
 8013542:	f000 fa25 	bl	8013990 <__multadd>
 8013546:	4639      	mov	r1, r7
 8013548:	4680      	mov	r8, r0
 801354a:	2300      	movs	r3, #0
 801354c:	220a      	movs	r2, #10
 801354e:	4620      	mov	r0, r4
 8013550:	f000 fa1e 	bl	8013990 <__multadd>
 8013554:	4607      	mov	r7, r0
 8013556:	e7f1      	b.n	801353c <_dtoa_r+0xb04>
 8013558:	9b03      	ldr	r3, [sp, #12]
 801355a:	9302      	str	r3, [sp, #8]
 801355c:	9d01      	ldr	r5, [sp, #4]
 801355e:	ee18 0a10 	vmov	r0, s16
 8013562:	4631      	mov	r1, r6
 8013564:	f7ff f9da 	bl	801291c <quorem>
 8013568:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801356c:	9b01      	ldr	r3, [sp, #4]
 801356e:	f805 ab01 	strb.w	sl, [r5], #1
 8013572:	1aea      	subs	r2, r5, r3
 8013574:	9b02      	ldr	r3, [sp, #8]
 8013576:	4293      	cmp	r3, r2
 8013578:	dd09      	ble.n	801358e <_dtoa_r+0xb56>
 801357a:	ee18 1a10 	vmov	r1, s16
 801357e:	2300      	movs	r3, #0
 8013580:	220a      	movs	r2, #10
 8013582:	4620      	mov	r0, r4
 8013584:	f000 fa04 	bl	8013990 <__multadd>
 8013588:	ee08 0a10 	vmov	s16, r0
 801358c:	e7e7      	b.n	801355e <_dtoa_r+0xb26>
 801358e:	9b02      	ldr	r3, [sp, #8]
 8013590:	2b00      	cmp	r3, #0
 8013592:	bfc8      	it	gt
 8013594:	461d      	movgt	r5, r3
 8013596:	9b01      	ldr	r3, [sp, #4]
 8013598:	bfd8      	it	le
 801359a:	2501      	movle	r5, #1
 801359c:	441d      	add	r5, r3
 801359e:	f04f 0800 	mov.w	r8, #0
 80135a2:	ee18 1a10 	vmov	r1, s16
 80135a6:	2201      	movs	r2, #1
 80135a8:	4620      	mov	r0, r4
 80135aa:	f000 fba1 	bl	8013cf0 <__lshift>
 80135ae:	4631      	mov	r1, r6
 80135b0:	ee08 0a10 	vmov	s16, r0
 80135b4:	f000 fc0c 	bl	8013dd0 <__mcmp>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	dc91      	bgt.n	80134e0 <_dtoa_r+0xaa8>
 80135bc:	d102      	bne.n	80135c4 <_dtoa_r+0xb8c>
 80135be:	f01a 0f01 	tst.w	sl, #1
 80135c2:	d18d      	bne.n	80134e0 <_dtoa_r+0xaa8>
 80135c4:	462b      	mov	r3, r5
 80135c6:	461d      	mov	r5, r3
 80135c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135cc:	2a30      	cmp	r2, #48	; 0x30
 80135ce:	d0fa      	beq.n	80135c6 <_dtoa_r+0xb8e>
 80135d0:	e6d7      	b.n	8013382 <_dtoa_r+0x94a>
 80135d2:	9a01      	ldr	r2, [sp, #4]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d184      	bne.n	80134e2 <_dtoa_r+0xaaa>
 80135d8:	9b00      	ldr	r3, [sp, #0]
 80135da:	3301      	adds	r3, #1
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	2331      	movs	r3, #49	; 0x31
 80135e0:	7013      	strb	r3, [r2, #0]
 80135e2:	e6ce      	b.n	8013382 <_dtoa_r+0x94a>
 80135e4:	4b09      	ldr	r3, [pc, #36]	; (801360c <_dtoa_r+0xbd4>)
 80135e6:	f7ff ba95 	b.w	8012b14 <_dtoa_r+0xdc>
 80135ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f47f aa6e 	bne.w	8012ace <_dtoa_r+0x96>
 80135f2:	4b07      	ldr	r3, [pc, #28]	; (8013610 <_dtoa_r+0xbd8>)
 80135f4:	f7ff ba8e 	b.w	8012b14 <_dtoa_r+0xdc>
 80135f8:	9b02      	ldr	r3, [sp, #8]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	dcae      	bgt.n	801355c <_dtoa_r+0xb24>
 80135fe:	9b06      	ldr	r3, [sp, #24]
 8013600:	2b02      	cmp	r3, #2
 8013602:	f73f aea8 	bgt.w	8013356 <_dtoa_r+0x91e>
 8013606:	e7a9      	b.n	801355c <_dtoa_r+0xb24>
 8013608:	080165eb 	.word	0x080165eb
 801360c:	080163b0 	.word	0x080163b0
 8013610:	08016583 	.word	0x08016583

08013614 <__sflush_r>:
 8013614:	898a      	ldrh	r2, [r1, #12]
 8013616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801361a:	4605      	mov	r5, r0
 801361c:	0710      	lsls	r0, r2, #28
 801361e:	460c      	mov	r4, r1
 8013620:	d458      	bmi.n	80136d4 <__sflush_r+0xc0>
 8013622:	684b      	ldr	r3, [r1, #4]
 8013624:	2b00      	cmp	r3, #0
 8013626:	dc05      	bgt.n	8013634 <__sflush_r+0x20>
 8013628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801362a:	2b00      	cmp	r3, #0
 801362c:	dc02      	bgt.n	8013634 <__sflush_r+0x20>
 801362e:	2000      	movs	r0, #0
 8013630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013636:	2e00      	cmp	r6, #0
 8013638:	d0f9      	beq.n	801362e <__sflush_r+0x1a>
 801363a:	2300      	movs	r3, #0
 801363c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013640:	682f      	ldr	r7, [r5, #0]
 8013642:	602b      	str	r3, [r5, #0]
 8013644:	d032      	beq.n	80136ac <__sflush_r+0x98>
 8013646:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013648:	89a3      	ldrh	r3, [r4, #12]
 801364a:	075a      	lsls	r2, r3, #29
 801364c:	d505      	bpl.n	801365a <__sflush_r+0x46>
 801364e:	6863      	ldr	r3, [r4, #4]
 8013650:	1ac0      	subs	r0, r0, r3
 8013652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013654:	b10b      	cbz	r3, 801365a <__sflush_r+0x46>
 8013656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013658:	1ac0      	subs	r0, r0, r3
 801365a:	2300      	movs	r3, #0
 801365c:	4602      	mov	r2, r0
 801365e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013660:	6a21      	ldr	r1, [r4, #32]
 8013662:	4628      	mov	r0, r5
 8013664:	47b0      	blx	r6
 8013666:	1c43      	adds	r3, r0, #1
 8013668:	89a3      	ldrh	r3, [r4, #12]
 801366a:	d106      	bne.n	801367a <__sflush_r+0x66>
 801366c:	6829      	ldr	r1, [r5, #0]
 801366e:	291d      	cmp	r1, #29
 8013670:	d82c      	bhi.n	80136cc <__sflush_r+0xb8>
 8013672:	4a2a      	ldr	r2, [pc, #168]	; (801371c <__sflush_r+0x108>)
 8013674:	40ca      	lsrs	r2, r1
 8013676:	07d6      	lsls	r6, r2, #31
 8013678:	d528      	bpl.n	80136cc <__sflush_r+0xb8>
 801367a:	2200      	movs	r2, #0
 801367c:	6062      	str	r2, [r4, #4]
 801367e:	04d9      	lsls	r1, r3, #19
 8013680:	6922      	ldr	r2, [r4, #16]
 8013682:	6022      	str	r2, [r4, #0]
 8013684:	d504      	bpl.n	8013690 <__sflush_r+0x7c>
 8013686:	1c42      	adds	r2, r0, #1
 8013688:	d101      	bne.n	801368e <__sflush_r+0x7a>
 801368a:	682b      	ldr	r3, [r5, #0]
 801368c:	b903      	cbnz	r3, 8013690 <__sflush_r+0x7c>
 801368e:	6560      	str	r0, [r4, #84]	; 0x54
 8013690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013692:	602f      	str	r7, [r5, #0]
 8013694:	2900      	cmp	r1, #0
 8013696:	d0ca      	beq.n	801362e <__sflush_r+0x1a>
 8013698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801369c:	4299      	cmp	r1, r3
 801369e:	d002      	beq.n	80136a6 <__sflush_r+0x92>
 80136a0:	4628      	mov	r0, r5
 80136a2:	f7fe f8cb 	bl	801183c <_free_r>
 80136a6:	2000      	movs	r0, #0
 80136a8:	6360      	str	r0, [r4, #52]	; 0x34
 80136aa:	e7c1      	b.n	8013630 <__sflush_r+0x1c>
 80136ac:	6a21      	ldr	r1, [r4, #32]
 80136ae:	2301      	movs	r3, #1
 80136b0:	4628      	mov	r0, r5
 80136b2:	47b0      	blx	r6
 80136b4:	1c41      	adds	r1, r0, #1
 80136b6:	d1c7      	bne.n	8013648 <__sflush_r+0x34>
 80136b8:	682b      	ldr	r3, [r5, #0]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d0c4      	beq.n	8013648 <__sflush_r+0x34>
 80136be:	2b1d      	cmp	r3, #29
 80136c0:	d001      	beq.n	80136c6 <__sflush_r+0xb2>
 80136c2:	2b16      	cmp	r3, #22
 80136c4:	d101      	bne.n	80136ca <__sflush_r+0xb6>
 80136c6:	602f      	str	r7, [r5, #0]
 80136c8:	e7b1      	b.n	801362e <__sflush_r+0x1a>
 80136ca:	89a3      	ldrh	r3, [r4, #12]
 80136cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136d0:	81a3      	strh	r3, [r4, #12]
 80136d2:	e7ad      	b.n	8013630 <__sflush_r+0x1c>
 80136d4:	690f      	ldr	r7, [r1, #16]
 80136d6:	2f00      	cmp	r7, #0
 80136d8:	d0a9      	beq.n	801362e <__sflush_r+0x1a>
 80136da:	0793      	lsls	r3, r2, #30
 80136dc:	680e      	ldr	r6, [r1, #0]
 80136de:	bf08      	it	eq
 80136e0:	694b      	ldreq	r3, [r1, #20]
 80136e2:	600f      	str	r7, [r1, #0]
 80136e4:	bf18      	it	ne
 80136e6:	2300      	movne	r3, #0
 80136e8:	eba6 0807 	sub.w	r8, r6, r7
 80136ec:	608b      	str	r3, [r1, #8]
 80136ee:	f1b8 0f00 	cmp.w	r8, #0
 80136f2:	dd9c      	ble.n	801362e <__sflush_r+0x1a>
 80136f4:	6a21      	ldr	r1, [r4, #32]
 80136f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80136f8:	4643      	mov	r3, r8
 80136fa:	463a      	mov	r2, r7
 80136fc:	4628      	mov	r0, r5
 80136fe:	47b0      	blx	r6
 8013700:	2800      	cmp	r0, #0
 8013702:	dc06      	bgt.n	8013712 <__sflush_r+0xfe>
 8013704:	89a3      	ldrh	r3, [r4, #12]
 8013706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801370a:	81a3      	strh	r3, [r4, #12]
 801370c:	f04f 30ff 	mov.w	r0, #4294967295
 8013710:	e78e      	b.n	8013630 <__sflush_r+0x1c>
 8013712:	4407      	add	r7, r0
 8013714:	eba8 0800 	sub.w	r8, r8, r0
 8013718:	e7e9      	b.n	80136ee <__sflush_r+0xda>
 801371a:	bf00      	nop
 801371c:	20400001 	.word	0x20400001

08013720 <_fflush_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	690b      	ldr	r3, [r1, #16]
 8013724:	4605      	mov	r5, r0
 8013726:	460c      	mov	r4, r1
 8013728:	b913      	cbnz	r3, 8013730 <_fflush_r+0x10>
 801372a:	2500      	movs	r5, #0
 801372c:	4628      	mov	r0, r5
 801372e:	bd38      	pop	{r3, r4, r5, pc}
 8013730:	b118      	cbz	r0, 801373a <_fflush_r+0x1a>
 8013732:	6983      	ldr	r3, [r0, #24]
 8013734:	b90b      	cbnz	r3, 801373a <_fflush_r+0x1a>
 8013736:	f7fd ff6f 	bl	8011618 <__sinit>
 801373a:	4b14      	ldr	r3, [pc, #80]	; (801378c <_fflush_r+0x6c>)
 801373c:	429c      	cmp	r4, r3
 801373e:	d11b      	bne.n	8013778 <_fflush_r+0x58>
 8013740:	686c      	ldr	r4, [r5, #4]
 8013742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d0ef      	beq.n	801372a <_fflush_r+0xa>
 801374a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801374c:	07d0      	lsls	r0, r2, #31
 801374e:	d404      	bmi.n	801375a <_fflush_r+0x3a>
 8013750:	0599      	lsls	r1, r3, #22
 8013752:	d402      	bmi.n	801375a <_fflush_r+0x3a>
 8013754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013756:	f7fe f822 	bl	801179e <__retarget_lock_acquire_recursive>
 801375a:	4628      	mov	r0, r5
 801375c:	4621      	mov	r1, r4
 801375e:	f7ff ff59 	bl	8013614 <__sflush_r>
 8013762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013764:	07da      	lsls	r2, r3, #31
 8013766:	4605      	mov	r5, r0
 8013768:	d4e0      	bmi.n	801372c <_fflush_r+0xc>
 801376a:	89a3      	ldrh	r3, [r4, #12]
 801376c:	059b      	lsls	r3, r3, #22
 801376e:	d4dd      	bmi.n	801372c <_fflush_r+0xc>
 8013770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013772:	f7fe f815 	bl	80117a0 <__retarget_lock_release_recursive>
 8013776:	e7d9      	b.n	801372c <_fflush_r+0xc>
 8013778:	4b05      	ldr	r3, [pc, #20]	; (8013790 <_fflush_r+0x70>)
 801377a:	429c      	cmp	r4, r3
 801377c:	d101      	bne.n	8013782 <_fflush_r+0x62>
 801377e:	68ac      	ldr	r4, [r5, #8]
 8013780:	e7df      	b.n	8013742 <_fflush_r+0x22>
 8013782:	4b04      	ldr	r3, [pc, #16]	; (8013794 <_fflush_r+0x74>)
 8013784:	429c      	cmp	r4, r3
 8013786:	bf08      	it	eq
 8013788:	68ec      	ldreq	r4, [r5, #12]
 801378a:	e7da      	b.n	8013742 <_fflush_r+0x22>
 801378c:	0801635c 	.word	0x0801635c
 8013790:	0801637c 	.word	0x0801637c
 8013794:	0801633c 	.word	0x0801633c

08013798 <fiprintf>:
 8013798:	b40e      	push	{r1, r2, r3}
 801379a:	b503      	push	{r0, r1, lr}
 801379c:	4601      	mov	r1, r0
 801379e:	ab03      	add	r3, sp, #12
 80137a0:	4805      	ldr	r0, [pc, #20]	; (80137b8 <fiprintf+0x20>)
 80137a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80137a6:	6800      	ldr	r0, [r0, #0]
 80137a8:	9301      	str	r3, [sp, #4]
 80137aa:	f000 fd99 	bl	80142e0 <_vfiprintf_r>
 80137ae:	b002      	add	sp, #8
 80137b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80137b4:	b003      	add	sp, #12
 80137b6:	4770      	bx	lr
 80137b8:	20000180 	.word	0x20000180

080137bc <_localeconv_r>:
 80137bc:	4800      	ldr	r0, [pc, #0]	; (80137c0 <_localeconv_r+0x4>)
 80137be:	4770      	bx	lr
 80137c0:	200002d4 	.word	0x200002d4

080137c4 <_lseek_r>:
 80137c4:	b538      	push	{r3, r4, r5, lr}
 80137c6:	4d07      	ldr	r5, [pc, #28]	; (80137e4 <_lseek_r+0x20>)
 80137c8:	4604      	mov	r4, r0
 80137ca:	4608      	mov	r0, r1
 80137cc:	4611      	mov	r1, r2
 80137ce:	2200      	movs	r2, #0
 80137d0:	602a      	str	r2, [r5, #0]
 80137d2:	461a      	mov	r2, r3
 80137d4:	f000 ffce 	bl	8014774 <_lseek>
 80137d8:	1c43      	adds	r3, r0, #1
 80137da:	d102      	bne.n	80137e2 <_lseek_r+0x1e>
 80137dc:	682b      	ldr	r3, [r5, #0]
 80137de:	b103      	cbz	r3, 80137e2 <_lseek_r+0x1e>
 80137e0:	6023      	str	r3, [r4, #0]
 80137e2:	bd38      	pop	{r3, r4, r5, pc}
 80137e4:	2000aa5c 	.word	0x2000aa5c

080137e8 <__swhatbuf_r>:
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	460e      	mov	r6, r1
 80137ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f0:	2900      	cmp	r1, #0
 80137f2:	b096      	sub	sp, #88	; 0x58
 80137f4:	4614      	mov	r4, r2
 80137f6:	461d      	mov	r5, r3
 80137f8:	da08      	bge.n	801380c <__swhatbuf_r+0x24>
 80137fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80137fe:	2200      	movs	r2, #0
 8013800:	602a      	str	r2, [r5, #0]
 8013802:	061a      	lsls	r2, r3, #24
 8013804:	d410      	bmi.n	8013828 <__swhatbuf_r+0x40>
 8013806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801380a:	e00e      	b.n	801382a <__swhatbuf_r+0x42>
 801380c:	466a      	mov	r2, sp
 801380e:	f000 feb1 	bl	8014574 <_fstat_r>
 8013812:	2800      	cmp	r0, #0
 8013814:	dbf1      	blt.n	80137fa <__swhatbuf_r+0x12>
 8013816:	9a01      	ldr	r2, [sp, #4]
 8013818:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801381c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013820:	425a      	negs	r2, r3
 8013822:	415a      	adcs	r2, r3
 8013824:	602a      	str	r2, [r5, #0]
 8013826:	e7ee      	b.n	8013806 <__swhatbuf_r+0x1e>
 8013828:	2340      	movs	r3, #64	; 0x40
 801382a:	2000      	movs	r0, #0
 801382c:	6023      	str	r3, [r4, #0]
 801382e:	b016      	add	sp, #88	; 0x58
 8013830:	bd70      	pop	{r4, r5, r6, pc}
	...

08013834 <__smakebuf_r>:
 8013834:	898b      	ldrh	r3, [r1, #12]
 8013836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013838:	079d      	lsls	r5, r3, #30
 801383a:	4606      	mov	r6, r0
 801383c:	460c      	mov	r4, r1
 801383e:	d507      	bpl.n	8013850 <__smakebuf_r+0x1c>
 8013840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013844:	6023      	str	r3, [r4, #0]
 8013846:	6123      	str	r3, [r4, #16]
 8013848:	2301      	movs	r3, #1
 801384a:	6163      	str	r3, [r4, #20]
 801384c:	b002      	add	sp, #8
 801384e:	bd70      	pop	{r4, r5, r6, pc}
 8013850:	ab01      	add	r3, sp, #4
 8013852:	466a      	mov	r2, sp
 8013854:	f7ff ffc8 	bl	80137e8 <__swhatbuf_r>
 8013858:	9900      	ldr	r1, [sp, #0]
 801385a:	4605      	mov	r5, r0
 801385c:	4630      	mov	r0, r6
 801385e:	f7fe f859 	bl	8011914 <_malloc_r>
 8013862:	b948      	cbnz	r0, 8013878 <__smakebuf_r+0x44>
 8013864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013868:	059a      	lsls	r2, r3, #22
 801386a:	d4ef      	bmi.n	801384c <__smakebuf_r+0x18>
 801386c:	f023 0303 	bic.w	r3, r3, #3
 8013870:	f043 0302 	orr.w	r3, r3, #2
 8013874:	81a3      	strh	r3, [r4, #12]
 8013876:	e7e3      	b.n	8013840 <__smakebuf_r+0xc>
 8013878:	4b0d      	ldr	r3, [pc, #52]	; (80138b0 <__smakebuf_r+0x7c>)
 801387a:	62b3      	str	r3, [r6, #40]	; 0x28
 801387c:	89a3      	ldrh	r3, [r4, #12]
 801387e:	6020      	str	r0, [r4, #0]
 8013880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013884:	81a3      	strh	r3, [r4, #12]
 8013886:	9b00      	ldr	r3, [sp, #0]
 8013888:	6163      	str	r3, [r4, #20]
 801388a:	9b01      	ldr	r3, [sp, #4]
 801388c:	6120      	str	r0, [r4, #16]
 801388e:	b15b      	cbz	r3, 80138a8 <__smakebuf_r+0x74>
 8013890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013894:	4630      	mov	r0, r6
 8013896:	f000 fe7f 	bl	8014598 <_isatty_r>
 801389a:	b128      	cbz	r0, 80138a8 <__smakebuf_r+0x74>
 801389c:	89a3      	ldrh	r3, [r4, #12]
 801389e:	f023 0303 	bic.w	r3, r3, #3
 80138a2:	f043 0301 	orr.w	r3, r3, #1
 80138a6:	81a3      	strh	r3, [r4, #12]
 80138a8:	89a0      	ldrh	r0, [r4, #12]
 80138aa:	4305      	orrs	r5, r0
 80138ac:	81a5      	strh	r5, [r4, #12]
 80138ae:	e7cd      	b.n	801384c <__smakebuf_r+0x18>
 80138b0:	080115b1 	.word	0x080115b1

080138b4 <__malloc_lock>:
 80138b4:	4801      	ldr	r0, [pc, #4]	; (80138bc <__malloc_lock+0x8>)
 80138b6:	f7fd bf72 	b.w	801179e <__retarget_lock_acquire_recursive>
 80138ba:	bf00      	nop
 80138bc:	2000aa50 	.word	0x2000aa50

080138c0 <__malloc_unlock>:
 80138c0:	4801      	ldr	r0, [pc, #4]	; (80138c8 <__malloc_unlock+0x8>)
 80138c2:	f7fd bf6d 	b.w	80117a0 <__retarget_lock_release_recursive>
 80138c6:	bf00      	nop
 80138c8:	2000aa50 	.word	0x2000aa50

080138cc <_Balloc>:
 80138cc:	b570      	push	{r4, r5, r6, lr}
 80138ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138d0:	4604      	mov	r4, r0
 80138d2:	460d      	mov	r5, r1
 80138d4:	b976      	cbnz	r6, 80138f4 <_Balloc+0x28>
 80138d6:	2010      	movs	r0, #16
 80138d8:	f7fd ff64 	bl	80117a4 <malloc>
 80138dc:	4602      	mov	r2, r0
 80138de:	6260      	str	r0, [r4, #36]	; 0x24
 80138e0:	b920      	cbnz	r0, 80138ec <_Balloc+0x20>
 80138e2:	4b18      	ldr	r3, [pc, #96]	; (8013944 <_Balloc+0x78>)
 80138e4:	4818      	ldr	r0, [pc, #96]	; (8013948 <_Balloc+0x7c>)
 80138e6:	2166      	movs	r1, #102	; 0x66
 80138e8:	f7fe ffea 	bl	80128c0 <__assert_func>
 80138ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138f0:	6006      	str	r6, [r0, #0]
 80138f2:	60c6      	str	r6, [r0, #12]
 80138f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80138f6:	68f3      	ldr	r3, [r6, #12]
 80138f8:	b183      	cbz	r3, 801391c <_Balloc+0x50>
 80138fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138fc:	68db      	ldr	r3, [r3, #12]
 80138fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013902:	b9b8      	cbnz	r0, 8013934 <_Balloc+0x68>
 8013904:	2101      	movs	r1, #1
 8013906:	fa01 f605 	lsl.w	r6, r1, r5
 801390a:	1d72      	adds	r2, r6, #5
 801390c:	0092      	lsls	r2, r2, #2
 801390e:	4620      	mov	r0, r4
 8013910:	f7fd ff7e 	bl	8011810 <_calloc_r>
 8013914:	b160      	cbz	r0, 8013930 <_Balloc+0x64>
 8013916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801391a:	e00e      	b.n	801393a <_Balloc+0x6e>
 801391c:	2221      	movs	r2, #33	; 0x21
 801391e:	2104      	movs	r1, #4
 8013920:	4620      	mov	r0, r4
 8013922:	f7fd ff75 	bl	8011810 <_calloc_r>
 8013926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013928:	60f0      	str	r0, [r6, #12]
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d1e4      	bne.n	80138fa <_Balloc+0x2e>
 8013930:	2000      	movs	r0, #0
 8013932:	bd70      	pop	{r4, r5, r6, pc}
 8013934:	6802      	ldr	r2, [r0, #0]
 8013936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801393a:	2300      	movs	r3, #0
 801393c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013940:	e7f7      	b.n	8013932 <_Balloc+0x66>
 8013942:	bf00      	nop
 8013944:	080163d4 	.word	0x080163d4
 8013948:	080165fc 	.word	0x080165fc

0801394c <_Bfree>:
 801394c:	b570      	push	{r4, r5, r6, lr}
 801394e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013950:	4605      	mov	r5, r0
 8013952:	460c      	mov	r4, r1
 8013954:	b976      	cbnz	r6, 8013974 <_Bfree+0x28>
 8013956:	2010      	movs	r0, #16
 8013958:	f7fd ff24 	bl	80117a4 <malloc>
 801395c:	4602      	mov	r2, r0
 801395e:	6268      	str	r0, [r5, #36]	; 0x24
 8013960:	b920      	cbnz	r0, 801396c <_Bfree+0x20>
 8013962:	4b09      	ldr	r3, [pc, #36]	; (8013988 <_Bfree+0x3c>)
 8013964:	4809      	ldr	r0, [pc, #36]	; (801398c <_Bfree+0x40>)
 8013966:	218a      	movs	r1, #138	; 0x8a
 8013968:	f7fe ffaa 	bl	80128c0 <__assert_func>
 801396c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013970:	6006      	str	r6, [r0, #0]
 8013972:	60c6      	str	r6, [r0, #12]
 8013974:	b13c      	cbz	r4, 8013986 <_Bfree+0x3a>
 8013976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013978:	6862      	ldr	r2, [r4, #4]
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013980:	6021      	str	r1, [r4, #0]
 8013982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013986:	bd70      	pop	{r4, r5, r6, pc}
 8013988:	080163d4 	.word	0x080163d4
 801398c:	080165fc 	.word	0x080165fc

08013990 <__multadd>:
 8013990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013994:	690d      	ldr	r5, [r1, #16]
 8013996:	4607      	mov	r7, r0
 8013998:	460c      	mov	r4, r1
 801399a:	461e      	mov	r6, r3
 801399c:	f101 0c14 	add.w	ip, r1, #20
 80139a0:	2000      	movs	r0, #0
 80139a2:	f8dc 3000 	ldr.w	r3, [ip]
 80139a6:	b299      	uxth	r1, r3
 80139a8:	fb02 6101 	mla	r1, r2, r1, r6
 80139ac:	0c1e      	lsrs	r6, r3, #16
 80139ae:	0c0b      	lsrs	r3, r1, #16
 80139b0:	fb02 3306 	mla	r3, r2, r6, r3
 80139b4:	b289      	uxth	r1, r1
 80139b6:	3001      	adds	r0, #1
 80139b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80139bc:	4285      	cmp	r5, r0
 80139be:	f84c 1b04 	str.w	r1, [ip], #4
 80139c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80139c6:	dcec      	bgt.n	80139a2 <__multadd+0x12>
 80139c8:	b30e      	cbz	r6, 8013a0e <__multadd+0x7e>
 80139ca:	68a3      	ldr	r3, [r4, #8]
 80139cc:	42ab      	cmp	r3, r5
 80139ce:	dc19      	bgt.n	8013a04 <__multadd+0x74>
 80139d0:	6861      	ldr	r1, [r4, #4]
 80139d2:	4638      	mov	r0, r7
 80139d4:	3101      	adds	r1, #1
 80139d6:	f7ff ff79 	bl	80138cc <_Balloc>
 80139da:	4680      	mov	r8, r0
 80139dc:	b928      	cbnz	r0, 80139ea <__multadd+0x5a>
 80139de:	4602      	mov	r2, r0
 80139e0:	4b0c      	ldr	r3, [pc, #48]	; (8013a14 <__multadd+0x84>)
 80139e2:	480d      	ldr	r0, [pc, #52]	; (8013a18 <__multadd+0x88>)
 80139e4:	21b5      	movs	r1, #181	; 0xb5
 80139e6:	f7fe ff6b 	bl	80128c0 <__assert_func>
 80139ea:	6922      	ldr	r2, [r4, #16]
 80139ec:	3202      	adds	r2, #2
 80139ee:	f104 010c 	add.w	r1, r4, #12
 80139f2:	0092      	lsls	r2, r2, #2
 80139f4:	300c      	adds	r0, #12
 80139f6:	f7fd fef5 	bl	80117e4 <memcpy>
 80139fa:	4621      	mov	r1, r4
 80139fc:	4638      	mov	r0, r7
 80139fe:	f7ff ffa5 	bl	801394c <_Bfree>
 8013a02:	4644      	mov	r4, r8
 8013a04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a08:	3501      	adds	r5, #1
 8013a0a:	615e      	str	r6, [r3, #20]
 8013a0c:	6125      	str	r5, [r4, #16]
 8013a0e:	4620      	mov	r0, r4
 8013a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a14:	080165eb 	.word	0x080165eb
 8013a18:	080165fc 	.word	0x080165fc

08013a1c <__hi0bits>:
 8013a1c:	0c03      	lsrs	r3, r0, #16
 8013a1e:	041b      	lsls	r3, r3, #16
 8013a20:	b9d3      	cbnz	r3, 8013a58 <__hi0bits+0x3c>
 8013a22:	0400      	lsls	r0, r0, #16
 8013a24:	2310      	movs	r3, #16
 8013a26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a2a:	bf04      	itt	eq
 8013a2c:	0200      	lsleq	r0, r0, #8
 8013a2e:	3308      	addeq	r3, #8
 8013a30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a34:	bf04      	itt	eq
 8013a36:	0100      	lsleq	r0, r0, #4
 8013a38:	3304      	addeq	r3, #4
 8013a3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a3e:	bf04      	itt	eq
 8013a40:	0080      	lsleq	r0, r0, #2
 8013a42:	3302      	addeq	r3, #2
 8013a44:	2800      	cmp	r0, #0
 8013a46:	db05      	blt.n	8013a54 <__hi0bits+0x38>
 8013a48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a4c:	f103 0301 	add.w	r3, r3, #1
 8013a50:	bf08      	it	eq
 8013a52:	2320      	moveq	r3, #32
 8013a54:	4618      	mov	r0, r3
 8013a56:	4770      	bx	lr
 8013a58:	2300      	movs	r3, #0
 8013a5a:	e7e4      	b.n	8013a26 <__hi0bits+0xa>

08013a5c <__lo0bits>:
 8013a5c:	6803      	ldr	r3, [r0, #0]
 8013a5e:	f013 0207 	ands.w	r2, r3, #7
 8013a62:	4601      	mov	r1, r0
 8013a64:	d00b      	beq.n	8013a7e <__lo0bits+0x22>
 8013a66:	07da      	lsls	r2, r3, #31
 8013a68:	d423      	bmi.n	8013ab2 <__lo0bits+0x56>
 8013a6a:	0798      	lsls	r0, r3, #30
 8013a6c:	bf49      	itett	mi
 8013a6e:	085b      	lsrmi	r3, r3, #1
 8013a70:	089b      	lsrpl	r3, r3, #2
 8013a72:	2001      	movmi	r0, #1
 8013a74:	600b      	strmi	r3, [r1, #0]
 8013a76:	bf5c      	itt	pl
 8013a78:	600b      	strpl	r3, [r1, #0]
 8013a7a:	2002      	movpl	r0, #2
 8013a7c:	4770      	bx	lr
 8013a7e:	b298      	uxth	r0, r3
 8013a80:	b9a8      	cbnz	r0, 8013aae <__lo0bits+0x52>
 8013a82:	0c1b      	lsrs	r3, r3, #16
 8013a84:	2010      	movs	r0, #16
 8013a86:	b2da      	uxtb	r2, r3
 8013a88:	b90a      	cbnz	r2, 8013a8e <__lo0bits+0x32>
 8013a8a:	3008      	adds	r0, #8
 8013a8c:	0a1b      	lsrs	r3, r3, #8
 8013a8e:	071a      	lsls	r2, r3, #28
 8013a90:	bf04      	itt	eq
 8013a92:	091b      	lsreq	r3, r3, #4
 8013a94:	3004      	addeq	r0, #4
 8013a96:	079a      	lsls	r2, r3, #30
 8013a98:	bf04      	itt	eq
 8013a9a:	089b      	lsreq	r3, r3, #2
 8013a9c:	3002      	addeq	r0, #2
 8013a9e:	07da      	lsls	r2, r3, #31
 8013aa0:	d403      	bmi.n	8013aaa <__lo0bits+0x4e>
 8013aa2:	085b      	lsrs	r3, r3, #1
 8013aa4:	f100 0001 	add.w	r0, r0, #1
 8013aa8:	d005      	beq.n	8013ab6 <__lo0bits+0x5a>
 8013aaa:	600b      	str	r3, [r1, #0]
 8013aac:	4770      	bx	lr
 8013aae:	4610      	mov	r0, r2
 8013ab0:	e7e9      	b.n	8013a86 <__lo0bits+0x2a>
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	4770      	bx	lr
 8013ab6:	2020      	movs	r0, #32
 8013ab8:	4770      	bx	lr
	...

08013abc <__i2b>:
 8013abc:	b510      	push	{r4, lr}
 8013abe:	460c      	mov	r4, r1
 8013ac0:	2101      	movs	r1, #1
 8013ac2:	f7ff ff03 	bl	80138cc <_Balloc>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	b928      	cbnz	r0, 8013ad6 <__i2b+0x1a>
 8013aca:	4b05      	ldr	r3, [pc, #20]	; (8013ae0 <__i2b+0x24>)
 8013acc:	4805      	ldr	r0, [pc, #20]	; (8013ae4 <__i2b+0x28>)
 8013ace:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ad2:	f7fe fef5 	bl	80128c0 <__assert_func>
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	6144      	str	r4, [r0, #20]
 8013ada:	6103      	str	r3, [r0, #16]
 8013adc:	bd10      	pop	{r4, pc}
 8013ade:	bf00      	nop
 8013ae0:	080165eb 	.word	0x080165eb
 8013ae4:	080165fc 	.word	0x080165fc

08013ae8 <__multiply>:
 8013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aec:	4691      	mov	r9, r2
 8013aee:	690a      	ldr	r2, [r1, #16]
 8013af0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013af4:	429a      	cmp	r2, r3
 8013af6:	bfb8      	it	lt
 8013af8:	460b      	movlt	r3, r1
 8013afa:	460c      	mov	r4, r1
 8013afc:	bfbc      	itt	lt
 8013afe:	464c      	movlt	r4, r9
 8013b00:	4699      	movlt	r9, r3
 8013b02:	6927      	ldr	r7, [r4, #16]
 8013b04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b08:	68a3      	ldr	r3, [r4, #8]
 8013b0a:	6861      	ldr	r1, [r4, #4]
 8013b0c:	eb07 060a 	add.w	r6, r7, sl
 8013b10:	42b3      	cmp	r3, r6
 8013b12:	b085      	sub	sp, #20
 8013b14:	bfb8      	it	lt
 8013b16:	3101      	addlt	r1, #1
 8013b18:	f7ff fed8 	bl	80138cc <_Balloc>
 8013b1c:	b930      	cbnz	r0, 8013b2c <__multiply+0x44>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	4b44      	ldr	r3, [pc, #272]	; (8013c34 <__multiply+0x14c>)
 8013b22:	4845      	ldr	r0, [pc, #276]	; (8013c38 <__multiply+0x150>)
 8013b24:	f240 115d 	movw	r1, #349	; 0x15d
 8013b28:	f7fe feca 	bl	80128c0 <__assert_func>
 8013b2c:	f100 0514 	add.w	r5, r0, #20
 8013b30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b34:	462b      	mov	r3, r5
 8013b36:	2200      	movs	r2, #0
 8013b38:	4543      	cmp	r3, r8
 8013b3a:	d321      	bcc.n	8013b80 <__multiply+0x98>
 8013b3c:	f104 0314 	add.w	r3, r4, #20
 8013b40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013b44:	f109 0314 	add.w	r3, r9, #20
 8013b48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b4c:	9202      	str	r2, [sp, #8]
 8013b4e:	1b3a      	subs	r2, r7, r4
 8013b50:	3a15      	subs	r2, #21
 8013b52:	f022 0203 	bic.w	r2, r2, #3
 8013b56:	3204      	adds	r2, #4
 8013b58:	f104 0115 	add.w	r1, r4, #21
 8013b5c:	428f      	cmp	r7, r1
 8013b5e:	bf38      	it	cc
 8013b60:	2204      	movcc	r2, #4
 8013b62:	9201      	str	r2, [sp, #4]
 8013b64:	9a02      	ldr	r2, [sp, #8]
 8013b66:	9303      	str	r3, [sp, #12]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d80c      	bhi.n	8013b86 <__multiply+0x9e>
 8013b6c:	2e00      	cmp	r6, #0
 8013b6e:	dd03      	ble.n	8013b78 <__multiply+0x90>
 8013b70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d05a      	beq.n	8013c2e <__multiply+0x146>
 8013b78:	6106      	str	r6, [r0, #16]
 8013b7a:	b005      	add	sp, #20
 8013b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b80:	f843 2b04 	str.w	r2, [r3], #4
 8013b84:	e7d8      	b.n	8013b38 <__multiply+0x50>
 8013b86:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b8a:	f1ba 0f00 	cmp.w	sl, #0
 8013b8e:	d024      	beq.n	8013bda <__multiply+0xf2>
 8013b90:	f104 0e14 	add.w	lr, r4, #20
 8013b94:	46a9      	mov	r9, r5
 8013b96:	f04f 0c00 	mov.w	ip, #0
 8013b9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b9e:	f8d9 1000 	ldr.w	r1, [r9]
 8013ba2:	fa1f fb82 	uxth.w	fp, r2
 8013ba6:	b289      	uxth	r1, r1
 8013ba8:	fb0a 110b 	mla	r1, sl, fp, r1
 8013bac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8013bb4:	4461      	add	r1, ip
 8013bb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bba:	fb0a c20b 	mla	r2, sl, fp, ip
 8013bbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013bc2:	b289      	uxth	r1, r1
 8013bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013bc8:	4577      	cmp	r7, lr
 8013bca:	f849 1b04 	str.w	r1, [r9], #4
 8013bce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bd2:	d8e2      	bhi.n	8013b9a <__multiply+0xb2>
 8013bd4:	9a01      	ldr	r2, [sp, #4]
 8013bd6:	f845 c002 	str.w	ip, [r5, r2]
 8013bda:	9a03      	ldr	r2, [sp, #12]
 8013bdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013be0:	3304      	adds	r3, #4
 8013be2:	f1b9 0f00 	cmp.w	r9, #0
 8013be6:	d020      	beq.n	8013c2a <__multiply+0x142>
 8013be8:	6829      	ldr	r1, [r5, #0]
 8013bea:	f104 0c14 	add.w	ip, r4, #20
 8013bee:	46ae      	mov	lr, r5
 8013bf0:	f04f 0a00 	mov.w	sl, #0
 8013bf4:	f8bc b000 	ldrh.w	fp, [ip]
 8013bf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013bfc:	fb09 220b 	mla	r2, r9, fp, r2
 8013c00:	4492      	add	sl, r2
 8013c02:	b289      	uxth	r1, r1
 8013c04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013c08:	f84e 1b04 	str.w	r1, [lr], #4
 8013c0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013c10:	f8be 1000 	ldrh.w	r1, [lr]
 8013c14:	0c12      	lsrs	r2, r2, #16
 8013c16:	fb09 1102 	mla	r1, r9, r2, r1
 8013c1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013c1e:	4567      	cmp	r7, ip
 8013c20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c24:	d8e6      	bhi.n	8013bf4 <__multiply+0x10c>
 8013c26:	9a01      	ldr	r2, [sp, #4]
 8013c28:	50a9      	str	r1, [r5, r2]
 8013c2a:	3504      	adds	r5, #4
 8013c2c:	e79a      	b.n	8013b64 <__multiply+0x7c>
 8013c2e:	3e01      	subs	r6, #1
 8013c30:	e79c      	b.n	8013b6c <__multiply+0x84>
 8013c32:	bf00      	nop
 8013c34:	080165eb 	.word	0x080165eb
 8013c38:	080165fc 	.word	0x080165fc

08013c3c <__pow5mult>:
 8013c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c40:	4615      	mov	r5, r2
 8013c42:	f012 0203 	ands.w	r2, r2, #3
 8013c46:	4606      	mov	r6, r0
 8013c48:	460f      	mov	r7, r1
 8013c4a:	d007      	beq.n	8013c5c <__pow5mult+0x20>
 8013c4c:	4c25      	ldr	r4, [pc, #148]	; (8013ce4 <__pow5mult+0xa8>)
 8013c4e:	3a01      	subs	r2, #1
 8013c50:	2300      	movs	r3, #0
 8013c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c56:	f7ff fe9b 	bl	8013990 <__multadd>
 8013c5a:	4607      	mov	r7, r0
 8013c5c:	10ad      	asrs	r5, r5, #2
 8013c5e:	d03d      	beq.n	8013cdc <__pow5mult+0xa0>
 8013c60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c62:	b97c      	cbnz	r4, 8013c84 <__pow5mult+0x48>
 8013c64:	2010      	movs	r0, #16
 8013c66:	f7fd fd9d 	bl	80117a4 <malloc>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	6270      	str	r0, [r6, #36]	; 0x24
 8013c6e:	b928      	cbnz	r0, 8013c7c <__pow5mult+0x40>
 8013c70:	4b1d      	ldr	r3, [pc, #116]	; (8013ce8 <__pow5mult+0xac>)
 8013c72:	481e      	ldr	r0, [pc, #120]	; (8013cec <__pow5mult+0xb0>)
 8013c74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c78:	f7fe fe22 	bl	80128c0 <__assert_func>
 8013c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c80:	6004      	str	r4, [r0, #0]
 8013c82:	60c4      	str	r4, [r0, #12]
 8013c84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c8c:	b94c      	cbnz	r4, 8013ca2 <__pow5mult+0x66>
 8013c8e:	f240 2171 	movw	r1, #625	; 0x271
 8013c92:	4630      	mov	r0, r6
 8013c94:	f7ff ff12 	bl	8013abc <__i2b>
 8013c98:	2300      	movs	r3, #0
 8013c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	6003      	str	r3, [r0, #0]
 8013ca2:	f04f 0900 	mov.w	r9, #0
 8013ca6:	07eb      	lsls	r3, r5, #31
 8013ca8:	d50a      	bpl.n	8013cc0 <__pow5mult+0x84>
 8013caa:	4639      	mov	r1, r7
 8013cac:	4622      	mov	r2, r4
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f7ff ff1a 	bl	8013ae8 <__multiply>
 8013cb4:	4639      	mov	r1, r7
 8013cb6:	4680      	mov	r8, r0
 8013cb8:	4630      	mov	r0, r6
 8013cba:	f7ff fe47 	bl	801394c <_Bfree>
 8013cbe:	4647      	mov	r7, r8
 8013cc0:	106d      	asrs	r5, r5, #1
 8013cc2:	d00b      	beq.n	8013cdc <__pow5mult+0xa0>
 8013cc4:	6820      	ldr	r0, [r4, #0]
 8013cc6:	b938      	cbnz	r0, 8013cd8 <__pow5mult+0x9c>
 8013cc8:	4622      	mov	r2, r4
 8013cca:	4621      	mov	r1, r4
 8013ccc:	4630      	mov	r0, r6
 8013cce:	f7ff ff0b 	bl	8013ae8 <__multiply>
 8013cd2:	6020      	str	r0, [r4, #0]
 8013cd4:	f8c0 9000 	str.w	r9, [r0]
 8013cd8:	4604      	mov	r4, r0
 8013cda:	e7e4      	b.n	8013ca6 <__pow5mult+0x6a>
 8013cdc:	4638      	mov	r0, r7
 8013cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ce2:	bf00      	nop
 8013ce4:	08016748 	.word	0x08016748
 8013ce8:	080163d4 	.word	0x080163d4
 8013cec:	080165fc 	.word	0x080165fc

08013cf0 <__lshift>:
 8013cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf4:	460c      	mov	r4, r1
 8013cf6:	6849      	ldr	r1, [r1, #4]
 8013cf8:	6923      	ldr	r3, [r4, #16]
 8013cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cfe:	68a3      	ldr	r3, [r4, #8]
 8013d00:	4607      	mov	r7, r0
 8013d02:	4691      	mov	r9, r2
 8013d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d08:	f108 0601 	add.w	r6, r8, #1
 8013d0c:	42b3      	cmp	r3, r6
 8013d0e:	db0b      	blt.n	8013d28 <__lshift+0x38>
 8013d10:	4638      	mov	r0, r7
 8013d12:	f7ff fddb 	bl	80138cc <_Balloc>
 8013d16:	4605      	mov	r5, r0
 8013d18:	b948      	cbnz	r0, 8013d2e <__lshift+0x3e>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	4b2a      	ldr	r3, [pc, #168]	; (8013dc8 <__lshift+0xd8>)
 8013d1e:	482b      	ldr	r0, [pc, #172]	; (8013dcc <__lshift+0xdc>)
 8013d20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d24:	f7fe fdcc 	bl	80128c0 <__assert_func>
 8013d28:	3101      	adds	r1, #1
 8013d2a:	005b      	lsls	r3, r3, #1
 8013d2c:	e7ee      	b.n	8013d0c <__lshift+0x1c>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	f100 0114 	add.w	r1, r0, #20
 8013d34:	f100 0210 	add.w	r2, r0, #16
 8013d38:	4618      	mov	r0, r3
 8013d3a:	4553      	cmp	r3, sl
 8013d3c:	db37      	blt.n	8013dae <__lshift+0xbe>
 8013d3e:	6920      	ldr	r0, [r4, #16]
 8013d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d44:	f104 0314 	add.w	r3, r4, #20
 8013d48:	f019 091f 	ands.w	r9, r9, #31
 8013d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013d54:	d02f      	beq.n	8013db6 <__lshift+0xc6>
 8013d56:	f1c9 0e20 	rsb	lr, r9, #32
 8013d5a:	468a      	mov	sl, r1
 8013d5c:	f04f 0c00 	mov.w	ip, #0
 8013d60:	681a      	ldr	r2, [r3, #0]
 8013d62:	fa02 f209 	lsl.w	r2, r2, r9
 8013d66:	ea42 020c 	orr.w	r2, r2, ip
 8013d6a:	f84a 2b04 	str.w	r2, [sl], #4
 8013d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d72:	4298      	cmp	r0, r3
 8013d74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013d78:	d8f2      	bhi.n	8013d60 <__lshift+0x70>
 8013d7a:	1b03      	subs	r3, r0, r4
 8013d7c:	3b15      	subs	r3, #21
 8013d7e:	f023 0303 	bic.w	r3, r3, #3
 8013d82:	3304      	adds	r3, #4
 8013d84:	f104 0215 	add.w	r2, r4, #21
 8013d88:	4290      	cmp	r0, r2
 8013d8a:	bf38      	it	cc
 8013d8c:	2304      	movcc	r3, #4
 8013d8e:	f841 c003 	str.w	ip, [r1, r3]
 8013d92:	f1bc 0f00 	cmp.w	ip, #0
 8013d96:	d001      	beq.n	8013d9c <__lshift+0xac>
 8013d98:	f108 0602 	add.w	r6, r8, #2
 8013d9c:	3e01      	subs	r6, #1
 8013d9e:	4638      	mov	r0, r7
 8013da0:	612e      	str	r6, [r5, #16]
 8013da2:	4621      	mov	r1, r4
 8013da4:	f7ff fdd2 	bl	801394c <_Bfree>
 8013da8:	4628      	mov	r0, r5
 8013daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dae:	f842 0f04 	str.w	r0, [r2, #4]!
 8013db2:	3301      	adds	r3, #1
 8013db4:	e7c1      	b.n	8013d3a <__lshift+0x4a>
 8013db6:	3904      	subs	r1, #4
 8013db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dc0:	4298      	cmp	r0, r3
 8013dc2:	d8f9      	bhi.n	8013db8 <__lshift+0xc8>
 8013dc4:	e7ea      	b.n	8013d9c <__lshift+0xac>
 8013dc6:	bf00      	nop
 8013dc8:	080165eb 	.word	0x080165eb
 8013dcc:	080165fc 	.word	0x080165fc

08013dd0 <__mcmp>:
 8013dd0:	b530      	push	{r4, r5, lr}
 8013dd2:	6902      	ldr	r2, [r0, #16]
 8013dd4:	690c      	ldr	r4, [r1, #16]
 8013dd6:	1b12      	subs	r2, r2, r4
 8013dd8:	d10e      	bne.n	8013df8 <__mcmp+0x28>
 8013dda:	f100 0314 	add.w	r3, r0, #20
 8013dde:	3114      	adds	r1, #20
 8013de0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013de4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013de8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013dec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013df0:	42a5      	cmp	r5, r4
 8013df2:	d003      	beq.n	8013dfc <__mcmp+0x2c>
 8013df4:	d305      	bcc.n	8013e02 <__mcmp+0x32>
 8013df6:	2201      	movs	r2, #1
 8013df8:	4610      	mov	r0, r2
 8013dfa:	bd30      	pop	{r4, r5, pc}
 8013dfc:	4283      	cmp	r3, r0
 8013dfe:	d3f3      	bcc.n	8013de8 <__mcmp+0x18>
 8013e00:	e7fa      	b.n	8013df8 <__mcmp+0x28>
 8013e02:	f04f 32ff 	mov.w	r2, #4294967295
 8013e06:	e7f7      	b.n	8013df8 <__mcmp+0x28>

08013e08 <__mdiff>:
 8013e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e0c:	460c      	mov	r4, r1
 8013e0e:	4606      	mov	r6, r0
 8013e10:	4611      	mov	r1, r2
 8013e12:	4620      	mov	r0, r4
 8013e14:	4690      	mov	r8, r2
 8013e16:	f7ff ffdb 	bl	8013dd0 <__mcmp>
 8013e1a:	1e05      	subs	r5, r0, #0
 8013e1c:	d110      	bne.n	8013e40 <__mdiff+0x38>
 8013e1e:	4629      	mov	r1, r5
 8013e20:	4630      	mov	r0, r6
 8013e22:	f7ff fd53 	bl	80138cc <_Balloc>
 8013e26:	b930      	cbnz	r0, 8013e36 <__mdiff+0x2e>
 8013e28:	4b3a      	ldr	r3, [pc, #232]	; (8013f14 <__mdiff+0x10c>)
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	f240 2132 	movw	r1, #562	; 0x232
 8013e30:	4839      	ldr	r0, [pc, #228]	; (8013f18 <__mdiff+0x110>)
 8013e32:	f7fe fd45 	bl	80128c0 <__assert_func>
 8013e36:	2301      	movs	r3, #1
 8013e38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e40:	bfa4      	itt	ge
 8013e42:	4643      	movge	r3, r8
 8013e44:	46a0      	movge	r8, r4
 8013e46:	4630      	mov	r0, r6
 8013e48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e4c:	bfa6      	itte	ge
 8013e4e:	461c      	movge	r4, r3
 8013e50:	2500      	movge	r5, #0
 8013e52:	2501      	movlt	r5, #1
 8013e54:	f7ff fd3a 	bl	80138cc <_Balloc>
 8013e58:	b920      	cbnz	r0, 8013e64 <__mdiff+0x5c>
 8013e5a:	4b2e      	ldr	r3, [pc, #184]	; (8013f14 <__mdiff+0x10c>)
 8013e5c:	4602      	mov	r2, r0
 8013e5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e62:	e7e5      	b.n	8013e30 <__mdiff+0x28>
 8013e64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e68:	6926      	ldr	r6, [r4, #16]
 8013e6a:	60c5      	str	r5, [r0, #12]
 8013e6c:	f104 0914 	add.w	r9, r4, #20
 8013e70:	f108 0514 	add.w	r5, r8, #20
 8013e74:	f100 0e14 	add.w	lr, r0, #20
 8013e78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e80:	f108 0210 	add.w	r2, r8, #16
 8013e84:	46f2      	mov	sl, lr
 8013e86:	2100      	movs	r1, #0
 8013e88:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e90:	fa1f f883 	uxth.w	r8, r3
 8013e94:	fa11 f18b 	uxtah	r1, r1, fp
 8013e98:	0c1b      	lsrs	r3, r3, #16
 8013e9a:	eba1 0808 	sub.w	r8, r1, r8
 8013e9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013ea2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013ea6:	fa1f f888 	uxth.w	r8, r8
 8013eaa:	1419      	asrs	r1, r3, #16
 8013eac:	454e      	cmp	r6, r9
 8013eae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013eb2:	f84a 3b04 	str.w	r3, [sl], #4
 8013eb6:	d8e7      	bhi.n	8013e88 <__mdiff+0x80>
 8013eb8:	1b33      	subs	r3, r6, r4
 8013eba:	3b15      	subs	r3, #21
 8013ebc:	f023 0303 	bic.w	r3, r3, #3
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	3415      	adds	r4, #21
 8013ec4:	42a6      	cmp	r6, r4
 8013ec6:	bf38      	it	cc
 8013ec8:	2304      	movcc	r3, #4
 8013eca:	441d      	add	r5, r3
 8013ecc:	4473      	add	r3, lr
 8013ece:	469e      	mov	lr, r3
 8013ed0:	462e      	mov	r6, r5
 8013ed2:	4566      	cmp	r6, ip
 8013ed4:	d30e      	bcc.n	8013ef4 <__mdiff+0xec>
 8013ed6:	f10c 0203 	add.w	r2, ip, #3
 8013eda:	1b52      	subs	r2, r2, r5
 8013edc:	f022 0203 	bic.w	r2, r2, #3
 8013ee0:	3d03      	subs	r5, #3
 8013ee2:	45ac      	cmp	ip, r5
 8013ee4:	bf38      	it	cc
 8013ee6:	2200      	movcc	r2, #0
 8013ee8:	441a      	add	r2, r3
 8013eea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013eee:	b17b      	cbz	r3, 8013f10 <__mdiff+0x108>
 8013ef0:	6107      	str	r7, [r0, #16]
 8013ef2:	e7a3      	b.n	8013e3c <__mdiff+0x34>
 8013ef4:	f856 8b04 	ldr.w	r8, [r6], #4
 8013ef8:	fa11 f288 	uxtah	r2, r1, r8
 8013efc:	1414      	asrs	r4, r2, #16
 8013efe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013f02:	b292      	uxth	r2, r2
 8013f04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013f08:	f84e 2b04 	str.w	r2, [lr], #4
 8013f0c:	1421      	asrs	r1, r4, #16
 8013f0e:	e7e0      	b.n	8013ed2 <__mdiff+0xca>
 8013f10:	3f01      	subs	r7, #1
 8013f12:	e7ea      	b.n	8013eea <__mdiff+0xe2>
 8013f14:	080165eb 	.word	0x080165eb
 8013f18:	080165fc 	.word	0x080165fc

08013f1c <__d2b>:
 8013f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f20:	4689      	mov	r9, r1
 8013f22:	2101      	movs	r1, #1
 8013f24:	ec57 6b10 	vmov	r6, r7, d0
 8013f28:	4690      	mov	r8, r2
 8013f2a:	f7ff fccf 	bl	80138cc <_Balloc>
 8013f2e:	4604      	mov	r4, r0
 8013f30:	b930      	cbnz	r0, 8013f40 <__d2b+0x24>
 8013f32:	4602      	mov	r2, r0
 8013f34:	4b25      	ldr	r3, [pc, #148]	; (8013fcc <__d2b+0xb0>)
 8013f36:	4826      	ldr	r0, [pc, #152]	; (8013fd0 <__d2b+0xb4>)
 8013f38:	f240 310a 	movw	r1, #778	; 0x30a
 8013f3c:	f7fe fcc0 	bl	80128c0 <__assert_func>
 8013f40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013f44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f48:	bb35      	cbnz	r5, 8013f98 <__d2b+0x7c>
 8013f4a:	2e00      	cmp	r6, #0
 8013f4c:	9301      	str	r3, [sp, #4]
 8013f4e:	d028      	beq.n	8013fa2 <__d2b+0x86>
 8013f50:	4668      	mov	r0, sp
 8013f52:	9600      	str	r6, [sp, #0]
 8013f54:	f7ff fd82 	bl	8013a5c <__lo0bits>
 8013f58:	9900      	ldr	r1, [sp, #0]
 8013f5a:	b300      	cbz	r0, 8013f9e <__d2b+0x82>
 8013f5c:	9a01      	ldr	r2, [sp, #4]
 8013f5e:	f1c0 0320 	rsb	r3, r0, #32
 8013f62:	fa02 f303 	lsl.w	r3, r2, r3
 8013f66:	430b      	orrs	r3, r1
 8013f68:	40c2      	lsrs	r2, r0
 8013f6a:	6163      	str	r3, [r4, #20]
 8013f6c:	9201      	str	r2, [sp, #4]
 8013f6e:	9b01      	ldr	r3, [sp, #4]
 8013f70:	61a3      	str	r3, [r4, #24]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	bf14      	ite	ne
 8013f76:	2202      	movne	r2, #2
 8013f78:	2201      	moveq	r2, #1
 8013f7a:	6122      	str	r2, [r4, #16]
 8013f7c:	b1d5      	cbz	r5, 8013fb4 <__d2b+0x98>
 8013f7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013f82:	4405      	add	r5, r0
 8013f84:	f8c9 5000 	str.w	r5, [r9]
 8013f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f8c:	f8c8 0000 	str.w	r0, [r8]
 8013f90:	4620      	mov	r0, r4
 8013f92:	b003      	add	sp, #12
 8013f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f9c:	e7d5      	b.n	8013f4a <__d2b+0x2e>
 8013f9e:	6161      	str	r1, [r4, #20]
 8013fa0:	e7e5      	b.n	8013f6e <__d2b+0x52>
 8013fa2:	a801      	add	r0, sp, #4
 8013fa4:	f7ff fd5a 	bl	8013a5c <__lo0bits>
 8013fa8:	9b01      	ldr	r3, [sp, #4]
 8013faa:	6163      	str	r3, [r4, #20]
 8013fac:	2201      	movs	r2, #1
 8013fae:	6122      	str	r2, [r4, #16]
 8013fb0:	3020      	adds	r0, #32
 8013fb2:	e7e3      	b.n	8013f7c <__d2b+0x60>
 8013fb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013fb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013fbc:	f8c9 0000 	str.w	r0, [r9]
 8013fc0:	6918      	ldr	r0, [r3, #16]
 8013fc2:	f7ff fd2b 	bl	8013a1c <__hi0bits>
 8013fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013fca:	e7df      	b.n	8013f8c <__d2b+0x70>
 8013fcc:	080165eb 	.word	0x080165eb
 8013fd0:	080165fc 	.word	0x080165fc

08013fd4 <__ssputs_r>:
 8013fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fd8:	688e      	ldr	r6, [r1, #8]
 8013fda:	429e      	cmp	r6, r3
 8013fdc:	4682      	mov	sl, r0
 8013fde:	460c      	mov	r4, r1
 8013fe0:	4690      	mov	r8, r2
 8013fe2:	461f      	mov	r7, r3
 8013fe4:	d838      	bhi.n	8014058 <__ssputs_r+0x84>
 8013fe6:	898a      	ldrh	r2, [r1, #12]
 8013fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013fec:	d032      	beq.n	8014054 <__ssputs_r+0x80>
 8013fee:	6825      	ldr	r5, [r4, #0]
 8013ff0:	6909      	ldr	r1, [r1, #16]
 8013ff2:	eba5 0901 	sub.w	r9, r5, r1
 8013ff6:	6965      	ldr	r5, [r4, #20]
 8013ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014000:	3301      	adds	r3, #1
 8014002:	444b      	add	r3, r9
 8014004:	106d      	asrs	r5, r5, #1
 8014006:	429d      	cmp	r5, r3
 8014008:	bf38      	it	cc
 801400a:	461d      	movcc	r5, r3
 801400c:	0553      	lsls	r3, r2, #21
 801400e:	d531      	bpl.n	8014074 <__ssputs_r+0xa0>
 8014010:	4629      	mov	r1, r5
 8014012:	f7fd fc7f 	bl	8011914 <_malloc_r>
 8014016:	4606      	mov	r6, r0
 8014018:	b950      	cbnz	r0, 8014030 <__ssputs_r+0x5c>
 801401a:	230c      	movs	r3, #12
 801401c:	f8ca 3000 	str.w	r3, [sl]
 8014020:	89a3      	ldrh	r3, [r4, #12]
 8014022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014026:	81a3      	strh	r3, [r4, #12]
 8014028:	f04f 30ff 	mov.w	r0, #4294967295
 801402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014030:	6921      	ldr	r1, [r4, #16]
 8014032:	464a      	mov	r2, r9
 8014034:	f7fd fbd6 	bl	80117e4 <memcpy>
 8014038:	89a3      	ldrh	r3, [r4, #12]
 801403a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014042:	81a3      	strh	r3, [r4, #12]
 8014044:	6126      	str	r6, [r4, #16]
 8014046:	6165      	str	r5, [r4, #20]
 8014048:	444e      	add	r6, r9
 801404a:	eba5 0509 	sub.w	r5, r5, r9
 801404e:	6026      	str	r6, [r4, #0]
 8014050:	60a5      	str	r5, [r4, #8]
 8014052:	463e      	mov	r6, r7
 8014054:	42be      	cmp	r6, r7
 8014056:	d900      	bls.n	801405a <__ssputs_r+0x86>
 8014058:	463e      	mov	r6, r7
 801405a:	6820      	ldr	r0, [r4, #0]
 801405c:	4632      	mov	r2, r6
 801405e:	4641      	mov	r1, r8
 8014060:	f000 fabc 	bl	80145dc <memmove>
 8014064:	68a3      	ldr	r3, [r4, #8]
 8014066:	1b9b      	subs	r3, r3, r6
 8014068:	60a3      	str	r3, [r4, #8]
 801406a:	6823      	ldr	r3, [r4, #0]
 801406c:	4433      	add	r3, r6
 801406e:	6023      	str	r3, [r4, #0]
 8014070:	2000      	movs	r0, #0
 8014072:	e7db      	b.n	801402c <__ssputs_r+0x58>
 8014074:	462a      	mov	r2, r5
 8014076:	f000 facb 	bl	8014610 <_realloc_r>
 801407a:	4606      	mov	r6, r0
 801407c:	2800      	cmp	r0, #0
 801407e:	d1e1      	bne.n	8014044 <__ssputs_r+0x70>
 8014080:	6921      	ldr	r1, [r4, #16]
 8014082:	4650      	mov	r0, sl
 8014084:	f7fd fbda 	bl	801183c <_free_r>
 8014088:	e7c7      	b.n	801401a <__ssputs_r+0x46>
	...

0801408c <_svfiprintf_r>:
 801408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014090:	4698      	mov	r8, r3
 8014092:	898b      	ldrh	r3, [r1, #12]
 8014094:	061b      	lsls	r3, r3, #24
 8014096:	b09d      	sub	sp, #116	; 0x74
 8014098:	4607      	mov	r7, r0
 801409a:	460d      	mov	r5, r1
 801409c:	4614      	mov	r4, r2
 801409e:	d50e      	bpl.n	80140be <_svfiprintf_r+0x32>
 80140a0:	690b      	ldr	r3, [r1, #16]
 80140a2:	b963      	cbnz	r3, 80140be <_svfiprintf_r+0x32>
 80140a4:	2140      	movs	r1, #64	; 0x40
 80140a6:	f7fd fc35 	bl	8011914 <_malloc_r>
 80140aa:	6028      	str	r0, [r5, #0]
 80140ac:	6128      	str	r0, [r5, #16]
 80140ae:	b920      	cbnz	r0, 80140ba <_svfiprintf_r+0x2e>
 80140b0:	230c      	movs	r3, #12
 80140b2:	603b      	str	r3, [r7, #0]
 80140b4:	f04f 30ff 	mov.w	r0, #4294967295
 80140b8:	e0d1      	b.n	801425e <_svfiprintf_r+0x1d2>
 80140ba:	2340      	movs	r3, #64	; 0x40
 80140bc:	616b      	str	r3, [r5, #20]
 80140be:	2300      	movs	r3, #0
 80140c0:	9309      	str	r3, [sp, #36]	; 0x24
 80140c2:	2320      	movs	r3, #32
 80140c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80140cc:	2330      	movs	r3, #48	; 0x30
 80140ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014278 <_svfiprintf_r+0x1ec>
 80140d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140d6:	f04f 0901 	mov.w	r9, #1
 80140da:	4623      	mov	r3, r4
 80140dc:	469a      	mov	sl, r3
 80140de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140e2:	b10a      	cbz	r2, 80140e8 <_svfiprintf_r+0x5c>
 80140e4:	2a25      	cmp	r2, #37	; 0x25
 80140e6:	d1f9      	bne.n	80140dc <_svfiprintf_r+0x50>
 80140e8:	ebba 0b04 	subs.w	fp, sl, r4
 80140ec:	d00b      	beq.n	8014106 <_svfiprintf_r+0x7a>
 80140ee:	465b      	mov	r3, fp
 80140f0:	4622      	mov	r2, r4
 80140f2:	4629      	mov	r1, r5
 80140f4:	4638      	mov	r0, r7
 80140f6:	f7ff ff6d 	bl	8013fd4 <__ssputs_r>
 80140fa:	3001      	adds	r0, #1
 80140fc:	f000 80aa 	beq.w	8014254 <_svfiprintf_r+0x1c8>
 8014100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014102:	445a      	add	r2, fp
 8014104:	9209      	str	r2, [sp, #36]	; 0x24
 8014106:	f89a 3000 	ldrb.w	r3, [sl]
 801410a:	2b00      	cmp	r3, #0
 801410c:	f000 80a2 	beq.w	8014254 <_svfiprintf_r+0x1c8>
 8014110:	2300      	movs	r3, #0
 8014112:	f04f 32ff 	mov.w	r2, #4294967295
 8014116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801411a:	f10a 0a01 	add.w	sl, sl, #1
 801411e:	9304      	str	r3, [sp, #16]
 8014120:	9307      	str	r3, [sp, #28]
 8014122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014126:	931a      	str	r3, [sp, #104]	; 0x68
 8014128:	4654      	mov	r4, sl
 801412a:	2205      	movs	r2, #5
 801412c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014130:	4851      	ldr	r0, [pc, #324]	; (8014278 <_svfiprintf_r+0x1ec>)
 8014132:	f7ec f875 	bl	8000220 <memchr>
 8014136:	9a04      	ldr	r2, [sp, #16]
 8014138:	b9d8      	cbnz	r0, 8014172 <_svfiprintf_r+0xe6>
 801413a:	06d0      	lsls	r0, r2, #27
 801413c:	bf44      	itt	mi
 801413e:	2320      	movmi	r3, #32
 8014140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014144:	0711      	lsls	r1, r2, #28
 8014146:	bf44      	itt	mi
 8014148:	232b      	movmi	r3, #43	; 0x2b
 801414a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801414e:	f89a 3000 	ldrb.w	r3, [sl]
 8014152:	2b2a      	cmp	r3, #42	; 0x2a
 8014154:	d015      	beq.n	8014182 <_svfiprintf_r+0xf6>
 8014156:	9a07      	ldr	r2, [sp, #28]
 8014158:	4654      	mov	r4, sl
 801415a:	2000      	movs	r0, #0
 801415c:	f04f 0c0a 	mov.w	ip, #10
 8014160:	4621      	mov	r1, r4
 8014162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014166:	3b30      	subs	r3, #48	; 0x30
 8014168:	2b09      	cmp	r3, #9
 801416a:	d94e      	bls.n	801420a <_svfiprintf_r+0x17e>
 801416c:	b1b0      	cbz	r0, 801419c <_svfiprintf_r+0x110>
 801416e:	9207      	str	r2, [sp, #28]
 8014170:	e014      	b.n	801419c <_svfiprintf_r+0x110>
 8014172:	eba0 0308 	sub.w	r3, r0, r8
 8014176:	fa09 f303 	lsl.w	r3, r9, r3
 801417a:	4313      	orrs	r3, r2
 801417c:	9304      	str	r3, [sp, #16]
 801417e:	46a2      	mov	sl, r4
 8014180:	e7d2      	b.n	8014128 <_svfiprintf_r+0x9c>
 8014182:	9b03      	ldr	r3, [sp, #12]
 8014184:	1d19      	adds	r1, r3, #4
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	9103      	str	r1, [sp, #12]
 801418a:	2b00      	cmp	r3, #0
 801418c:	bfbb      	ittet	lt
 801418e:	425b      	neglt	r3, r3
 8014190:	f042 0202 	orrlt.w	r2, r2, #2
 8014194:	9307      	strge	r3, [sp, #28]
 8014196:	9307      	strlt	r3, [sp, #28]
 8014198:	bfb8      	it	lt
 801419a:	9204      	strlt	r2, [sp, #16]
 801419c:	7823      	ldrb	r3, [r4, #0]
 801419e:	2b2e      	cmp	r3, #46	; 0x2e
 80141a0:	d10c      	bne.n	80141bc <_svfiprintf_r+0x130>
 80141a2:	7863      	ldrb	r3, [r4, #1]
 80141a4:	2b2a      	cmp	r3, #42	; 0x2a
 80141a6:	d135      	bne.n	8014214 <_svfiprintf_r+0x188>
 80141a8:	9b03      	ldr	r3, [sp, #12]
 80141aa:	1d1a      	adds	r2, r3, #4
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	9203      	str	r2, [sp, #12]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	bfb8      	it	lt
 80141b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80141b8:	3402      	adds	r4, #2
 80141ba:	9305      	str	r3, [sp, #20]
 80141bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014288 <_svfiprintf_r+0x1fc>
 80141c0:	7821      	ldrb	r1, [r4, #0]
 80141c2:	2203      	movs	r2, #3
 80141c4:	4650      	mov	r0, sl
 80141c6:	f7ec f82b 	bl	8000220 <memchr>
 80141ca:	b140      	cbz	r0, 80141de <_svfiprintf_r+0x152>
 80141cc:	2340      	movs	r3, #64	; 0x40
 80141ce:	eba0 000a 	sub.w	r0, r0, sl
 80141d2:	fa03 f000 	lsl.w	r0, r3, r0
 80141d6:	9b04      	ldr	r3, [sp, #16]
 80141d8:	4303      	orrs	r3, r0
 80141da:	3401      	adds	r4, #1
 80141dc:	9304      	str	r3, [sp, #16]
 80141de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141e2:	4826      	ldr	r0, [pc, #152]	; (801427c <_svfiprintf_r+0x1f0>)
 80141e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141e8:	2206      	movs	r2, #6
 80141ea:	f7ec f819 	bl	8000220 <memchr>
 80141ee:	2800      	cmp	r0, #0
 80141f0:	d038      	beq.n	8014264 <_svfiprintf_r+0x1d8>
 80141f2:	4b23      	ldr	r3, [pc, #140]	; (8014280 <_svfiprintf_r+0x1f4>)
 80141f4:	bb1b      	cbnz	r3, 801423e <_svfiprintf_r+0x1b2>
 80141f6:	9b03      	ldr	r3, [sp, #12]
 80141f8:	3307      	adds	r3, #7
 80141fa:	f023 0307 	bic.w	r3, r3, #7
 80141fe:	3308      	adds	r3, #8
 8014200:	9303      	str	r3, [sp, #12]
 8014202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014204:	4433      	add	r3, r6
 8014206:	9309      	str	r3, [sp, #36]	; 0x24
 8014208:	e767      	b.n	80140da <_svfiprintf_r+0x4e>
 801420a:	fb0c 3202 	mla	r2, ip, r2, r3
 801420e:	460c      	mov	r4, r1
 8014210:	2001      	movs	r0, #1
 8014212:	e7a5      	b.n	8014160 <_svfiprintf_r+0xd4>
 8014214:	2300      	movs	r3, #0
 8014216:	3401      	adds	r4, #1
 8014218:	9305      	str	r3, [sp, #20]
 801421a:	4619      	mov	r1, r3
 801421c:	f04f 0c0a 	mov.w	ip, #10
 8014220:	4620      	mov	r0, r4
 8014222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014226:	3a30      	subs	r2, #48	; 0x30
 8014228:	2a09      	cmp	r2, #9
 801422a:	d903      	bls.n	8014234 <_svfiprintf_r+0x1a8>
 801422c:	2b00      	cmp	r3, #0
 801422e:	d0c5      	beq.n	80141bc <_svfiprintf_r+0x130>
 8014230:	9105      	str	r1, [sp, #20]
 8014232:	e7c3      	b.n	80141bc <_svfiprintf_r+0x130>
 8014234:	fb0c 2101 	mla	r1, ip, r1, r2
 8014238:	4604      	mov	r4, r0
 801423a:	2301      	movs	r3, #1
 801423c:	e7f0      	b.n	8014220 <_svfiprintf_r+0x194>
 801423e:	ab03      	add	r3, sp, #12
 8014240:	9300      	str	r3, [sp, #0]
 8014242:	462a      	mov	r2, r5
 8014244:	4b0f      	ldr	r3, [pc, #60]	; (8014284 <_svfiprintf_r+0x1f8>)
 8014246:	a904      	add	r1, sp, #16
 8014248:	4638      	mov	r0, r7
 801424a:	f7fd fc77 	bl	8011b3c <_printf_float>
 801424e:	1c42      	adds	r2, r0, #1
 8014250:	4606      	mov	r6, r0
 8014252:	d1d6      	bne.n	8014202 <_svfiprintf_r+0x176>
 8014254:	89ab      	ldrh	r3, [r5, #12]
 8014256:	065b      	lsls	r3, r3, #25
 8014258:	f53f af2c 	bmi.w	80140b4 <_svfiprintf_r+0x28>
 801425c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801425e:	b01d      	add	sp, #116	; 0x74
 8014260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014264:	ab03      	add	r3, sp, #12
 8014266:	9300      	str	r3, [sp, #0]
 8014268:	462a      	mov	r2, r5
 801426a:	4b06      	ldr	r3, [pc, #24]	; (8014284 <_svfiprintf_r+0x1f8>)
 801426c:	a904      	add	r1, sp, #16
 801426e:	4638      	mov	r0, r7
 8014270:	f7fd ff08 	bl	8012084 <_printf_i>
 8014274:	e7eb      	b.n	801424e <_svfiprintf_r+0x1c2>
 8014276:	bf00      	nop
 8014278:	08016754 	.word	0x08016754
 801427c:	0801675e 	.word	0x0801675e
 8014280:	08011b3d 	.word	0x08011b3d
 8014284:	08013fd5 	.word	0x08013fd5
 8014288:	0801675a 	.word	0x0801675a

0801428c <__sfputc_r>:
 801428c:	6893      	ldr	r3, [r2, #8]
 801428e:	3b01      	subs	r3, #1
 8014290:	2b00      	cmp	r3, #0
 8014292:	b410      	push	{r4}
 8014294:	6093      	str	r3, [r2, #8]
 8014296:	da08      	bge.n	80142aa <__sfputc_r+0x1e>
 8014298:	6994      	ldr	r4, [r2, #24]
 801429a:	42a3      	cmp	r3, r4
 801429c:	db01      	blt.n	80142a2 <__sfputc_r+0x16>
 801429e:	290a      	cmp	r1, #10
 80142a0:	d103      	bne.n	80142aa <__sfputc_r+0x1e>
 80142a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142a6:	f7fe ba39 	b.w	801271c <__swbuf_r>
 80142aa:	6813      	ldr	r3, [r2, #0]
 80142ac:	1c58      	adds	r0, r3, #1
 80142ae:	6010      	str	r0, [r2, #0]
 80142b0:	7019      	strb	r1, [r3, #0]
 80142b2:	4608      	mov	r0, r1
 80142b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142b8:	4770      	bx	lr

080142ba <__sfputs_r>:
 80142ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142bc:	4606      	mov	r6, r0
 80142be:	460f      	mov	r7, r1
 80142c0:	4614      	mov	r4, r2
 80142c2:	18d5      	adds	r5, r2, r3
 80142c4:	42ac      	cmp	r4, r5
 80142c6:	d101      	bne.n	80142cc <__sfputs_r+0x12>
 80142c8:	2000      	movs	r0, #0
 80142ca:	e007      	b.n	80142dc <__sfputs_r+0x22>
 80142cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142d0:	463a      	mov	r2, r7
 80142d2:	4630      	mov	r0, r6
 80142d4:	f7ff ffda 	bl	801428c <__sfputc_r>
 80142d8:	1c43      	adds	r3, r0, #1
 80142da:	d1f3      	bne.n	80142c4 <__sfputs_r+0xa>
 80142dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080142e0 <_vfiprintf_r>:
 80142e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e4:	460d      	mov	r5, r1
 80142e6:	b09d      	sub	sp, #116	; 0x74
 80142e8:	4614      	mov	r4, r2
 80142ea:	4698      	mov	r8, r3
 80142ec:	4606      	mov	r6, r0
 80142ee:	b118      	cbz	r0, 80142f8 <_vfiprintf_r+0x18>
 80142f0:	6983      	ldr	r3, [r0, #24]
 80142f2:	b90b      	cbnz	r3, 80142f8 <_vfiprintf_r+0x18>
 80142f4:	f7fd f990 	bl	8011618 <__sinit>
 80142f8:	4b89      	ldr	r3, [pc, #548]	; (8014520 <_vfiprintf_r+0x240>)
 80142fa:	429d      	cmp	r5, r3
 80142fc:	d11b      	bne.n	8014336 <_vfiprintf_r+0x56>
 80142fe:	6875      	ldr	r5, [r6, #4]
 8014300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014302:	07d9      	lsls	r1, r3, #31
 8014304:	d405      	bmi.n	8014312 <_vfiprintf_r+0x32>
 8014306:	89ab      	ldrh	r3, [r5, #12]
 8014308:	059a      	lsls	r2, r3, #22
 801430a:	d402      	bmi.n	8014312 <_vfiprintf_r+0x32>
 801430c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801430e:	f7fd fa46 	bl	801179e <__retarget_lock_acquire_recursive>
 8014312:	89ab      	ldrh	r3, [r5, #12]
 8014314:	071b      	lsls	r3, r3, #28
 8014316:	d501      	bpl.n	801431c <_vfiprintf_r+0x3c>
 8014318:	692b      	ldr	r3, [r5, #16]
 801431a:	b9eb      	cbnz	r3, 8014358 <_vfiprintf_r+0x78>
 801431c:	4629      	mov	r1, r5
 801431e:	4630      	mov	r0, r6
 8014320:	f7fe fa60 	bl	80127e4 <__swsetup_r>
 8014324:	b1c0      	cbz	r0, 8014358 <_vfiprintf_r+0x78>
 8014326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014328:	07dc      	lsls	r4, r3, #31
 801432a:	d50e      	bpl.n	801434a <_vfiprintf_r+0x6a>
 801432c:	f04f 30ff 	mov.w	r0, #4294967295
 8014330:	b01d      	add	sp, #116	; 0x74
 8014332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014336:	4b7b      	ldr	r3, [pc, #492]	; (8014524 <_vfiprintf_r+0x244>)
 8014338:	429d      	cmp	r5, r3
 801433a:	d101      	bne.n	8014340 <_vfiprintf_r+0x60>
 801433c:	68b5      	ldr	r5, [r6, #8]
 801433e:	e7df      	b.n	8014300 <_vfiprintf_r+0x20>
 8014340:	4b79      	ldr	r3, [pc, #484]	; (8014528 <_vfiprintf_r+0x248>)
 8014342:	429d      	cmp	r5, r3
 8014344:	bf08      	it	eq
 8014346:	68f5      	ldreq	r5, [r6, #12]
 8014348:	e7da      	b.n	8014300 <_vfiprintf_r+0x20>
 801434a:	89ab      	ldrh	r3, [r5, #12]
 801434c:	0598      	lsls	r0, r3, #22
 801434e:	d4ed      	bmi.n	801432c <_vfiprintf_r+0x4c>
 8014350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014352:	f7fd fa25 	bl	80117a0 <__retarget_lock_release_recursive>
 8014356:	e7e9      	b.n	801432c <_vfiprintf_r+0x4c>
 8014358:	2300      	movs	r3, #0
 801435a:	9309      	str	r3, [sp, #36]	; 0x24
 801435c:	2320      	movs	r3, #32
 801435e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014362:	f8cd 800c 	str.w	r8, [sp, #12]
 8014366:	2330      	movs	r3, #48	; 0x30
 8014368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801452c <_vfiprintf_r+0x24c>
 801436c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014370:	f04f 0901 	mov.w	r9, #1
 8014374:	4623      	mov	r3, r4
 8014376:	469a      	mov	sl, r3
 8014378:	f813 2b01 	ldrb.w	r2, [r3], #1
 801437c:	b10a      	cbz	r2, 8014382 <_vfiprintf_r+0xa2>
 801437e:	2a25      	cmp	r2, #37	; 0x25
 8014380:	d1f9      	bne.n	8014376 <_vfiprintf_r+0x96>
 8014382:	ebba 0b04 	subs.w	fp, sl, r4
 8014386:	d00b      	beq.n	80143a0 <_vfiprintf_r+0xc0>
 8014388:	465b      	mov	r3, fp
 801438a:	4622      	mov	r2, r4
 801438c:	4629      	mov	r1, r5
 801438e:	4630      	mov	r0, r6
 8014390:	f7ff ff93 	bl	80142ba <__sfputs_r>
 8014394:	3001      	adds	r0, #1
 8014396:	f000 80aa 	beq.w	80144ee <_vfiprintf_r+0x20e>
 801439a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801439c:	445a      	add	r2, fp
 801439e:	9209      	str	r2, [sp, #36]	; 0x24
 80143a0:	f89a 3000 	ldrb.w	r3, [sl]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	f000 80a2 	beq.w	80144ee <_vfiprintf_r+0x20e>
 80143aa:	2300      	movs	r3, #0
 80143ac:	f04f 32ff 	mov.w	r2, #4294967295
 80143b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143b4:	f10a 0a01 	add.w	sl, sl, #1
 80143b8:	9304      	str	r3, [sp, #16]
 80143ba:	9307      	str	r3, [sp, #28]
 80143bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143c0:	931a      	str	r3, [sp, #104]	; 0x68
 80143c2:	4654      	mov	r4, sl
 80143c4:	2205      	movs	r2, #5
 80143c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ca:	4858      	ldr	r0, [pc, #352]	; (801452c <_vfiprintf_r+0x24c>)
 80143cc:	f7eb ff28 	bl	8000220 <memchr>
 80143d0:	9a04      	ldr	r2, [sp, #16]
 80143d2:	b9d8      	cbnz	r0, 801440c <_vfiprintf_r+0x12c>
 80143d4:	06d1      	lsls	r1, r2, #27
 80143d6:	bf44      	itt	mi
 80143d8:	2320      	movmi	r3, #32
 80143da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143de:	0713      	lsls	r3, r2, #28
 80143e0:	bf44      	itt	mi
 80143e2:	232b      	movmi	r3, #43	; 0x2b
 80143e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143e8:	f89a 3000 	ldrb.w	r3, [sl]
 80143ec:	2b2a      	cmp	r3, #42	; 0x2a
 80143ee:	d015      	beq.n	801441c <_vfiprintf_r+0x13c>
 80143f0:	9a07      	ldr	r2, [sp, #28]
 80143f2:	4654      	mov	r4, sl
 80143f4:	2000      	movs	r0, #0
 80143f6:	f04f 0c0a 	mov.w	ip, #10
 80143fa:	4621      	mov	r1, r4
 80143fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014400:	3b30      	subs	r3, #48	; 0x30
 8014402:	2b09      	cmp	r3, #9
 8014404:	d94e      	bls.n	80144a4 <_vfiprintf_r+0x1c4>
 8014406:	b1b0      	cbz	r0, 8014436 <_vfiprintf_r+0x156>
 8014408:	9207      	str	r2, [sp, #28]
 801440a:	e014      	b.n	8014436 <_vfiprintf_r+0x156>
 801440c:	eba0 0308 	sub.w	r3, r0, r8
 8014410:	fa09 f303 	lsl.w	r3, r9, r3
 8014414:	4313      	orrs	r3, r2
 8014416:	9304      	str	r3, [sp, #16]
 8014418:	46a2      	mov	sl, r4
 801441a:	e7d2      	b.n	80143c2 <_vfiprintf_r+0xe2>
 801441c:	9b03      	ldr	r3, [sp, #12]
 801441e:	1d19      	adds	r1, r3, #4
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	9103      	str	r1, [sp, #12]
 8014424:	2b00      	cmp	r3, #0
 8014426:	bfbb      	ittet	lt
 8014428:	425b      	neglt	r3, r3
 801442a:	f042 0202 	orrlt.w	r2, r2, #2
 801442e:	9307      	strge	r3, [sp, #28]
 8014430:	9307      	strlt	r3, [sp, #28]
 8014432:	bfb8      	it	lt
 8014434:	9204      	strlt	r2, [sp, #16]
 8014436:	7823      	ldrb	r3, [r4, #0]
 8014438:	2b2e      	cmp	r3, #46	; 0x2e
 801443a:	d10c      	bne.n	8014456 <_vfiprintf_r+0x176>
 801443c:	7863      	ldrb	r3, [r4, #1]
 801443e:	2b2a      	cmp	r3, #42	; 0x2a
 8014440:	d135      	bne.n	80144ae <_vfiprintf_r+0x1ce>
 8014442:	9b03      	ldr	r3, [sp, #12]
 8014444:	1d1a      	adds	r2, r3, #4
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	9203      	str	r2, [sp, #12]
 801444a:	2b00      	cmp	r3, #0
 801444c:	bfb8      	it	lt
 801444e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014452:	3402      	adds	r4, #2
 8014454:	9305      	str	r3, [sp, #20]
 8014456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801453c <_vfiprintf_r+0x25c>
 801445a:	7821      	ldrb	r1, [r4, #0]
 801445c:	2203      	movs	r2, #3
 801445e:	4650      	mov	r0, sl
 8014460:	f7eb fede 	bl	8000220 <memchr>
 8014464:	b140      	cbz	r0, 8014478 <_vfiprintf_r+0x198>
 8014466:	2340      	movs	r3, #64	; 0x40
 8014468:	eba0 000a 	sub.w	r0, r0, sl
 801446c:	fa03 f000 	lsl.w	r0, r3, r0
 8014470:	9b04      	ldr	r3, [sp, #16]
 8014472:	4303      	orrs	r3, r0
 8014474:	3401      	adds	r4, #1
 8014476:	9304      	str	r3, [sp, #16]
 8014478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801447c:	482c      	ldr	r0, [pc, #176]	; (8014530 <_vfiprintf_r+0x250>)
 801447e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014482:	2206      	movs	r2, #6
 8014484:	f7eb fecc 	bl	8000220 <memchr>
 8014488:	2800      	cmp	r0, #0
 801448a:	d03f      	beq.n	801450c <_vfiprintf_r+0x22c>
 801448c:	4b29      	ldr	r3, [pc, #164]	; (8014534 <_vfiprintf_r+0x254>)
 801448e:	bb1b      	cbnz	r3, 80144d8 <_vfiprintf_r+0x1f8>
 8014490:	9b03      	ldr	r3, [sp, #12]
 8014492:	3307      	adds	r3, #7
 8014494:	f023 0307 	bic.w	r3, r3, #7
 8014498:	3308      	adds	r3, #8
 801449a:	9303      	str	r3, [sp, #12]
 801449c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801449e:	443b      	add	r3, r7
 80144a0:	9309      	str	r3, [sp, #36]	; 0x24
 80144a2:	e767      	b.n	8014374 <_vfiprintf_r+0x94>
 80144a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80144a8:	460c      	mov	r4, r1
 80144aa:	2001      	movs	r0, #1
 80144ac:	e7a5      	b.n	80143fa <_vfiprintf_r+0x11a>
 80144ae:	2300      	movs	r3, #0
 80144b0:	3401      	adds	r4, #1
 80144b2:	9305      	str	r3, [sp, #20]
 80144b4:	4619      	mov	r1, r3
 80144b6:	f04f 0c0a 	mov.w	ip, #10
 80144ba:	4620      	mov	r0, r4
 80144bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144c0:	3a30      	subs	r2, #48	; 0x30
 80144c2:	2a09      	cmp	r2, #9
 80144c4:	d903      	bls.n	80144ce <_vfiprintf_r+0x1ee>
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d0c5      	beq.n	8014456 <_vfiprintf_r+0x176>
 80144ca:	9105      	str	r1, [sp, #20]
 80144cc:	e7c3      	b.n	8014456 <_vfiprintf_r+0x176>
 80144ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80144d2:	4604      	mov	r4, r0
 80144d4:	2301      	movs	r3, #1
 80144d6:	e7f0      	b.n	80144ba <_vfiprintf_r+0x1da>
 80144d8:	ab03      	add	r3, sp, #12
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	462a      	mov	r2, r5
 80144de:	4b16      	ldr	r3, [pc, #88]	; (8014538 <_vfiprintf_r+0x258>)
 80144e0:	a904      	add	r1, sp, #16
 80144e2:	4630      	mov	r0, r6
 80144e4:	f7fd fb2a 	bl	8011b3c <_printf_float>
 80144e8:	4607      	mov	r7, r0
 80144ea:	1c78      	adds	r0, r7, #1
 80144ec:	d1d6      	bne.n	801449c <_vfiprintf_r+0x1bc>
 80144ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144f0:	07d9      	lsls	r1, r3, #31
 80144f2:	d405      	bmi.n	8014500 <_vfiprintf_r+0x220>
 80144f4:	89ab      	ldrh	r3, [r5, #12]
 80144f6:	059a      	lsls	r2, r3, #22
 80144f8:	d402      	bmi.n	8014500 <_vfiprintf_r+0x220>
 80144fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144fc:	f7fd f950 	bl	80117a0 <__retarget_lock_release_recursive>
 8014500:	89ab      	ldrh	r3, [r5, #12]
 8014502:	065b      	lsls	r3, r3, #25
 8014504:	f53f af12 	bmi.w	801432c <_vfiprintf_r+0x4c>
 8014508:	9809      	ldr	r0, [sp, #36]	; 0x24
 801450a:	e711      	b.n	8014330 <_vfiprintf_r+0x50>
 801450c:	ab03      	add	r3, sp, #12
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	462a      	mov	r2, r5
 8014512:	4b09      	ldr	r3, [pc, #36]	; (8014538 <_vfiprintf_r+0x258>)
 8014514:	a904      	add	r1, sp, #16
 8014516:	4630      	mov	r0, r6
 8014518:	f7fd fdb4 	bl	8012084 <_printf_i>
 801451c:	e7e4      	b.n	80144e8 <_vfiprintf_r+0x208>
 801451e:	bf00      	nop
 8014520:	0801635c 	.word	0x0801635c
 8014524:	0801637c 	.word	0x0801637c
 8014528:	0801633c 	.word	0x0801633c
 801452c:	08016754 	.word	0x08016754
 8014530:	0801675e 	.word	0x0801675e
 8014534:	08011b3d 	.word	0x08011b3d
 8014538:	080142bb 	.word	0x080142bb
 801453c:	0801675a 	.word	0x0801675a

08014540 <_read_r>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	4d07      	ldr	r5, [pc, #28]	; (8014560 <_read_r+0x20>)
 8014544:	4604      	mov	r4, r0
 8014546:	4608      	mov	r0, r1
 8014548:	4611      	mov	r1, r2
 801454a:	2200      	movs	r2, #0
 801454c:	602a      	str	r2, [r5, #0]
 801454e:	461a      	mov	r2, r3
 8014550:	f000 f918 	bl	8014784 <_read>
 8014554:	1c43      	adds	r3, r0, #1
 8014556:	d102      	bne.n	801455e <_read_r+0x1e>
 8014558:	682b      	ldr	r3, [r5, #0]
 801455a:	b103      	cbz	r3, 801455e <_read_r+0x1e>
 801455c:	6023      	str	r3, [r4, #0]
 801455e:	bd38      	pop	{r3, r4, r5, pc}
 8014560:	2000aa5c 	.word	0x2000aa5c

08014564 <abort>:
 8014564:	b508      	push	{r3, lr}
 8014566:	2006      	movs	r0, #6
 8014568:	f000 f8aa 	bl	80146c0 <raise>
 801456c:	2001      	movs	r0, #1
 801456e:	f000 f927 	bl	80147c0 <_exit>
	...

08014574 <_fstat_r>:
 8014574:	b538      	push	{r3, r4, r5, lr}
 8014576:	4d07      	ldr	r5, [pc, #28]	; (8014594 <_fstat_r+0x20>)
 8014578:	2300      	movs	r3, #0
 801457a:	4604      	mov	r4, r0
 801457c:	4608      	mov	r0, r1
 801457e:	4611      	mov	r1, r2
 8014580:	602b      	str	r3, [r5, #0]
 8014582:	f000 f8d7 	bl	8014734 <_fstat>
 8014586:	1c43      	adds	r3, r0, #1
 8014588:	d102      	bne.n	8014590 <_fstat_r+0x1c>
 801458a:	682b      	ldr	r3, [r5, #0]
 801458c:	b103      	cbz	r3, 8014590 <_fstat_r+0x1c>
 801458e:	6023      	str	r3, [r4, #0]
 8014590:	bd38      	pop	{r3, r4, r5, pc}
 8014592:	bf00      	nop
 8014594:	2000aa5c 	.word	0x2000aa5c

08014598 <_isatty_r>:
 8014598:	b538      	push	{r3, r4, r5, lr}
 801459a:	4d06      	ldr	r5, [pc, #24]	; (80145b4 <_isatty_r+0x1c>)
 801459c:	2300      	movs	r3, #0
 801459e:	4604      	mov	r4, r0
 80145a0:	4608      	mov	r0, r1
 80145a2:	602b      	str	r3, [r5, #0]
 80145a4:	f000 f8d6 	bl	8014754 <_isatty>
 80145a8:	1c43      	adds	r3, r0, #1
 80145aa:	d102      	bne.n	80145b2 <_isatty_r+0x1a>
 80145ac:	682b      	ldr	r3, [r5, #0]
 80145ae:	b103      	cbz	r3, 80145b2 <_isatty_r+0x1a>
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	bd38      	pop	{r3, r4, r5, pc}
 80145b4:	2000aa5c 	.word	0x2000aa5c

080145b8 <__ascii_mbtowc>:
 80145b8:	b082      	sub	sp, #8
 80145ba:	b901      	cbnz	r1, 80145be <__ascii_mbtowc+0x6>
 80145bc:	a901      	add	r1, sp, #4
 80145be:	b142      	cbz	r2, 80145d2 <__ascii_mbtowc+0x1a>
 80145c0:	b14b      	cbz	r3, 80145d6 <__ascii_mbtowc+0x1e>
 80145c2:	7813      	ldrb	r3, [r2, #0]
 80145c4:	600b      	str	r3, [r1, #0]
 80145c6:	7812      	ldrb	r2, [r2, #0]
 80145c8:	1e10      	subs	r0, r2, #0
 80145ca:	bf18      	it	ne
 80145cc:	2001      	movne	r0, #1
 80145ce:	b002      	add	sp, #8
 80145d0:	4770      	bx	lr
 80145d2:	4610      	mov	r0, r2
 80145d4:	e7fb      	b.n	80145ce <__ascii_mbtowc+0x16>
 80145d6:	f06f 0001 	mvn.w	r0, #1
 80145da:	e7f8      	b.n	80145ce <__ascii_mbtowc+0x16>

080145dc <memmove>:
 80145dc:	4288      	cmp	r0, r1
 80145de:	b510      	push	{r4, lr}
 80145e0:	eb01 0402 	add.w	r4, r1, r2
 80145e4:	d902      	bls.n	80145ec <memmove+0x10>
 80145e6:	4284      	cmp	r4, r0
 80145e8:	4623      	mov	r3, r4
 80145ea:	d807      	bhi.n	80145fc <memmove+0x20>
 80145ec:	1e43      	subs	r3, r0, #1
 80145ee:	42a1      	cmp	r1, r4
 80145f0:	d008      	beq.n	8014604 <memmove+0x28>
 80145f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80145f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80145fa:	e7f8      	b.n	80145ee <memmove+0x12>
 80145fc:	4402      	add	r2, r0
 80145fe:	4601      	mov	r1, r0
 8014600:	428a      	cmp	r2, r1
 8014602:	d100      	bne.n	8014606 <memmove+0x2a>
 8014604:	bd10      	pop	{r4, pc}
 8014606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801460a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801460e:	e7f7      	b.n	8014600 <memmove+0x24>

08014610 <_realloc_r>:
 8014610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014614:	4680      	mov	r8, r0
 8014616:	4614      	mov	r4, r2
 8014618:	460e      	mov	r6, r1
 801461a:	b921      	cbnz	r1, 8014626 <_realloc_r+0x16>
 801461c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014620:	4611      	mov	r1, r2
 8014622:	f7fd b977 	b.w	8011914 <_malloc_r>
 8014626:	b92a      	cbnz	r2, 8014634 <_realloc_r+0x24>
 8014628:	f7fd f908 	bl	801183c <_free_r>
 801462c:	4625      	mov	r5, r4
 801462e:	4628      	mov	r0, r5
 8014630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014634:	f000 f86d 	bl	8014712 <_malloc_usable_size_r>
 8014638:	4284      	cmp	r4, r0
 801463a:	4607      	mov	r7, r0
 801463c:	d802      	bhi.n	8014644 <_realloc_r+0x34>
 801463e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014642:	d812      	bhi.n	801466a <_realloc_r+0x5a>
 8014644:	4621      	mov	r1, r4
 8014646:	4640      	mov	r0, r8
 8014648:	f7fd f964 	bl	8011914 <_malloc_r>
 801464c:	4605      	mov	r5, r0
 801464e:	2800      	cmp	r0, #0
 8014650:	d0ed      	beq.n	801462e <_realloc_r+0x1e>
 8014652:	42bc      	cmp	r4, r7
 8014654:	4622      	mov	r2, r4
 8014656:	4631      	mov	r1, r6
 8014658:	bf28      	it	cs
 801465a:	463a      	movcs	r2, r7
 801465c:	f7fd f8c2 	bl	80117e4 <memcpy>
 8014660:	4631      	mov	r1, r6
 8014662:	4640      	mov	r0, r8
 8014664:	f7fd f8ea 	bl	801183c <_free_r>
 8014668:	e7e1      	b.n	801462e <_realloc_r+0x1e>
 801466a:	4635      	mov	r5, r6
 801466c:	e7df      	b.n	801462e <_realloc_r+0x1e>

0801466e <_raise_r>:
 801466e:	291f      	cmp	r1, #31
 8014670:	b538      	push	{r3, r4, r5, lr}
 8014672:	4604      	mov	r4, r0
 8014674:	460d      	mov	r5, r1
 8014676:	d904      	bls.n	8014682 <_raise_r+0x14>
 8014678:	2316      	movs	r3, #22
 801467a:	6003      	str	r3, [r0, #0]
 801467c:	f04f 30ff 	mov.w	r0, #4294967295
 8014680:	bd38      	pop	{r3, r4, r5, pc}
 8014682:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014684:	b112      	cbz	r2, 801468c <_raise_r+0x1e>
 8014686:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801468a:	b94b      	cbnz	r3, 80146a0 <_raise_r+0x32>
 801468c:	4620      	mov	r0, r4
 801468e:	f000 f831 	bl	80146f4 <_getpid_r>
 8014692:	462a      	mov	r2, r5
 8014694:	4601      	mov	r1, r0
 8014696:	4620      	mov	r0, r4
 8014698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801469c:	f000 b818 	b.w	80146d0 <_kill_r>
 80146a0:	2b01      	cmp	r3, #1
 80146a2:	d00a      	beq.n	80146ba <_raise_r+0x4c>
 80146a4:	1c59      	adds	r1, r3, #1
 80146a6:	d103      	bne.n	80146b0 <_raise_r+0x42>
 80146a8:	2316      	movs	r3, #22
 80146aa:	6003      	str	r3, [r0, #0]
 80146ac:	2001      	movs	r0, #1
 80146ae:	e7e7      	b.n	8014680 <_raise_r+0x12>
 80146b0:	2400      	movs	r4, #0
 80146b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80146b6:	4628      	mov	r0, r5
 80146b8:	4798      	blx	r3
 80146ba:	2000      	movs	r0, #0
 80146bc:	e7e0      	b.n	8014680 <_raise_r+0x12>
	...

080146c0 <raise>:
 80146c0:	4b02      	ldr	r3, [pc, #8]	; (80146cc <raise+0xc>)
 80146c2:	4601      	mov	r1, r0
 80146c4:	6818      	ldr	r0, [r3, #0]
 80146c6:	f7ff bfd2 	b.w	801466e <_raise_r>
 80146ca:	bf00      	nop
 80146cc:	20000180 	.word	0x20000180

080146d0 <_kill_r>:
 80146d0:	b538      	push	{r3, r4, r5, lr}
 80146d2:	4d07      	ldr	r5, [pc, #28]	; (80146f0 <_kill_r+0x20>)
 80146d4:	2300      	movs	r3, #0
 80146d6:	4604      	mov	r4, r0
 80146d8:	4608      	mov	r0, r1
 80146da:	4611      	mov	r1, r2
 80146dc:	602b      	str	r3, [r5, #0]
 80146de:	f000 f841 	bl	8014764 <_kill>
 80146e2:	1c43      	adds	r3, r0, #1
 80146e4:	d102      	bne.n	80146ec <_kill_r+0x1c>
 80146e6:	682b      	ldr	r3, [r5, #0]
 80146e8:	b103      	cbz	r3, 80146ec <_kill_r+0x1c>
 80146ea:	6023      	str	r3, [r4, #0]
 80146ec:	bd38      	pop	{r3, r4, r5, pc}
 80146ee:	bf00      	nop
 80146f0:	2000aa5c 	.word	0x2000aa5c

080146f4 <_getpid_r>:
 80146f4:	f000 b826 	b.w	8014744 <_getpid>

080146f8 <__ascii_wctomb>:
 80146f8:	b149      	cbz	r1, 801470e <__ascii_wctomb+0x16>
 80146fa:	2aff      	cmp	r2, #255	; 0xff
 80146fc:	bf85      	ittet	hi
 80146fe:	238a      	movhi	r3, #138	; 0x8a
 8014700:	6003      	strhi	r3, [r0, #0]
 8014702:	700a      	strbls	r2, [r1, #0]
 8014704:	f04f 30ff 	movhi.w	r0, #4294967295
 8014708:	bf98      	it	ls
 801470a:	2001      	movls	r0, #1
 801470c:	4770      	bx	lr
 801470e:	4608      	mov	r0, r1
 8014710:	4770      	bx	lr

08014712 <_malloc_usable_size_r>:
 8014712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014716:	1f18      	subs	r0, r3, #4
 8014718:	2b00      	cmp	r3, #0
 801471a:	bfbc      	itt	lt
 801471c:	580b      	ldrlt	r3, [r1, r0]
 801471e:	18c0      	addlt	r0, r0, r3
 8014720:	4770      	bx	lr
	...

08014724 <_close>:
 8014724:	4b02      	ldr	r3, [pc, #8]	; (8014730 <_close+0xc>)
 8014726:	2258      	movs	r2, #88	; 0x58
 8014728:	601a      	str	r2, [r3, #0]
 801472a:	f04f 30ff 	mov.w	r0, #4294967295
 801472e:	4770      	bx	lr
 8014730:	2000aa5c 	.word	0x2000aa5c

08014734 <_fstat>:
 8014734:	4b02      	ldr	r3, [pc, #8]	; (8014740 <_fstat+0xc>)
 8014736:	2258      	movs	r2, #88	; 0x58
 8014738:	601a      	str	r2, [r3, #0]
 801473a:	f04f 30ff 	mov.w	r0, #4294967295
 801473e:	4770      	bx	lr
 8014740:	2000aa5c 	.word	0x2000aa5c

08014744 <_getpid>:
 8014744:	4b02      	ldr	r3, [pc, #8]	; (8014750 <_getpid+0xc>)
 8014746:	2258      	movs	r2, #88	; 0x58
 8014748:	601a      	str	r2, [r3, #0]
 801474a:	f04f 30ff 	mov.w	r0, #4294967295
 801474e:	4770      	bx	lr
 8014750:	2000aa5c 	.word	0x2000aa5c

08014754 <_isatty>:
 8014754:	4b02      	ldr	r3, [pc, #8]	; (8014760 <_isatty+0xc>)
 8014756:	2258      	movs	r2, #88	; 0x58
 8014758:	601a      	str	r2, [r3, #0]
 801475a:	2000      	movs	r0, #0
 801475c:	4770      	bx	lr
 801475e:	bf00      	nop
 8014760:	2000aa5c 	.word	0x2000aa5c

08014764 <_kill>:
 8014764:	4b02      	ldr	r3, [pc, #8]	; (8014770 <_kill+0xc>)
 8014766:	2258      	movs	r2, #88	; 0x58
 8014768:	601a      	str	r2, [r3, #0]
 801476a:	f04f 30ff 	mov.w	r0, #4294967295
 801476e:	4770      	bx	lr
 8014770:	2000aa5c 	.word	0x2000aa5c

08014774 <_lseek>:
 8014774:	4b02      	ldr	r3, [pc, #8]	; (8014780 <_lseek+0xc>)
 8014776:	2258      	movs	r2, #88	; 0x58
 8014778:	601a      	str	r2, [r3, #0]
 801477a:	f04f 30ff 	mov.w	r0, #4294967295
 801477e:	4770      	bx	lr
 8014780:	2000aa5c 	.word	0x2000aa5c

08014784 <_read>:
 8014784:	4b02      	ldr	r3, [pc, #8]	; (8014790 <_read+0xc>)
 8014786:	2258      	movs	r2, #88	; 0x58
 8014788:	601a      	str	r2, [r3, #0]
 801478a:	f04f 30ff 	mov.w	r0, #4294967295
 801478e:	4770      	bx	lr
 8014790:	2000aa5c 	.word	0x2000aa5c

08014794 <_sbrk>:
 8014794:	4a04      	ldr	r2, [pc, #16]	; (80147a8 <_sbrk+0x14>)
 8014796:	6811      	ldr	r1, [r2, #0]
 8014798:	4603      	mov	r3, r0
 801479a:	b909      	cbnz	r1, 80147a0 <_sbrk+0xc>
 801479c:	4903      	ldr	r1, [pc, #12]	; (80147ac <_sbrk+0x18>)
 801479e:	6011      	str	r1, [r2, #0]
 80147a0:	6810      	ldr	r0, [r2, #0]
 80147a2:	4403      	add	r3, r0
 80147a4:	6013      	str	r3, [r2, #0]
 80147a6:	4770      	bx	lr
 80147a8:	2000aa60 	.word	0x2000aa60
 80147ac:	2000aa68 	.word	0x2000aa68

080147b0 <_write>:
 80147b0:	4b02      	ldr	r3, [pc, #8]	; (80147bc <_write+0xc>)
 80147b2:	2258      	movs	r2, #88	; 0x58
 80147b4:	601a      	str	r2, [r3, #0]
 80147b6:	f04f 30ff 	mov.w	r0, #4294967295
 80147ba:	4770      	bx	lr
 80147bc:	2000aa5c 	.word	0x2000aa5c

080147c0 <_exit>:
 80147c0:	e7fe      	b.n	80147c0 <_exit>
	...

080147c4 <_init>:
 80147c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147c6:	bf00      	nop
 80147c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ca:	bc08      	pop	{r3}
 80147cc:	469e      	mov	lr, r3
 80147ce:	4770      	bx	lr

080147d0 <_fini>:
 80147d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d2:	bf00      	nop
 80147d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147d6:	bc08      	pop	{r3}
 80147d8:	469e      	mov	lr, r3
 80147da:	4770      	bx	lr
